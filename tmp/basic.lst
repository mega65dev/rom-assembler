
; ******** Source: tmp/basic.asm
     1                          ; .nam C65 Development BASIC 10.0 (C)1991 CBM
     2                          ; .subttl *** Copyright (C) 1991  by  Commodore Business Machines, Inc. ***
     3                          
     4                          ;  ***************************************************************************
     5                          ;  *                               //                                        *
     6                          ;  *              CCCCCCC         //    6666666     555555555                *
     7                          ;  *             CCC   CCC       //    666   666    555                      *
     8                          ;  *            CCC             //    666           555                      *
     9                          ;  *            CCC            //     666 6666      55555555                 *
    10                          ;  *            CCC           //      6666   666          555                *
    11                          ;  *            CCC          //       666     666          555               *
    12                          ;  *             CCC   CCC  //         666   666    555   555                *
    13                          ;  *              CCCCCCC  //           6666666      5555555                 *
    14                          ;  *                      //                                                 *
    15                          ;  *                                                                         *
    16                          ;  *          BBBBBBBBB      AAAA      SSSSSSSS   III    CCCCCCC             *
    17                          ;  *          BBB    BBB   AAA  AAA   SSS    SSS  III   CCC   CCC            *
    18                          ;  *          BBB    BBB  AAA    AAA  SSS         III  CCC                   *
    19                          ;  *          BBBBBBBBB   AAAAAAAAAA   SSSSSSSS   III  CCC                   *
    20                          ;  *          BBB    BBB  AAA    AAA         SSS  III  CCC                   *
    21                          ;  *          BBB    BBB  AAA    AAA  SSS    SSS  III   CCC   CCC            *
    22                          ;  *          BBBBBBBBB   AAA    AAA   SSSSSSSS   III    CCCCCCC             *
    23                          ;  *                                                                         *
    24                          ;  *                       V E R S I O N   1 0 . 0                           *
    25                          ;  *              *
    26                          ;  *        Copyright (C)1991  by   Commodore Business Machines, Inc.        *
    27                          ;  *              *
    28                          ;  *       All  Rights  Reserved        *
    29                          ;  *              *
    30                          ;  ***************************************************************************
    31                          
    32                          ;   ROM VERSION  911115  (ver 0.9B)
    33                          
    34                          ; ******************************************************************
    35                          ; *                                                                *
    36                          ; * This listing contains confidential and proprietary information *
    37                          ; * of CBM, Inc.  The reproduction, dissemination or disclosure to *
    38                          ; * others without express written permission is prohibited.  This *
    39                          ; * software is for use in prototype Commodore C/65 systems only.  *
    40                          ; *                                                                *
    41                          ; *  The information in this document will change without notice.  *
    42                          ; *                                                                *
    43                          ; *  No  responsibility  is  assumed  for the reliability of this  *
    44                          ; *                          software.                             *
    45                          ; *                                                                *
    46                          ; ******************************************************************
    47                          
    48                          ; .STORE $2000,$a000,"b65.rom"
    49                          
    50                          ; This version written and assembled by Fred Bowen using BSO format.
    51                          ; .page
    52                          ; Adapted from the following C128 files, ROM part numbers 318018-04, 3180194-04:
    53                          ;
    54                          ; disclaim  resume   hexfunc
    55                          ; declare   doloop   rgr
    56                          ; entries   key   rclr
    57                          ; header   paint   joy
    58                          ; init   box   penpot
    59                          ; indjumps  sshape   pointer
    60                          ; crunch   gshape   rsprite
    61                          ; tokens1   circle   rspcolor
    62                          ; tokens2   draw   bump
    63                          ; disptable  char   rsppos
    64                          ; errmsgs   locate   xor
    65                          ; errprint  scale   rwindow
    66                          ; execute   color   rnd
    67                          ; functions  scnclr   code12
    68                          ; code0   graphic   stringfns
    69                          ; rtstack   bank   code17
    70                          ; findline  sleep   code18
    71                          ; lineget   wait   code19
    72                          ; list   sprite   code21
    73                          ; newclr   movspr   code22
    74                          ; return   play   code23
    75                          ; remdata   filter   code24
    76                          ; if   envelope  code26
    77                          ; ongoto   collision  grbcol
    78                          ; let   sprcolor  trig
    79                          ; print   width   using
    80                          ; input   volume   instring
    81                          ; next   sound   graphic3
    82                          ; dim   window   rdot
    83                          ; sys   boot   graphic7
    84                          ; trontroff  sprdef   graphic8
    85                          ; rreg   sprsav   graphic9
    86                          ; midequal  fast   graphic10
    87                          ; auto   slow   graphic11
    88                          ; help   checkval  sethires
    89                          ; gosubgoto  formeval  clrhires
    90                          ; go   variables  dos1
    91                          ; continue  getpointr  dos2
    92                          ; run   array   dos3
    93                          ; restore   patcheslo  dos4
    94                          ; renumber  fre   overflow
    95                          ; for   val   irq
    96                          ; delete   dec   stash
    97                          ; pudef   peekpoke  fetch
    98                          ; trap   errfunc   swap
    99                          ; patcheshi  jumptable  def
   100                          ; strings
   101                          ; .page
   102                          ; .subttl C65 BASIC 10.0 Macro Definitions
   103                          
   104                          ; .blist
   105                          
   106                          ; .page
   107                          ; .subttl C65 BASIC 10.0 Declarations
   108                          
   109                          ; General assignments and equates
   110                          
   111                          doslfn           = 0                                      ; DOS' private logical file number
   112                          dosffn           = 8                                      ; DOS' default drive number
   113                          
   114                          strsiz           = 3                                      ; string descriptor size in temps. and arrays
   115                          lengos           = 5                                      ; length of a GOSUB entry on the runtime stack
   116                          lenfor           = 18                                     ; length of a FOR entry in the runtime stack
   117                          
   118                          ; maxchr = 80  ;misc. command equates
   119                          ; llen  = 40
   120                          ; nlines = 25
   121                          column_width     = 10                                     ; print comma spacing
   122                          
   123                          beats_pal        = 1200                                   ; whole note (4/4 time = 2sec.)    [910724]
   124                          beats_ntsc       = 1440                                   ;
   125                          
   126                          lf               = $0a                                    ; line feed
   127                          cr               = $0d                                    ; carriage return
   128                          esc              = $1b                                    ; escape
   129                          pi               = $ff
   130                          
   131                          basbgn           = $2000                                  ; bottom of BASIC text bank
   132                          baswrk           = basbgn+1                               ; where BASIC text starts
   133                          varbgn           = $2000                                  ; bottom of BASIC data bank (C65: DOS RAM below $12000)
   134                          bank_0_top       = $8000                                  ; top of BASIC text bank ($FF00)    [910528]
   135                          bank_1_top       = $8000                                  ; top of BASIC data bank ($f800, VIC attributes)  [910528]
   136                          
   137                          ; graphic_base = $2000
   138                          ; color_ram_lo = $1c00
   139                          ; color_ram_hi = $d800
   140                          
   141                          vic              = $d000                                  ; Video controller
   142                          
   143                          fdc              = $d080                                  ; Built-in floppy disk controller
   144                          
   145                          sid1             = $d400                                  ; Audio processors (right)
   146                          sid2             = $d420                                  ; (left)
   147                          
   148                          d1_6526          = $dc00                                  ; Ports, peripheral control
   149                          d1pra            = d1_6526
   150                          d2_6526          = $dd00
   151                          d2pra            = d2_6526
   152                          
   153                          dma_ctlr         = $d700                                  ; DMA Controller
   154                          
   155                          ; .page
   156                          ;  BASIC base page storage
   157                          
   158                                           * = $0000
   159                          
   160  0000 0000                                !fill 2                                  ; '4510' registers (not used in C65 mode)
   161  0002 00                 srchtk           !fill 1                                  ; token 'search' looks for (run-time stack) / SYS 'bank#'
   162                          
   163                                           * = $000a                                ; skip over SYS address, status, a/x/y/z registers
   164                          
   165                          integr                                                    ; used by math routines (this & following location)
   166  000a 00                 charac           !fill 1
   167  000b 00                 endchr           !fill 1
   168  000c 00                 verck            !fill 1                                  ; LOAD/VERIFY flag
   169  000d 00                 count            !fill 1                                  ; temp used all over
   170  000e 00                 dimflg           !fill 1                                  ; DIM flag used by variable search
   171  000f 00                 valtyp           !fill 1                                  ; 0=numeric, $FF=string
   172  0010 00                 intflg           !fill 1                                  ; b7: (0=float,1=integer), b6: (1=get flag)
   173                          garbfl                                                    ; garbage collection temporary
   174  0011 00                 dores            !fill 1                                  ; b7: P1LINE quote flag
   175  0012 00                 subflg           !fill 1                                  ; b7: subscript flag (set to disallow subscripts() & integers%)
   176  0013 00                 input_flag       !fill 1                                  ; READ($98), GET($40), or INPUT($00)
   177                          domask
   178  0014 00                 tansgn           !fill 1
   179  0015 00                 channl           !fill 1                                  ; active I/O channel
   180                          poker                                                     ; temp used all over
   181  0016 0000               linnum           !fill 2                                  ; line number
   182                          
   183  0018 00                 temppt           !fill 1                                  ; pointer to next temporary descriptor in tempst
   184  0019 0000               lastpt           !fill 2                                  ; pointer to last used temporary string
   185  001b 0000000000000000...tempst           !fill 9                                  ; temporary descriptor pointers (3 at 3 bytes each)
   186                          
   187                          index
   188  0024 0000               index1           !fill 2
   189  0026 0000               index2           !fill 2
   190                          
   191                          multiplicand                                              ; 2 bytes wide, for unsigned integer multiply
   192  0028 00                 resho            !fill 1
   193  0029 00                 resmoh           !fill 1
   194                          product                                                   ; 3 bytes wide, for unsigned integer multiply
   195                          addend
   196  002a 00                 resmo            !fill 1
   197  002b 00                 reslo            !fill 1
   198  002c 00                                  !fill 1
   199  002d 0000               txttab           !fill 2                                  ; where BASIC program begins   (text_bank)
   200  002f 0000               vartab           !fill 2                                  ; where variable descriptors begin  (var_bank)
   201  0031 0000               arytab           !fill 2                                  ; where array table begins   (var_bank)
   202  0033 0000               strend           !fill 2                                  ; where arrays table ends   (var_bank)
   203  0035 0000               fretop           !fill 2                                  ; bottom of string storage   (var_bank)
   204  0037 0000               frespc           !fill 2                                  ; where temporary strings begin   (var_bank)
   205  0039 0000               max_mem_1        !fill 2                                  ; highest address available to BASIC in RAM 1 (var_bank)
   206  003b 0000               curlin           !fill 2
   207  003d 0000               txtptr           !fill 2                                  ; pointer to BASIC text used by CHRGET, etc.
   208                          form                                                      ; used by print using
   209  003f 0000               fndpnt           !fill 2                                  ; pointer to item found by search
   210  0041 0000               datlin           !fill 2
   211  0043 0000               datptr           !fill 2
   212  0045 0000               inpptr           !fill 2
   213  0047 0000               varnam           !fill 2
   214                          fdecpt
   215  0049 0000               varpnt           !fill 2
   216                          lstpnt
   217                          andmsk
   218  004b 0000               forpnt           !fill 2
   219                          eormsk           =forpnt+1
   220                          vartxt
   221  004d 0000               opptr            !fill 2
   222  004f 00                 opmask           !fill 1
   223                          grbpnt
   224                          tempf3
   225  0050 0000               defpnt           !fill 2
   226  0052 0000               dscpnt           !fill 2
   227                          token_saver                                               ; temp used by P1LINE/HELPSB (was spare????) [910628]
   228  0054 00                 trmpos           !fill 1                                  ; temp used by SPC(), TAB()   [910628]
   229                          
   230  0055 00                 helper           !fill 1                                  ; P1LINE flag b7: HELP vs. LIST
   231                          ;  b6: memory vs. file
   232                          ;  b5: FIND/CHANGE
   233                          ;  b4: highlight tokens
   234                          ;  b3: highlight REM
   235                          ;  b1: LINGET flag for AUTOSCROLL
   236                          ;  b0: token in progress
   237                          
   238  0056 00                 jmper            !fill 1                                  ; 3 locations used by Function handler
   239  0057 00                                  !fill 1                                  ;
   240  0058 00                 oldov            !fill 1                                  ;
   241                          
   242  0059 00                 tempf1           !fill 1                                  ; used by math routines
   243                          ptarg1           =tempf1                                  ; multiply defined for INSTR thru FACexp
   244                          ptarg2           =tempf1+2                                ; (also used by Monitor Utility, thru lowtr)
   245                          str1             =tempf1+4
   246                          str2             =tempf1+7
   247                          positn           =tempf1+10
   248                          match            =tempf1+11
   249                          
   250                          arypnt
   251  005a 0000               highds           !fill 2
   252  005c 0000               hightr           !fill 2
   253                          
   254  005e 00                 tempf2           !fill 1                                  ; used by math routines
   255  005f 0000               deccnt           !fill 2
   256                          tenexp           = deccnt+1
   257                          grbtop
   258                          dptflg
   259  0061 00                 lowtr            !fill 1
   260  0062 00                 expsgn           !fill 1
   261                          
   262                          fac                                                       ; Floating point accumulator (primary) FAC1
   263                          dsctmp
   264  0063 00                 facexp           !fill 1
   265  0064 00                 facho            !fill 1
   266  0065 00                 facmoh           !fill 1
   267                          indice
   268  0066 00                 facmo            !fill 1
   269  0067 00                 faclo            !fill 1
   270  0068 00                 facsgn           !fill 1
   271                          degree
   272  0069 00                 sgnflg           !fill 1
   273                          
   274  006a 00                 argexp           !fill 1                                  ; Floating point accumulator (secondary) FAC2
   275  006b 00                 argho            !fill 1
   276  006c 00                 argmoh           !fill 1
   277  006d 00                 argmo            !fill 1
   278  006e 00                 arglo            !fill 1
   279  006f 00                 argsgn           !fill 1
   280                          
   281                          strng1
   282  0070 00                 arisgn           !fill 1
   283  0071 00                 facov            !fill 1
   284                          
   285                          strng2
   286                          polypt
   287                          curtol
   288  0072 0000               fbufpt           !fill 2
   289                          
   290  0074 0000               autinc           !fill 2                                  ; incremental value for AUTO (0=off)
   291                          
   292  0076 00                 z_p_temp_1       !fill 1                                  ; USING's leading zero counter
   293                          ;GET, RENUMBER, KEY temporary
   294                          ;MOVSPR, SPRITE, PLAY, VOL temporary
   295                          ;MID$= temporary
   296                          
   297                          hulp                                                      ; counter
   298  0077 00                 keysiz           !fill 1
   299                          
   300  0078 00                 syntmp           !fill 1                                  ; used as temp all over the place
   301  0079 000000             dsdesc           !fill 3                                  ; descriptor for DS$
   302  007c 0000               tos              !fill 2                                  ; top of run time stack
   303  007e 00                 runmod           !fill 1                                  ; flags run/direct(b7), load(b6), trace(b5), edit(b4) modes
   304                          ; autoboot wedge (b0)
   305                          point                                                     ; USING's pointer to decimal point, 2 bytes used by AutoScroll
   306  007f 00                 parsts           !fill 1                                  ; DOS parser status word
   307  0080 00                 parstx           !fill 1                                  ; DOS parser status extensions
   308                          
   309  0081 00                 oldstk           !fill 1                                  ; BASIC saves uP stack pointer here
   310                          
   311  0082 0000               text_top         !fill 2                                  ; top of BASIC text pointer  (in text_bank)
   312  0084 00                 text_bank        !fill 1                                  ; where BASIC text lives   (RAM0 default)
   313  0085 00                 var_bank         !fill 1                                  ; where BASIC vars live   (RAM1 default)
   314                          sys_bank         = 0                                      ; where system space is  ???? (RAM0, make this a var?)
   315                          
   316  0086 00                 sid_speed_flag   !fill 1                                  ; saves system speed during SID ops (used during IRQ)
   317                          
   318                          time                                                      ; temporaries for TI, TI$, SLEEP (4 bytes)
   319                          grapnt                                                    ; used by SPRSAV, RMOUSE, RCOLOR
   320                          op
   321  0087 00                 column           !fill 1                                  ; temporaries for FIND/CHANGE, [L]INPUT, [L]READ, CURSOR
   322                          srow
   323  0088 000000             fstr1            !fill 3                                  ;
   324  008b 000000             fstr2            !fill 3                                  ;
   325                          
   326                          ; .page
   327                                           * = $00ff
   328                          
   329  00ff 00                 lofbuf           !fill 1
   330  0100 0000000000000000...fbuffr           !fill 16                                 ; MathPack builds numbers here, USING, RENUMBER
   331                          
   332                          ;  Kernel MAP configurations & DMA lists
   333                          
   334  0110 0000000000000000...                 !fill 16+36                              ; (4 configs + 3 DMA lists)
   335                          
   336                          ;  BASIC DMA lists  (2 @ 12bytes each = 24 bytes)
   337                          
   338  0144 00                 dma1_cmd         !fill 1                                  ; This list is used by BASIC OS
   339  0145 00                 dma1_cnt_lo      !fill 1
   340  0146 00                 dma1_cnt_hi      !fill 1
   341  0147 00                 dma1_src_lo      !fill 1
   342  0148 00                 dma1_src_hi      !fill 1
   343  0149 00                 dma1_src_bank    !fill 1
   344  014a 00                 dma1_dest_lo     !fill 1
   345  014b 00                 dma1_dest_hi     !fill 1
   346  014c 00                 dma1_dest_bank   !fill 1
   347  014d 00                 dma1_subcmd      !fill 1                                  ; (from here on not supported until F018A) [910520] F018A
   348  014e 00                 dma1_mod_lo      !fill 1
   349  014f 00                 dma1_mod_hi      !fill 1
   350                          
   351  0150 00                 dma2_cmd         !fill 1                                  ; This list is used by DMA command & Graphics
   352  0151 00                 dma2_cnt_lo      !fill 1
   353  0152 00                 dma2_cnt_hi      !fill 1
   354  0153 00                 dma2_src_lo      !fill 1
   355  0154 00                 dma2_src_hi      !fill 1
   356  0155 00                 dma2_src_bank    !fill 1
   357  0156 00                 dma2_dest_lo     !fill 1
   358  0157 00                 dma2_dest_hi     !fill 1
   359  0158 00                 dma2_dest_bank   !fill 1
   360  0159 00                 dma2_subcmd      !fill 1                                  ; (from here on not supported until F018A) [910520] F018A
   361  015a 00                 dma2_mod_lo      !fill 1
   362  015b 00                 dma2_mod_hi      !fill 1
   363                          
   364  015c 00                                  !fill 1                                  ; Kernel's dma_byte
   365                          
   366                          sysstk                                                    ; bottom of system stack
   367                          stkend           = $1fb                                   ; top of system stack
   368                          
   369                          ; .page
   370                                           * = $0200
   371                          
   372                          buflen           = 161                                    ; input buffer size (2 80-column lines + 1)
   373  0200 0000000000000000...buf              !fill buflen                             ; BASIC/Monitor line input buffer
   374                          buf_txtptr       = buf-1
   375                          
   376                          ; .page
   377                                           * = $02c0
   378                          ; BASIC RAM code  (RAM code not needed- following moved to ROM)
   379                          ;
   380                          ; chrget *=*+42  ;get byte from text bank after incrementing TXTPTR
   381                          ; chrgot = chrget+2 ;get byte from text bank at TXTPTR
   382                          ; qnum  = chrget+27 ;evaluate byte as a number & set flags accordingly
   383                          
   384  02c0 0000               adray1           !fill 2                                  ; ptr to routine:  convert float -> integer ???? why keep
   385  02c2 0000               adray2           !fill 2                                  ; ptr to routine:  convert integer -> float ???? why keep
   386  02c4 000000             zero             !fill 3                                  ; numeric constant for BASIC, downloaded from ROM
   387                          
   388  02c7 00                 errnum           !fill 1                                  ; used by error trapping routine-last error number
   389  02c8 0000               errlin           !fill 2                                  ; line # of last error ($FFFF if no error)
   390  02ca 0000               trapno           !fill 2                                  ; line to go to on error ($FFxx if none set)
   391  02cc 00                 tmptrp           !fill 1                                  ; hold trap # temporary
   392  02cd 0000               errtxt           !fill 2                                  ; pointer to statement causing last error
   393  02cf 0000               max_mem_0        !fill 2                                  ; highest address available to BASIC in RAM 0 (text bank)
   394                          
   395  02d1 00                 current_bank     !fill 1                                  ; context for PEEK,POKE,BOOT,SYS,WAIT,BLOAD/SAVE set by BANK.
   396  02d2 00                 fin_bank         !fill 1                                  ; bank pointer for string->number conversion routine FIN
   397  02d3 00000000           tmpdes           !fill 4                                  ; pointers to temporary descriptors for INSTR
   398  02d7 00                 bits             !fill 1                                  ; flag for math bit/byte shifter
   399  02d8 00                 highlight_color  !fill 1                                  ; color for highlighting text
   400  02d9 00                 highlight_save   !fill 1                                  ; saves normal color during highlighting, msb=flag
   401  02da 00                 find_count       !fill 1                                  ; count for LIST to highlight FIND text
   402                          
   403                          ; Interrupt stuff
   404                          
   405  02db 00                 irq_wrap_flag    !fill 1                                  ; used by BASIC_IRQ to block all but one IRQ call
   406  02dc 00                 intval           !fill 1                                  ; BASIC interrupts enabled (via collision command)
   407  02dd 000000             int_trip_flag    !fill 3                                  ; flags which interrupts occurred
   408  02e0 000000             int_adr_lo       !fill 3                                  ; where to go for each type of collision (line number)
   409  02e3 000000             int_adr_hi       !fill 3                                  ;
   410  02e6 0000               collisions       !fill 2                                  ; sprite collisions, s/s and s/bgnd, recorded during IRQ
   411  02e8 00                 lightpen_xpos    !fill 1                                  ; lightpen position recorded during IRQ
   412  02e9 00                 lightpen_ypos    !fill 1
   413                          
   414                          ; dejavu *=*+1  ;'cold' or 'warm' reset status (must be in page 5!)????
   415                          
   416                          ; nmi_wrap_flag *=*+1  ;used by BASIC_NMI to block all but one NMI call [910523]
   417                          ;    ; (removed)      [910826]
   418                          ;(leaving 12 bytes)
   419                          ; .page
   420                          ; BASIC indirect vectors
   421                          
   422                                           * = $02f7
   423                          
   424  02f7 000000             usrpok           !fill 3                                  ; USR vector (must be set by application)
   425                          
   426                          vectors_begin
   427  02fa 0000               iAutoScroll      !fill 2                                  ; AutoScroll vector
   428  02fc 0000               esc_fn_vec       !fill 2                                  ; Escape Function vector
   429  02fe 0000               graphic_vector   !fill 2                                  ; Graphic Kernel vector (was 'bnkvec')
   430  0300 0000               ierror           !fill 2                                  ; indirect error (output error in .x)
   431  0302 0000               imain            !fill 2                                  ; indirect main (system direct loop)
   432  0304 0000               icrnch           !fill 2                                  ; indirect crunch (tokenization routine)
   433  0306 0000               iqplop           !fill 2                                  ; indirect list (char list)
   434  0308 0000               igone            !fill 2                                  ; indirect gone (char dispatch)
   435  030a 0000               ieval            !fill 2                                  ; indirect eval (symbol evaluation)
   436  030c 0000               iesclk           !fill 2                                  ; escape token crunch
   437  030e 0000               iescpr           !fill 2                                  ; escape token list
   438  0310 0000               iescex           !fill 2                                  ; escape token execute
   439  0312 0000               itime            !fill 2                                  ; 60Hz interrupt vector (before jiffy)
   440  0314 0000               cinv             !fill 2                                  ; IRQ RAM vector
   441  0316 0000               cbinv            !fill 2                                  ; BRK RAM vector
   442                          
   443                          ; Remainder of this area reserved for Kernel indirects & Kernel RAM code
   444                          
   445                          ; .page
   446                                           * = $0400                                ; BASIC's run-time stack (2 pages)
   447                          stktop                                                    ; (also used by BOOT SYS and Monitor)
   448                          stkbot           = $05ff
   449                          
   450                          
   451                                           * = $0600                                ; Sprite definitions (2 pages, must be below $1000)
   452                          sprite_base
   453                          
   454                          
   455                                           * = $0800
   456                          screen_start                                              ; Text display screen
   457                                           * = *+2000
   458                          
   459                          sprite_ptrs_40   = screen_start+$3f8
   460                          sprite_ptrs_80   = screen_start+$7f8
   461                          
   462                          ; .page
   463                                           * = $1170                                ; previous to this used by Kernel
   464                          
   465  1170 0000               oldlin           !fill 2                                  ; BASIC storage
   466  1172 0000               oldtxt           !fill 2                                  ; BASIC storage
   467  1174 0000000000         rndx             !fill 5                                  ; Floating Point representation of last random #
   468                          
   469                          
   470                          ; Yet more temporaries shared by various routines
   471                          
   472                          window_temp                                               ; window  (4 bytes)
   473                          t3                                                        ; dcat  (1 byte)
   474                          renum_tmp_1                                               ; renumber (2 bytes)
   475  1179 0000               tmptxt           !fill 2                                  ; do/loop (2 bytes)
   476                          
   477                          t4                                                        ; dcat  (2 bytes)
   478                          renum_tmp_2                                               ; renumber (2 bytes)
   479  117b 0000               tmplin           !fill 2                                  ; do/loop (2 bytes)
   480                          
   481                          
   482                          ;  BASIC/DOS interface vars  (20 bytes)
   483                          
   484  117d 0000               dosofl           !fill 2                                  ; BLOAD/BSAVE starting addr
   485  117f 0000               dosofh           !fill 2                                  ; BSAVE ending addr
   486  1181 00                 dosla            !fill 1                                  ; DOS logical addr
   487  1182 00                 dosfa            !fill 1                                  ; DOS physical addr
   488  1183 00                 dossa            !fill 1                                  ; DOS secondary addr
   489                          
   490  1184 00                 xcnt             !fill 1                                  ; DOS loop counter------ this area zeroed-out each DOS call -----
   491  1185 00                 dosf1l           !fill 1                                  ; DOS filename 1 len
   492  1186 00                 dosds1           !fill 1                                  ; DOS disk drive 1
   493  1187 00                 dosf2l           !fill 1                                  ; DOS filename 2 len
   494  1188 00                 dosds2           !fill 1                                  ; DOS disk drive 2
   495  1189 0000               dosf2a           !fill 2                                  ; DOS filename 2 addr
   496  118b 00                 dosrcl           !fill 1                                  ; DOS record length
   497  118c 00                 dosbnk           !fill 1                                  ; DOS load/save bank
   498  118d 0000               dosdid           !fill 2                                  ; DOS ID identifier
   499  118f 00                 dosflags         !fill 1                                  ; DOS flags  7:ID,  6:recover
   500  1190 00                 dossa_temp       !fill 1                                  ; temp storage for file's sa during RECORD command
   501                          dosspc           = *-xcnt                                 ; space used by DOS routines-------------------------------------
   502                          
   503  1191 0000000000000000...savram           !fill 67                                 ; buffer used by MOVSPR, SPRDEF, SAVSPR, and DOS parser
   504                          
   505                          xabs             = savram                                 ; movspr_line calculations   [910809]
   506                          yabs             = savram+2
   507                          xsgn             = savram+4
   508                          ysgn             = savram+6
   509                          fct              = savram+8
   510                          errval           = savram+12
   511                          
   512                          ; .page
   513                          ; PRINT USING definitions & storage  (24 bytes)
   514                          
   515                          puchrs                                                    ; Declarations for PRINT USING...
   516  11d4 00                 pufill           !fill 1                                  ; print using fill symbol
   517  11d5 00                 pucoma           !fill 1                                  ; print using comma symbol
   518  11d6 00                 pudot            !fill 1                                  ; print using decimal point symbol
   519  11d7 00                 pumony           !fill 1                                  ; print using monetary symbol
   520                          
   521  11d8 00                 bnr              !fill 1                                  ; pointer to begin #
   522  11d9 00                 enr              !fill 1                                  ; pointer to end #
   523  11da 00                 dolr             !fill 1                                  ; dollar flag
   524  11db 00                 flag             !fill 1                                  ; comma flag (also used by PLAY)????
   525  11dc 00                 swe              !fill 1                                  ; counter
   526  11dd 00                 usgn             !fill 1                                  ; sign exponent
   527  11de 00                 uexp             !fill 1                                  ; pointer to exponent
   528  11df 00                 vn               !fill 1                                  ; # of digits before decimal point
   529  11e0 00                 chsn             !fill 1                                  ; justify flag
   530  11e1 00                 vf               !fill 1                                  ; # of positions before decimal point (field)
   531  11e2 00                 nf               !fill 1                                  ; # of positions after decimal point (field)
   532  11e3 00                 posp             !fill 1                                  ; +/- flag (field)
   533  11e4 00                 fesp             !fill 1                                  ; exponent flag (field)
   534  11e5 00                 etof             !fill 1                                  ; switch
   535  11e6 00                 cform            !fill 1                                  ; char counter (field)
   536  11e7 00                 sno              !fill 1                                  ; sign no
   537  11e8 00                 blfd             !fill 1                                  ; blank/star flag
   538  11e9 00                 begfd            !fill 1                                  ; pointer to begin of field
   539  11ea 00                 lfor             !fill 1                                  ; length of format
   540  11eb 00                 endfd            !fill 1                                  ; pointer to end of field
   541                          
   542                          ; .page
   543                          ;  * = $1200 ;BASIC Graphic, Sprite, Music, & Sound storage
   544                          
   545                          ;  The following 24 bytes are multiply defined...
   546                          ;
   547                          ; params = *
   548                          
   549                          ;  Circle drawing variables  (multiply defined).
   550                          ;
   551                          ; xcircl *=*+2  ;circle center, x coordinate
   552                          ; ycircl *=*+2  ;circle center, y coordinate
   553                          ; xradus *=*+2  ;x radius
   554                          ; yradus *=*+2  ;y radius
   555                          ; rotang *=*+4  ;rotation angle
   556                          ; angbeg *=*+2  ;arc angle start
   557                          ; angend *=*+2  ;arc angle end
   558                          ; xrcos  *=*+2  ;x radius * cos(rotation angle)
   559                          ; yrsin  *=*+2  ;y radius * sin(rotation angle)
   560                          ; xrsin  *=*+2  ;x radius * sin(rotation angle)
   561                          ; yrcos  *=*+2  ;y radius * cos(rotation angle)
   562                          
   563                          ; parend = *
   564                          
   565                          ;  Box drawing variables  (multiply defined).
   566                          ;
   567                          ;  *=params
   568                          ; xcord1 *=*+2  ;point 1 x-coord.
   569                          ; ycord1 *=*+2  ;point 1 y-coord.
   570                          ; boxang *=*+2  ;rotation angle
   571                          ; xcount *=*+2
   572                          ; ycount *=*+2
   573                          ; bxleng *=*+2  ;length of a side
   574                          ; xcord2 *=*+2
   575                          ; ycord2 *=*+2
   576                          
   577                          ; .page
   578                          ;  Shape variables  (multiply defined).
   579                          ;
   580                          ;  *=params
   581                          ;  *=*+1  ;placeholder
   582                          ; keylen *=*+1
   583                          ; keynxt *=*+1
   584                          ; strsz  *=*+1  ;string len
   585                          ; gettyp *=*+1  ;replace shape mode
   586                          ; strptr *=*+1  ;string pos'n counter
   587                          ; oldbyt *=*+1  ;old bit map byte
   588                          ; newbyt *=*+1  ;new string or bit map byte
   589                          ;  *=*+1  ;placeholder
   590                          ; xsize  *=*+2  ;shape column length
   591                          ; ysize  *=*+2  ;shape row length
   592                          ; xsave  *=*+2  ;temp for column length
   593                          ; stradr *=*+2  ;save shape string descriptor
   594                          ; bitidx *=*+1  ;bit index into byte
   595                          
   596                          ;  General use parameters  (multiply defined).
   597                          ;
   598                          ;  *=params
   599                          ; xcentr *=*+2
   600                          ; ycentr *=*+2
   601                          ; xdist1 *=*+2
   602                          ; ydist1 *=*+2
   603                          ; xdist2 *=*+2
   604                          ; ydist2 *=*+2
   605                          ; disend
   606                          ;  *=*+2  ;placeholder
   607                          ; colcnt *=*+1  ;char's col. counter
   608                          ; rowcnt *=*+1
   609                          ; strcnt *=*+1
   610                          
   611                          ; .page
   612                          ;  General  graphic & sound  buffers & assignments
   613                          ;
   614                          ;  * = parend
   615                          
   616                          ;  General graphic storage (used by C128-type sprite routines in C65)
   617                          
   618                          vwork                                                     ; graphics & sprite vars
   619  11ec 0000               xpos             !fill 2                                  ; current x position
   620  11ee 0000               ypos             !fill 2                                  ; current y position
   621  11f0 0000               xdest            !fill 2                                  ; x-coordinate destination
   622  11f2 0000               ydest            !fill 2                                  ; y-coordinate destination
   623                          
   624  11f4 00                 numcnt           !fill 1                                  ; temp, usually coordinate type
   625  11f5 00                 vtemp1           !fill 1                                  ; used by sprite math stuff ????was base page
   626  11f6 00                 vtemp2           !fill 1                                  ; ????was base page
   627  11f7 00                 vtemp3           !fill 1                                  ; misc. graphic temp storage
   628  11f8 00                 vtemp4           !fill 1
   629  11f9 00                 vtemp5           !fill 1
   630                          
   631                          ; mvdflg *=*+1  ;flag if 10k hires allocated ???? this stuff was base page
   632                          ; colsel *=*+1  ;current color selected
   633                          ; multicolor_1 *=*+1
   634                          ; multicolor_2 *=*+1
   635                          ; foreground *=*+1
   636                          ; scalem *=*+1  ;scale mode flag
   637                          ; scale_x *=*+2  ;scale factor in x
   638                          ; scale_y *=*+2  ;scale factor in y
   639                          ; stopnb *=*+1  ;stop paint if not background/not same color
   640                          ; fg_bg  *=*+1  ;packed foreground/background color nybbles
   641                          ; fg_mc1 *=*+1  ;packed foreground/multicolor 1 color nybbles
   642                          
   643                          ; bitcnt *=*+1  ;temp for gshape
   644                          ; width  *=*+1  ;double width flag
   645                          ; filflg *=*+1  ;box fill flag
   646                          ; circle_segment *=*+1  ;degrees per circle segment
   647                          ; bitmsk *=*+1  ;temp for bit mask
   648                          
   649                          ; character_rom *=*+1  ;high byte of address of char rom for 'char' command
   650                          ; upper_lower *=*+1  ;pointer to upper/lower case for char command
   651                          ; upper_graphic *=*+1  ;   "       upper/graphic
   652                          
   653                          ;  DrawLine stuff
   654                          ;
   655                          ; xabs  *=*+2  ;16 bytes
   656                          ; yabs  *=*+2
   657                          ; xsgn  *=*+2
   658                          ; ysgn  *=*+2
   659                          ; fct  *=*+4
   660                          ; errval *=*+2
   661                          ; lesser *=*+1
   662                          ; greatr *=*+1
   663                          ; .page
   664                          ;  Angle stuff (used by sprites)
   665                          
   666  11fa 00                 angsgn           !fill 1                                  ; sign of angle
   667  11fb 0000               sinval           !fill 2                                  ; sine of value of angle
   668  11fd 0000               cosval           !fill 2                                  ; cosine of value of angle
   669                          ; angcnt *=*+2  ;temps for angle distance routines
   670                          
   671                          
   672                          ; Sprite stuff
   673                          
   674  11ff 00000000           savsiz           !fill 4                                  ; temp work locations for SSHAPE, SPRSAV, MOVSPR_TO
   675                          lesser
   676  1203 00                 sprtmp_1         !fill 1                                  ; temp for SPRSAV
   677                          greatr
   678  1204 00                 sprtmp_2         !fill 1
   679                          
   680  1205 0000000000000000...sprite_data      !fill 88                                 ; speed/direction tables for 8 sprites, 11 bytes each
   681                          ;   move ang/dist move line
   682                          ; offset= 0 b7=0+speed b7=1+speed
   683                          ;  1 counter  counter lo
   684                          ;  2 angle sign         hi
   685                          ;  3,4 delta-X  dir+min/max
   686                          ;  5,6 delta-Y  fct1
   687                          ;  7,8 total-X  fct2
   688                          ;  9,10 total-Y  error
   689                          
   690                          init_as_0        = *-sprite_data-1
   691                          
   692                          ; vic_save *=*+21  ;copy of VIC reg's, used to update chip during retrace
   693                          
   694                          ; defmod *=*+1  ;for SPRDEF
   695                          ; lincnt *=*+1  ; "
   696                          ; sprite_number *=*+1  ; "
   697                          
   698                          ; .page
   699                          ; Music stuff driving stereo SIDs, 3 voices each
   700                          
   701  125d 0000000000000000...voices           !fill 12                                 ; Voice counters (activity flags)  [910612] stereo
   702  1269 000000000000       waveform         !fill 6                                  ; Waveforms for each voice   [910612] stereo
   703                          
   704  126f 00                 voice            !fill 1                                  ; Play note parameters
   705  1270 00                 octave           !fill 1
   706  1271 00                 sharp            !fill 1
   707  1272 00                 dnote            !fill 1
   708  1273 00                 tempo_rate       !fill 1                                  ; duration of whole note 4/4 time = 24/rate
   709  1274 0000               pitch            !fill 2
   710  1276 0000               ntime            !fill 2
   711                          
   712  1278 00000000           filters1         !fill 4                                  ; Volume & Filter parameters   [910612] was 5
   713  127c 00000000           filters2         !fill 4                                  ; [910612] stereo
   714  1280 00000000           fltsav           !fill 4                                  ; temps
   715  1284 00                 fltflg           !fill 1                                  ; temp
   716                          
   717  1285 00                 tonnum           !fill 1                                  ; Tune Envelope stuff
   718  1286 000000             tonval           !fill 3
   719                          
   720  1289 0000000000000000...atktab           !fill 10                                 ; Tune Envelopes
   721  1293 0000000000000000...sustab           !fill 10
   722  129d 0000000000000000...wavtab           !fill 10
   723  12a7 0000000000000000...pulslw           !fill 10
   724  12b1 0000000000000000...pulshi           !fill 10
   725                          
   726  12bb 00                 parcnt           !fill 1                                  ; temp: envelope
   727  12bc 00                 nibble           !fill 1                                  ; temp: envelope, filter
   728                          
   729                          ; .page
   730                          ; SOUND command stuff
   731                          
   732  12bd 00                 sound_voice      !fill 1
   733  12be 000000000000       sound_time_lo    !fill 3+3                                ; [910612] stereo
   734  12c4 000000000000       sound_time_hi    !fill 3+3                                ; [910612] stereo
   735  12ca 000000000000       sound_max_lo     !fill 3+3                                ; [910612] stereo
   736  12d0 000000000000       sound_max_hi     !fill 3+3                                ; [910612] stereo
   737  12d6 000000000000       sound_min_lo     !fill 3+3                                ; [910612] stereo
   738  12dc 000000000000       sound_min_hi     !fill 3+3                                ; [910612] stereo
   739  12e2 000000000000       sound_direction  !fill 3+3                                ; [910612] stereo
   740  12e8 000000000000       sound_step_lo    !fill 3+3                                ; [910612] stereo
   741  12ee 000000000000       sound_step_hi    !fill 3+3                                ; [910612] stereo
   742  12f4 000000000000       sound_freq_lo    !fill 3+3                                ; [910612] stereo
   743  12fa 000000000000       sound_freq_hi    !fill 3+3                                ; [910612] stereo
   744                          
   745                          ;above must end before $1300
   746                                           * = $1160
   747                          ;below must end before $1170
   748                          
   749  1160 00                 temp_time_lo     !fill 1
   750  1161 00                 temp_time_hi     !fill 1
   751  1162 00                 temp_max_lo      !fill 1
   752  1163 00                 temp_max_hi      !fill 1
   753  1164 00                 temp_min_lo      !fill 1
   754  1165 00                 temp_min_hi      !fill 1
   755  1166 00                 temp_direction   !fill 1
   756  1167 00                 temp_step_lo     !fill 1
   757  1168 00                 temp_step_hi     !fill 1
   758  1169 00                 temp_freq_lo     !fill 1
   759  116a 00                 temp_freq_hi     !fill 1
   760  116b 00                 temp_pulse_lo    !fill 1
   761  116c 00                 temp_pulse_hi    !fill 1
   762  116d 00                 temp_waveform    !fill 1
   763                          
   764  116e 00                 pot_temp_1       !fill 1                                  ; temporaries for 'POT' function
   765  116f 00                 pot_temp_2       !fill 1
   766                          
   767                          ; .page
   768                                           * = $1300
   769                          
   770  1300 0000000000000000...dosstr           !fill 256                                ; DOS input/output string buffer
   771                          
   772                          ; .page
   773                                           * = $1f00                                ; Graphics Kernel Interface
   774                          
   775  1f00 00                 GKI__parm1       !fill 1                                  ; ml interface parm values
   776  1f01 00                 GKI__parm2       !fill 1
   777  1f02 00                 GKI__parm3       !fill 1
   778  1f03 00                 GKI__parm4       !fill 1
   779  1f04 00                 GKI__parm5       !fill 1
   780  1f05 00                 GKI__parm6       !fill 1
   781  1f06 00                 GKI__parm7       !fill 1
   782  1f07 00                 GKI__parm8       !fill 1
   783  1f08 00                 GKI__parm9       !fill 1
   784  1f09 00                 GKI__parm10      !fill 1
   785  1f0a 00                 GKI__parm11      !fill 1
   786  1f0b 00                 GKI__parm12      !fill 1
   787  1f0c 00                 GKI__parm13      !fill 1
   788  1f0d 00                 GKI__parm14      !fill 1
   789  1f0e 00                 GKI__parm15      !fill 1
   790  1f0f 00                 GKI__parm16      !fill 1
   791  1f10 00                 GKI__parm17      !fill 1
   792                          
   793  1f11 00                 GKI__subparm1    !fill 1                                  ; subroutine parm values
   794  1f12 00                 GKI__subparm2    !fill 1
   795  1f13 00                 GKI__subparm3    !fill 1
   796  1f14 00                 GKI__subparm4    !fill 1
   797  1f15 00                 GKI__subparm5    !fill 1
   798                          
   799  1f16 00                 GKI__temp1       !fill 1                                  ; local variables within subroutines
   800  1f17 00                 GKI__temp2       !fill 1
   801  1f18 00                 GKI__temp3       !fill 1
   802  1f19 00                 GKI__temp4       !fill 1
   803  1f1a 00                 GKI__temp5       !fill 1
   804  1f1b 00                 GKI__temp6       !fill 1
   805  1f1c 00                 GKI__temp7       !fill 1
   806  1f1d 00                 GKI__temp8       !fill 1
   807  1f1e 00                 GKI__temp9       !fill 1
   808  1f1f 00                 GKI__temp10      !fill 1
   809  1f20 00                 GKI__temp11      !fill 1
   810  1f21 00                 GKI__temp12      !fill 1
   811  1f22 00                 GKI__temp13      !fill 1
   812  1f23 00                 GKI__temp14      !fill 1
   813  1f24 00                 GKI__temp15      !fill 1
   814  1f25 00                 GKI__temp16      !fill 1
   815  1f26 00                 GKI__temp17      !fill 1
   816                          
   817                          ;.end
   818                          ; .page
   819                          ; .subttl C65 Kernal Entry Points
   820                          
   821                          ; Addresses of OS parameters referenced by BASIC:
   822                          
   823                          _6510_data_reg   = $01
   824                          _bank            = $02                                    ; reg's for Kernel xxx_FAR routines (used by SYS)
   825                          _pchi            = $03
   826                          _pclo            = $04
   827                          _s_reg           = $05
   828                          _a_reg           = $06
   829                          _x_reg           = $07
   830                          _y_reg           = $08
   831                          _z_reg           = $09
   832                          
   833                          _vicIRQ          = $a0                                    ; VIC IRQ flag register at time of IRQ
   834                          _starting_addr   = $ac                                    ; address BLOAD loaded to
   835                          _sa              = $b9                                    ; I/O channel secondary address
   836                          _fa              = $ba                                    ; I/O channel device number
   837                          _ndx             = $d0                                    ; number of characters in keyboard buffer
   838                          _kyndx           = $d1                                    ; fkey active flag
   839                          _mode            = $d7                                    ; 40/80 mode
   840                          _graphm          = $d8                                    ; graphic mode switch (multi/hires/split)
   841                          _pnt             = $e0                                    ; Editor screen address at cursor
   842                          
   843                          _screen_bottom   = $e4                                    ; these describe the current window
   844                          _screen_top      = $e5
   845                          _screen_left     = $e6
   846                          _screen_right    = $e7
   847                          
   848                          _color           = $f1                                    ; text color      [910722]
   849                          _autoinsert      = $f6                                    ; enable/disable auto insert mode
   850                          _locks           = $f7                                    ; Editor keyboard locks     [910722]
   851                          
   852                          _keyd            = $02b0                                  ; keyboard buffer     [910710]
   853                          ;_split = $0a34  ;line to start split at
   854                          
   855                          number_fkeys     = 16                                     ; max of 14 prog. fn. keys
   856                          _pky_lengths     = $1000                                  ; table of prog. fn. key sizes
   857                          _pky_buffer      = _pky_lengths+number_fkeys              ; actual buffer
   858                          
   859                          _restart_vector  = $1100                                  ; Kernel restart vector
   860                          _pal_ntsc        = $1103                                  ; PAL=$ff, NTSC=$00 indicator    [910107]
   861                          _init_status     = $1104                                  ; msb set tells Kernel to let BASIC have IRQs
   862                          _default_drive   = $1106                                  ; system default disk drive
   863                          _expansion       = $1107                                  ; expansion RAM (# banks????)    [910107]
   864                          _sleep_counter   = $110c                                  ; binary frame counter maintained by Kernel  [910730]
   865                          _mouse_enable    = $1135                                  ; port# used by mouse (b7=port2, b6=port1, or both) [910107]
   866                          _mouse_pointer   = $1136                                  ; sprite pointer (sprite*2) by Kernel mouse driver "
   867                          _mouse_top       = $113b                                  ; margins for mouse pointer    "
   868                          _mouse_bottom    = $113c                                  ; "
   869                          _mouse_left      = $113d                                  ; "
   870                          _mouse_right     = $113e                                  ; "
   871                          
   872                          ; Addresses of I/O areas referenced by BASIC:
   873                          
   874                          _red             = $d100                                  ; VIC palette (I/O block)
   875                          _green           = $d200
   876                          _blue            = $d300
   877                          
   878                          ; Addresses of Kernel entry points referenced by BASIC:
   879                          
   880                          _print           = $e00c
   881                          _mouse           = $e01b                                  ; [910122]
   882                          _set_window      = $e02d
   883                          _palette_init    = $e027
   884                          _cursor          = $e030                                  ; [910228]
   885                          ;_ldtb2 = $e033
   886                          ;_ldtb1 = $e04c
   887                          
   888                          _close_all       = $ff50                                  ; close all channels assigned to device .a
   889                          _go_64           = $ff53                                  ; C64 mode
   890                          _monitor         = $ff56                                  ; ML Monitor
   891                          _bootsys         = $ff59                                  ; Boot alternate OS     [910110]
   892                          _phoenix         = $ff5c                                  ; jump to 'post-BASIC initialize' routine
   893                          _lkupla          = $ff5f                                  ; find an available Logical Address
   894                          _lkupsa          = $ff62                                  ; find an available Secondary Address
   895                          _swapper         = $ff65                                  ; switch 80/40 column
   896                          _doakey          = $ff68                                  ; add/remove a definition from the p.f. key table
   897                          _setbank         = $ff6b                                  ; set bank for load/save/verify/open
   898                          _jsr_far         = $ff6e                                  ; call a subroutine in any bank
   899                          _jmp_far         = $ff71                                  ; jump to code in any bank
   900                          _lda_far         = $ff74                                  ; write a byte to any bank
   901                          _sta_far         = $ff77                                  ; read a byte from any bank
   902                          _cmp_far         = $ff7a                                  ; compare a byte to any bank
   903                          _primm           = $ff7d                                  ; print immediate
   904                          
   905                          _setmsg          = $ff90
   906                          _readst          = $ffb7
   907                          _setlfs          = $ffba
   908                          _setnam          = $ffbd
   909                          _open            = $ffc0
   910                          _close           = $ffc3
   911                          _chkin           = $ffc6
   912                          _chkout          = $ffc9
   913                          _clrch           = $ffcc
   914                          _basin           = $ffcf
   915                          _bsout           = $ffd2
   916                          _loadsp          = $ffd5
   917                          _savesp          = $ffd8
   918                          _SetTime         = $ffdb
   919                          _ReadTime        = $ffde
   920                          _stop            = $ffe1
   921                          _getin           = $ffe4
   922                          _clall           = $ffe7
   923                          _screen_org      = $ffed
   924                          _plot            = $fff0
   925                          
   926                          ;.end
   927                          ; .page
   928                          ; .subttl C65 BASIC 10.0 Initilaization
   929                          
   930                          ; ***************************************************************************************************************
   931                          ; ***************************************************************************************************************
   932                          ;
   933                          ;      Name:       patch.asm
   934                          ;      Purpose:    Fixes
   935                          ;      Created:    4th January 2020
   936                          ;      Author:     Paul Robson (paul@robsons.org.uk)
   937                          ;
   938                          ; ***************************************************************************************************************
   939                          ; ***************************************************************************************************************
   940                          
   941                          ; ***************************************************************************************************************
   942                          ;
   943                          ;				At present ACME does not support BRA opcode $83. BRL replaces this.
   944                          ;
   945                          ; ***************************************************************************************************************
   946                          
   947                          !macro lbra addr {
   948                          	!byte $83
   949                          	!word (addr-*-2) & $FFFF
   950                          }
   951                          
   952                          !macro lbcc addr {
   953                          	!byte $93
   954                          	!word (addr-*-2) & $FFFF
   955                          }
   956                          
   957                          !macro lbcs addr {
   958                          	!byte $B3
   959                          	!word (addr-*-2) & $FFFF
   960                          }
   961                          
   962                          !macro lbne addr {
   963                          	!byte $D3
   964                          	!word (addr-*-2) & $FFFF
   965                          }
   966                          
   967                          !macro lbeq addr {
   968                          	!byte $F3
   969                          	!word (addr-*-2) & $FFFF
   970                          }
   971                          
   972                          !macro lbpl addr {
   973                          	!byte $13
   974                          	!word (addr-*-2) & $FFFF
   975                          }
   976                          
   977                          !macro lbmi addr {
   978                          	!byte $33
   979                          	!word (addr-*-2) & $FFFF
   980                          }
   981                          
   982                          !macro lbvs addr {
   983                          	!byte $73
   984                          	!word (addr-*-2) & $FFFF
   985                          }
   986                          
   987                          !macro lbvc addr {
   988                          	!byte $53
   989                          	!word (addr-*-2) & $FFFF
   990                          }
   991                                           * = $2000                                 ;; @@0000 1
   992                           ;; @@2000 1
   993                          basic                                                      ;; @@2000 1
   994  2000 4c2520                              jmp hard_reset                            ;; @@2000 1
   995  2003 4c0c20                              jmp soft_reset                            ;; @@2003 1
   996  2006 4c7579                              jmp basic_irq                             ;; @@2006 1
   997  2009 4c06bf                              jmp basic_nmi                            ; (removed)    [910523] audio ;; @@2009 1
   998                           ;; @@200c 1
   999                          soft_reset                                                ; warm start BASIC... ;; @@200c 1
  1000  200c 20b438                              jsr release_channels                     ; restore default terminal I/O channels ;; @@200c 1
  1001  200f a900                                lda #doslfn                              ; restore reserved disk channel ;; @@200f 1
  1002  2011 38                                  sec                                      ; not a real close ;; @@2011 1
  1003  2012 20c3ff                              jsr _close                                ;; @@2012 1
  1004  2015 208278                              jsr Clear_DS                             ; zap DS$ just in case ;; @@2015 1
  1005                          ; (might have been in Monitor or building DS$) ;; @@2018 1
  1006  2018 200d21                              jsr init_sound_sprites                   ; init interrupt & dma stuff   [910523] ;; @@2018 1
  1007  201b 200935                              jsr init_stack                           ; restore stack ;; @@201b 1
  1008  201e a901                                lda #1                                    ;; @@201e 1
  1009  2020 0c0411                              tsb _init_status                         ; tell Kernel to give BASIC a call at IRQ time ;; @@2020 1
  1010  2023 802e                                bra go_ready                             ; enable IRQ, print READY, and go MAIN ;; @@2023 1
  1011                           ;; @@2025 1
  1012                           ;; @@2025 1
  1013                          hard_reset                                                 ;; @@2025 1
  1014  2025 205f22                              jsr init_vectors                         ; init vectors ;; @@2025 1
  1015  2028 205720                              jsr init_storage                         ; init variables, voices,  & download RAM code ;; @@2028 1
  1016  202b 203321                              jsr signon_message                       ; print initialization message ;; @@202b 1
  1017                           ;; @@202e 1
  1018  202e a900                                lda #0                                   ; init bank pointers   [900509] ;; @@202e 1
  1019  2030 8584                                sta text_bank                             ;; @@2030 1
  1020  2032 8555                                sta helper                               ; reset all LIST flags ;; @@2032 1
  1021  2034 a901                                lda #1                                    ;; @@2034 1
  1022  2036 8585                                sta var_bank                              ;; @@2036 1
  1023  2038 a902                                lda #2                                    ;; @@2038 1
  1024  203a 8dd802                              sta highlight_color                      ; set highlight color (2=red) ;; @@203a 1
  1025  203d a203                                ldx #<basic+3                             ;; @@203d 1
  1026  203f 8e0011                              stx _restart_vector                      ; point system restart vector at warm start entry ;; @@203f 1
  1027  2042 200935                              jsr init_stack                           ; initialize system stack pointer ;; @@2042 1
  1028  2045 a901                                lda #1                                    ;; @@2045 1
  1029  2047 0c0411                              tsb _init_status                         ; tell Kernel to give BASIC a call at IRQ time ;; @@2047 1
  1030  204a 220080                              jsr ($8000)                              ; initialize graphics ;; @@204a 1
  1031  204d 205cff                              jsr _phoenix                             ; call cartridges, check out expansion card ;; @@204d 1
  1032  2050 20a467                              jsr autobootCSG                          ; attempt to boot program from disk ;; @@2050 1
  1033                           ;; @@2053 1
  1034                          go_ready                                                   ;; @@2053 1
  1035  2053 58                                  cli                                      ; enable IRQ ;; @@2053 1
  1036  2054 83f60d                              +lbra ready                               ;; @@2054 1
  1037                           ;; @@2057 1
  1038                          ; .page ;; @@2057 1
  1039                          init_storage                                               ;; @@2057 1
  1040  2057 a94c                                lda #76                                  ; 'jmp' opcode ;; @@2057 1
  1041  2059 8556                                sta jmper                                 ;; @@2059 1
  1042  205b 8df702                              sta usrpok                                ;; @@205b 1
  1043                           ;; @@205e 1
  1044  205e a9e8                                lda #<errguf                             ; init USR vector to 'undef'd function'  [910226] FAB ;; @@205e 1
  1045  2060 a058                                ldy #>errguf                              ;; @@2060 1
  1046  2062 8df802                              sta usrpok+1                              ;; @@2062 1
  1047  2065 8cf902                              sty usrpok+2                              ;; @@2065 1
  1048                           ;; @@2068 1
  1049  2068 a99f                                lda #<flpint                             ; ???? why keep ;; @@2068 1
  1050  206a a058                                ldy #>flpint                              ;; @@206a 1
  1051  206c 8dc002                              sta adray1                                ;; @@206c 1
  1052  206f 8cc102                              sty adray1+1                              ;; @@206f 1
  1053                           ;; @@2072 1
  1054  2072 a93f                                lda #<givayf                             ; ???? why keep ;; @@2072 1
  1055  2074 a04e                                ldy #>givayf                              ;; @@2074 1
  1056  2076 8dc202                              sta adray2                                ;; @@2076 1
  1057  2079 8cc302                              sty adray2+1                              ;; @@2079 1
  1058                           ;; @@207c 1
  1059                          ; Download CHRGET (and INDSUB code????) to RAM ;; @@207c 1
  1060                          ; ;; @@207c 1
  1061                          ; ldx #endmov-chrget_pattern ;; @@207c 1
  1062                          ;1$ lda chrget_pattern-1,x ;; @@207c 1
  1063                          ; sta chrget-1,x ;; @@207c 1
  1064                          ; dex ;; @@207c 1
  1065                          ; bne 1$ ;; @@207c 1
  1066                           ;; @@207c 1
  1067  207c a200                                ldx #0                                    ;; @@207c 1
  1068  207e 8ec402                              stx zero                                 ; zero constant ;; @@207e 1
  1069  2081 8ec502                              stx zero+1                                ;; @@2081 1
  1070  2084 8ec602                              stx zero+2                                ;; @@2084 1
  1071  2087 8ed702                              stx bits                                 ; reset bit/byte shifter ;; @@2087 1
  1072  208a 8615                                stx channl                               ; default channels ;; @@208a 1
  1073  208c 867e                                stx runmod                               ; direct mode ;; @@208c 1
  1074  208e 861a                                stx lastpt+1                              ;; @@208e 1
  1075  2090 8674                                stx autinc                               ; turn off auto increment ;; @@2090 1
  1076  2092 8675                                stx autinc+1                              ;; @@2092 1
  1077  2094 8e7411                              stx rndx                                 ; zero-ing MSB will guarantee a legal value ;; @@2094 1
  1078                          ; stx dosfa  ;zero device number     [910429] ;; @@2097 1
  1079                           ;; @@2097 1
  1080  2097 8edc02                              stx intval                               ; reset all BASIC IRQ stuff ;; @@2097 1
  1081  209a 8edd02                              stx int_trip_flag                        ; (BASIC IRQ enabled in init_voices) ;; @@209a 1
  1082  209d 8ede02                              stx int_trip_flag+1                       ;; @@209d 1
  1083  20a0 8edf02                              stx int_trip_flag+2                       ;; @@20a0 1
  1084  20a3 8ee802                              stx lightpen_xpos                         ;; @@20a3 1
  1085  20a6 8ee902                              stx lightpen_ypos                         ;; @@20a6 1
  1086                           ;; @@20a9 1
  1087                          ; stx mvdflg  ;flag '8k graphics screen not allocated' ;; @@20a9 1
  1088                          ; stx width  ;init to single-width lines ;; @@20a9 1
  1089                          ; stx scalem  ;turn off scaleing ;; @@20a9 1
  1090                          ; stx filflg ;; @@20a9 1
  1091                           ;; @@20a9 1
  1092                          ; inx   ;.x=1 ???? why init stack with $0101 ???? ;; @@20a9 1
  1093                          ; stx buf-3 ;; @@20a9 1
  1094                          ; stx buf-4 ;; @@20a9 1
  1095                           ;; @@20a9 1
  1096                          ; ldy #88   ;zero out sprite information area ;; @@20a9 1
  1097                          ;2$ sta sprite_data,y ;???? this is done later at init_as_0 ;; @@20a9 1
  1098                          ; dey ;; @@20a9 1
  1099                          ; bpl 2$ ;; @@20a9 1
  1100                           ;; @@20a9 1
  1101                          ; ldx #13 ;; @@20a9 1
  1102                          ; stx foreground  ;init bit map's fg color to light green ;; @@20a9 1
  1103                          ; ldx #1 ;; @@20a9 1
  1104                          ; stx multicolor_1 ;init mc1 to white ;; @@20a9 1
  1105                          ; ldx #2 ;; @@20a9 1
  1106                          ; stx multicolor_2 ;init mc2 to red ;; @@20a9 1
  1107                          ; jsr set_packed_color ;set up packed fg/bg and fg/mc1 bytes ;; @@20a9 1
  1108                           ;; @@20a9 1
  1109  20a9 ae0611                              ldx _default_drive                        ;; @@20a9 1
  1110  20ac 8e8211                              stx dosfa                                ; init device number to system default   [910429] ;; @@20ac 1
  1111                           ;; @@20af 1
  1112  20af a280                                ldx #$80                                 ; bank 0 with I/O???? ;; @@20af 1
  1113  20b1 8ed102                              stx current_bank                         ; set default bank for PEEK,POKE,BOOT,SYS,WAIT,BLOAD/SAVE ;; @@20b1 1
  1114                           ;; @@20b4 1
  1115  20b4 a21b                                ldx #tempst                               ;; @@20b4 1
  1116  20b6 8618                                stx temppt                               ; init temp descriptor pointer ;; @@20b6 1
  1117                           ;; @@20b8 1
  1118  20b8 a201                                ldx #<baswrk                             ; set up bottom of bank 0 (text area) ;; @@20b8 1
  1119  20ba a020                                ldy #>baswrk                              ;; @@20ba 1
  1120  20bc 862d                                stx txttab                                ;; @@20bc 1
  1121  20be 842e                                sty txttab+1                              ;; @@20be 1
  1122                           ;; @@20c0 1
  1123  20c0 a900                                lda #<varbgn                             ; set up bottom of bank 1 (storage area) ;; @@20c0 1
  1124  20c2 a020                                ldy #>varbgn                              ;; @@20c2 1
  1125  20c4 852f                                sta vartab                                ;; @@20c4 1
  1126  20c6 8430                                sty vartab+1                              ;; @@20c6 1
  1127                           ;; @@20c8 1
  1128  20c8 a900                                lda #<bank_0_top                         ; set up top of bank 0 ;; @@20c8 1
  1129  20ca a080                                ldy #>bank_0_top                          ;; @@20ca 1
  1130  20cc 8dcf02                              sta max_mem_0                             ;; @@20cc 1
  1131  20cf 8cd002                              sty max_mem_0+1                           ;; @@20cf 1
  1132                           ;; @@20d2 1
  1133  20d2 a900                                lda #<bank_1_top                         ; set up  top of bank 1 ;; @@20d2 1
  1134  20d4 a080                                ldy #>bank_1_top                          ;; @@20d4 1
  1135  20d6 8539                                sta max_mem_1                             ;; @@20d6 1
  1136  20d8 843a                                sty max_mem_1+1                           ;; @@20d8 1
  1137                           ;; @@20da 1
  1138  20da a900                                lda #0                                   ; init text input buffer  (these are for autoboot) ;; @@20da 1
  1139  20dc 8d0002                              sta buf                                   ;; @@20dc 1
  1140  20df 3a                                  dec                                       ;; @@20df 1
  1141  20e0 853c                                sta curlin+1                             ; init line pointer ;; @@20e0 1
  1142  20e2 a2ff                                ldx #<buf_txtptr                         ; init txtptr ;; @@20e2 1
  1143  20e4 a001                                ldy #>buf_txtptr                          ;; @@20e4 1
  1144  20e6 863d                                stx txtptr                                ;; @@20e6 1
  1145  20e8 843e                                sty txtptr+1                              ;; @@20e8 1
  1146                           ;; @@20ea 1
  1147                          ; Set up sprite pointers ;; @@20ea 1
  1148                           ;; @@20ea 1
  1149  20ea a91f                                lda #sprite_base/64+7                     ;; @@20ea 1
  1150  20ec a007                                ldy #7                                    ;; @@20ec 1
  1151  20ee 7fd705             _local_1000_10   bbr7 _mode,_local_1000_20                 ;; @@20ee 1
  1152  20f1 99f80b                              sta sprite_ptrs_40,y                     ; 40 col screen ;; @@20f1 1
  1153  20f4 8003                                bra _local_1000_30                        ;; @@20f4 1
  1154  20f6 99f80f             _local_1000_20   sta sprite_ptrs_80,y                     ; 80 col screen ;; @@20f6 1
  1155  20f9 3a                 _local_1000_30   dec                                       ;; @@20f9 1
  1156  20fa 88                                  dey                                       ;; @@20fa 1
  1157  20fb 10f1                                bpl _local_1000_10                        ;; @@20fb 1
  1158                           ;; @@20fd 1
  1159                          ; Zero out sprite movement stuff and some VIC stuff too ;; @@20fd 1
  1160                           ;; @@20fd 1
  1161  20fd a900                                lda #0                                    ;; @@20fd 1
  1162  20ff a257                                ldx #init_as_0                            ;; @@20ff 1
  1163  2101 9d0512             _local_1000_40   sta sprite_data,x                         ;; @@2101 1
  1164  2104 ca                                  dex                                       ;; @@2104 1
  1165  2105 10fa                                bpl _local_1000_40                        ;; @@2105 1
  1166                           ;; @@2107 1
  1167  2107 200d21                              jsr init_sound_sprites                   ; init misc. interrupt & dma stuff ;; @@2107 1
  1168                           ;; @@210a 1
  1169                          ; lda #$d0  ;initialize pointers to character ROM ;; @@210a 1
  1170                          ; sta upper_graphic ;; @@210a 1
  1171                          ; lda #$d8 ;; @@210a 1
  1172                          ; sta upper_lower ;; @@210a 1
  1173                           ;; @@210a 1
  1174  210a 836b13                              +lbra init_text                          ; go to 'new' ;; @@210a 1
  1175                           ;; @@210d 1
  1176                          ; .page ;; @@210d 1
  1177                          init_sound_sprites                                          ; [910523] ;; @@210d 2
  1178                          ;; init_voices   ;Initialize music stuff ;; @@210d 2
  1179                          ; bit _pal_ntsc  ;determine if PAL or NTSC system  [910724] ;; @@210d 2
  1180                          ; bmi 1$   ;...branch if PAL ;; @@210d 2
  1181                          ; lda #<beats_ntsc/4 ;set beat to quarter note (4/4 time = .5 sec) ;; @@210d 2
  1182                          ; ldy #>beats_ntsc/4 ;; @@210d 2
  1183                          ; bra 2$ ;; @@210d 2
  1184                          ;1$ lda #<beats_pal/4 ;; @@210d 2
  1185                          ; ldy #>beats_pal/4 ;; @@210d 2
  1186                          ;2$ sta ntime ;; @@210d 2
  1187                          ; sty ntime+1 ;; @@210d 2
  1188                          ; ;; @@210d 2
  1189                          ; lda #4   ;set default octave ;; @@210d 2
  1190                          ; sta octave ;; @@210d 2
  1191                          ; ;; @@210d 2
  1192                          ; lda #12   ;set default tempo    [910220] ;; @@210d 2
  1193                          ; sta tempo_rate  ; 12 makes whole note in 4/4 time last 2 seconds ;; @@210d 2
  1194                          ;---- ;; @@210d 2
  1195                          ;; jsr go_slow  ;      [910716] 4567R7A ;; @@210d 2
  1196                          ; lda #0   ;make sure all gates are off ;; @@210d 2
  1197                          ; sta sid1+4 ;; @@210d 2
  1198                          ; sta sid1+11 ;; @@210d 2
  1199                          ; sta sid1+18 ;; @@210d 2
  1200                          ; sta sid2+4 ;; @@210d 2
  1201                          ; sta sid2+11 ;; @@210d 2
  1202                          ; sta sid2+18 ;; @@210d 2
  1203                          ; sta filters1+2  ;set filters off, volume to max????  [910612] ;; @@210d 2
  1204                          ; sta filters2+2 ;; @@210d 2
  1205                          ; ;; @@210d 2
  1206                          ; lda #8 ;; @@210d 2
  1207                          ; sta sid1+24 ;; @@210d 2
  1208                          ; sta sid2+24 ;; @@210d 2
  1209                          ; sta filters1+3 ;; @@210d 2
  1210                          ; sta filters2+3  ;      [910612] ;; @@210d 2
  1211                          ;; sta filters+4  ;why?      [910612] ;; @@210d 2
  1212                          ;; jsr go_fast  ;      [910716] 4567R7A ;; @@210d 2
  1213                          ;---- ;; @@210d 2
  1214                          ; ldy #29   ;initialize music tables ;; @@210d 2
  1215                          ;10$ lda atkmus,y ;; @@210d 2
  1216                          ; sta atktab,y ;; @@210d 2
  1217                          ; dey ;; @@210d 2
  1218                          ; bpl 10$ ;; @@210d 2
  1219                          ; ;; @@210d 2
  1220                          ; ldx #9   ;initialize pulse widths ;; @@210d 2
  1221                          ;20$ lda pwhmus,x ;; @@210d 2
  1222                          ; sta pulshi,x ;; @@210d 2
  1223                          ; dex ;; @@210d 2
  1224                          ; bpl 20$ ;; @@210d 2
  1225                          ; ;; @@210d 2
  1226                          ; stx sound_time_hi ;turn all SOUND counters off (.X = $ff) ;; @@210d 2
  1227                          ; stx sound_time_hi+1 ;; @@210d 2
  1228                          ; stx sound_time_hi+2 ;; @@210d 2
  1229                          ; stx sound_time_hi+3 ;stereo SIDs     [910612] ;; @@210d 2
  1230                          ; stx sound_time_hi+4 ;; @@210d 2
  1231                          ; stx sound_time_hi+5 ;; @@210d 2
  1232                          ; stx voices+1  ;turn all PLAY counters off ;; @@210d 2
  1233                          ; stx voices+3 ;; @@210d 2
  1234                          ; stx voices+5 ;; @@210d 2
  1235                          ; stx voices+7  ;stereo SIDs     [910612] ;; @@210d 2
  1236                          ; stx voices+9 ;; @@210d 2
  1237                          ; stx voices+11 ;; @@210d 2
  1238                          ; ;; @@210d 2
  1239                          ; ldy #6-1  ;set default envelope (piano) for all voices (6) ;; @@210d 2
  1240                          ; sty voice ;; @@210d 2
  1241                          ;30$ ldx #0 ;; @@210d 2
  1242                          ; jsr set_envelope_1 ;; @@210d 2
  1243                          ; dec voice ;; @@210d 2
  1244                          ; bpl 30$ ;; @@210d 2
  1245                          ; inc voice  ;set default voice (0) ;; @@210d 2
  1246                          ;----- ;; @@210d 2
  1247  210d 2058be                              jsr Sound_CLR_1                          ; [910724] ;; @@210d 2
  1248                           ;; @@2110 2
  1249  2110 a9e7                                lda #%11100111                           ; [910626] ;; @@2110 2
  1250  2112 1455                                trb helper                               ; reset LIST/HELP/FIND flags ;; @@2112 2
  1251  2114 0cd902                              tsb highlight_save                       ; mark saved color as invalid ;; @@2114 2
  1252                           ;; @@2117 2
  1253  2117 a900                                lda #0                                   ; [910523] F018A ;; @@2117 2
  1254  2119 a217                                ldx #12+12-1                             ; init DMA lists ;; @@2119 2
  1255  211b 9d4401             _local_1001_40   sta dma1_cmd,x                            ;; @@211b 2
  1256  211e ca                                  dex                                       ;; @@211e 2
  1257  211f 10fa                                bpl _local_1001_40                        ;; @@211f 2
  1258                           ;; @@2121 2
  1259                          ; stop_sprites   ;Stop all moving sprites (a=0)   [910523] ;; @@2121 2
  1260  2121 a007                                ldy #7                                   ; for sprites 0...7 ;; @@2121 2
  1261  2123 befeb7             _local_1001_50   ldx sproff,y                             ; get table offset ;; @@2123 2
  1262  2126 9d0512                              sta sprite_data,x                        ; reset speed for this sprite ;; @@2126 2
  1263  2129 88                                  dey                                       ;; @@2129 2
  1264  212a 10f7                                bpl _local_1001_50                       ; loop until done ;; @@212a 2
  1265                           ;; @@212c 2
  1266  212c 8d15d0                              sta vic+21                               ; Turn off all sprites    [910717] ;; @@212c 2
  1267                           ;; @@212f 2
  1268  212f 8ddb02                              sta irq_wrap_flag                        ; enable BASIC IRQ handler ;; @@212f 2
  1269                          ; sta nmi_wrap_flag ;enable BASIC NMI handler   [910523] ;; @@2132 2
  1270  2132 60                                  rts                                      ; (removed)    [910826] ;; @@2132 2
  1271                           ;; @@2133 2
  1272                          ; .page ;; @@2133 2
  1273                          signon_message                                             ;; @@2133 3
  1274  2133 207dff             _local_1002_1    jsr _primm                                ;; @@2133 3
  1275  2136 93121c2020202020...                 !text 147,18,028,"                     ",146,169  ;; @@2136 3
  1276  2150 0509202020202020...                 !text 5,9,"       THE COMMODORE C65 DEVELOPMENT SYSTEM",cr  ;; @@2150 3
  1277  217e 1296202020202020...                 !text 18,150,"                  ",146,169,cr  ;; @@217e 3
  1278  2195 129e202020202020...                 !text 18,158,"               ",146,169    ;; @@2195 3
  1279  21a8 0509202020434f50...                 !text 5,9,"   COPYRIGHT  1991  COMMODORE ELECTRONICS, LTD.",cr  ;; @@21a8 3
  1280  21da 121e202020202020...                 !text 18,030,"            ",146,169       ;; @@21da 3
  1281  21ea 0509090920202020...                 !text 5,9,9,9,"    COPYRIGHT  1977  MICROSOFT",cr  ;; @@21ea 3
  1282  220d 129a202020202020...                 !text 18,154,"          ",146,169,cr      ;; @@220d 3
  1283  221c 129c202020202020...                 !text 18,156,"        ",146,169           ;; @@221c 3
  1284  2228 0509092042415349...                 !text 5,9,9," BASIC 10.0   V0.9B.911119    ALL RIGHTS RESERVED",cr,0  ;; @@2228 3
  1285                           ;; @@225e 3
  1286  225e 60                                  rts                                       ;; @@225e 3
  1287                           ;; @@225f 3
  1288                          ; .page ;; @@225f 3
  1289                          init_vectors                                               ;; @@225f 4
  1290  225f a217                                ldx #_local_1003_3-_local_1003_2-1        ;; @@225f 4
  1291  2261 bd6b22             _local_1003_1    lda _local_1003_2,x                       ;; @@2261 4
  1292  2264 9dfa02                              sta vectors_begin,x                       ;; @@2264 4
  1293  2267 ca                                  dex                                       ;; @@2267 4
  1294  2268 10f7                                bpl _local_1003_1                         ;; @@2268 4
  1295                           ;; @@226a 4
  1296  226a 60                                  rts                                       ;; @@226a 4
  1297                           ;; @@226b 4
  1298                           ;; @@226b 4
  1299  226b c37d               _local_1003_2    !word AutoScroll                         ; autoscroll vector ;; @@226b 4
  1300  226d 8f2d                                !word n_esc_fn_vec                       ; escape function vector ;; @@226d 4
  1301  226f cd7f                                !word graphic_kernel                     ; graphic extension vector ;; @@226f 4
  1302  2271 522e0a2f2223be33...                 !word nerror,nmain,ncrnch,nqplop,ngone,neval ; traditional vectors ;; @@2271 4
  1303  227d 32234e34c02c                        !word nesclk,nescpr,nescex               ; escape command vectors ;; @@227d 4
  1304                          _local_1003_3                                              ;; @@2283 4
  1305                           ;; @@2283 4
  1306                          ; .page ;; @@2283 4
  1307                          ;; CHRGET/CHRGOT code.  It is downloaded to RAM. ;; @@2283 4
  1308                          ;; ;; @@2283 4
  1309                          ;chrget_pattern ;; @@2283 4
  1310                          ; inw txtptr ;CHRGET entry ;; @@2283 4
  1311                          ; phz  ;CHRGOT entry (chrget+2) ;; @@2283 4
  1312                          ; phx ;; @@2283 4
  1313                          ; lda #0 ;; @@2283 4
  1314                          ; ldx #$f0 ;; @@2283 4
  1315                          ; ldy #0 ;; @@2283 4
  1316                          ; ldz #$f0 ;; @@2283 4
  1317                          ; map ;; @@2283 4
  1318                          ; ldy #0 ;; @@2283 4
  1319                          ; lda (txtptr),y ;; @@2283 4
  1320                          ; phy ;; @@2283 4
  1321                          ; pha ;; @@2283 4
  1322                          ; jsr _restore_sys ;; @@2283 4
  1323                          ; nop  ;unmap ;; @@2283 4
  1324                          ; pla ;; @@2283 4
  1325                          ; ply ;; @@2283 4
  1326                          ; plx ;; @@2283 4
  1327                          ; plz ;; @@2283 4
  1328                          ; ;; @@2283 4
  1329                          ; cmp #':' ;QNUM entry (chrget+27) ;; @@2283 4
  1330                          ; bcs _local_1003_2 ;; @@2283 4
  1331                          ; cmp #' ' ;; @@2283 4
  1332                          ; beq chrget_pattern ;; @@2283 4
  1333                          ; sec ;; @@2283 4
  1334                          ; sbc #'0' ;; @@2283 4
  1335                          ; sec ;; @@2283 4
  1336                          ; sbc #$d0 ;; @@2283 4
  1337                          ;_local_1003_2 rts  ;(42 bytes to here) ;; @@2283 4
  1338                          ; ;; @@2283 4
  1339                          ; ;; @@2283 4
  1340                          ; ;; @@2283 4
  1341                          ;; Constants which must be moved to RAM ;; @@2283 4
  1342                          ; ;; @@2283 4
  1343                          ; .byte   0,0,0 ;zero, of course! ;; @@2283 4
  1344                          ; ;; @@2283 4
  1345                          ;endmov   ;(45 bytes to here) ;; @@2283 4
  1346                           ;; @@2283 4
  1347                          ; .page ;; @@2283 4
  1348                          ; CHRGET/CHRGOT code. ;; @@2283 4
  1349                          ; ;; @@2283 4
  1350                           ;; @@2283 4
  1351  2283 e33d               chrget           inw txtptr                               ; get next character from text ;; @@2283 5
  1352  2285 a000               chrgot           ldy #0                                   ; re-get current character from text ;; @@2285 5
  1353  2287 20c522                              jsr indtxt                               ; lda (txtptr),y from RAM0 ;; @@2287 5
  1354  228a c920               qnum             cmp #' '                                  ;; @@228a 5
  1355  228c f0f5                                beq chrget                               ; skip spaces ;; @@228c 5
  1356  228e c93a               chrtst           cmp #':'                                 ; [910513] ;; @@228e 5
  1357  2290 b006                                bcs _local_1004_10                       ; eol ;; @@2290 5
  1358  2292 38                                  sec                                       ;; @@2292 5
  1359  2293 e930                                sbc #'0'                                 ; alpha or numeric? ;; @@2293 5
  1360  2295 38                                  sec                                       ;; @@2295 5
  1361  2296 e9d0                                sbc #$d0                                  ;; @@2296 5
  1362  2298 60                 _local_1004_10   rts                                       ;; @@2298 5
  1363                           ;; @@2299 5
  1364                           ;; @@2299 5
  1365                          ;.end ;; @@2299 5
  1366                          ; .page ;; @@2299 5
  1367                          ; C65 BASIC Indirect Load Subroutines ;; @@2299 5
  1368                           ;; @@2299 5
  1369                           ;; @@2299 5
  1370                          inddef                                                     ;; @@2299 6
  1371  2299 a950                                lda #defpnt                               ;; @@2299 6
  1372  229b 803a                                bra lda_far_ram1                          ;; @@229b 6
  1373                           ;; @@229d 6
  1374                          indfrm                                                     ;; @@229d 6
  1375  229d a93f                                lda #form                                 ;; @@229d 6
  1376  229f 8036                                bra lda_far_ram1                          ;; @@229f 6
  1377                           ;; @@22a1 6
  1378                          inddpt                                                     ;; @@22a1 6
  1379  22a1 a952                                lda #dscpnt                               ;; @@22a1 6
  1380  22a3 8032                                bra lda_far_ram1                          ;; @@22a3 6
  1381                           ;; @@22a5 6
  1382                          ;indhtr ;; @@22a5 6
  1383                          ; lda #hightr ;; @@22a5 6
  1384                          ; bra lda_far_ram0 ;; @@22a5 6
  1385                           ;; @@22a5 6
  1386                          indhtr_ram1                                                ;; @@22a5 6
  1387  22a5 a95c                                lda #hightr                               ;; @@22a5 6
  1388  22a7 802e                                bra lda_far_ram1                          ;; @@22a7 6
  1389                           ;; @@22a9 6
  1390                          indfmo                                                     ;; @@22a9 6
  1391  22a9 a966                                lda #facmo                                ;; @@22a9 6
  1392  22ab 802a                                bra lda_far_ram1                          ;; @@22ab 6
  1393                           ;; @@22ad 6
  1394                          indlow                                                     ;; @@22ad 6
  1395  22ad a961                                lda #lowtr                                ;; @@22ad 6
  1396  22af 8016                                bra lda_far_ram0                          ;; @@22af 6
  1397                           ;; @@22b1 6
  1398                          indst1                                                     ;; @@22b1 6
  1399  22b1 a970                                lda #strng1                               ;; @@22b1 6
  1400  22b3 8012                                bra lda_far_ram0                          ;; @@22b3 6
  1401                           ;; @@22b5 6
  1402                          indst1_ram1                                                ;; @@22b5 6
  1403  22b5 a970                                lda #strng1                               ;; @@22b5 6
  1404  22b7 801e                                bra lda_far_ram1                          ;; @@22b7 6
  1405                           ;; @@22b9 6
  1406                          indgrb                                                     ;; @@22b9 6
  1407  22b9 a950                                lda #grbpnt                               ;; @@22b9 6
  1408  22bb 801a                                bra lda_far_ram1                          ;; @@22bb 6
  1409                           ;; @@22bd 6
  1410                          indlow_ram1                                                ;; @@22bd 6
  1411  22bd a961                                lda #lowtr                                ;; @@22bd 6
  1412  22bf 8016                                bra lda_far_ram1                          ;; @@22bf 6
  1413                           ;; @@22c1 6
  1414                          indin1                                                     ;; @@22c1 6
  1415  22c1 a924                                lda #index1                               ;; @@22c1 6
  1416  22c3 8002                                bra lda_far_ram0                          ;; @@22c3 6
  1417                           ;; @@22c5 6
  1418                          ;indin2 ;; @@22c5 6
  1419                          ; lda #index2 ;; @@22c5 6
  1420                          ; bra lda_far_ram0 ;; @@22c5 6
  1421                           ;; @@22c5 6
  1422                          indtxt                                                     ;; @@22c5 6
  1423  22c5 a93d                                lda #txtptr                               ;; @@22c5 6
  1424                          ; bra lda_far_ram0 ;; @@22c7 6
  1425                           ;; @@22c7 6
  1426                          ; .page ;; @@22c7 6
  1427                          ; C65 BASIC Indirect Load Subroutines ;; @@22c7 6
  1428                           ;; @@22c7 6
  1429                          lda_far_ram0                                               ;; @@22c7 6
  1430  22c7 db                                  phz                                      ; save registers ;; @@22c7 6
  1431  22c8 da                                  phx                                       ;; @@22c8 6
  1432  22c9 aa                                  tax                                      ; pointer ;; @@22c9 6
  1433  22ca ab8400                              ldz text_bank                            ; RAM0 ;; @@22ca 6
  1434  22cd 2074ff                              jsr _lda_far                             ; LDA (.x),Y from bank .z ;; @@22cd 6
  1435  22d0 fa                                  plx                                       ;; @@22d0 6
  1436  22d1 fb                                  plz                                       ;; @@22d1 6
  1437  22d2 29ff                                and #$ff                                 ; set processor status per byte fetched ;; @@22d2 6
  1438  22d4 60                                  rts                                       ;; @@22d4 6
  1439                           ;; @@22d5 6
  1440                           ;; @@22d5 6
  1441                           ;; @@22d5 6
  1442                          indin1_ram1                                                ;; @@22d5 6
  1443  22d5 a924                                lda #index1                               ;; @@22d5 6
  1444                          ; bra lda_far_ram1 ;; @@22d7 6
  1445                           ;; @@22d7 6
  1446                          lda_far_ram1                                               ;; @@22d7 6
  1447  22d7 08                                  php                                      ; save .c ;; @@22d7 6
  1448  22d8 db                                  phz                                      ; save registers ;; @@22d8 6
  1449  22d9 da                                  phx                                       ;; @@22d9 6
  1450  22da aa                                  tax                                      ; pointer ;; @@22da 6
  1451  22db ab8500                              ldz var_bank                             ; RAM1 ;; @@22db 6
  1452  22de b501                                lda 1,x                                  ; check to see if pointer points to "common" ;; @@22de 6
  1453  22e0 c920                                cmp #$20                                  ;; @@22e0 6
  1454  22e2 b003                                bcs _local_1005_10                       ; branch if not ;; @@22e2 6
  1455  22e4 ab8400                              ldz text_bank                            ; else select RAM0 ;; @@22e4 6
  1456                           ;; @@22e7 6
  1457  22e7 2074ff             _local_1005_10   jsr _lda_far                             ; LDA (.x),Y from bank .z ;; @@22e7 6
  1458  22ea fa                                  plx                                       ;; @@22ea 6
  1459  22eb fb                                  plz                                       ;; @@22eb 6
  1460  22ec 28                                  plp                                      ; restore .c ;; @@22ec 6
  1461  22ed 29ff                                and #$ff                                 ; set processor status per byte fetched ;; @@22ed 6
  1462  22ef 60                                  rts                                       ;; @@22ef 6
  1463                           ;; @@22f0 6
  1464                          ; .page ;; @@22f0 6
  1465                          ; C65 BASIC Indirect Save Subroutines ;; @@22f0 6
  1466                           ;; @@22f0 6
  1467                          sta_far_ram1                                               ;; @@22f0 7
  1468  22f0 08                                  php                                      ; save registers ;; @@22f0 7
  1469  22f1 db                                  phz                                       ;; @@22f1 7
  1470  22f2 48                                  pha                                       ;; @@22f2 7
  1471  22f3 ab8500                              ldz var_bank                             ; RAM1 ;; @@22f3 7
  1472  22f6 b501                                lda 1,x                                  ; check to see if pointer points to "common" ;; @@22f6 7
  1473  22f8 c920                                cmp #$20                                  ;; @@22f8 7
  1474  22fa b003                                bcs _local_1006_10                       ; branch if not ;; @@22fa 7
  1475  22fc ab8400                              ldz text_bank                            ; else select RAM0 ;; @@22fc 7
  1476                           ;; @@22ff 7
  1477  22ff 68                 _local_1006_10   pla                                       ;; @@22ff 7
  1478  2300 2077ff                              jsr _sta_far                             ; STA (.x),Y to bank .z ;; @@2300 7
  1479  2303 fb                                  plz                                       ;; @@2303 7
  1480  2304 28                                  plp                                       ;; @@2304 7
  1481  2305 60                                  rts                                       ;; @@2305 7
  1482                           ;; @@2306 7
  1483                           ;; @@2306 7
  1484                          sta_far_in1                                               ; [910624] ;; @@2306 8
  1485  2306 a224                                ldx #index1                               ;; @@2306 8
  1486  2308 8002                                bra sta_far_ram0                          ;; @@2308 8
  1487                           ;; @@230a 8
  1488                          sta_far_txt                                                ;; @@230a 8
  1489  230a a23d                                ldx #txtptr                               ;; @@230a 8
  1490                           ;; @@230c 8
  1491                          sta_far_ram0                                               ;; @@230c 8
  1492  230c 08                                  php                                      ; save registers ;; @@230c 8
  1493  230d db                                  phz                                       ;; @@230d 8
  1494  230e ab8400                              ldz text_bank                            ; RAM0 ;; @@230e 8
  1495  2311 2077ff                              jsr _sta_far                             ; STA (.x),Y to bank .z ;; @@2311 8
  1496  2314 fb                                  plz                                       ;; @@2314 8
  1497  2315 28                                  plp                                       ;; @@2315 8
  1498  2316 60                                  rts                                       ;; @@2316 8
  1499                           ;; @@2317 8
  1500                           ;; @@2317 8
  1501                          indcmp_in1                                                ; [910620] ;; @@2317 8
  1502  2317 a224                                ldx #index1                               ;; @@2317 8
  1503  2319 ab8400                              ldz text_bank                            ; RAM0 ;; @@2319 8
  1504  231c 4c7aff                              jmp _cmp_far                             ; STA (.x),Y to bank .z ;; @@231c 8
  1505                           ;; @@231f 8
  1506                          ;.end ;; @@231f 8
  1507                          ; .page ;; @@231f 8
  1508                          ; .subttl Crunch - Tokenization Routine ;; @@231f 8
  1509                           ;; @@231f 8
  1510                          ;        CRUNCH ;; @@231f 8
  1511                          ; ;; @@231f 8
  1512                          ;  Entry:  TXTPTR points to start of text to crunch ;; @@231f 8
  1513                          ;  Exit:   TXTPTR points to start of crunched text ;; @@231f 8
  1514                          ; ;; @@231f 8
  1515                          ;  Calls:  CHRGET ;; @@231f 8
  1516                          ;          CHRGOT ;; @@231f 8
  1517                          ;          RESER ;; @@231f 8
  1518                          ;          KLOOP ;; @@231f 8
  1519                          ;          REM ;; @@231f 8
  1520                          ;          DATA ;; @@231f 8
  1521                          ; ;; @@231f 8
  1522                          ;  CRUNCH collapses all reserved words into tokens.  It removes all graphic ;; @@231f 8
  1523                          ;  characters (characters with msb set) not in quoted strings, DATA or REM ;; @@231f 8
  1524                          ;  statements. ;; @@231f 8
  1525                          ; ;; @@231f 8
  1526                          ;  An escape token is implemented as follows: ;; @@231f 8
  1527                          ; ;; @@231f 8
  1528                          ; As each character on a line of text to be crunched is scanned, an ;; @@231f 8
  1529                          ; indirect jump is performed.  Anyone wishing to scan for their own ;; @@231f 8
  1530                          ; commands should grab off this vector, saving the return vector. ;; @@231f 8
  1531                          ; On entry, if the carry flag is set, it is still up for grabs. ;; @@231f 8
  1532                          ; The current text pointer is at TXTPTR.  If the escape routine ;; @@231f 8
  1533                          ; recognizes the command, it should: ;; @@231f 8
  1534                          ; ;; @@231f 8
  1535                          ;  ) put the length of the reserved word in .y ;; @@231f 8
  1536                          ;  ) put the desired 'second' token in .a ;; @@231f 8
  1537                          ;  ) clear the carry flag ;; @@231f 8
  1538                          ;  ) put type of token in x: 0==>command, ff==>function ;; @@231f 8
  1539                          ; ;; @@231f 8
  1540                          ; If it is not your command, leave .a and the carry flag intact. ;; @@231f 8
  1541                          ; NOTE:  The reserved word must be >= 2 characters long.  Exit through ;; @@231f 8
  1542                          ; the old vector (for daisy chaining).  If the carry flag is clear on ;; @@231f 8
  1543                          ; entry it means someone else before you recognized this command.  In ;; @@231f 8
  1544                          ; this case, just pass control through the old vector. ;; @@231f 8
  1545                           ;; @@231f 8
  1546                           ;; @@231f 8
  1547  231f 6c0403             crunch           jmp (icrnch)                              ;; @@231f 8
  1548                           ;; @@2322 8
  1549                           ;; @@2322 8
  1550  2322 fc3d00             ncrnch           phw txtptr                               ; save old text pointer ;; @@2322 8
  1551                           ;; @@2325 8
  1552  2325 208522             crun05           jsr chrgot                                ;; @@2325 8
  1553  2328 8003                                bra crun20                                ;; @@2328 8
  1554                           ;; @@232a 8
  1555  232a 208322             crun10           jsr chrget                                ;; @@232a 8
  1556                           ;; @@232d 8
  1557                           ;; @@232d 8
  1558  232d 90fb               crun20           bcc crun10                               ; don't crunch numbers ;; @@232d 8
  1559  232f 6c0c03                              jmp (iesclk)                             ; give others a chance at this.  (carry is set) ;; @@232f 8
  1560                           ;; @@2332 8
  1561                          nesclk                                                     ;; @@2332 8
  1562  2332 938d00                              +lbcc _local_1007_130                    ; carry clear if someone wanted it ;; @@2332 8
  1563  2335 c900                                cmp #0                                   ; end of line? ;; @@2335 8
  1564  2337 f078                                beq _local_1007_110                      ; yes ;; @@2337 8
  1565  2339 c93a                                cmp #':'                                 ; multi-stmt char? ;; @@2339 8
  1566  233b f0ed                                beq crun10                               ; yes ;; @@233b 8
  1567  233d c93f                                cmp #'?'                                 ; print ('?') abreviation? ;; @@233d 8
  1568  233f d004                                bne _local_1007_20                       ; no ;; @@233f 8
  1569  2341 a999                                lda #print_token                         ; yes- substitute print token ;; @@2341 8
  1570  2343 8050                                bra _local_1007_90                        ;; @@2343 8
  1571                           ;; @@2345 8
  1572  2345 c980               _local_1007_20   cmp #$80                                 ; graphics? ;; @@2345 8
  1573  2347 900b                                bcc _local_1007_30                       ; no ;; @@2347 8
  1574  2349 c9ff                                cmp #pi                                  ; pi? (special case) ;; @@2349 8
  1575  234b f0dd                                beq crun10                               ; yes, leave alone ;; @@234b 8
  1576  234d a001                                ldy #1                                    ;; @@234d 8
  1577  234f 20de23                              jsr kloop                                ; crunch out graphics ;; @@234f 8
  1578  2352 80d1                                bra crun05                                ;; @@2352 8
  1579                           ;; @@2354 8
  1580                           ;; @@2354 8
  1581  2354 c922               _local_1007_30   cmp #'"'                                 ; quote string? ;; @@2354 8
  1582  2356 d00d                                bne _local_1007_50                       ; no- try escape token ;; @@2356 8
  1583                           ;; @@2358 8
  1584  2358 208322             _local_1007_40   jsr chrget                                ;; @@2358 8
  1585  235b c900                                cmp #0                                   ; end of line? ;; @@235b 8
  1586  235d f052                                beq _local_1007_110                      ; yes ;; @@235d 8
  1587  235f c922                                cmp #'"'                                 ; close quote? ;; @@235f 8
  1588  2361 f0c7                                beq crun10                               ; yes ;; @@2361 8
  1589  2363 80f3                                bra _local_1007_40                       ; no, continue skipping characters ;; @@2363 8
  1590                           ;; @@2365 8
  1591                           ;; @@2365 8
  1592                          ; Crunch escape token ;; @@2365 8
  1593                           ;; @@2365 8
  1594  2365 a926               _local_1007_50   lda #>esc_command_list                   ; look for token in escape-command list ;; @@2365 8
  1595  2367 a029                                ldy #<esc_command_list                    ;; @@2367 8
  1596  2369 20f423                              jsr reser                                 ;; @@2369 8
  1597  236c 9006                                bcc _local_1007_60                       ; not found ;; @@236c 8
  1598  236e a981                                lda #first_esc_command_token+$80-1       ; set up for common escape routine ;; @@236e 8
  1599  2370 a200                                ldx #0                                   ; ..flag 'cmd' type escape ;; @@2370 8
  1600  2372 804c                                bra _local_1007_120                      ; ..and go to it. ;; @@2372 8
  1601                           ;; @@2374 8
  1602  2374 a927               _local_1007_60   lda #>esc_function_list                  ; look for token in escape-function list ;; @@2374 8
  1603  2376 a09a                                ldy #<esc_function_list                   ;; @@2376 8
  1604  2378 20f423                              jsr reser                                 ;; @@2378 8
  1605  237b 9006                                bcc _local_1007_70                       ; not found ;; @@237b 8
  1606  237d a981                                lda #first_esc_function_token+$80-1      ; set up for common escape routine ;; @@237d 8
  1607  237f a2ff                                ldx #$ff                                 ; ..flag 'function' type escape ;; @@237f 8
  1608  2381 803d                                bra _local_1007_120                      ; ..and go to it ;; @@2381 8
  1609                           ;; @@2383 8
  1610  2383 a924               _local_1007_70   lda #>keyword_list                       ; look for token in normal list ;; @@2383 8
  1611  2385 a03a                                ldy #<keyword_list                        ;; @@2385 8
  1612  2387 20f423                              jsr reser                                 ;; @@2387 8
  1613  238a 909e                                bcc crun10                               ; not found ;; @@238a 8
  1614  238c c000                                cpy #0                                   ; anything to move? ;; @@238c 8
  1615  238e f003                                beq _local_1007_80                       ; no ;; @@238e 8
  1616  2390 20de23                              jsr kloop                                ; crunch it out ;; @@2390 8
  1617  2393 a50d               _local_1007_80   lda count                                 ;; @@2393 8
  1618                           ;; @@2395 8
  1619  2395 a000               _local_1007_90   ldy #0                                    ;; @@2395 8
  1620  2397 200a23                              jsr sta_far_txt                          ; put token into text  (bleed-thru) ;; @@2397 8
  1621  239a c98f                                cmp #rem_token                            ;; @@239a 8
  1622  239c f00d                                beq _local_1007_100                       ;; @@239c 8
  1623  239e c983                                cmp #data_token                           ;; @@239e 8
  1624  23a0 d088                                bne crun10                                ;; @@23a0 8
  1625  23a2 208322                              jsr chrget                                ;; @@23a2 8
  1626  23a5 204835                              jsr data                                  ;; @@23a5 8
  1627  23a8 837aff                              +lbra crun05                              ;; @@23a8 8
  1628                           ;; @@23ab 8
  1629  23ab 208322             _local_1007_100  jsr chrget                                ;; @@23ab 8
  1630  23ae 205635                              jsr rem                                   ;; @@23ae 8
  1631                           ;; @@23b1 8
  1632                           ;; @@23b1 8
  1633                          ;  No other statements can follow a REM ;; @@23b1 8
  1634                           ;; @@23b1 8
  1635  23b1 a63d               _local_1007_110  ldx txtptr                                ;; @@23b1 8
  1636  23b3 68                                  pla                                       ;; @@23b3 8
  1637  23b4 853e                                sta txtptr+1                              ;; @@23b4 8
  1638  23b6 68                                  pla                                       ;; @@23b6 8
  1639  23b7 853d                                sta txtptr                                ;; @@23b7 8
  1640  23b9 38                                  sec                                      ; compute length of line ;; @@23b9 8
  1641  23ba 8a                                  txa                                       ;; @@23ba 8
  1642  23bb e53d                                sbc txtptr                                ;; @@23bb 8
  1643  23bd a8                                  tay                                       ;; @@23bd 8
  1644  23be c8                                  iny                                       ;; @@23be 8
  1645  23bf 60                                  rts                                       ;; @@23bf 8
  1646                           ;; @@23c0 8
  1647                           ;; @@23c0 8
  1648                          ; Crunch out old text, install an escape token ;; @@23c0 8
  1649                           ;; @@23c0 8
  1650  23c0 650d               _local_1007_120  adc count                                ; make pointer into a token ;; @@23c0 8
  1651  23c2 48                 _local_1007_130  pha                                      ; save second token ;; @@23c2 8
  1652  23c3 88                                  dey                                      ; waste (# of chars) - 1 ;; @@23c3 8
  1653  23c4 20de23                              jsr kloop                                 ;; @@23c4 8
  1654                           ;; @@23c7 8
  1655                          ; See if this is function (x=ff) or command (x=0) ;; @@23c7 8
  1656                           ;; @@23c7 8
  1657  23c7 a9fe                                lda #esc_command_token                   ; assume command ;; @@23c7 8
  1658  23c9 e8                                  inx                                       ;; @@23c9 8
  1659  23ca d002                                bne _local_1007_140                      ; branch if command ;; @@23ca 8
  1660  23cc a9ce                                lda #esc_function_token                  ; ..else get correct token ;; @@23cc 8
  1661                           ;; @@23ce 8
  1662  23ce a000               _local_1007_140  ldy #0                                    ;; @@23ce 8
  1663  23d0 200a23                              jsr sta_far_txt                          ; install escape token... (bleed-thru) ;; @@23d0 8
  1664  23d3 c8                                  iny                                       ;; @@23d3 8
  1665  23d4 68                                  pla                                       ;; @@23d4 8
  1666  23d5 200a23                              jsr sta_far_txt                          ; ..and second token  (bleed-thru) ;; @@23d5 8
  1667  23d8 208322                              jsr chrget                               ; skip over token, ;; @@23d8 8
  1668  23db 834cff                              +lbra crun10                             ; ..and continue with line. ;; @@23db 8
  1669                           ;; @@23de 8
  1670                          ; .page ;; @@23de 8
  1671                          ;      KLOOP ;; @@23de 8
  1672                          ; ;; @@23de 8
  1673                          ;  Crunch loop.  Moves offset .y characters from txtptr to end of line. ;; @@23de 8
  1674                          ;  .x is preserved ;; @@23de 8
  1675                           ;; @@23de 8
  1676  23de 18                 kloop            clc                                      ; compute source address ;; @@23de 9
  1677  23df 98                                  tya                                       ;; @@23df 9
  1678  23e0 653d                                adc txtptr                                ;; @@23e0 9
  1679  23e2 8524                                sta index1                                ;; @@23e2 9
  1680  23e4 a53e                                lda txtptr+1                              ;; @@23e4 9
  1681  23e6 6900                                adc #0                                    ;; @@23e6 9
  1682  23e8 8525                                sta index1+1                              ;; @@23e8 9
  1683  23ea a0ff                                ldy #$ff                                  ;; @@23ea 9
  1684                           ;; @@23ec 9
  1685  23ec c8                 _local_1008_10   iny                                       ;; @@23ec 9
  1686  23ed b124                                lda (index1),y                           ; move source..  ????assumes text in common area ;; @@23ed 9
  1687  23ef 913d                                sta (txtptr),y                           ; to destination offset ????assumes text in common area ;; @@23ef 9
  1688  23f1 d0f9                                bne _local_1008_10                       ; not end of line ;; @@23f1 9
  1689  23f3 60                                  rts                                       ;; @@23f3 9
  1690                           ;; @@23f4 9
  1691                          ; .page ;; @@23f4 9
  1692                          ;      RESER ;; @@23f4 9
  1693                          ; ;; @@23f4 9
  1694                          ;  Search reserved word list for a match ;; @@23f4 9
  1695                          ; ;; @@23f4 9
  1696                          ;  Entry:  (txtptr) is first char of word to match ;; @@23f4 9
  1697                          ;    (y,a) is start of table to check ;; @@23f4 9
  1698                          ; ;; @@23f4 9
  1699                          ;  Exit:   .y  length of word matched ;; @@23f4 9
  1700                          ;    .c  success/fail (set/clear) flag ;; @@23f4 9
  1701                          ;    count token value ;; @@23f4 9
  1702                           ;; @@23f4 9
  1703  23f4 8525               reser            sta index1+1                              ;; @@23f4 10
  1704  23f6 8424                                sty index1                                ;; @@23f6 10
  1705  23f8 a000                                ldy #0                                    ;; @@23f8 10
  1706  23fa 840d                                sty count                                 ;; @@23fa 10
  1707  23fc 88                                  dey                                       ;; @@23fc 10
  1708  23fd c8                 _local_1009_10   iny                                       ;; @@23fd 10
  1709  23fe b13d               _local_1009_20   lda (txtptr),y                           ; assumes common memory ;; @@23fe 10
  1710  2400 3029                                bmi _local_1009_70                       ; abrieviation    [900510] ;; @@2400 10
  1711  2402 38                                  sec                                       ;; @@2402 10
  1712  2403 f124                                sbc (index1),y                           ; does letter match? (ind.ok) ;; @@2403 10
  1713  2405 f0f6                                beq _local_1009_10                       ; yes...continue ;; @@2405 10
  1714  2407 c980                                cmp #$80                                 ; end of word? ;; @@2407 10
  1715  2409 f01b                                beq _local_1009_60                       ; yes...c set...done ;; @@2409 10
  1716                           ;; @@240b 10
  1717                           ;; @@240b 10
  1718                          ;  find next word ;; @@240b 10
  1719                           ;; @@240b 10
  1720  240b b124               _local_1009_30   lda (index1),y                           ; ind.ok ;; @@240b 10
  1721  240d 3003                                bmi _local_1009_40                       ; found end of current ;; @@240d 10
  1722  240f c8                                  iny                                       ;; @@240f 10
  1723  2410 d0f9                                bne _local_1009_30                        ;; @@2410 10
  1724  2412 c8                 _local_1009_40   iny                                      ; start of next ;; @@2412 10
  1725  2413 e60d                                inc count                                ; value of token ;; @@2413 10
  1726  2415 18                                  clc                                       ;; @@2415 10
  1727  2416 98                                  tya                                       ;; @@2416 10
  1728  2417 6524                                adc index1                                ;; @@2417 10
  1729  2419 8524                                sta index1                                ;; @@2419 10
  1730  241b 9002                                bcc _local_1009_50                        ;; @@241b 10
  1731  241d e625                                inc index1+1                              ;; @@241d 10
  1732  241f 18                 _local_1009_50   clc                                       ;; @@241f 10
  1733  2420 a000                                ldy #0                                    ;; @@2420 10
  1734  2422 b124                                lda (index1),y                           ; end of list? ind.ok ;; @@2422 10
  1735  2424 d0d8                                bne _local_1009_20                       ; no ;; @@2424 10
  1736                           ;; @@2426 10
  1737                           ;; @@2426 10
  1738                          ;  yes...carry clear...fail ;; @@2426 10
  1739                           ;; @@2426 10
  1740  2426 050d               _local_1009_60   ora count                                ; .a=$80 if match ;; @@2426 10
  1741  2428 850d                                sta count                                ; token is formed ;; @@2428 10
  1742  242a 60                                  rts                                       ;; @@242a 10
  1743                           ;; @@242b 10
  1744                           ;; @@242b 10
  1745                          ; special case- last character is shifted (necessary for 'diR' compatibility) ;; @@242b 10
  1746                           ;; @@242b 10
  1747  242b 38                 _local_1009_70   sec                                      ; allow last chr to be shifted   [900510] ;; @@242b 10
  1748  242c f124                                sbc (index1),y                           ; does letter match? (ind.ok) ;; @@242c 10
  1749  242e f006                                beq _local_1009_80                       ; yes- end of word ;; @@242e 10
  1750  2430 c980                                cmp #$80                                 ; end of word? ;; @@2430 10
  1751  2432 f0f2                                beq _local_1009_60                       ; yes ;; @@2432 10
  1752  2434 d0d5                                bne _local_1009_30                       ; no- next word ;; @@2434 10
  1753                           ;; @@2436 10
  1754  2436 a980               _local_1009_80   lda #$80                                 ; last chr is shifted & so is end of current word ;; @@2436 10
  1755  2438 80ec                                bra _local_1009_60                        ;; @@2438 10
  1756                           ;; @@243a 10
  1757                          ;.end ;; @@243a 10
  1758                          ; .page ;; @@243a 10
  1759                          ; .subttl Non-Escape Keyword List ;; @@243a 10
  1760                           ;; @@243a 10
  1761                          keyword_list                                               ;; @@243a 11
  1762  243a 454ec4                              !text "EN",'D'+$80                       ; $80 ;; @@243a 11
  1763  243d 464fd2                              !text "FO",'R'+$80                       ; $81 ;; @@243d 11
  1764  2440 4e4558d4                            !text "NEX",'T'+$80                      ; $82 ;; @@2440 11
  1765  2444 444154c1                            !text "DAT",'A'+$80                      ; $83 ;; @@2444 11
  1766  2448 494e505554a3                        !text "INPUT",'#'+$80                    ; $84 ;; @@2448 11
  1767  244e 494e5055d4                          !text "INPU",'T'+$80                     ; $85 ;; @@244e 11
  1768  2453 4449cd                              !text "DI",'M'+$80                       ; $86 ;; @@2453 11
  1769  2456 524541c4                            !text "REA",'D'+$80                      ; $87 ;; @@2456 11
  1770  245a 4c45d4                              !text "LE",'T'+$80                       ; $88 ;; @@245a 11
  1771  245d 474f54cf                            !text "GOT",'O'+$80                      ; $89 ;; @@245d 11
  1772  2461 5255ce                              !text "RU",'N'+$80                       ; $8A ;; @@2461 11
  1773  2464 49c6                                !text "I",'F'+$80                        ; $8B ;; @@2464 11
  1774  2466 524553544f52c5                      !text "RESTOR",'E'+$80                   ; $8C ;; @@2466 11
  1775  246d 474f5355c2                          !text "GOSU",'B'+$80                     ; $8D ;; @@246d 11
  1776  2472 5245545552ce                        !text "RETUR",'N'+$80                    ; $8E ;; @@2472 11
  1777  2478 5245cd                              !text "RE",'M'+$80                       ; $8F ;; @@2478 11
  1778  247b 53544fd0                            !text "STO",'P'+$80                      ; $90 ;; @@247b 11
  1779  247f 4fce                                !text "O",'N'+$80                        ; $91 ;; @@247f 11
  1780  2481 574149d4                            !text "WAI",'T'+$80                      ; $92 ;; @@2481 11
  1781  2485 4c4f41c4                            !text "LOA",'D'+$80                      ; $93 ;; @@2485 11
  1782  2489 534156c5                            !text "SAV",'E'+$80                      ; $94 ;; @@2489 11
  1783  248d 5645524946d9                        !text "VERIF",'Y'+$80                    ; $95 ;; @@248d 11
  1784  2493 4445c6                              !text "DE",'F'+$80                       ; $96 ;; @@2493 11
  1785  2496 504f4bc5                            !text "POK",'E'+$80                      ; $97 ;; @@2496 11
  1786  249a 5052494e54a3                        !text "PRINT",'#'+$80                    ; $98 ;; @@249a 11
  1787  24a0 5052494ed4                          !text "PRIN",'T'+$80                     ; $99 ;; @@24a0 11
  1788  24a5 434f4ed4                            !text "CON",'T'+$80                      ; $9A ;; @@24a5 11
  1789  24a9 4c4953d4                            !text "LIS",'T'+$80                      ; $9B ;; @@24a9 11
  1790  24ad 434cd2                              !text "CL",'R'+$80                       ; $9C ;; @@24ad 11
  1791  24b0 434dc4                              !text "CM",'D'+$80                       ; $9D ;; @@24b0 11
  1792  24b3 5359d3                              !text "SY",'S'+$80                       ; $9E ;; @@24b3 11
  1793  24b6 4f5045ce                            !text "OPE",'N'+$80                      ; $9F ;; @@24b6 11
  1794  24ba 434c4f53c5                          !text "CLOS",'E'+$80                     ; $A0 ;; @@24ba 11
  1795  24bf 4745d4                              !text "GE",'T'+$80                       ; $A1 ;; @@24bf 11
  1796  24c2 4e45d7                              !text "NE",'W'+$80                       ; $A2 ;; @@24c2 11
  1797  24c5 544142a8                            !text "TAB",'('+$80                      ; $A3 ;; @@24c5 11
  1798  24c9 54cf                                !text "T",'O'+$80                        ; $A4 ;; @@24c9 11
  1799  24cb 46ce                                !text "F",'N'+$80                        ; $A5 ;; @@24cb 11
  1800  24cd 535043a8                            !text "SPC",'('+$80                      ; $A6 ;; @@24cd 11
  1801  24d1 544845ce                            !text "THE",'N'+$80                      ; $A7 ;; @@24d1 11
  1802  24d5 4e4fd4                              !text "NO",'T'+$80                       ; $A8 ;; @@24d5 11
  1803  24d8 535445d0                            !text "STE",'P'+$80                      ; $A9 ;; @@24d8 11
  1804  24dc ab                                  !text '+'+$80                            ; $AA operators ;; @@24dc 11
  1805  24dd ad                                  !text '-'+$80                            ; $AB ;; @@24dd 11
  1806  24de aa                                  !text '*'+$80                            ; $AC ;; @@24de 11
  1807  24df af                                  !text '/'+$80                            ; $AD ;; @@24df 11
  1808  24e0 de                                  !text '^'+$80                            ; $AE ;; @@24e0 11
  1809  24e1 414ec4                              !text "AN",'D'+$80                       ; $AF ;; @@24e1 11
  1810  24e4 4fd2                                !text "O",'R'+$80                        ; $B0 ;; @@24e4 11
  1811  24e6 be                                  !text '>'+$80                            ; $B1 ;; @@24e6 11
  1812  24e7 bd                                  !text '='+$80                            ; $B2 ;; @@24e7 11
  1813  24e8 bc                                  !text '<'+$80                            ; $B3 ;; @@24e8 11
  1814  24e9 5347ce                              !text "SG",'N'+$80                       ; $B4 first numeric function ;; @@24e9 11
  1815  24ec 494ed4                              !text "IN",'T'+$80                       ; $B5 ;; @@24ec 11
  1816  24ef 4142d3                              !text "AB",'S'+$80                       ; $B6 ;; @@24ef 11
  1817  24f2 5553d2                              !text "US",'R'+$80                       ; $B7 ;; @@24f2 11
  1818  24f5 4652c5                              !text "FR",'E'+$80                       ; $B8 ;; @@24f5 11
  1819  24f8 504fd3                              !text "PO",'S'+$80                       ; $B9 ;; @@24f8 11
  1820  24fb 5351d2                              !text "SQ",'R'+$80                       ; $BA ;; @@24fb 11
  1821  24fe 524ec4                              !text "RN",'D'+$80                       ; $BB ;; @@24fe 11
  1822  2501 4c4fc7                              !text "LO",'G'+$80                       ; $BC ;; @@2501 11
  1823  2504 4558d0                              !text "EX",'P'+$80                       ; $BD ;; @@2504 11
  1824  2507 434fd3                              !text "CO",'S'+$80                       ; $BE ;; @@2507 11
  1825  250a 5349ce                              !text "SI",'N'+$80                       ; $BF ;; @@250a 11
  1826  250d 5441ce                              !text "TA",'N'+$80                       ; $C0 ;; @@250d 11
  1827  2510 4154ce                              !text "AT",'N'+$80                       ; $C1 ;; @@2510 11
  1828  2513 504545cb                            !text "PEE",'K'+$80                      ; $C2 ;; @@2513 11
  1829  2517 4c45ce                              !text "LE",'N'+$80                       ; $C3 ;; @@2517 11
  1830  251a 535452a4                            !text "STR",'$'+$80                      ; $C4 ;; @@251a 11
  1831  251e 5641cc                              !text "VA",'L'+$80                       ; $C5 ;; @@251e 11
  1832  2521 4153c3                              !text "AS",'C'+$80                       ; $C6 last numeric function ;; @@2521 11
  1833  2524 434852a4                            !text "CHR",'$'+$80                      ; $C7 last single-arg function ;; @@2524 11
  1834  2528 4c454654a4                          !text "LEFT",'$'+$80                     ; $C8 ;; @@2528 11
  1835  252d 5249474854a4                        !text "RIGHT",'$'+$80                    ; $C9 ;; @@252d 11
  1836  2533 4d4944a4                            !text "MID",'$'+$80                      ; $CA ;; @@2533 11
  1837  2537 47cf                                !text "G",'O'+$80                        ; $CB ;; @@2537 11
  1838                          ; beginning of new C128 keywords------------ ;; @@2539 11
  1839  2539 52475241504849c3                    !text "RGRAPHI",'C'+$80                  ; $CC was 'rgr'   [910701] ;; @@2539 11
  1840  2541 52434f4c4fd2                        !text "RCOLO",'R'+$80                    ; $CD was 'rclr'   [910701] ;; @@2541 11
  1841  2547 80                                  !text $80                                ; $CE null to skip over escape_function token ;; @@2547 11
  1842  2548 4a4fd9                              !text "JO",'Y'+$80                       ; $CF ;; @@2548 11
  1843  254b 525045ce                            !text "RPE",'N'+$80                      ; $D0 (was rdot in c128) ;; @@254b 11
  1844  254f 4445c3                              !text "DE",'C'+$80                       ; $D1 ;; @@254f 11
  1845  2552 484558a4                            !text "HEX",'$'+$80                      ; $D2 ;; @@2552 11
  1846  2556 455252a4                            !text "ERR",'$'+$80                      ; $D3 ;; @@2556 11
  1847  255a 494e5354d2                          !text "INST",'R'+$80                     ; $D4 last function ;; @@255a 11
  1848                           ;; @@255f 11
  1849  255f 454c53c5                            !text "ELS",'E'+$80                      ; $D5 ;; @@255f 11
  1850  2563 524553554dc5                        !text "RESUM",'E'+$80                    ; $D6 ;; @@2563 11
  1851  2569 545241d0                            !text "TRA",'P'+$80                      ; $D7 ;; @@2569 11
  1852  256d 54524fce                            !text "TRO",'N'+$80                      ; $D8 ;; @@256d 11
  1853  2571 54524f46c6                          !text "TROF",'F'+$80                     ; $D9 ;; @@2571 11
  1854  2576 534f554ec4                          !text "SOUN",'D'+$80                     ; $DA ;; @@2576 11
  1855  257b 564fcc                              !text "VO",'L'+$80                       ; $DB ;; @@257b 11
  1856  257e 415554cf                            !text "AUT",'O'+$80                      ; $DC ;; @@257e 11
  1857  2582 50554445c6                          !text "PUDE",'F'+$80                     ; $DD ;; @@2582 11
  1858  2587 475241504849c3                      !text "GRAPHI",'C'+$80                   ; $DE ;; @@2587 11
  1859  258e 5041494ed4                          !text "PAIN",'T'+$80                     ; $DF ;; @@258e 11
  1860  2593 434841d2                            !text "CHA",'R'+$80                      ; $E0 ;; @@2593 11
  1861  2597 424fd8                              !text "BO",'X'+$80                       ; $E1 ;; @@2597 11
  1862  259a 434952434cc5                        !text "CIRCL",'E'+$80                    ; $E2 ;; @@259a 11
  1863  25a0 50415354c5                          !text "PAST",'E'+$80                     ; $E3 (was gshape in C128) ;; @@25a0 11
  1864  25a5 4355d4                              !text "CU",'T'+$80                       ; $E4 (was sshape in C128) ;; @@25a5 11
  1865  25a8 4c494ec5                            !text "LIN",'E'+$80                      ; $E5 (was draw in C128) ;; @@25a8 11
  1866  25ac 4c4f434154c5                        !text "LOCAT",'E'+$80                    ; $E6 ;; @@25ac 11
  1867  25b2 434f4c4fd2                          !text "COLO",'R'+$80                     ; $E7 ;; @@25b2 11
  1868  25b7 53434e434cd2                        !text "SCNCL",'R'+$80                    ; $E8 ;; @@25b7 11
  1869  25bd 5343414cc5                          !text "SCAL",'E'+$80                     ; $E9 ;; @@25bd 11
  1870  25c2 48454cd0                            !text "HEL",'P'+$80                      ; $EA ;; @@25c2 11
  1871  25c6 44cf                                !text "D",'O'+$80                        ; $EB ;; @@25c6 11
  1872  25c8 4c4f4fd0                            !text "LOO",'P'+$80                      ; $EC ;; @@25c8 11
  1873  25cc 455849d4                            !text "EXI",'T'+$80                      ; $ED ;; @@25cc 11
  1874  25d0 4449d2                              !text "DI",'R'+$80                       ; $EE ;; @@25d0 11
  1875  25d3 44534156c5                          !text "DSAV",'E'+$80                     ; $EF ;; @@25d3 11
  1876  25d8 444c4f41c4                          !text "DLOA",'D'+$80                     ; $F0 ;; @@25d8 11
  1877  25dd 4845414445d2                        !text "HEADE",'R'+$80                    ; $F1 ;; @@25dd 11
  1878  25e3 534352415443c8                      !text "SCRATC",'H'+$80                   ; $F2 ;; @@25e3 11
  1879  25ea 434f4c4c4543d4                      !text "COLLEC",'T'+$80                   ; $F3 ;; @@25ea 11
  1880  25f1 434f50d9                            !text "COP",'Y'+$80                      ; $F4 ;; @@25f1 11
  1881  25f5 52454e414dc5                        !text "RENAM",'E'+$80                    ; $F5 ;; @@25f5 11
  1882  25fb 4241434b55d0                        !text "BACKU",'P'+$80                    ; $F6 ;; @@25fb 11
  1883  2601 44454c4554c5                        !text "DELET",'E'+$80                    ; $F7 ;; @@2601 11
  1884  2607 52454e554d4245d2                    !text "RENUMBE",'R'+$80                  ; $F8 ;; @@2607 11
  1885  260f 4b45d9                              !text "KE",'Y'+$80                       ; $F9 ;; @@260f 11
  1886  2612 4d4f4e49544fd2                      !text "MONITO",'R'+$80                   ; $FA ;; @@2612 11
  1887  2619 5553494ec7                          !text "USIN",'G'+$80                     ; $FB ;; @@2619 11
  1888  261e 554e5449cc                          !text "UNTI",'L'+$80                     ; $FC ;; @@261e 11
  1889  2623 5748494cc5                          !text "WHIL",'E'+$80                     ; $FD ;; @@2623 11
  1890  2628 00                                  !text 0                                  ; $FE skip over the escape_command token ;; @@2628 11
  1891                           ;; @@2629 11
  1892                          ;.end ;; @@2629 11
  1893                           ;; @@2629 11
  1894                          ; .page ;; @@2629 11
  1895                          ; .subttl Escape Tokens and Keywords ;; @@2629 11
  1896                           ;; @@2629 11
  1897                          ; Escape Command Tokens ;; @@2629 11
  1898                           ;; @@2629 11
  1899                          esc_command_list                                           ;; @@2629 11
  1900  2629 42414ecb                            !text "BAN",'K'+$80                      ; $02: set bank number ;; @@2629 11
  1901  262d 46494c5445d2                        !text "FILTE",'R'+$80                    ; $03: set up filter ;; @@262d 11
  1902  2633 504c41d9                            !text "PLA",'Y'+$80                      ; $04: play a tune ;; @@2633 11
  1903  2637 54454d50cf                          !text "TEMP",'O'+$80                     ; $05: set rate for playing ;; @@2637 11
  1904  263c 4d4f565350d2                        !text "MOVSP",'R'+$80                    ; $06: sprite position/movement ;; @@263c 11
  1905  2642 5350524954c5                        !text "SPRIT",'E'+$80                    ; $07: turn on/set up sprite ;; @@2642 11
  1906  2648 535052434f4c4fd2                    !text "SPRCOLO",'R'+$80                  ; $08: set sprite multicolor registers ;; @@2648 11
  1907  2650 525245c7                            !text "RRE",'G'+$80                      ; $09: retreive register values after 'SYS' ;; @@2650 11
  1908  2654 454e56454c4f50c5                    !text "ENVELOP",'E'+$80                  ; $0A: set up SID envelopes ;; @@2654 11
  1909  265c 534c4545d0                          !text "SLEE",'P'+$80                     ; $0B: delay ;; @@265c 11
  1910  2661 434154414c4fc7                      !text "CATALO",'G'+$80                   ; $0C: disk directory ;; @@2661 11
  1911  2668 444f5045ce                          !text "DOPE",'N'+$80                     ; $0D: open a disk file ;; @@2668 11
  1912  266d 415050454ec4                        !text "APPEN",'D'+$80                    ; $0E: open a disk file for appending ;; @@266d 11
  1913  2673 44434c4f53c5                        !text "DCLOS",'E'+$80                    ; $0F: close a file opened w/ DOPEN ;; @@2673 11
  1914  2679 42534156c5                          !text "BSAV",'E'+$80                     ; $10: binary (non-program) save ;; @@2679 11
  1915  267e 424c4f41c4                          !text "BLOA",'D'+$80                     ; $11: binary load ;; @@267e 11
  1916  2683 5245434f52c4                        !text "RECOR",'D'+$80                    ; $12: ;; @@2683 11
  1917  2689 434f4e4341d4                        !text "CONCA",'T'+$80                    ; $13: concatenate 2 files ;; @@2689 11
  1918  268f 445645524946d9                      !text "DVERIF",'Y'+$80                   ; $14: verify a saved program ;; @@268f 11
  1919  2696 44434c4541d2                        !text "DCLEA",'R'+$80                    ; $15: re-initialize a drive ;; @@2696 11
  1920  269c 5350525341d6                        !text "SPRSA",'V'+$80                    ; $16: sprite/string to sprite/string ;; @@269c 11
  1921  26a2 434f4c4c4953494f...                 !text "COLLISIO",'N'+$80                 ; $17: set traps for sprite & light pen collisions ;; @@26a2 11
  1922  26ab 42454749ce                          !text "BEGI",'N'+$80                     ; $18: mark start of a b-block ;; @@26ab 11
  1923  26b0 42454ec4                            !text "BEN",'D'+$80                      ; $19: ..and its end, too! ;; @@26b0 11
  1924  26b4 57494e444fd7                        !text "WINDO",'W'+$80                    ; $1A: set screen window ;; @@26b4 11
  1925  26ba 424f4fd4                            !text "BOO",'T'+$80                      ; $1B: load&run ML or autoboot a disk ;; @@26ba 11
  1926  26be 57494454c8                          !text "WIDT",'H'+$80                     ; $1C: single/double width drawing ;; @@26be 11
  1927  26c3 5350524445c6                        !text "SPRDE",'F'+$80                    ; $1D: define a sprite ;; @@26c3 11
  1928  26c9 515549d4                            !text "QUI",'T'+$80                      ; $1E: (UNIMPLEMENTED) ;; @@26c9 11
  1929  26cd 444dc1                              !text "DM",'A'+$80                       ; $1F: access memory ;; @@26cd 11
  1930  26d0 a0                                  !text ' '+$80                            ; $20: POISON - space character ;; @@26d0 11
  1931  26d1 444dc1                              !text "DM",'A'+$80                       ; $21: access memory ;; @@26d1 11
  1932  26d4 a0                                  !text ' '+$80                            ; $22: POISON - quote character ;; @@26d4 11
  1933  26d5 444dc1                              !text "DM",'A'+$80                       ; $23: access memory ;; @@26d5 11
  1934  26d8 4f46c6                              !text "OF",'F'+$80                       ; $24: KEY OFF ;; @@26d8 11
  1935  26db 464153d4                            !text "FAS",'T'+$80                      ; $25: go to 2 MHz. mode ;; @@26db 11
  1936  26df 534c4fd7                            !text "SLO",'W'+$80                      ; $26: go to 1 MHz. mode ;; @@26df 11
  1937  26e3 545950c5                            !text "TYP",'E'+$80                      ; $27: type SEQ file ;; @@26e3 11
  1938  26e7 425645524946d9                      !text "BVERIF",'Y'+$80                   ; $28: verify a saved program ;; @@26e7 11
  1939  26ee 4543544f52d9                        !text "ECTOR",'Y'+$80                    ; $29: dirECTORY ;; @@26ee 11
  1940  26f4 45524153c5                          !text "ERAS",'E'+$80                     ; $2A: alias for scratch ;; @@26f4 11
  1941  26f9 46494ec4                            !text "FIN",'D'+$80                      ; $2B: find string ;; @@26f9 11
  1942  26fd 4348414e47c5                        !text "CHANG",'E'+$80                    ; $2C: change string ;; @@26fd 11
  1943  2703 5345d4                              !text "SE",'T'+$80                       ; $2D: ;; @@2703 11
  1944  2706 5343524545ce                        !text "SCREE",'N'+$80                    ; $2E: ;; @@2706 11
  1945  270c 504f4c59474fce                      !text "POLYGO",'N'+$80                   ; $2F: ;; @@270c 11
  1946  2713 454c4c495053c5                      !text "ELLIPS",'E'+$80                   ; $30: ;; @@2713 11
  1947  271a 56494557504f52d4                    !text "VIEWPOR",'T'+$80                  ; $31: ;; @@271a 11
  1948  2722 47434f50d9                          !text "GCOP",'Y'+$80                     ; $32: ;; @@2722 11
  1949  2727 5045ce                              !text "PE",'N'+$80                       ; $33: ;; @@2727 11
  1950  272a 50414c455454c5                      !text "PALETT",'E'+$80                   ; $34: ;; @@272a 11
  1951  2731 444d4f44c5                          !text "DMOD",'E'+$80                     ; $35: ;; @@2731 11
  1952  2736 445041d4                            !text "DPA",'T'+$80                      ; $36: ;; @@2736 11
  1953  273a 464f524d41d4                        !text "FORMA",'T'+$80                    ; $37: alias for HEADER command  [911017] ;; @@273a 11
  1954  2740 47454e4c4f43cb                      !text "GENLOC",'K'+$80                   ; $38:     [910108] ;; @@2740 11
  1955  2747 464f524547524f55...                 !text "FOREGROUN",'D'+$80                ; $39:     [910109] ;; @@2747 11
  1956  2751 a0                                  !text ' '+$80                            ; $3A: POISON - colon character  " ;; @@2751 11
  1957  2752 4241434b47524f55...                 !text "BACKGROUN",'D'+$80                ; $3B:     " ;; @@2752 11
  1958  275c 424f524445d2                        !text "BORDE",'R'+$80                    ; $3C:     " ;; @@275c 11
  1959  2762 484947484c494748...                 !text "HIGHLIGH",'T'+$80                 ; $3D:     " ;; @@2762 11
  1960  276b 4d4f5553c5                          !text "MOUS",'E'+$80                     ; $3E:     [910122] ;; @@276b 11
  1961  2770 524d4f5553c5                        !text "RMOUS",'E'+$80                    ; $3F: return coordinates of mouse [910123] ;; @@2770 11
  1962  2776 444953cb                            !text "DIS",'K'+$80                      ; $40:     [910123] ;; @@2776 11
  1963  277a 435552534fd2                        !text "CURSO",'R'+$80                    ; $41:     [910228] ;; @@277a 11
  1964  2780 52435552534fd2                      !text "RCURSO",'R'+$80                   ; $42: return cursor position  [910228] ;; @@2780 11
  1965  2787 4c4f41444946c6                      !text "LOADIF",'F'+$80                   ; $43: load IFF picture from disk [910402] ;; @@2787 11
  1966  278e 534156454946c6                      !text "SAVEIF",'F'+$80                   ; $44: save IFF picture to   disk [910402] ;; @@278e 11
  1967  2795 454449d4                            !text "EDI",'T'+$80                      ; $45: Edit mode on/off   [910620] ;; @@2795 11
  1968                           ;; @@2799 11
  1969  2799 00                                  !text 0                                  ; End marker ;; @@2799 11
  1970                          ;(don't forget to change last_command_token!) ;; @@279a 11
  1971                          ; .page ;; @@279a 11
  1972                          ; Escape Function Tokens ;; @@279a 11
  1973                           ;; @@279a 11
  1974                          esc_function_list                                           ;; @@279a 11
  1975  279a 504fd4                              !text "PO",'T'+$80                       ; $02: return paddle value ;; @@279a 11
  1976  279d 42554dd0                            !text "BUM",'P'+$80                      ; $03: read sprite collision ;; @@279d 11
  1977  27a1 4c5045ce                            !text "LPE",'N'+$80                      ; $04: read light pen value ;; @@27a1 11
  1978  27a5 525350504fd3                        !text "RSPPO",'S'+$80                    ; $05: read sprite position ;; @@27a5 11
  1979  27ab 525350524954c5                      !text "RSPRIT",'E'+$80                   ; $06: read sprite value ;; @@27ab 11
  1980  27b2 525350434f4c4fd2                    !text "RSPCOLO",'R'+$80                  ; $07: read sprite multicolor value ;; @@27b2 11
  1981  27ba 584fd2                              !text "XO",'R'+$80                       ; $08: exclusive or ;; @@27ba 11
  1982  27bd 5257494e444fd7                      !text "RWINDO",'W'+$80                   ; $09: read window size ;; @@27bd 11
  1983  27c4 504f494e5445d2                      !text "POINTE",'R'+$80                   ; $0a: return address of descriptor ;; @@27c4 11
  1984  27cb 4d4fc4                              !text "MO",'D'+$80                       ; $0b: modulus    [910402] ;; @@27cb 11
  1985  27ce 50495845cc                          !text "PIXE",'L'+$80                     ; $0c: return BP data at pixel  [910820] ;; @@27ce 11
  1986  27d3 5250414c455454c5                    !text "RPALETT",'E'+$80                  ; $0d: return RGB component of color [910820] ;; @@27d3 11
  1987  27db 00                                  !text 0                                   ;; @@27db 11
  1988                           ;; @@27dc 11
  1989                          ;.end ;; @@27dc 11
  1990                          ; .page ;; @@27dc 11
  1991                          ; .subttl Jump Table For Dispatch Routine ;; @@27dc 11
  1992                          stmdsp                                                     ;; @@27dc 11
  1993  27dc dc2c                                !word end-1                               ;; @@27dc 11
  1994  27de 5c41                                !word for-1                               ;; @@27de 11
  1995  27e0 743a                                !word next-1                              ;; @@27e0 11
  1996  27e2 4735                                !word data-1                              ;; @@27e2 11
  1997  27e4 a138                                !word inputn-1                            ;; @@27e4 11
  1998  27e6 bf38                                !word input-1                             ;; @@27e6 11
  1999  27e8 f33a                                !word dim-1                               ;; @@27e8 11
  2000  27ea 0f39                                !word read-1                              ;; @@27ea 11
  2001  27ec 7536                                !word let-1                               ;; @@27ec 11
  2002  27ee fa3c                                !word goto-1                              ;; @@27ee 11
  2003  27f0 b33d                                !word run-1                               ;; @@27f0 11
  2004  27f2 7d35                                !word if-1                                ;; @@27f2 11
  2005  27f4 e63d                                !word restor-1                            ;; @@27f4 11
  2006  27f6 eb3c                                !word gosub-1                             ;; @@27f6 11
  2007  27f8 2c35                                !word return-1                            ;; @@27f8 11
  2008  27fa 5535                                !word rem-1                               ;; @@27fa 11
  2009  27fc da2c                                !word stop-1                              ;; @@27fc 11
  2010  27fe 5436                                !word ongoto-1                            ;; @@27fe 11
  2011  2800 e654                                !word wait-1                              ;; @@2800 11
  2012  2802 8968                                !word load-1                              ;; @@2802 11
  2013  2804 6168                                !word save-1                              ;; @@2804 11
  2014  2806 8668                                !word verify-1                            ;; @@2806 11
  2015  2808 f458                                !word def-1                               ;; @@2808 11
  2016  280a ed55                                !word poke-1                              ;; @@280a 11
  2017  280c a737                                !word printn-1                            ;; @@280c 11
  2018  280e c837                                !word print-1                             ;; @@280e 11
  2019  2810 793d                                !word cont-1                              ;; @@2810 11
  2020  2812 8932                                !word list-1                              ;; @@2812 11
  2021  2814 a534                                !word clear-1                             ;; @@2814 11
  2022  2816 ad37                                !word cmd-1                               ;; @@2816 11
  2023  2818 fd3a                                !word sys-1                               ;; @@2818 11
  2024  281a 0069                                !word open-1                              ;; @@281a 11
  2025  281c 0869                                !word close-1                             ;; @@281c 11
  2026  281e 6638                                !word get-1                               ;; @@281e 11
  2027  2820 5434                                !word new-1                               ;; @@2820 11
  2028                           ;; @@2822 11
  2029  2822 4236                                !word else-1                              ;; @@2822 11
  2030  2824 6744                                !word resume-1                            ;; @@2824 11
  2031  2826 5544                                !word trap-1                              ;; @@2826 11
  2032  2828 993b                                !word tron-1                              ;; @@2828 11
  2033  282a 9c3b                                !word troff-1                             ;; @@282a 11
  2034  282c 7c4b                                !word sound-1                             ;; @@282c 11
  2035  282e 454b                                !word volume-1                            ;; @@282e 11
  2036  2830 593c                                !word auto-1                              ;; @@2830 11
  2037  2832 4144                                !word puctrl-1                            ;; @@2832 11
  2038  2834 bf7f                                !word graphic-1                           ;; @@2834 11
  2039                           ;; @@2836 11
  2040  2836 5ab3                                !word C65__paint-1                        ;; @@2836 11
  2041  2838 efb2                                !word C65__char-1                         ;; @@2838 11
  2042  283a 06b1                                !word C65__box-1                          ;; @@283a 11
  2043  283c 5ab1                                !word C65__circle-1                       ;; @@283c 11
  2044  283e 4fb4                                !word C65__paste-1                       ; gshape ;; @@283e 11
  2045  2840 4fb4                                !word C65__cut-1                         ; sshape ;; @@2840 11
  2046  2842 b1b0                                !word C65__line-1                        ; draw ;; @@2842 11
  2047                           ;; @@2844 11
  2048  2844 3a2e                                !word bad_command-1                      ; escape - SYSTEM - unimplemented command ;; @@2844 11
  2049                          ; .word  locate-1 ;; @@2846 11
  2050                           ;; @@2846 11
  2051  2846 99b4                                !word color-1                             ;; @@2846 11
  2052  2848 34af                                !word scnclr-1                            ;; @@2848 11
  2053                           ;; @@284a 11
  2054  284a 3a2e                                !word bad_command-1                      ; escape - SYSTEM - unimplemented command ;; @@284a 11
  2055                          ; .word  scale-1 ;; @@284c 11
  2056                           ;; @@284c 11
  2057  284c 683c                                !word help-1                              ;; @@284c 11
  2058  284e ec44                                !word do-1                                ;; @@284e 11
  2059  2850 8e45                                !word loop-1                              ;; @@2850 11
  2060  2852 4145                                !word exit-1                              ;; @@2852 11
  2061  2854 9f6f                                !word directory-1                         ;; @@2854 11
  2062  2856 4671                                !word dsave-1                             ;; @@2856 11
  2063  2858 6871                                !word dload-1                             ;; @@2858 11
  2064  285a 4a72                                !word header-1                            ;; @@285a 11
  2065  285c d372                                !word scratch-1                           ;; @@285c 11
  2066  285e 6473                                !word collect-1                           ;; @@285e 11
  2067  2860 7b73                                !word dcopy-1                             ;; @@2860 11
  2068  2862 c773                                !word rename-1                            ;; @@2862 11
  2069  2864 d973                                !word backup-1                            ;; @@2864 11
  2070  2866 e741                                !word delete-1                            ;; @@2866 11
  2071  2868 123e                                !word renumber-1                          ;; @@2868 11
  2072  286a d445                                !word key-1                               ;; @@286a 11
  2073  286c 55ff                                !word _monitor-1                          ;; @@286c 11
  2074  286e 4647                                !word bank-1                             ; escape ;; @@286e 11
  2075  2870 154a                                !word filter-1                           ; escape ;; @@2870 11
  2076  2872 4d47                                !word play-1                             ; escape ;; @@2872 11
  2077  2874 8449                                !word tempo-1                            ; escape ;; @@2874 11
  2078                           ;; @@2876 11
  2079  2876 bfb5                                !word movspr-1                           ; escape ;; @@2876 11
  2080  2878 28b5                                !word sprite-1                           ; escape ;; @@2878 11
  2081  287a 05b8                                !word sprcolor-1                         ; escape ;; @@287a 11
  2082                           ;; @@287c 11
  2083  287c 9f3b                                !word rreg-1                             ; escape ;; @@287c 11
  2084  287e a34a                                !word envelope-1                         ; escape ;; @@287e 11
  2085  2880 c054                                !word sleep-1                            ; escape ;; @@2880 11
  2086  2882 9f6f                                !word directory-1                        ; escape ;; @@2882 11
  2087  2884 d170                                !word dopen-1                            ; escape ;; @@2884 11
  2088  2886 e770                                !word append-1                           ; escape ;; @@2886 11
  2089  2888 2f71                                !word dclose-1                           ; escape ;; @@2888 11
  2090  288a 9071                                !word bsave-1                            ; escape ;; @@288a 11
  2091  288c e171                                !word bload-1                            ; escape ;; @@288c 11
  2092  288e 0a73                                !word record-1                           ; escape ;; @@288e 11
  2093  2890 b773                                !word concat-1                           ; escape ;; @@2890 11
  2094  2892 6571                                !word dverify-1                          ; escape ;; @@2892 11
  2095  2894 5473                                !word dclear-1                           ; escape ;; @@2894 11
  2096                           ;; @@2896 11
  2097  2896 1bb8                                !word sprsav-1                           ; escape ;; @@2896 11
  2098  2898 dbb8                                !word collision-1                        ; escape ;; @@2898 11
  2099                           ;; @@289a 11
  2100  289a 4735                                !word data-1                             ; escape - BEGIN ;; @@289a 11
  2101  289c 4735                                !word data-1                             ; escape - BEND ;; @@289c 11
  2102  289e 5f4c                                !word window-1                           ; escape ;; @@289e 11
  2103  28a0 4e67                                !word boot-1                             ; escape ;; @@28a0 11
  2104                           ;; @@28a2 11
  2105  28a2 3a2e                                !word bad_command-1                       ;; @@28a2 11
  2106                          ; .word  set_width-1 ;escape - WIDTH ;; @@28a4 11
  2107                           ;; @@28a4 11
  2108  28a4 3a2e                                !word bad_command-1                       ;; @@28a4 11
  2109                          ; .word  sprdef-1  ;escape - Sprite Definition mode ;; @@28a6 11
  2110                           ;; @@28a6 11
  2111  28a6 3a2e                                !word bad_command-1                      ; escape - QUIT - unimplemented command ;; @@28a6 11
  2112  28a8 333b                                !word dma-1                              ; escape ;; @@28a8 11
  2113  28aa 0000                                !word 0                                  ; placeholder to skip over the space character ;; @@28aa 11
  2114  28ac 333b                                !word dma-1                              ; escape ;; @@28ac 11
  2115  28ae 0000                                !word 0                                  ; placeholder to skip over the quote character ;; @@28ae 11
  2116  28b0 333b                                !word dma-1                              ; escape ;; @@28b0 11
  2117  28b2 3a2e                                !word bad_command-1                      ; escape - OFF - unimplemented command ;; @@28b2 11
  2118  28b4 c54c                                !word fast-1                             ; escape ;; @@28b4 11
  2119  28b6 ce4c                                !word slow-1                             ; escape ;; @@28b6 11
  2120  28b8 166f                                !word type-1                             ; escape (C65: type SEQ file) ;; @@28b8 11
  2121  28ba de71                                !word bverify-1                          ; escape (C65: verify BINary file) ;; @@28ba 11
  2122  28bc 492e                                !word snerr-1                            ; escape (C65: kludge- dirECTORY) ;; @@28bc 11
  2123  28be d372                                !word scratch-1                          ; escape (C65: erase alias for scratch) ;; @@28be 11
  2124  28c0 8842                                !word find-1                             ; escape (C65: find BASIC text) ;; @@28c0 11
  2125  28c2 8b42                                !word change-1                           ; escape (C65: change BASIC text) ;; @@28c2 11
  2126                           ;; @@28c4 11
  2127  28c4 1ab2                                !word C65__set-1                         ; escape (C65: multi-purpose command) ;; @@28c4 11
  2128  28c6 ffae                                !word Screen-1                           ; escape (C65: SCREEN) ;; @@28c6 11
  2129  28c8 bbb1                                !word C65__polygon-1                     ; escape (C65: POLYGON) ;; @@28c8 11
  2130  28ca 86b1                                !word C65__ellipse-1                     ; escape (C65: ELLIPSE) ;; @@28ca 11
  2131  28cc 14b4                                !word C65__Viewport-1                    ; escape (C65: VIEWPORT) ;; @@28cc 11
  2132  28ce 4fb4                                !word C65__copy-1                        ; escape (C65: GCOPY) ;; @@28ce 11
  2133  28d0 b7af                                !word C65__setpen-1                      ; escape (C65: PEN) ;; @@28d0 11
  2134  28d2 45b0                                !word C65__setpalette-1                  ; escape (C65: PALETTE) ;; @@28d2 11
  2135  28d4 cbaf                                !word C65__setdmode-1                    ; escape (C65: DMODE) ;; @@28d4 11
  2136  28d6 01b0                                !word C65__setdpat-1                     ; escape (C65: DPAT) ;; @@28d6 11
  2137  28d8 4a72                                !word header-1                           ; format alias for header command [911017] ;; @@28d8 11
  2138  28da 52b4                                !word genlock-1                          ; [910108] ;; @@28da 11
  2139                           ;; @@28dc 11
  2140                          stmdsp2                                                    ;; @@28dc 11
  2141  28dc dab4                                !word foreground-1                       ; this is the 128th command!  [910109] ;; @@28dc 11
  2142  28de 0000                                !word 0                                  ; placeholder to skip over the colon character ;; @@28de 11
  2143  28e0 fbb4                                !word background-1                        ;; @@28e0 11
  2144  28e2 02b5                                !word border-1                            ;; @@28e2 11
  2145  28e4 e0b4                                !word highlight-1                         ;; @@28e4 11
  2146  28e6 ef7b                                !word mouse-1                            ; [910122] ;; @@28e6 11
  2147  28e8 8c7c                                !word rmouse-1                           ; [910123] ;; @@28e8 11
  2148  28ea 796f                                !word disk-1                             ; [910123] ;; @@28ea 11
  2149  28ec 277d                                !word cursor-1                           ; [910228] ;; @@28ec 11
  2150  28ee 807d                                !word rcursor-1                          ; [910228] ;; @@28ee 11
  2151  28f0 aeb3                                !word loadiff-1                          ; [910402] ;; @@28f0 11
  2152  28f2 eab3                                !word saveiff-1                          ; [910930] ;; @@28f2 11
  2153  28f4 c6bc                                !word edit-1                             ; [910620] ;; @@28f4 11
  2154                           ;; @@28f6 11
  2155                          ; .page ;; @@28f6 11
  2156                          fundsp                                                     ;; @@28f6 11
  2157  28f6 cf62                                !word sgn                                 ;; @@28f6 11
  2158  28f8 6363                                !word int                                 ;; @@28f8 11
  2159  28fa ee62                                !word abs                                 ;; @@28fa 11
  2160  28fc f702                                !word usrpok                              ;; @@28fc 11
  2161  28fe 1355                                !word fre                                 ;; @@28fe 11
  2162  2900 ce58                                !word pos                                 ;; @@2900 11
  2163  2902 bc65                                !word sqr                                 ;; @@2902 11
  2164  2904 2358                                !word rnd                                 ;; @@2904 11
  2165  2906 0e60                                !word log                                 ;; @@2906 11
  2166  2908 0766                                !word exp                                 ;; @@2908 11
  2167  290a 9e66                                !word cos                                 ;; @@290a 11
  2168  290c a566                                !word sin                                 ;; @@290c 11
  2169  290e ee66                                !word tan                                 ;; @@290e 11
  2170  2910 1f67                                !word atn                                 ;; @@2910 11
  2171  2912 c755                                !word peek                                ;; @@2912 11
  2172  2914 565a                                !word len                                 ;; @@2914 11
  2173  2916 a559                                !word strd                                ;; @@2916 11
  2174  2918 4655                                !word val                                 ;; @@2918 11
  2175  291a 655a                                !word asc                                 ;; @@291a 11
  2176  291c b659                                !word chrd                                ;; @@291c 11
  2177  291e cc59                                !word leftd                               ;; @@291e 11
  2178  2920 ff59                                !word rightd                              ;; @@2920 11
  2179  2922 105a                                !word midd                                ;; @@2922 11
  2180  2924 26b9                                !word rgraphic                           ; [910701] ;; @@2924 11
  2181  2926 ffb8                                !word rcolor                             ; [910701] ;; @@2926 11
  2182  2928 0000                                !word 0                                  ; placeholder for escape function token ;; @@2928 11
  2183  292a ae56                                !word joy                                 ;; @@292a 11
  2184  292c 9bb9                                !word rpen                               ; was rdot     [910820] ;; @@292c 11
  2185  292e 7855                                !word dcml                               ; dec ;; @@292e 11
  2186  2930 6f56                                !word hexd                                ;; @@2930 11
  2187  2932 1856                                !word errd                                ;; @@2932 11
  2188  2934 f356                                !word pot                                ; escape ;; @@2934 11
  2189  2936 9cba                                !word bump                               ; escape ;; @@2936 11
  2190  2938 5257                                !word lpen                               ; escape ;; @@2938 11
  2191  293a 5aba                                !word rsppos                             ; escape ;; @@293a 11
  2192  293c 0fba                                !word rsprite                            ; escape ;; @@293c 11
  2193  293e 45ba                                !word rspcolor                           ; escape ;; @@293e 11
  2194  2940 9557                                !word xor                                ; escape ;; @@2940 11
  2195  2942 fa57                                !word rwindow                            ; escape ;; @@2942 11
  2196  2944 7457                                !word pointer                            ; escape ;; @@2944 11
  2197  2946 b757                                !word mod                                ; escape c65     [910402] ;; @@2946 11
  2198  2948 76b9                                !word pixel                              ; escape c65     [910820] ;; @@2948 11
  2199  294a b8b9                                !word rpalette                           ; escape c65     [910820] ;; @@294a 11
  2200                           ;; @@294c 11
  2201                          ; .page ;; @@294c 11
  2202  294c 79                 optab            !text 121                                 ;; @@294c 11
  2203  294d bd5d                                !word faddt-1                             ;; @@294d 11
  2204  294f 79                                  !text 121                                 ;; @@294f 11
  2205  2950 a75d                                !word fsubt-1                             ;; @@2950 11
  2206  2952 7b                                  !text 123                                 ;; @@2952 11
  2207  2953 6f60                                !word fmultt-1                            ;; @@2953 11
  2208  2955 7b                                  !text 123                                 ;; @@2955 11
  2209  2956 8461                                !word fdivt-1                             ;; @@2956 11
  2210  2958 7f                                  !text 127                                 ;; @@2958 11
  2211  2959 c565                                !word fpwrt-1                             ;; @@2959 11
  2212  295b 50                                  !text 80                                  ;; @@295b 11
  2213  295c 9a2d                                !word andop-1                             ;; @@295c 11
  2214  295e 46                                  !text 70                                  ;; @@295e 11
  2215  295f 972d                                !word orop-1                              ;; @@295f 11
  2216  2961 7d                 negtab           !text 125                                 ;; @@2961 11
  2217  2962 fb65                                !word negop-1                             ;; @@2962 11
  2218  2964 5a                                  !text 90                                  ;; @@2964 11
  2219  2965 324e                                !word notop-1                             ;; @@2965 11
  2220  2967 64                 ptdorl           !text 100                                 ;; @@2967 11
  2221  2968 c72d                                !word dorel-1                             ;; @@2968 11
  2222                           ;; @@296a 11
  2223                          ;.end ;; @@296a 11
  2224                          ; .page ;; @@296a 11
  2225                          ; .subttl  Keyword Equates ;; @@296a 11
  2226                           ;; @@296a 11
  2227                          end_token        = $80                                    ; v2 commands ;; @@296a 11
  2228                          for_token        = $81                                     ;; @@296a 11
  2229                          next_token       = $82                                     ;; @@296a 11
  2230                          data_token       = $83                                     ;; @@296a 11
  2231                          input_token      = $84                                     ;; @@296a 11
  2232                          goto_token       = $89                                     ;; @@296a 11
  2233                          run_token        = $8a                                     ;; @@296a 11
  2234                          restore_token    = $8c                                     ;; @@296a 11
  2235                          gosub_token      = $8d                                     ;; @@296a 11
  2236                          rem_token        = $8f                                     ;; @@296a 11
  2237                          on_token         = $91                                     ;; @@296a 11
  2238                          load_token       = $93                                     ;; @@296a 11
  2239                          save_token       = $94                                     ;; @@296a 11
  2240                          verify_token     = $95                                     ;; @@296a 11
  2241                          def_token        = $96                                     ;; @@296a 11
  2242                          print_token      = $99                                     ;; @@296a 11
  2243                          clr_token        = $9c                                     ;; @@296a 11
  2244                          sys_token        = $9e                                     ;; @@296a 11
  2245                          open_token       = $9f                                     ;; @@296a 11
  2246                          close_token      = $a0                                     ;; @@296a 11
  2247                          new_token        = $a2                                     ;; @@296a 11
  2248                          tab_token        = $a3                                     ;; @@296a 11
  2249                          to_token         = $a4                                     ;; @@296a 11
  2250                          fn_token         = $a5                                     ;; @@296a 11
  2251                          spc_token        = $a6                                     ;; @@296a 11
  2252                          then_token       = $a7                                     ;; @@296a 11
  2253                          not_token        = $a8                                     ;; @@296a 11
  2254                          step_token       = $a9                                     ;; @@296a 11
  2255                          plus_token       = $aa                                    ; operators ;; @@296a 11
  2256                          minus_token      = $ab                                     ;; @@296a 11
  2257                          greater_token    = $b1                                     ;; @@296a 11
  2258                          equal_token      = $b2                                     ;; @@296a 11
  2259                          less_token       = $b3                                     ;; @@296a 11
  2260                          first_function_token = $b4                                    ; v2 functions ;; @@296a 11
  2261                          left_token       = $c8                                     ;; @@296a 11
  2262                          mid_token        = $ca                                     ;; @@296a 11
  2263                          go_token         = $cb                                    ; kludges ;; @@296a 11
  2264                          rgraphic_token   = $cc                                    ; first new v7 token ;; @@296a 11
  2265                          esc_function_token = $ce                                     ;; @@296a 11
  2266                          err_token        = $d3                                     ;; @@296a 11
  2267                          instr_token      = $d4                                     ;; @@296a 11
  2268                          last_function_token = $d4                                     ;; @@296a 11
  2269                          else_token       = $d5                                     ;; @@296a 11
  2270                          resume_token     = $d6                                     ;; @@296a 11
  2271                          trap_token       = $d7                                     ;; @@296a 11
  2272                          color_token      = $e7                                     ;; @@296a 11
  2273                          do_token         = $eb                                     ;; @@296a 11
  2274                          loop_token       = $ec                                     ;; @@296a 11
  2275                          key_token        = $f9                                     ;; @@296a 11
  2276                          monitor_token    = $fa                                     ;; @@296a 11
  2277                          using_token      = $fb                                     ;; @@296a 11
  2278                          until_token      = $fc                                     ;; @@296a 11
  2279                          while_token      = $fd                                     ;; @@296a 11
  2280                          esc_command_token = $fe                                     ;; @@296a 11
  2281                          ; .page ;; @@296a 11
  2282                          first_esc_command_token = $02                                     ;; @@296a 11
  2283                          collision_token  = $17                                     ;; @@296a 11
  2284                          begin_token      = $18                                     ;; @@296a 11
  2285                          bend_token       = $19                                     ;; @@296a 11
  2286                          off_token        = $24                                     ;; @@296a 11
  2287                          ectory_token     = $29                                     ;; @@296a 11
  2288                          set_token        = $2d                                     ;; @@296a 11
  2289                          pic_token        = $37                                     ;; @@296a 11
  2290                          disk_token       = $40                                     ;; @@296a 11
  2291                          last_esc_command_token = $45                                    ; <<<< last_command_token ;; @@296a 11
  2292                           ;; @@296a 11
  2293                          first_esc_function_token = $02                                     ;; @@296a 11
  2294                          pointer_token    = $0a                                     ;; @@296a 11
  2295                          last_esc_function_token = $0d                                    ; [910820] ;; @@296a 11
  2296                           ;; @@296a 11
  2297                          ; .page ;; @@296a 11
  2298                          ; .subttl Error Messages ;; @@296a 11
  2299                           ;; @@296a 11
  2300                          ok_error_message                                           ;; @@296a 11
  2301  296a 4fcb                                !text "O",'K'+$80                        ; 0 for ERR$ [910911] ;; @@296a 11
  2302                          error_message_list                                           ;; @@296c 11
  2303  296c 544f4f204d414e59...                 !text "TOO MANY FILE",'S'+$80            ; 1 ;; @@296c 11
  2304  297a 46494c45204f5045...                 !text "FILE OPE",'N'+$80                 ; 2 ;; @@297a 11
  2305  2983 46494c45204e4f54...                 !text "FILE NOT OPE",'N'+$80             ; 3 ;; @@2983 11
  2306  2990 46494c45204e4f54...                 !text "FILE NOT FOUN",'D'+$80            ; 4 ;; @@2990 11
  2307  299e 444556494345204e...                 !text "DEVICE NOT PRESEN",'T'+$80        ; 5 ;; @@299e 11
  2308  29b0 4e4f5420494e5055...                 !text "NOT INPUT FIL",'E'+$80            ; 6 ;; @@29b0 11
  2309  29be 4e4f54204f555450...                 !text "NOT OUTPUT FIL",'E'+$80           ; 7 ;; @@29be 11
  2310  29cd 4d495353494e4720...                 !text "MISSING FILE NAM",'E'+$80         ; 8 ;; @@29cd 11
  2311  29de 494c4c4547414c20...                 !text "ILLEGAL DEVICE NUMBE",'R'+$80     ; 9 ;; @@29de 11
  2312  29f3 4e45585420574954...                 !text "NEXT WITHOUT FO",'R'+$80          ; 10 ;; @@29f3 11
  2313  2a03 53594e5441d8                        !text "SYNTA",'X'+$80                    ; 11 ;; @@2a03 11
  2314  2a09 52455455524e2057...                 !text "RETURN WITHOUT GOSU",'B'+$80      ; 12 ;; @@2a09 11
  2315  2a1d 4f5554204f462044...                 !text "OUT OF DAT",'A'+$80               ; 13 ;; @@2a1d 11
  2316  2a28 494c4c4547414c20...                 !text "ILLEGAL QUANTIT",'Y'+$80          ; 14 ;; @@2a28 11
  2317  2a38 4f564552464c4fd7                    !text "OVERFLO",'W'+$80                  ; 15 ;; @@2a38 11
  2318  2a40 4f5554204f46204d...                 !text "OUT OF MEMOR",'Y'+$80             ; 16 ;; @@2a40 11
  2319  2a4d 554e444546274420...                 !text "UNDEF",$27,"D STATEMEN",'T'+$80   ; 17 ;; @@2a4d 11
  2320  2a5e 4241442053554253...                 !text "BAD SUBSCRIP",'T'+$80             ; 18 ;; @@2a5e 11
  2321  2a6b 524544494d274420...                 !text "REDIM",$27,"D ARRA",'Y'+$80       ; 19 ;; @@2a6b 11
  2322  2a78 4449564953494f4e...                 !text "DIVISION BY ZER",'O'+$80          ; 20 ;; @@2a78 11
  2323  2a88 494c4c4547414c20...                 !text "ILLEGAL DIREC",'T'+$80            ; 21 ;; @@2a88 11
  2324  2a96 54595045204d4953...                 !text "TYPE MISMATC",'H'+$80             ; 22 ;; @@2a96 11
  2325  2aa3 535452494e472054...                 !text "STRING TOO LON",'G'+$80           ; 23 ;; @@2aa3 11
  2326  2ab2 46494c4520444154...                 !text "FILE DAT",'A'+$80                 ; 24 ;; @@2ab2 11
  2327  2abb 464f524d554c4120...                 !text "FORMULA TOO COMPLE",'X'+$80       ; 25 ;; @@2abb 11
  2328  2ace 43414e275420434f...                 !text "CAN",$27,"T CONTINU",'E'+$80      ; 26 ;; @@2ace 11
  2329  2adc 554e444546274420...                 !text "UNDEF'D FUNCTIO",'N'+$80          ; 27 ;; @@2adc 11
  2330  2aec 5645524946d9                        !text "VERIF",'Y'+$80                    ; 28 ;; @@2aec 11
  2331  2af2 4c4f41c4                            !text "LOA",'D'+$80                      ; 29 ;; @@2af2 11
  2332  2af6 42524541cb                          !text "BREA",'K'+$80                     ; 30 ???? null & space [910925] ;; @@2af6 11
  2333  2afb 43414e2754205245...                 !text "CAN'T RESUM",'E'+$80              ; 31 ;; @@2afb 11
  2334  2b07 4c4f4f50204e4f54...                 !text "LOOP NOT FOUN",'D'+$80            ; 32 ;; @@2b07 11
  2335  2b15 4c4f4f5020574954...                 !text "LOOP WITHOUT D",'O'+$80           ; 33 ;; @@2b15 11
  2336  2b24 444952454354204d...                 !text "DIRECT MODE ONL",'Y'+$80          ; 34 ;; @@2b24 11
  2337                          ; .byte 'NO GRAPHICS ARE','A'+$80   ;35 ;; @@2b34 11
  2338  2b34 53435245454e204e...                 !text "SCREEN NOT OPE",'N'+$80           ; 35    [911001] ;; @@2b34 11
  2339  2b43 42414420444953cb                    !text "BAD DIS",'K'+$80                  ; 36 ???? used for failed bootsys ;; @@2b43 11
  2340  2b4b 42454e44204e4f54...                 !text "BEND NOT FOUN",'D'+$80            ; 37 ;; @@2b4b 11
  2341  2b59 4c494e45204e554d...                 !text "LINE NUMBER TOO LARG",'E'+$80     ; 38 ;; @@2b59 11
  2342  2b6e 554e5245534f4c56...                 !text "UNRESOLVED REFERENC",'E'+$80      ; 39 ;; @@2b6e 11
  2343  2b82 554e494d504c454d...                 !text "UNIMPLEMENTED COMMAN",'D'+$80     ; 40 ;; @@2b82 11
  2344  2b97 46494c4520524541...                 !text "FILE REA",'D'+$80                 ; 41 ;; @@2b97 11
  2345  2ba0 45444954204d4f44...                 !text "EDIT MOD",'E'+$80                 ; 42    [910620] ;; @@2ba0 11
  2346                           ;; @@2ba9 11
  2347                          ; .page ;; @@2ba9 11
  2348                          ; .subttl  Error Message Numbers ;; @@2ba9 11
  2349                           ;; @@2ba9 11
  2350                          errtmf           = 1                                       ;; @@2ba9 11
  2351                          errfno           = 3                                       ;; @@2ba9 11
  2352                          errfnf           = 4                                       ;; @@2ba9 11
  2353                          err_missing_fname = 8                                       ;; @@2ba9 11
  2354                          err_illegal_device = 9                                       ;; @@2ba9 11
  2355                          errnf            = 10                                      ;; @@2ba9 11
  2356                          errsn            = 11                                      ;; @@2ba9 11
  2357                          errrg            = 12                                      ;; @@2ba9 11
  2358                          errod            = 13                                      ;; @@2ba9 11
  2359                          errfc            = 14                                      ;; @@2ba9 11
  2360                          errov            = 15                                      ;; @@2ba9 11
  2361                          errom            = 16                                      ;; @@2ba9 11
  2362                          errus            = 17                                      ;; @@2ba9 11
  2363                          errbs            = 18                                      ;; @@2ba9 11
  2364                          errdd            = 19                                      ;; @@2ba9 11
  2365                          errdvo           = 20                                      ;; @@2ba9 11
  2366                          errid            = 21                                      ;; @@2ba9 11
  2367                          errtm            = 22                                      ;; @@2ba9 11
  2368                          errls            = 23                                      ;; @@2ba9 11
  2369                          errbd            = 24                                      ;; @@2ba9 11
  2370                          errst            = 25                                      ;; @@2ba9 11
  2371                          errcn            = 26                                      ;; @@2ba9 11
  2372                          erruf            = 27                                      ;; @@2ba9 11
  2373                          ervfy            = 28                                      ;; @@2ba9 11
  2374                          erload           = 29                                      ;; @@2ba9 11
  2375                          erbrk            = 30                                      ;; @@2ba9 11
  2376                          errcr            = 31                                      ;; @@2ba9 11
  2377                          errlnf           = 32                                      ;; @@2ba9 11
  2378                          errlwd           = 33                                      ;; @@2ba9 11
  2379                          erroid           = 34                                      ;; @@2ba9 11
  2380                          errng            = 35                                      ;; @@2ba9 11
  2381                          errbdk           = 36                                      ;; @@2ba9 11
  2382                          err_no_bend      = 37                                      ;; @@2ba9 11
  2383                          err_too_large    = 38                                      ;; @@2ba9 11
  2384                          err_ref          = 39                                      ;; @@2ba9 11
  2385                          err_bad_command  = 40                                      ;; @@2ba9 11
  2386                          err_file_read    = 41                                      ;; @@2ba9 11
  2387                          edit_mode_error  = 42                                     ; [910620] ;; @@2ba9 11
  2388                          last_error_message = 42                                     ; # of last error msg ;; @@2ba9 11
  2389                           ;; @@2ba9 11
  2390                          ;.end ;; @@2ba9 11
  2391                          ; .page ;; @@2ba9 11
  2392                          ; .subttl Error message output ;; @@2ba9 11
  2393                           ;; @@2ba9 11
  2394                          ; Routine to translate error message # in .a ;; @@2ba9 11
  2395                          ; into address of string containing message in index2 ;; @@2ba9 11
  2396                           ;; @@2ba9 11
  2397  2ba9 aa                 erstup           tax                                      ; error set up ;; @@2ba9 11
  2398  2baa a000                                ldy #0                                   ; start with address of first error message ;; @@2baa 11
  2399  2bac a96c                                lda #<error_message_list                  ;; @@2bac 11
  2400  2bae 8526                                sta index2                                ;; @@2bae 11
  2401  2bb0 a929                                lda #>error_message_list                  ;; @@2bb0 11
  2402  2bb2 8527                                sta index2+1                              ;; @@2bb2 11
  2403                           ;; @@2bb4 11
  2404  2bb4 ca                 _local_1010_1    dex                                       ;; @@2bb4 11
  2405  2bb5 300a                                bmi _local_1010_4                        ; finished when .x decrements out ;; @@2bb5 11
  2406                           ;; @@2bb7 11
  2407  2bb7 b126               _local_1010_2    lda (index2),y                           ; look at msg, and find end (msb set) (ind.ok) ;; @@2bb7 11
  2408  2bb9 e326                                inw index2                                ;; @@2bb9 11
  2409  2bbb 29ff                                and #$ff                                 ; was msb set? ;; @@2bbb 11
  2410  2bbd 10f8                                bpl _local_1010_2                        ; no, not end of message ;; @@2bbd 11
  2411  2bbf 80f3                                bra _local_1010_1                        ; yes, tick off another msg ;; @@2bbf 11
  2412                           ;; @@2bc1 11
  2413  2bc1 60                 _local_1010_4    rts                                       ;; @@2bc1 11
  2414                           ;; @@2bc2 11
  2415                          ;.end ;; @@2bc2 11
  2416                          ; .page ;; @@2bc2 11
  2417                          ; .subttl Execute Dispatcher ;; @@2bc2 11
  2418                           ;; @@2bc2 11
  2419                          ; Here for new statement. Character -> by txtptr is ':' or eol. The adr of ;; @@2bc2 11
  2420                          ; this loc is left on the stack when a statement is executed so that it can ;; @@2bc2 11
  2421                          ; merely do a rts when it is done. ;; @@2bc2 11
  2422                          ; Get char, exit via xeqcm3, and return to newstt. ;; @@2bc2 11
  2423                           ;; @@2bc2 11
  2424  2bc2 6c0803             xeqcm            jmp (igone)                               ;; @@2bc2 12
  2425                           ;; @@2bc5 12
  2426                          ; Check if there is an interrupt from VIC that needs to be serviced ;; @@2bc5 12
  2427                           ;; @@2bc5 12
  2428  2bc5 7f7e3f             ngone            bbr7 runmod,_local_1011_30               ; get off here if we are in direct mode ;; @@2bc5 12
  2429  2bc8 addc02                              lda intval                               ; check if there is an interrupt already in progress ;; @@2bc8 12
  2430  2bcb 303a                                bmi _local_1011_30                       ; yes, don't go any further ;; @@2bcb 12
  2431                           ;; @@2bcd 12
  2432  2bcd a202                                ldx #2                                   ; check for 3 types of interrupts: s/s, s/b, & lp ;; @@2bcd 12
  2433  2bcf bddd02             _local_1011_10   lda int_trip_flag,x                       ;; @@2bcf 12
  2434  2bd2 f030                                beq _local_1011_20                       ; this wasn't set, go check next ;; @@2bd2 12
  2435                           ;; @@2bd4 12
  2436  2bd4 a900                                lda #0                                    ;; @@2bd4 12
  2437  2bd6 9ddd02                              sta int_trip_flag,x                      ; reset this flag to show 'serviced' ;; @@2bd6 12
  2438  2bd9 bde002                              lda int_adr_lo,x                         ; install the trap address as linnum ;; @@2bd9 12
  2439  2bdc 8516                                sta linnum                                ;; @@2bdc 12
  2440  2bde bde302                              lda int_adr_hi,x                          ;; @@2bde 12
  2441  2be1 8517                                sta linnum+1                              ;; @@2be1 12
  2442  2be3 da                                  phx                                      ; save counter & text pointer ;; @@2be3 12
  2443  2be4 fc3d00                              phw txtptr                                ;; @@2be4 12
  2444  2be7 a980                                lda #$80                                 ; flag 'no other interrupt traps, please' ;; @@2be7 12
  2445  2be9 0cdc02                              tsb intval                                ;; @@2be9 12
  2446                           ;; @@2bec 12
  2447  2bec 208322                              jsr chrget                               ; skip over 2nd byte of line number ;; @@2bec 12
  2448  2bef 20393d                              jsr gosub_sub                            ; fake a 'gosub' from here, so trap rx can do a RETURN ;; @@2bef 12
  2449  2bf2 20063d                              jsr goto_1                                ;; @@2bf2 12
  2450  2bf5 200d2c                              jsr newstt                                ;; @@2bf5 12
  2451                           ;; @@2bf8 12
  2452  2bf8 a980                                lda #$80                                  ;; @@2bf8 12
  2453  2bfa 1cdc02                              trb intval                                ;; @@2bfa 12
  2454  2bfd 68                                  pla                                       ;; @@2bfd 12
  2455  2bfe 853e                                sta txtptr+1                              ;; @@2bfe 12
  2456  2c00 68                                  pla                                       ;; @@2c00 12
  2457  2c01 853d                                sta txtptr                                ;; @@2c01 12
  2458  2c03 fa                                  plx                                       ;; @@2c03 12
  2459                           ;; @@2c04 12
  2460  2c04 ca                 _local_1011_20   dex                                       ;; @@2c04 12
  2461  2c05 10c8                                bpl _local_1011_10                        ;; @@2c05 12
  2462                           ;; @@2c07 12
  2463                           ;; @@2c07 12
  2464  2c07 208322             _local_1011_30   jsr chrget                               ; get statement type ;; @@2c07 12
  2465  2c0a 20522c             xeqdir           jsr xeqcm3                                ;; @@2c0a 13
  2466                           ;; @@2c0d 13
  2467  2c0d 20cc2c             newstt           jsr is_stop_key_down                      ;; @@2c0d 13
  2468  2c10 7f7e06                              bbr7 runmod,_local_1012_10               ; branch if direct mode ;; @@2c10 13
  2469                           ;; @@2c13 13
  2470                          ; In run mode...save txtptr for CONTinue command ;; @@2c13 13
  2471                           ;; @@2c13 13
  2472  2c13 20472c                              jsr tto                                  ; transfer txtptr to oldtxt ;; @@2c13 13
  2473  2c16 ba                                  tsx                                       ;; @@2c16 13
  2474  2c17 8681                                stx oldstk                                ;; @@2c17 13
  2475                           ;; @@2c19 13
  2476  2c19 a000               _local_1012_10   ldy #0                                    ;; @@2c19 13
  2477  2c1b 20c522                              jsr indtxt                               ; end of the line? ;; @@2c1b 13
  2478  2c1e d3a400                              +lbne morsts                             ; no...out of statement ;; @@2c1e 13
  2479                           ;; @@2c21 13
  2480  2c21 247e               _local_1012_20   bit runmod                               ; in direct mode? ;; @@2c21 13
  2481  2c23 132702                              +lbpl ready                              ; yes, go to ready ;; @@2c23 13
  2482  2c26 a002                                ldy #2                                    ;; @@2c26 13
  2483  2c28 20c522                              jsr indtxt                               ; end of text? ;; @@2c28 13
  2484  2c2b f31f02                              +lbeq ready                              ; yes...finished ;; @@2c2b 13
  2485  2c2e c8                                  iny                                      ; y=3 ;; @@2c2e 13
  2486  2c2f 20c522                              jsr indtxt                               ; extract line# lo byte ;; @@2c2f 13
  2487  2c32 853b                                sta curlin                                ;; @@2c32 13
  2488  2c34 c8                                  iny                                       ;; @@2c34 13
  2489  2c35 20c522                              jsr indtxt                               ; extract line # hi byte ;; @@2c35 13
  2490  2c38 853c                                sta curlin+1                              ;; @@2c38 13
  2491  2c3a 98                                  tya                                      ; y=4 ;; @@2c3a 13
  2492  2c3b 18                                  clc                                       ;; @@2c3b 13
  2493  2c3c 653d                                adc txtptr                               ; point @ character before line start ;; @@2c3c 13
  2494  2c3e 853d                                sta txtptr                                ;; @@2c3e 13
  2495  2c40 9002                                bcc _local_1012_30                        ;; @@2c40 13
  2496  2c42 e63e                                inc txtptr+1                              ;; @@2c42 13
  2497  2c44 837bff             _local_1012_30   +lbra xeqcm                              ; execute new line ;; @@2c44 13
  2498                           ;; @@2c47 13
  2499                           ;; @@2c47 13
  2500                           ;; @@2c47 13
  2501  2c47 a53d               tto              lda txtptr                                ;; @@2c47 14
  2502  2c49 a43e                                ldy txtptr+1                              ;; @@2c49 14
  2503  2c4b 8d7211                              sta oldtxt                                ;; @@2c4b 14
  2504  2c4e 8c7311                              sty oldtxt+1                              ;; @@2c4e 14
  2505  2c51 60                 xeqrts           rts                                       ;; @@2c51 14
  2506                           ;; @@2c52 14
  2507                          ; .page ;; @@2c52 14
  2508                          ; Set up for command processing and set processor address on stack. ;; @@2c52 14
  2509                          ; Exit via jmp to CHRGET ;; @@2c52 14
  2510                           ;; @@2c52 14
  2511  2c52 f0fd               xeqcm3           beq xeqrts                               ; nothing here...null statement ;; @@2c52 14
  2512  2c54 5f7e12                              bbr5 runmod,xeqcm2                       ; trcflg. branch if trace not enabled ;; @@2c54 14
  2513  2c57 7f7e0f                              bbr7 runmod,xeqcm2                       ; branch if direct mode- can't trace ;; @@2c57 14
  2514                           ;; @@2c5a 14
  2515  2c5a 48                                  pha                                      ; save token ;; @@2c5a 14
  2516  2c5b a95b                                lda #'['                                 ; print '[line-number]' ;; @@2c5b 14
  2517  2c5d 203d68                              jsr outch                                ; outdo ;; @@2c5d 14
  2518  2c60 207b64                              jsr curprt                               ; print curlin ;; @@2c60 14
  2519  2c63 a95d                                lda #']'                                  ;; @@2c63 14
  2520  2c65 203d68                              jsr outch                                ; outdo ;; @@2c65 14
  2521  2c68 68                                  pla                                      ; restore token ;; @@2c68 14
  2522                           ;; @@2c69 14
  2523                           ;; @@2c69 14
  2524  2c69 c9fe               xeqcm2           cmp #esc_command_token                   ; special case: escape token ;; @@2c69 14
  2525  2c6b f03e                                beq xeqesc                                ;; @@2c6b 14
  2526  2c6d c9cb                                cmp #go_token                            ; special case: go to ;; @@2c6d 14
  2527  2c6f f3ec10                              +lbeq go_without_to                       ;; @@2c6f 14
  2528  2c72 c9ca                                cmp #mid_token                           ; special case: mid$()= ;; @@2c72 14
  2529  2c74 f02c                                beq xeqmid                                ;; @@2c74 14
  2530                           ;; @@2c76 14
  2531                          ; Command can be in the range END...NEW (old BASIC) & ELSE...MONITOR ;; @@2c76 14
  2532                          ; (new extensions).  Although there is a gap between these two blocks, ;; @@2c76 14
  2533                          ; it will be quickest & easiest to collapse them into one continuous block. ;; @@2c76 14
  2534                           ;; @@2c76 14
  2535  2c76 c9fb                                cmp #monitor_token+1                      ;; @@2c76 14
  2536  2c78 b048                                bcs snerr1                                ;; @@2c78 14
  2537  2c7a c9a3                                cmp #new_token+1                          ;; @@2c7a 14
  2538  2c7c 9006                                bcc xeqcm4                               ; no need to collapse ;; @@2c7c 14
  2539  2c7e c9d5                                cmp #else_token                           ;; @@2c7e 14
  2540  2c80 9040                                bcc snerr1                                ;; @@2c80 14
  2541  2c82 e932                                sbc #else_token-new_token-1               ;; @@2c82 14
  2542                           ;; @@2c84 14
  2543  2c84 38                 xeqcm4           sec                                      ; convert adjusted token into an index into a jump table. ;; @@2c84 14
  2544  2c85 e980                                sbc #end_token                            ;; @@2c85 14
  2545  2c87 93ec09                              +lbcc let                                ; it wasn't a token after all!  assume an assignment ;; @@2c87 14
  2546                           ;; @@2c8a 14
  2547  2c8a 0a                 xeqcm5           asl                                      ; *2 to convert into word pointer ;; @@2c8a 14
  2548  2c8b a8                                  tay                                       ;; @@2c8b 14
  2549  2c8c b009                                bcs _local_1013_10                       ; dispatch table 1 or 2?     [901212] ;; @@2c8c 14
  2550  2c8e b9dd27                              lda stmdsp+1,y                           ; one ;; @@2c8e 14
  2551  2c91 48                                  pha                                       ;; @@2c91 14
  2552  2c92 b9dc27                              lda stmdsp,y                              ;; @@2c92 14
  2553  2c95 8007                                bra _local_1013_20                        ;; @@2c95 14
  2554                           ;; @@2c97 14
  2555  2c97 b9dd28             _local_1013_10   lda stmdsp2+1,y                          ; two      [901212] ;; @@2c97 14
  2556  2c9a 48                                  pha                                       ;; @@2c9a 14
  2557  2c9b b9dc28                              lda stmdsp2,y                             ;; @@2c9b 14
  2558                           ;; @@2c9e 14
  2559  2c9e 48                 _local_1013_20   pha                                       ;; @@2c9e 14
  2560  2c9f 4c8322                              jmp chrget                               ; execution will commence after chrget's RTS ;; @@2c9f 14
  2561                           ;; @@2ca2 14
  2562                           ;; @@2ca2 14
  2563                           ;; @@2ca2 14
  2564                          xeqmid                                                    ; handle special case of MID$= (what we call a kludge) ;; @@2ca2 15
  2565  2ca2 a93b                                lda #>midwrk                             ; midd2-1 ;; @@2ca2 15
  2566  2ca4 48                                  pha                                       ;; @@2ca4 15
  2567  2ca5 a9e1                                lda #<midwrk                              ;; @@2ca5 15
  2568  2ca7 48                                  pha                                       ;; @@2ca7 15
  2569                          xeqchr                                                     ;; @@2ca8 15
  2570  2ca8 4c8322                              jmp chrget                                ;; @@2ca8 15
  2571                           ;; @@2cab 15
  2572                           ;; @@2cab 15
  2573                           ;; @@2cab 15
  2574                           ;; @@2cab 15
  2575                          xeqesc                                                    ; execute escape token ;; @@2cab 15
  2576  2cab 208322                              jsr chrget                               ; let's have us a look at the second char ;; @@2cab 15
  2577  2cae f012                                beq snerr1                               ; oops, there wasn't any! ;; @@2cae 15
  2578  2cb0 c902                                cmp #first_esc_command_token             ; is it one of our esc tokens? ;; @@2cb0 15
  2579  2cb2 9008                                bcc _local_1014_1                        ; no, foreign. ;; @@2cb2 15
  2580  2cb4 c946                                cmp #last_esc_command_token+1             ;; @@2cb4 15
  2581  2cb6 b004                                bcs _local_1014_1                        ; foreign ;; @@2cb6 15
  2582                           ;; @@2cb8 15
  2583                          ; It's one of our own.  Convert to index into command dispatch table ;; @@2cb8 15
  2584                           ;; @@2cb8 15
  2585  2cb8 6947                                adc #monitor_token-else_token+new_token-end_token-first_esc_command_token+2  ;; @@2cb8 15
  2586  2cba 80ce                                bra xeqcm5                               ; always ;; @@2cba 15
  2587                           ;; @@2cbc 15
  2588  2cbc 38                 _local_1014_1    sec                                      ; set up flag for a trip into the users code ;; @@2cbc 15
  2589  2cbd 6c1003                              jmp (iescex)                              ;; @@2cbd 15
  2590                           ;; @@2cc0 15
  2591  2cc0 90e6               nescex           bcc xeqchr                               ; jmp chrget ;; @@2cc0 16
  2592                           ;; @@2cc2 16
  2593  2cc2 838501             snerr1           +lbra snerr                               ;; @@2cc2 16
  2594                           ;; @@2cc5 16
  2595  2cc5 c93a               morsts           cmp #':'                                  ;; @@2cc5 16
  2596  2cc7 f3f8fe                              +lbeq xeqcm                              ; if ':', continue statement ;; @@2cc7 16
  2597  2cca 80f6                                bra snerr1                                ;; @@2cca 16
  2598                           ;; @@2ccc 16
  2599                          ; .page ;; @@2ccc 16
  2600                          ; STOP, STOP KEY, and END handlers ;; @@2ccc 16
  2601                          ; ;; @@2ccc 16
  2602                           ;; @@2ccc 16
  2603                          is_stop_key_down                                           ;; @@2ccc 16
  2604  2ccc 20e1ff                              jsr _stop                                ; test stop key ;; @@2ccc 16
  2605  2ccf d03b                                bne do_rts                               ; not down, exit ;; @@2ccf 16
  2606                           ;; @@2cd1 16
  2607                          ; ldy trapno+1  ;test if trap on????   removed [910925] ;; @@2cd1 16
  2608                          ; iny ;; @@2cd1 16
  2609                          ; beq stop_1  ;no, do a normal stop ;; @@2cd1 16
  2610                           ;; @@2cd1 16
  2611                           ;; @@2cd1 16
  2612                          break_exit                                                ; STOP KEY:     [910104] ;; @@2cd1 16
  2613  2cd1 20e1ff             _local_1015_10   jsr _stop                                ; wait for the user to release the key ;; @@2cd1 16
  2614  2cd4 f0fb                                beq _local_1015_10                        ;; @@2cd4 16
  2615  2cd6 a21e                                ldx #erbrk                               ; take the vector thru error to ready ;; @@2cd6 16
  2616  2cd8 837401                              +lbra error                               ;; @@2cd8 16
  2617                           ;; @@2cdb 16
  2618                           ;; @@2cdb 16
  2619                           ;; @@2cdb 16
  2620  2cdb b001               stop             bcs stopc                                ; STOP: .c=1 ;; @@2cdb 17
  2621                           ;; @@2cdd 17
  2622  2cdd 18                 end              clc                                      ; END: .c=0 ;; @@2cdd 17
  2623  2cde d36901             stopc            +lbne snerr                              ; error if args present   [910410] ;; @@2cde 17
  2624                           ;; @@2ce1 17
  2625  2ce1 7f7e0d             stop_1           bbr7 runmod,_local_1016_10               ; branch if direct mode ;; @@2ce1 17
  2626  2ce4 20472c                              jsr tto                                  ; transfer txtptr to oldtxt ;; @@2ce4 17
  2627  2ce7 a53b                                lda curlin                                ;; @@2ce7 17
  2628  2ce9 a43c                                ldy curlin+1                              ;; @@2ce9 17
  2629  2ceb 8d7011                              sta oldlin                                ;; @@2ceb 17
  2630  2cee 8c7111                              sty oldlin+1                              ;; @@2cee 17
  2631  2cf1 68                 _local_1016_10   pla                                      ; .diris ;; @@2cf1 17
  2632  2cf2 68                                  pla                                       ;; @@2cf2 17
  2633  2cf3 935701                              +lbcc ready                              ; say 'ready' if END, say 'break' if STOP ;; @@2cf3 17
  2634                           ;; @@2cf6 17
  2635                           ;; @@2cf6 17
  2636  2cf6 20b438             break            jsr release_channels                     ; make sure we're in text mode????  [910909] ;; @@2cf6 18
  2637  2cf9 2027af                              jsr RestoreTextScreen                     ;; @@2cf9 18
  2638  2cfc 20dc3c                              jsr highlight_text                       ; ????      [910624] ;; @@2cfc 18
  2639  2cff 207dff                              jsr _primm                                ;; @@2cff 18
  2640  2d02 0d425245414b00                      !text cr,"BREAK",0                        ;; @@2d02 18
  2641  2d09 83cd01                              +lbra errfin                             ; exit via 'in line #' ;; @@2d09 18
  2642                           ;; @@2d0c 18
  2643  2d0c 60                 do_rts           rts                                       ;; @@2d0c 18
  2644                           ;; @@2d0d 18
  2645                          ;.end ;; @@2d0d 18
  2646                          ; .page ;; @@2d0d 18
  2647                          ; .subttl Function Handler ;; @@2d0d 18
  2648                           ;; @@2d0d 18
  2649                          ; At this point, eval has determined that the token in a has to be a ;; @@2d0d 18
  2650                          ; function.  It must therefor be in the range SGN...MID$ (old BASIC), ;; @@2d0d 18
  2651                          ; or RGR...INSTR (new extensions).  We will collapse these two disjoint ;; @@2d0d 18
  2652                          ; blocks into one continuous range. ;; @@2d0d 18
  2653                          ; ;; @@2d0d 18
  2654                          ; On entry, we can assume the token is >= 'sgn' ;; @@2d0d 18
  2655                           ;; @@2d0d 18
  2656  2d0d c9ce               isfun            cmp #esc_function_token                  ; is this an escape function? ;; @@2d0d 18
  2657  2d0f f059                                beq do_esc_fn                            ; yes ;; @@2d0f 18
  2658  2d11 c9d5                                cmp #last_function_token+1                ;; @@2d11 18
  2659  2d13 b0ad                                bcs snerr1                               ; no- must be syntax error ;; @@2d13 18
  2660  2d15 c9cb                                cmp #mid_token+1                          ;; @@2d15 18
  2661  2d17 9002                                bcc _local_1017_1                        ; no need to adjust ;; @@2d17 18
  2662  2d19 e901                                sbc #rgraphic_token-mid_token-1           ;; @@2d19 18
  2663                           ;; @@2d1b 18
  2664  2d1b 48                 _local_1017_1    pha                                      ; save token ;; @@2d1b 18
  2665  2d1c aa                                  tax                                       ;; @@2d1c 18
  2666  2d1d 208322                              jsr chrget                               ; set up for synchk. ;; @@2d1d 18
  2667  2d20 e0d3                                cpx #instr_token-1                       ; look for (adjusted) instr token ;; @@2d20 18
  2668  2d22 f00d                                beq _local_1017_2                        ; yes ;; @@2d22 18
  2669  2d24 e0cb                                cpx #rgraphic_token-1                    ; look for rgraphic which now takes 2 args [910801] ;; @@2d24 18
  2670  2d26 f3fd8b                              +lbeq rgraphic                           ; yes ;; @@2d26 18
  2671                           ;; @@2d29 18
  2672  2d29 e0cb                                cpx #mid_token+1                          ;; @@2d29 18
  2673  2d2b b024                                bcs oknorm                               ; LEFT$,RIGHT$,MID$ require multiple args ;; @@2d2b 18
  2674  2d2d e0c8                                cpx #left_token                          ; is it past last single-arg function? ;; @@2d2d 18
  2675  2d2f 9020                                bcc oknorm                               ; no, must be normal function ;; @@2d2f 18
  2676                           ;; @@2d31 18
  2677                           ;; @@2d31 18
  2678                          ; Most functions take a single argument.  The return address of these functions ;; @@2d31 18
  2679                          ; is CHKNUM, which ascertains that VALTYP=0 (numeric).  Normal functions which ;; @@2d31 18
  2680                          ; return string results (eg. CHR$) must pop off that return address and return ;; @@2d31 18
  2681                          ; directly to FRMEVL. ;; @@2d31 18
  2682                          ; ;; @@2d31 18
  2683                          ; The so called "funny" functions can take more than one argument, the first ;; @@2d31 18
  2684                          ; of which must be string and the second of which must be a number between 0 ;; @@2d31 18
  2685                          ; and 255.  The closed parenthesis must be checked and return is directly to ;; @@2d31 18
  2686                          ; FRMEVL with the text pointer pointing beyond the ")".  The pointer to the ;; @@2d31 18
  2687                          ; description of the string argument is stored on the stack underneath the ;; @@2d31 18
  2688                          ; value of the integer argument. ;; @@2d31 18
  2689                           ;; @@2d31 18
  2690  2d31 20584e             _local_1017_2    jsr chkopn                               ; check for an open parenthesis ;; @@2d31 18
  2691  2d34 20ef4c                              jsr frmevl                               ; eat open paren and first argument ;; @@2d34 18
  2692  2d37 205b4e                              jsr chkcom                               ; two args so comma must delimit ;; @@2d37 18
  2693  2d3a 20dd4c                              jsr chkstr                               ; make sure first was string ;; @@2d3a 18
  2694                           ;; @@2d3d 18
  2695  2d3d 68                                  pla                                      ; check token ;; @@2d3d 18
  2696  2d3e c9d3                                cmp #instr_token-1                       ; special case: INSTR() bails out here ;; @@2d3e 18
  2697  2d40 f32a41                              +lbeq instr                               ;; @@2d40 18
  2698  2d43 a667                                ldx facmo+1                              ; push address of string arg1 ;; @@2d43 18
  2699  2d45 da                                  phx                                       ;; @@2d45 18
  2700  2d46 a666                                ldx facmo                                 ;; @@2d46 18
  2701  2d48 da                                  phx                                       ;; @@2d48 18
  2702  2d49 48                                  pha                                      ; push token ;; @@2d49 18
  2703  2d4a 206c5d                              jsr getbyt                               ; get arg2 ;; @@2d4a 18
  2704  2d4d 68                                  pla                                      ; retrieve token ;; @@2d4d 18
  2705  2d4e da                                  phx                                      ; push value of arg2 ;; @@2d4e 18
  2706  2d4f 8004                                bra fingo                                ; go set up to evaluate fn ;; @@2d4f 18
  2707                           ;; @@2d51 18
  2708                           ;; @@2d51 18
  2709                           ;; @@2d51 18
  2710                          oknorm                                                     ;; @@2d51 19
  2711  2d51 204f4e                              jsr parchk                               ; check for open parens, evaluate argument ;; @@2d51 19
  2712  2d54 68                                  pla                                      ; restore token ;; @@2d54 19
  2713                           ;; @@2d55 19
  2714                          fingo                                                      ;; @@2d55 19
  2715  2d55 38                                  sec                                      ; convert token to index into jump table ;; @@2d55 19
  2716  2d56 e9b4                                sbc #first_function_token                 ;; @@2d56 19
  2717  2d58 0a                                  asl                                       ;; @@2d58 19
  2718  2d59 a8                                  tay                                       ;; @@2d59 19
  2719  2d5a b9f728                              lda fundsp+1,y                            ;; @@2d5a 19
  2720  2d5d 8558                                sta jmper+2                               ;; @@2d5d 19
  2721  2d5f b9f628                              lda fundsp,y                              ;; @@2d5f 19
  2722  2d62 8557                                sta jmper+1                               ;; @@2d62 19
  2723  2d64 205600                              jsr jmper                                ; dispatch ;; @@2d64 19
  2724                          ;string functions remove this ret addr ;; @@2d67 19
  2725  2d67 83711f                              +lbra chknum                             ; check for "numeric-ness" and return ;; @@2d67 19
  2726                           ;; @@2d6a 19
  2727                          ; .page ;; @@2d6a 19
  2728                          ; Escape Function handler ;; @@2d6a 19
  2729                           ;; @@2d6a 19
  2730                          do_esc_fn                                                  ;; @@2d6a 19
  2731  2d6a 208322                              jsr chrget                               ; get second token ;; @@2d6a 19
  2732  2d6d f3da00                              +lbeq snerr                              ; error if no second token ;; @@2d6d 19
  2733  2d70 c90a                                cmp #pointer_token                        ;; @@2d70 19
  2734  2d72 f00b                                beq _local_1018_10                       ; skip pre-parse if 'POINTER()' ;; @@2d72 19
  2735  2d74 48                                  pha                                       ;; @@2d74 19
  2736  2d75 208322                              jsr chrget                               ; should be '(' ;; @@2d75 19
  2737  2d78 20584e                              jsr chkopn                                ;; @@2d78 19
  2738  2d7b 20ef4c                              jsr frmevl                               ; evaluate first argument ;; @@2d7b 19
  2739  2d7e 68                                  pla                                       ;; @@2d7e 19
  2740  2d7f c902               _local_1018_10   cmp #first_esc_function_token            ; see if this esc fn is one of ours ;; @@2d7f 19
  2741  2d81 9008                                bcc foreign_esc_fn                       ; nope. ;; @@2d81 19
  2742  2d83 c90e                                cmp #last_esc_function_token+1            ;; @@2d83 19
  2743  2d85 b004                                bcs foreign_esc_fn                       ; nope ;; @@2d85 19
  2744                           ;; @@2d87 19
  2745                          ; Convert to index into the function dispatch table ;; @@2d87 19
  2746                           ;; @@2d87 19
  2747  2d87 69d1                                adc #last_function_token-first_esc_function_token-1  ;; @@2d87 19
  2748  2d89 80ca                                bra fingo                                ; always ;; @@2d89 19
  2749                           ;; @@2d8b 19
  2750                           ;; @@2d8b 19
  2751                          foreign_esc_fn                                             ;; @@2d8b 20
  2752  2d8b 38                                  sec                                      ; flag 'up for grabs' ;; @@2d8b 20
  2753  2d8c 20952d                              jsr go_foreign_esc_fn                     ;; @@2d8c 20
  2754                          n_esc_fn_vec                                               ;; @@2d8f 20
  2755  2d8f b3b800                              +lbcs snerr                              ; it's unwanted. off to the refuse pile ;; @@2d8f 20
  2756  2d92 83461f                              +lbra chknum                              ;; @@2d92 20
  2757                           ;; @@2d95 20
  2758                          go_foreign_esc_fn                                           ;; @@2d95 20
  2759  2d95 6cfc02                              jmp (esc_fn_vec)                          ;; @@2d95 20
  2760                           ;; @@2d98 20
  2761                          ; .page ;; @@2d98 20
  2762  2d98 a0ff               orop             ldy #255                                 ; must always complement ;; @@2d98 20
  2763  2d9a 2c                                  !text $2c                                 ;; @@2d9a 20
  2764                           ;; @@2d9b 20
  2765  2d9b a000               andop            ldy #0                                    ;; @@2d9b 20
  2766  2d9d 840d                                sty count                                ; operator ;; @@2d9d 20
  2767  2d9f 20b458                              jsr ayint                                ; (facmo&lo)=int value and check size ;; @@2d9f 20
  2768  2da2 a566                                lda facmo                                ; use Demorgan's Law on high ;; @@2da2 20
  2769  2da4 450d                                eor count                                 ;; @@2da4 20
  2770  2da6 850a                                sta integr                                ;; @@2da6 20
  2771  2da8 a567                                lda faclo                                ; and low ;; @@2da8 20
  2772  2daa 450d                                eor count                                 ;; @@2daa 20
  2773  2dac 850b                                sta integr+1                              ;; @@2dac 20
  2774  2dae 209362                              jsr movfa                                 ;; @@2dae 20
  2775  2db1 20b458                              jsr ayint                                ; (facmo&lo)=int of arg ;; @@2db1 20
  2776  2db4 a567                                lda faclo                                 ;; @@2db4 20
  2777  2db6 450d                                eor count                                 ;; @@2db6 20
  2778  2db8 250b                                and integr+1                              ;; @@2db8 20
  2779  2dba 450d                                eor count                                ; finish out Demorgan ;; @@2dba 20
  2780  2dbc a8                                  tay                                      ; save high ;; @@2dbc 20
  2781  2dbd a566                                lda facmo                                 ;; @@2dbd 20
  2782  2dbf 450d                                eor count                                 ;; @@2dbf 20
  2783  2dc1 250a                                and integr                                ;; @@2dc1 20
  2784  2dc3 450d                                eor count                                 ;; @@2dc3 20
  2785  2dc5 837720                              +lbra givayf                             ; float (a,y) and return to user ;; @@2dc5 20
  2786                           ;; @@2dc8 20
  2787                           ;; @@2dc8 20
  2788                           ;; @@2dc8 20
  2789                          ; Time to perform a relational operator. ;; @@2dc8 20
  2790                          ; (domask) contains the bits as to which relational operator it was. ;; @@2dc8 20
  2791                          ; Carry bit on = string compare. ;; @@2dc8 20
  2792                           ;; @@2dc8 20
  2793                           ;; @@2dc8 20
  2794  2dc8 20de4c             dorel            jsr chkval                               ; check for match ;; @@2dc8 20
  2795  2dcb b012                                bcs strcmp                               ; is it a string? ;; @@2dcb 20
  2796  2dcd a56f                                lda argsgn                               ; pack argument for fcomp ;; @@2dcd 20
  2797  2dcf 097f                                ora #$7f                                  ;; @@2dcf 20
  2798  2dd1 256b                                and argho                                 ;; @@2dd1 20
  2799  2dd3 856b                                sta argho                                 ;; @@2dd3 20
  2800  2dd5 a96a                                lda #<argexp                              ;; @@2dd5 20
  2801  2dd7 a000                                ldy #>argexp                              ;; @@2dd7 20
  2802  2dd9 20f162                              jsr fcomp                                 ;; @@2dd9 20
  2803  2ddc aa                                  tax                                       ;; @@2ddc 20
  2804  2ddd 8033                                bra qcomp                                 ;; @@2ddd 20
  2805                           ;; @@2ddf 20
  2806                          ; .page ;; @@2ddf 20
  2807  2ddf a900               strcmp           lda #0                                    ;; @@2ddf 20
  2808  2de1 850f                                sta valtyp                                ;; @@2de1 20
  2809  2de3 c64f                                dec opmask                                ;; @@2de3 20
  2810  2de5 206d5b                              jsr frefac                               ; free the faclo string ;; @@2de5 20
  2811  2de8 8563                                sta dsctmp                               ; save it for later ;; @@2de8 20
  2812  2dea 8664                                stx dsctmp+1                              ;; @@2dea 20
  2813  2dec 8465                                sty dsctmp+2                              ;; @@2dec 20
  2814  2dee a56d                                lda argmo                                ; get pointer to other string ;; @@2dee 20
  2815  2df0 a46e                                ldy argmo+1                               ;; @@2df0 20
  2816  2df2 20715b                              jsr fretmp                               ; frees first desc pointer ;; @@2df2 20
  2817  2df5 866d                                stx argmo                                 ;; @@2df5 20
  2818  2df7 846e                                sty argmo+1                               ;; @@2df7 20
  2819  2df9 aa                                  tax                                      ; copy count into x ;; @@2df9 20
  2820  2dfa 38                                  sec                                       ;; @@2dfa 20
  2821  2dfb e563                                sbc dsctmp                               ; which is greater. if 0, all set up ;; @@2dfb 20
  2822  2dfd f008                                beq stasgn                               ; just put sign of difference away ;; @@2dfd 20
  2823  2dff a901                                lda #1                                    ;; @@2dff 20
  2824  2e01 9004                                bcc stasgn                               ; sign is positive ;; @@2e01 20
  2825  2e03 a663                                ldx dsctmp                               ; length of fac is shorter ;; @@2e03 20
  2826  2e05 a9ff                                lda #$ff                                 ; get a minus one for negatives ;; @@2e05 20
  2827  2e07 8568               stasgn           sta facsgn                               ; keep for later ;; @@2e07 20
  2828  2e09 a0ff                                ldy #255                                 ; set pointer to first string. (arg) ;; @@2e09 20
  2829  2e0b e8                                  inx                                      ; to loop properly ;; @@2e0b 20
  2830  2e0c c8                 nxtcmp           iny                                       ;; @@2e0c 20
  2831  2e0d ca                                  dex                                      ; any characters left to compare? ;; @@2e0d 20
  2832  2e0e d007                                bne getcmp                               ; not done yet ;; @@2e0e 20
  2833  2e10 a668                                ldx facsgn                               ; use sign of length difference ;; @@2e10 20
  2834                          ;since all characters are the same ;; @@2e12 20
  2835  2e12 301b               qcomp            bmi docmp                                ; c is always set then ;; @@2e12 20
  2836  2e14 18                                  clc                                       ;; @@2e14 20
  2837  2e15 8018                                bra docmp                                ; always branch ;; @@2e15 20
  2838                           ;; @@2e17 20
  2839                          ; .page ;; @@2e17 20
  2840  2e17 a96d               getcmp           lda #argmo                                ;; @@2e17 20
  2841  2e19 20d722                              jsr lda_far_ram1                         ; lda (argmo),y from RAM1 ;; @@2e19 20
  2842  2e1c 48                                  pha                                       ;; @@2e1c 20
  2843  2e1d a964                                lda #dsctmp+1                             ;; @@2e1d 20
  2844  2e1f 20d722                              jsr lda_far_ram1                         ; lda (dsctmp+1),y from RAM1 ;; @@2e1f 20
  2845  2e22 8578                                sta syntmp                                ;; @@2e22 20
  2846  2e24 68                                  pla                                       ;; @@2e24 20
  2847  2e25 c578                                cmp syntmp                                ;; @@2e25 20
  2848  2e27 f0e3                                beq nxtcmp                                ;; @@2e27 20
  2849  2e29 a2ff                                ldx #$ff                                  ;; @@2e29 20
  2850  2e2b b002                                bcs docmp                                 ;; @@2e2b 20
  2851  2e2d a201                                ldx #1                                    ;; @@2e2d 20
  2852                           ;; @@2e2f 20
  2853                           ;; @@2e2f 20
  2854                           ;; @@2e2f 20
  2855                          docmp                                                      ;; @@2e2f 20
  2856  2e2f e8                                  inx                                      ; -1 to 1, 0 to 2, 1 to 4 ;; @@2e2f 20
  2857  2e30 8a                                  txa                                       ;; @@2e30 20
  2858  2e31 2a                                  rol                                       ;; @@2e31 20
  2859  2e32 2514                                and domask                                ;; @@2e32 20
  2860  2e34 f002                                beq _local_1019_10                        ;; @@2e34 20
  2861  2e36 a9ff                                lda #$ff                                 ; map 0 to 0, map all others to -1 ;; @@2e36 20
  2862  2e38 839734             _local_1019_10   +lbra float                              ; float the one-byte result into FAC ;; @@2e38 20
  2863                           ;; @@2e3b 20
  2864                           ;; @@2e3b 20
  2865                          ;.end ;; @@2e3b 20
  2866                          ; .page ;; @@2e3b 20
  2867                          ; .subttl  Ready, Error, Main (CODE 0) ;; @@2e3b 20
  2868                           ;; @@2e3b 20
  2869                          bad_command                                                ;; @@2e3b 21
  2870  2e3b a228                                ldx #err_bad_command                     ; unimplemented command ;; @@2e3b 21
  2871  2e3d 2c                                  !text $2c                                 ;; @@2e3d 21
  2872                           ;; @@2e3e 21
  2873  2e3e a211               userr            ldx #errus                               ; undefined statement ;; @@2e3e 21
  2874  2e40 2c                                  !text $2c                                 ;; @@2e40 21
  2875                           ;; @@2e41 21
  2876  2e41 a210               omerr            ldx #errom                               ; out of memory ;; @@2e41 21
  2877  2e43 2c                                  !text $2c                                 ;; @@2e43 21
  2878                           ;; @@2e44 21
  2879  2e44 a214               doverr           ldx #errdvo                              ; division by zero ;; @@2e44 21
  2880  2e46 2c                                  !text $2c                                 ;; @@2e46 21
  2881                           ;; @@2e47 21
  2882  2e47 a20f               overr            ldx #errov                               ; overflow ;; @@2e47 21
  2883  2e49 2c                                  !text $2c                                 ;; @@2e49 21
  2884                           ;; @@2e4a 21
  2885  2e4a a20b               snerr            ldx #errsn                               ; syntax error ;; @@2e4a 21
  2886  2e4c 2c                                  !text $2c                                 ;; @@2e4c 21
  2887                           ;; @@2e4d 21
  2888  2e4d a280               ready            ldx #$80                                 ; no error ;; @@2e4d 21
  2889                           ;; @@2e4f 21
  2890  2e4f 6c0003             error            jmp (ierror)                              ;; @@2e4f 21
  2891                           ;; @@2e52 21
  2892  2e52 8a                 nerror           txa                                       ;; @@2e52 21
  2893  2e53 338e00                              +lbmi ready_1                            ; ...branch if no error (from 'ready') ;; @@2e53 21
  2894  2e56 8ec702                              stx errnum                               ; save error # for 'er' ;; @@2e56 21
  2895  2e59 7f7e3c                              bbr7 runmod,errisd                       ; branch if direct mode- always display error ;; @@2e59 21
  2896                           ;; @@2e5c 21
  2897  2e5c a001                                ldy #1                                   ; copy curlin to errlin, oldtxt to errtxt ;; @@2e5c 21
  2898  2e5e b93b00             _local_1020_10   lda curlin,y                              ;; @@2e5e 21
  2899  2e61 99c802                              sta errlin,y                             ; line# where error occurred ;; @@2e61 21
  2900  2e64 b97211                              lda oldtxt,y                              ;; @@2e64 21
  2901  2e67 99cd02                              sta errtxt,y                             ; statement where error occured ;; @@2e67 21
  2902  2e6a 88                                  dey                                       ;; @@2e6a 21
  2903  2e6b 10f1                                bpl _local_1020_10                        ;; @@2e6b 21
  2904  2e6d eecd02                              inc errtxt                               ; point to a token, not ':' for HELP ;; @@2e6d 21
  2905  2e70 d003                                bne _local_1020_20                        ;; @@2e70 21
  2906  2e72 eece02                              inc errtxt+1                              ;; @@2e72 21
  2907                           ;; @@2e75 21
  2908  2e75 accb02             _local_1020_20   ldy trapno+1                             ; is trap set? ;; @@2e75 21
  2909  2e78 c0ff                                cpy #$ff                                  ;; @@2e78 21
  2910  2e7a f01c                                beq errisd                               ; no ;; @@2e7a 21
  2911  2e7c 8417                                sty linnum+1                              ;; @@2e7c 21
  2912  2e7e 8ccc02                              sty tmptrp                               ; save until a resume is executed ;; @@2e7e 21
  2913  2e81 acca02                              ldy trapno                                ;; @@2e81 21
  2914  2e84 8416                                sty linnum                                ;; @@2e84 21
  2915                           ;; @@2e86 21
  2916  2e86 a2ff                                ldx #$ff                                  ;; @@2e86 21
  2917  2e88 8ecb02                              stx trapno+1                             ; flag no more traps ;; @@2e88 21
  2918  2e8b a21b                                ldx #tempst                              ; clear any accumulated string temps ;; @@2e8b 21
  2919  2e8d 8618                                stx temppt                                ;; @@2e8d 21
  2920  2e8f a681                                ldx oldstk                                ;; @@2e8f 21
  2921  2e91 9a                                  txs                                       ;; @@2e91 21
  2922  2e92 201f3d                              jsr luk4it                                ;; @@2e92 21
  2923  2e95 8375fd                              +lbra newstt                              ;; @@2e95 21
  2924                           ;; @@2e98 21
  2925                          ; .page ;; @@2e98 21
  2926  2e98 ca                 errisd           dex                                       ;; @@2e98 22
  2927  2e99 8a                                  txa                                       ;; @@2e99 22
  2928  2e9a 20a92b                              jsr erstup                               ; set up address of error msg in .a in index2 ;; @@2e9a 22
  2929                           ;; @@2e9d 22
  2930  2e9d ff7e08                              bbs7 runmod,_local_1021_5                ; reset error line if direct mode error ;; @@2e9d 22
  2931  2ea0 a9ff                                lda #$ff                                  ;; @@2ea0 22
  2932  2ea2 8dc802                              sta errlin                               ;  ;; @@2ea2 22
  2933  2ea5 8dc902                              sta errlin+1                              ;; @@2ea5 22
  2934                           ;; @@2ea8 22
  2935  2ea8 20b438             _local_1021_5    jsr release_channels                     ; restore output to screen    [910909] ;; @@2ea8 22
  2936  2eab 2027af                              jsr RestoreTextScreen                    ; make sure we're in text mode    [910404] ;; @@2eab 22
  2937  2eae 200935                              jsr init_stack                            ;; @@2eae 22
  2938                           ;; @@2eb1 22
  2939  2eb1 20f737             _local_1021_10   jsr crdo                                 ; Print error message- start a new line with '?' ;; @@2eb1 22
  2940  2eb4 20dc3c                              jsr highlight_text                       ; use highlight color????    [910624] ;; @@2eb4 22
  2941  2eb7 206238                              jsr outqst                                ;; @@2eb7 22
  2942  2eba a000                                ldy #0                                    ;; @@2eba 22
  2943  2ebc b126               _local_1021_20   lda (index2),y                           ; Read error msg from ROM  (ind.ok????) ;; @@2ebc 22
  2944  2ebe 48                                  pha                                       ;; @@2ebe 22
  2945  2ebf 297f                                and #$7f                                  ;; @@2ebf 22
  2946  2ec1 203d68                              jsr outch                                ; Print it ;; @@2ec1 22
  2947  2ec4 c8                                  iny                                       ;; @@2ec4 22
  2948  2ec5 68                                  pla                                       ;; @@2ec5 22
  2949  2ec6 10f4                                bpl _local_1021_20                        ;; @@2ec6 22
  2950  2ec8 aec702                              ldx errnum                               ; retrieve error #     [910925] ;; @@2ec8 22
  2951  2ecb e01e                                cpx #erbrk                                ;; @@2ecb 22
  2952  2ecd f00a                                beq errfin                               ; skip 'error' crap if 'break' ;; @@2ecd 22
  2953  2ecf 207dff                              jsr _primm                                ;; @@2ecf 22
  2954  2ed2 204552524f5200                      !text " ERROR",0                          ;; @@2ed2 22
  2955                           ;; @@2ed9 22
  2956  2ed9 a43c               errfin           ldy curlin+1                             ; direct mode? ;; @@2ed9 23
  2957  2edb c8                                  iny                                       ;; @@2edb 23
  2958  2edc f003                                beq _local_1022_10                       ; yes...no line # ;; @@2edc 23
  2959  2ede 207364                              jsr inprt                                 ;; @@2ede 23
  2960  2ee1 20cb3c             _local_1022_10   jsr highlight_done                       ; restore normal text color????    [910624] ;; @@2ee1 23
  2961                           ;; @@2ee4 23
  2962                          ; .page ;; @@2ee4 23
  2963                          ready_1                                                    ;; @@2ee4 24
  2964  2ee4 a980                                lda #%10000000                            ;; @@2ee4 24
  2965  2ee6 2090ff                              jsr _setmsg                              ; turn Kernel messages on ;; @@2ee6 24
  2966  2ee9 a9c0                                lda #%11000000                            ;; @@2ee9 24
  2967  2eeb 147e                                trb runmod                               ; turn run modes off, leave trace mode on???? ;; @@2eeb 24
  2968                           ;; @@2eed 24
  2969                          ready_2                                                    ;; @@2eed 24
  2970  2eed cf7e0e                              bbs4 runmod,_local_1023_10               ; print appropriate system prompt ;; @@2eed 24
  2971  2ef0 207dff                              jsr _primm                               ; Program mode: print 'ready.' ;; @@2ef0 24
  2972  2ef3 0d52454144592e0d...                 !text cr,"READY.",cr,0                    ;; @@2ef3 24
  2973  2efc 8009                                bra main                                  ;; @@2efc 24
  2974                           ;; @@2efe 24
  2975  2efe 207dff             _local_1023_10   jsr _primm                               ; Edit mode: print 'ok.' ;; @@2efe 24
  2976  2f01 0d4f4b2e0d00                        !text cr,"OK.",cr,0                       ;; @@2f01 24
  2977                           ;; @@2f07 24
  2978                           ;; @@2f07 24
  2979  2f07 6c0203             main             jmp (imain)                              ; MAIN INPUT LOOP ;; @@2f07 25
  2980                           ;; @@2f0a 25
  2981  2f0a a2ff               nmain            ldx #$ff                                 ; set direct mode flag ;; @@2f0a 25
  2982  2f0c 863c                                stx curlin+1                              ;; @@2f0c 25
  2983  2f0e 201c31                              jsr InputLine                            ; get a line of input & buffer it ;; @@2f0e 25
  2984                           ;; @@2f11 25
  2985                          execute_a_line                                            ; EXECUTE PLAIN TEXT IN BUFFER ;; @@2f11 25
  2986  2f11 863d                                stx txtptr                               ; init buffer pointer ;; @@2f11 25
  2987  2f13 843e                                sty txtptr+1                              ;; @@2f13 25
  2988  2f15 208322                              jsr chrget                               ; get first character of null-terminated string ;; @@2f15 25
  2989  2f18 aa                                  tax                                       ;; @@2f18 25
  2990  2f19 f0ec                                beq main                                 ; got null input ;; @@2f19 25
  2991  2f1b 9009                                bcc _local_1024_10                       ; got line number ;; @@2f1b 25
  2992  2f1d 201f23                              jsr crunch                               ; got text- tokenize buffer, ;; @@2f1d 25
  2993  2f20 208522                              jsr chrgot                               ; get first command (token), ;; @@2f20 25
  2994  2f23 83e4fc                              +lbra xeqdir                             ; and execute it ;; @@2f23 25
  2995                           ;; @@2f26 25
  2996                          ;ADD or DELETE NEW LINE ;; @@2f26 25
  2997  2f26 202e32             _local_1024_10   jsr linget                               ; evaluate line number, put into into linnum ;; @@2f26 25
  2998  2f29 4f7e05                              bbr4 runmod,_local_1024_20                ;; @@2f29 25
  2999  2f2c 20e1bc                              jsr edit_crunch                          ; if edit mode, find end of input   [910620] ;; @@2f2c 25
  3000  2f2f 8003                                bra _local_1024_30                        ;; @@2f2f 25
  3001                           ;; @@2f31 25
  3002  2f31 201f23             _local_1024_20   jsr crunch                               ; tokenize rest of input if not edit mode ;; @@2f31 25
  3003  2f34 840d               _local_1024_30   sty count                                ; save length ;; @@2f34 25
  3004  2f36 20fa31                              jsr FindLine                             ; locate line in program ;; @@2f36 25
  3005  2f39 938200                              +lbcc nodel                              ; not found, go insert line into program ;; @@2f39 25
  3006                          ; else delete current line and insert this one ;; @@2f3c 25
  3007                          ; .page ;; @@2f3c 25
  3008                          ; Test: IF new line is longer than the line it replaces, ;; @@2f3c 25
  3009                          ;  THEN IF there isn't enough room in memory to add this new line, ;; @@2f3c 25
  3010                          ;   THEN out-of-memory error ;; @@2f3c 25
  3011                          ; ;; @@2f3c 25
  3012                          ; Before this fix, the old line was deleted BEFORE testing if the new line fit. ;; @@2f3c 25
  3013                          ; ;; @@2f3c 25
  3014                          ; N.B.: I am assuming that lines cannot be greater than 255 chars, as is the ;; @@2f3c 25
  3015                          ; case where the line was entered "normally", that is, using LINGET.  The only ;; @@2f3c 25
  3016                          ; consequence of this assumption is that lines > 255 will fall prey to the ;; @@2f3c 25
  3017                          ; pre-fix problem mentioned above. ;; @@2f3c 25
  3018                           ;; @@2f3c 25
  3019  2f3c a000                                ldy #0                                    ;; @@2f3c 25
  3020  2f3e 20ad22                              jsr indlow                               ; get lsb of the next line's starting address ;; @@2f3e 25
  3021  2f41 38                                  sec                                       ;; @@2f41 25
  3022  2f42 e561                                sbc lowtr                                ; subtract lsb of this line's starting address ;; @@2f42 25
  3023  2f44 38                                  sec                                      ; ignore borrow (gives abs. value) ;; @@2f44 25
  3024  2f45 e904                                sbc #4                                   ; allow for link & line number ;; @@2f45 25
  3025  2f47 e50d                                sbc count                                ; compare with new length ;; @@2f47 25
  3026  2f49 b016                                bcs _local_1024_2                        ; new line is shorter, no problem ;; @@2f49 25
  3027  2f4b 42                                  neg                                      ; convert to positive delta ;; @@2f4b 25
  3028                           ;; @@2f4c 25
  3029  2f4c a483                                ldy text_top+1                           ; get msb of end of text (.c=0) ;; @@2f4c 25
  3030  2f4e 6582                                adc text_top                             ; add our calculated delta to end of text ;; @@2f4e 25
  3031  2f50 9001                                bcc _local_1024_1                         ;; @@2f50 25
  3032  2f52 c8                                  iny                                       ;; @@2f52 25
  3033  2f53 ccd002             _local_1024_1    cpy max_mem_0+1                           ;; @@2f53 25
  3034  2f56 9009                                bcc _local_1024_2                        ; result is less than top-of-memory: ok ;; @@2f56 25
  3035  2f58 d3e6fe                              +lbne omerr                              ; msb >  top, overflow ;; @@2f58 25
  3036  2f5b cdcf02                              cmp max_mem_0                            ; msb's the same, test lsb's ;; @@2f5b 25
  3037  2f5e b3e0fe                              +lbcs omerr                              ; lsb >= top, overflow ;; @@2f5e 25
  3038                           ;; @@2f61 25
  3039                          ; Using DMA device to move text downwards (to delete or replace a line)... ;; @@2f61 25
  3040                          ; ;; @@2f61 25
  3041                          ; lowtr     = destination ;; @@2f61 25
  3042                          ; (lowtr)    = pointer to source (via link bytes of line to be removed) ;; @@2f61 25
  3043                          ; text_top-(lowtr) = number of bytes to move (text_top points to old top of text) ;; @@2f61 25
  3044                          ; new text_top     = text_top -( (lowtr)-lowtr ) ;; @@2f61 25
  3045                           ;; @@2f61 25
  3046  2f61 a561               _local_1024_2    lda lowtr                                ; set up DMA destination ;; @@2f61 25
  3047  2f63 8d4a01                              sta dma1_dest_lo                          ;; @@2f63 25
  3048  2f66 a562                                lda lowtr+1                               ;; @@2f66 25
  3049  2f68 8d4b01                              sta dma1_dest_hi                          ;; @@2f68 25
  3050  2f6b a000                                ldy #0                                    ;; @@2f6b 25
  3051  2f6d 20ad22                              jsr indlow                               ; set up DMA source (& delta) ;; @@2f6d 25
  3052  2f70 8d4701                              sta dma1_src_lo                           ;; @@2f70 25
  3053  2f73 38                                  sec                                       ;; @@2f73 25
  3054  2f74 e561                                sbc lowtr                                 ;; @@2f74 25
  3055  2f76 8524                                sta index1                               ; (delta lo) ;; @@2f76 25
  3056  2f78 c8                                  iny                                       ;; @@2f78 25
  3057  2f79 20ad22                              jsr indlow                                ;; @@2f79 25
  3058  2f7c 8d4801                              sta dma1_src_hi                           ;; @@2f7c 25
  3059  2f7f e562                                sbc lowtr+1                               ;; @@2f7f 25
  3060  2f81 8525                                sta index1+1                             ; (delta hi) ;; @@2f81 25
  3061  2f83 38                                  sec                                       ;; @@2f83 25
  3062  2f84 a582                                lda text_top                             ; set up DMA count ;; @@2f84 25
  3063  2f86 ed4701                              sbc dma1_src_lo                           ;; @@2f86 25
  3064  2f89 8d4501                              sta dma1_cnt_lo                           ;; @@2f89 25
  3065  2f8c a583                                lda text_top+1                            ;; @@2f8c 25
  3066  2f8e ed4801                              sbc dma1_src_hi                           ;; @@2f8e 25
  3067  2f91 8d4601                              sta dma1_cnt_hi                           ;; @@2f91 25
  3068                           ;; @@2f94 25
  3069  2f94 a584                                lda text_bank                             ;; @@2f94 25
  3070                          ; and #%00001111  ;      [910102] ;; @@2f96 25
  3071                          ; and #%01111111  ;      [910520] F018A ;; @@2f96 25
  3072  2f96 8d4901                              sta dma1_src_bank                         ;; @@2f96 25
  3073  2f99 8d4c01                              sta dma1_dest_bank                        ;; @@2f99 25
  3074                           ;; @@2f9c 25
  3075  2f9c a900                                lda #0                                    ;; @@2f9c 25
  3076  2f9e 8d4401                              sta dma1_cmd                             ; dma command (copy, source=start) ;; @@2f9e 25
  3077  2fa1 8d4d01                              sta dma1_subcmd                          ; [910520] F018A ;; @@2fa1 25
  3078  2fa4 8d02d7                              sta dma_ctlr+2                           ; dma_list bank ;; @@2fa4 25
  3079                           ;; @@2fa7 25
  3080  2fa7 a201                                ldx #>dma1_cmd                           ; dma_list ;; @@2fa7 25
  3081  2fa9 a944                                lda #<dma1_cmd                            ;; @@2fa9 25
  3082  2fab 8e01d7                              stx dma_ctlr+1                           ; dma_list hi ;; @@2fab 25
  3083  2fae 8d00d7                              sta dma_ctlr                             ; dma_list lo & trigger ;; @@2fae 25
  3084                           ;; @@2fb1 25
  3085  2fb1 38                                  sec                                      ; calculate & set new text_top ;; @@2fb1 25
  3086  2fb2 a582                                lda text_top                              ;; @@2fb2 25
  3087  2fb4 e524                                sbc index1                                ;; @@2fb4 25
  3088  2fb6 8582                                sta text_top                             ; lo ;; @@2fb6 25
  3089  2fb8 a583                                lda text_top+1                            ;; @@2fb8 25
  3090  2fba e525                                sbc index1+1                              ;; @@2fba 25
  3091  2fbc 8583                                sta text_top+1                           ; hi ;; @@2fbc 25
  3092                          ;fall into routine to insert new line (if any) ;; @@2fbe 25
  3093                           ;; @@2fbe 25
  3094                          ; .page ;; @@2fbe 25
  3095  2fbe 200935             nodel            jsr init_stack                           ; 'clearc' removed since text changes don't require trashing variables ;; @@2fbe 26
  3096  2fc1 20b930                              jsr link_program                         ; fix links ;; @@2fc1 26
  3097  2fc4 20dc44                              jsr error_clear                          ; clear HELP/error flag, assuming he fixed whatever caused current error, if any ;; @@2fc4 26
  3098                           ;; @@2fc7 26
  3099  2fc7 a000                                ldy #0                                    ;; @@2fc7 26
  3100  2fc9 b13d                                lda (txtptr),y                           ; delete line? ("common") ;; @@2fc9 26
  3101  2fcb f339ff                              +lbeq main                               ; yes ;; @@2fcb 26
  3102                           ;; @@2fce 26
  3103  2fce 18                 _local_1025_5    clc                                      ; no...something to insert ;; @@2fce 26
  3104  2fcf a483                                ldy text_top+1                            ;; @@2fcf 26
  3105  2fd1 a582                                lda text_top                              ;; @@2fd1 26
  3106  2fd3 845d                                sty hightr+1                             ; top of block to move (old text_top) ;; @@2fd3 26
  3107  2fd5 855c                                sta hightr                                ;; @@2fd5 26
  3108  2fd7 650d                                adc count                                ; number of characters in line to be inserted ;; @@2fd7 26
  3109  2fd9 9001                                bcc _local_1025_1                         ;; @@2fd9 26
  3110  2fdb c8                                  iny                                       ;; @@2fdb 26
  3111  2fdc 18                 _local_1025_1    clc                                       ;; @@2fdc 26
  3112  2fdd 6904                                adc #4                                   ; plus link and line # ;; @@2fdd 26
  3113  2fdf 9001                                bcc _local_1025_2                        ; gives us destination of move (new text_top) ;; @@2fdf 26
  3114  2fe1 c8                                  iny                                       ;; @@2fe1 26
  3115                           ;; @@2fe2 26
  3116  2fe2 855a               _local_1025_2    sta highds                               ; destination of top ;; @@2fe2 26
  3117  2fe4 845b                                sty highds+1                              ;; @@2fe4 26
  3118  2fe6 ccd002                              cpy max_mem_0+1                          ; make sure new top doesn't crash into top of available ram ;; @@2fe6 26
  3119  2fe9 9009                                bcc _local_1025_4                        ; ok ;; @@2fe9 26
  3120  2feb d353fe                              +lbne omerr                              ; out of memory, don't insert ;; @@2feb 26
  3121  2fee cdcf02                              cmp max_mem_0                             ;; @@2fee 26
  3122  2ff1 b34dfe                              +lbcs omerr                              ; out of memory, don't insert ;; @@2ff1 26
  3123                           ;; @@2ff4 26
  3124  2ff4 8582               _local_1025_4    sta text_top                             ; set new top of text ;; @@2ff4 26
  3125  2ff6 8483                                sty text_top+1                            ;; @@2ff6 26
  3126  2ff8 38                                  sec                                      ; compute number of things to move up ;; @@2ff8 26
  3127  2ff9 a55c                                lda hightr                                ;; @@2ff9 26
  3128  2ffb e561                                sbc lowtr                                ; (old top) - (adr where new line goes) ;; @@2ffb 26
  3129  2ffd a8                                  tay                                      ; lowtr was setup previously by FindLine call ;; @@2ffd 26
  3130  2ffe a55d                                lda hightr+1                              ;; @@2ffe 26
  3131  3000 e562                                sbc lowtr+1                               ;; @@3000 26
  3132  3002 aa                                  tax                                       ;; @@3002 26
  3133                           ;; @@3003 26
  3134                          ; Using DMA device to copy data upwards... ;; @@3003 26
  3135                          ; ;; @@3003 26
  3136                          ; (hightr)   = source  (old top) ;; @@3003 26
  3137                          ; (highds)   = destination (new top) ;; @@3003 26
  3138                          ; .y, .x     = number of bytes to move ;; @@3003 26
  3139                          ; (lowtr)    = where to insert new line (starting with link bytes) ;; @@3003 26
  3140                           ;; @@3003 26
  3141  3003 c35c                                dew hightr                               ; (text_top-1) points to actual last byte ;; @@3003 26
  3142  3005 c35a                                dew highds                                ;; @@3005 26
  3143                           ;; @@3007 26
  3144                          ; lda dma_ctlr+3  ;dma controller version    [910520] F018A ;; @@3007 26
  3145                          ; and #1 ;; @@3007 26
  3146                          ; beq _local_1025_10   ; F018    removed [910808] F018B ;; @@3007 26
  3147  3007 a930                                lda #%00110000                           ; F018A, B ;; @@3007 26
  3148  3009 8d4401             _local_1025_10   sta dma1_cmd                             ; command=copy, source=endpt   [910102] ;; @@3009 26
  3149  300c 8c4501                              sty dma1_cnt_lo                          ; count ;; @@300c 26
  3150  300f 8e4601                              stx dma1_cnt_hi                           ;; @@300f 26
  3151  3012 98                                  tya                                       ;; @@3012 26
  3152  3013 0d4601                              ora dma1_cnt_hi                           ;; @@3013 26
  3153  3016 f02e                                beq _local_1025_70                       ; special case= nothing to move???? should not happen ;; @@3016 26
  3154                           ;; @@3018 26
  3155  3018 a55c                                lda hightr                                ;; @@3018 26
  3156  301a a45d                                ldy hightr+1                              ;; @@301a 26
  3157  301c 8d4701                              sta dma1_src_lo                          ; source ;; @@301c 26
  3158  301f 8c4801                              sty dma1_src_hi                           ;; @@301f 26
  3159  3022 a55a                                lda highds                                ;; @@3022 26
  3160  3024 a45b                                ldy highds+1                              ;; @@3024 26
  3161  3026 8d4a01                              sta dma1_dest_lo                         ; destination ;; @@3026 26
  3162  3029 8c4b01                              sty dma1_dest_hi                          ;; @@3029 26
  3163  302c a584                                lda text_bank                            ; [910520] F018A ;; @@302c 26
  3164                          ; ldx dma1_cmd  ;version?    removed [910808] F018B ;; @@302e 26
  3165                          ; bne _local_1025_20   ; F018A ;; @@302e 26
  3166                          ; and #%00001111  ;      [910102] ;; @@302e 26
  3167                          ; ora #%01000000  ;(copy source=endpoint)    [910102] ;; @@302e 26
  3168  302e 8d4901             _local_1025_20   sta dma1_src_bank                        ; banks ;; @@302e 26
  3169  3031 8d4c01                              sta dma1_dest_bank                        ;; @@3031 26
  3170  3034 a900                                lda #0                                    ;; @@3034 26
  3171  3036 8d4d01                              sta dma1_subcmd                          ; [910520] F018A ;; @@3036 26
  3172  3039 8d02d7                              sta dma_ctlr+2                           ; dma_list bank ;; @@3039 26
  3173  303c a201                                ldx #>dma1_cmd                           ; dma_list ;; @@303c 26
  3174  303e a944                                lda #<dma1_cmd                            ;; @@303e 26
  3175  3040 8e01d7                              stx dma_ctlr+1                           ; dma_list hi ;; @@3040 26
  3176  3043 8d00d7                              sta dma_ctlr                             ; dma_list lo & trigger ;; @@3043 26
  3177                           ;; @@3046 26
  3178                          ; Make links non-null to fool 'chead' ;; @@3046 26
  3179                           ;; @@3046 26
  3180  3046 a000               _local_1025_70   ldy #0                                    ;; @@3046 26
  3181  3048 a901                                lda #1                                    ;; @@3048 26
  3182  304a a261                                ldx #lowtr                                ;; @@304a 26
  3183  304c 200c23                              jsr sta_far_ram0                         ; sta (lowtr),y  y=0 (bleed-thru) ;; @@304c 26
  3184  304f c8                                  iny                                       ;; @@304f 26
  3185  3050 200c23                              jsr sta_far_ram0                         ; sta (lowtr),y  y=1 (bleed-thru) ;; @@3050 26
  3186                           ;; @@3053 26
  3187                          ; Put line number in text ;; @@3053 26
  3188                           ;; @@3053 26
  3189  3053 c8                                  iny                                       ;; @@3053 26
  3190  3054 a516                                lda linnum                                ;; @@3054 26
  3191  3056 200c23                              jsr sta_far_ram0                         ; sta (lowtr),y  y=2 (bleed-thru) ;; @@3056 26
  3192  3059 c8                                  iny                                       ;; @@3059 26
  3193  305a a517                                lda linnum+1                              ;; @@305a 26
  3194  305c 200c23                              jsr sta_far_ram0                         ; sta (lowtr),y  y=3 (bleed-thru) ;; @@305c 26
  3195                           ;; @@305f 26
  3196                          ; Advance 'lowtr' to start of line (past link bytes & line #) ;; @@305f 26
  3197                           ;; @@305f 26
  3198  305f 18                                  clc                                       ;; @@305f 26
  3199  3060 a561                                lda lowtr                                 ;; @@3060 26
  3200  3062 6904                                adc #4                                    ;; @@3062 26
  3201  3064 8561                                sta lowtr                                 ;; @@3064 26
  3202  3066 9002                                bcc _local_1025_80                        ;; @@3066 26
  3203  3068 e662                                inc lowtr+1                               ;; @@3068 26
  3204                           ;; @@306a 26
  3205                           ;; @@306a 26
  3206                          ; Block move line to text ;; @@306a 26
  3207                           ;; @@306a 26
  3208  306a a40d               _local_1025_80   ldy count                                ; use dma ???? [910925] ;; @@306a 26
  3209  306c 88                                  dey                                       ;; @@306c 26
  3210                           ;; @@306d 26
  3211  306d b13d               _local_1025_90   lda (txtptr),y                           ; (from common area) ;; @@306d 26
  3212  306f 200c23                              jsr sta_far_ram0                         ; sta (lowtr),y   (bleed-thru) ;; @@306f 26
  3213  3072 88                                  dey                                       ;; @@3072 26
  3214  3073 c0ff                                cpy #$ff                                  ;; @@3073 26
  3215  3075 d0f6                                bne _local_1025_90                        ;; @@3075 26
  3216                           ;; @@3077 26
  3217                          ; beq _local_1025_90   ;special case= nothing to move???? should not happen ;; @@3077 26
  3218                          ; lda #0   ; F018A, B ;; @@3077 26
  3219                          ; sta dma1_cmd  ;command=copy, source=start ;; @@3077 26
  3220                          ; sty dma1_cnt_lo  ;count ;; @@3077 26
  3221                          ; sta dma1_cnt_hi ;; @@3077 26
  3222                          ; ;; @@3077 26
  3223                          ; lda txtptr ;; @@3077 26
  3224                          ; ldy txtptr+1 ;; @@3077 26
  3225                          ; sta dma1_src_lo  ;source ;; @@3077 26
  3226                          ; sty dma1_src_hi ;; @@3077 26
  3227                          ; lda lowtr ;; @@3077 26
  3228                          ; ldy lowtr+1 ;; @@3077 26
  3229                          ; sta dma1_dest_lo ;destination ;; @@3077 26
  3230                          ; sty dma1_dest_hi ;; @@3077 26
  3231                          ; lda text_bank  ;banks ;; @@3077 26
  3232                          ; sta dma1_dest_bank ;; @@3077 26
  3233                          ; lda #sys_bank  ;???? ;; @@3077 26
  3234                          ; sta dma1_src_bank ;; @@3077 26
  3235                          ; sta dma1_subcmd  ;      [910520] F018A ;; @@3077 26
  3236                          ; sta dma_ctlr+2  ;dma_list bank ;; @@3077 26
  3237                          ; ldx #>dma1_cmd  ;dma_list ;; @@3077 26
  3238                          ; lda #<dma1_cmd ;; @@3077 26
  3239                          ; stx dma_ctlr+1  ;dma_list hi ;; @@3077 26
  3240                          ; sta dma_ctlr  ;dma_list lo & trigger ;; @@3077 26
  3241                          ;_local_1025_90 ;; @@3077 26
  3242  3077 20b930                              jsr link_program                          ;; @@3077 26
  3243  307a 201f35                              jsr reset_txtptr                         ; set up txtptr (was jsr runc) ;; @@307a 26
  3244                           ;; @@307d 26
  3245                          ; Test if AUTO in effect ;; @@307d 26
  3246                           ;; @@307d 26
  3247  307d a574                                lda autinc                               ; if in auto mode, increment val <> 0 ;; @@307d 26
  3248  307f 0575                                ora autinc+1                              ;; @@307f 26
  3249  3081 f033                                beq _local_1025_120                      ; not in ;; @@3081 26
  3250                           ;; @@3083 26
  3251  3083 a516                                lda linnum                               ; yes, construct new line number ;; @@3083 26
  3252  3085 18                                  clc                                       ;; @@3085 26
  3253  3086 6574                                adc autinc                                ;; @@3086 26
  3254  3088 8565                                sta facho+1                               ;; @@3088 26
  3255  308a a517                                lda linnum+1                              ;; @@308a 26
  3256  308c 6575                                adc autinc+1                              ;; @@308c 26
  3257  308e b026                                bcs _local_1025_120                      ; no auto if wrapped ;; @@308e 26
  3258  3090 c9fa                                cmp #$fa                                 ; test if # >= 64000 ;; @@3090 26
  3259  3092 b022                                bcs _local_1025_120                      ; no auto if so. ;; @@3092 26
  3260  3094 8564                                sta facho                                 ;; @@3094 26
  3261  3096 a290                                ldx #$90                                  ;; @@3096 26
  3262  3098 38                                  sec                                       ;; @@3098 26
  3263  3099 20df62                              jsr floatc                               ; float it ;; @@3099 26
  3264  309c 208f64                              jsr fout                                 ; make it into a string ;; @@309c 26
  3265                           ;; @@309f 26
  3266  309f 78                                  sei                                      ; [910710] ;; @@309f 26
  3267  30a0 a200                                ldx #0                                   ; move string into kbd buffer ;; @@30a0 26
  3268  30a2 bd0101             _local_1025_100  lda fbuffr+1,x                           ; copy number formed into buffer, ignoring leading space ;; @@30a2 26
  3269  30a5 f006                                beq _local_1025_110                      ; a null marks end ;; @@30a5 26
  3270  30a7 9db002                              sta _keyd,x                               ;; @@30a7 26
  3271  30aa e8                                  inx                                       ;; @@30aa 26
  3272  30ab d0f5                                bne _local_1025_100                      ; always ;; @@30ab 26
  3273                           ;; @@30ad 26
  3274  30ad a91d               _local_1025_110  lda #29                                  ; cursor right ;; @@30ad 26
  3275  30af 9db002                              sta _keyd,x                               ;; @@30af 26
  3276  30b2 e8                                  inx                                       ;; @@30b2 26
  3277  30b3 86d0                                stx _ndx                                  ;; @@30b3 26
  3278  30b5 58                                  cli                                      ; [910710] ;; @@30b5 26
  3279                           ;; @@30b6 26
  3280  30b6 834efe             _local_1025_120  +lbra main                                ;; @@30b6 26
  3281                           ;; @@30b9 26
  3282                           ;; @@30b9 26
  3283                          ; .page ;; @@30b9 26
  3284                          link_program                                               ;; @@30b9 27
  3285  30b9 a52d                                lda txttab                                ;; @@30b9 27
  3286  30bb a42e                                ldy txttab+1                              ;; @@30bb 27
  3287  30bd 8524                                sta index                                 ;; @@30bd 27
  3288  30bf 8425                                sty index+1                               ;; @@30bf 27
  3289  30c1 18                                  clc                                       ;; @@30c1 27
  3290                           ;; @@30c2 27
  3291  30c2 a000               chead            ldy #0                                    ;; @@30c2 27
  3292  30c4 20c122                              jsr indin1                               ; lda (index),y .. check for null link ;; @@30c4 27
  3293  30c7 d006                                bne _local_1026_10                        ;; @@30c7 27
  3294  30c9 c8                                  iny                                       ;; @@30c9 27
  3295  30ca 20c122                              jsr indin1                               ; lda (index),y ;; @@30ca 27
  3296  30cd f042                                beq lnkrts                                ;; @@30cd 27
  3297                           ;; @@30cf 27
  3298  30cf a003               _local_1026_10   ldy #3                                   ; [900524] ;; @@30cf 27
  3299  30d1 c8                 _local_1026_20   iny                                      ; ???? very expensive loop ???? ;; @@30d1 27
  3300  30d2 c0fe                                cpy #254                                  ;; @@30d2 27
  3301  30d4 b01f                                bcs link_error                           ; failsafe- program is mangled  [910103] ;; @@30d4 27
  3302  30d6 20c122                              jsr indin1                               ; lda (index),y ;; @@30d6 27
  3303  30d9 d0f6                                bne _local_1026_20                        ;; @@30d9 27
  3304  30db c8                                  iny                                       ;; @@30db 27
  3305  30dc 98                                  tya                                       ;; @@30dc 27
  3306  30dd 6524                                adc index                                 ;; @@30dd 27
  3307  30df 48                                  pha                                       ;; @@30df 27
  3308  30e0 a000                                ldy #0                                    ;; @@30e0 27
  3309  30e2 a224                                ldx #index                                ;; @@30e2 27
  3310  30e4 200c23                              jsr sta_far_ram0                         ; sta (index),y   (bleed-thru) ;; @@30e4 27
  3311  30e7 98                                  tya                                       ;; @@30e7 27
  3312  30e8 6525                                adc index+1                               ;; @@30e8 27
  3313  30ea c8                                  iny                                       ;; @@30ea 27
  3314  30eb 200c23                              jsr sta_far_ram0                         ; sta (index),y   (bleed-thru) ;; @@30eb 27
  3315  30ee fa                                  plx                                       ;; @@30ee 27
  3316  30ef 8624                                stx index                                 ;; @@30ef 27
  3317  30f1 8525                                sta index+1                               ;; @@30f1 27
  3318  30f3 80cd                                bra chead                                ; always ;; @@30f3 27
  3319                           ;; @@30f5 27
  3320                           ;; @@30f5 27
  3321                          link_error                                                ; [910103] ;; @@30f5 28
  3322  30f5 20dc3c                              jsr highlight_text                       ; [911119] ;; @@30f5 28
  3323  30f8 207dff                              jsr _primm                                ;; @@30f8 28
  3324  30fb 0d3f50524f475241...                 !text cr,"?PROGRAM MANGLED",cr,0          ;; @@30fb 28
  3325  310e 20cb3c                              jsr highlight_done                       ; [911119] ;; @@310e 28
  3326                           ;; @@3111 28
  3327                           ;; @@3111 28
  3328  3111 60                 lnkrts           rts                                       ;; @@3111 28
  3329                           ;; @@3112 28
  3330                          ; .page ;; @@3112 28
  3331                          ; Function to get a line one character at a time from the input ;; @@3112 28
  3332                          ; channel and build it in the input buffer. ;; @@3112 28
  3333                          ; ;; @@3112 28
  3334                           ;; @@3112 28
  3335                          PromptedInput                                             ; qinlin. ;; @@3112 28
  3336  3112 a515                                lda channl                               ; entry for things line INPUT, wanting a prompt ;; @@3112 28
  3337  3114 d006                                bne InputLine                            ; prompt only if terminal ;; @@3114 28
  3338  3116 206238                              jsr outqst                               ; yes- print '? ' ;; @@3116 28
  3339  3119 205f38                              jsr realsp                                ;; @@3119 28
  3340                           ;; @@311c 28
  3341                           ;; @@311c 28
  3342                          InputLine                                                 ; inlin. ;; @@311c 28
  3343  311c a200                                ldx #0                                   ; read & buffer data until 'return' or buffer full ;; @@311c 28
  3344  311e 204368             _local_1027_10   jsr inchr                                ; get a character ;; @@311e 28
  3345  3121 c900                                cmp #0                                    ;; @@3121 28
  3346  3123 f00f                                beq _local_1027_20                        ;; @@3123 28
  3347  3125 c90d                                cmp #cr                                  ; a carriage return? ;; @@3125 28
  3348  3127 f00b                                beq _local_1027_20                       ; yes...done build ;; @@3127 28
  3349                           ;; @@3129 28
  3350  3129 9d0002                              sta buf,x                                ; no...buffer it ;; @@3129 28
  3351  312c e8                                  inx                                       ;; @@312c 28
  3352  312d e0a1                                cpx #buflen                              ; buffer full? ;; @@312d 28
  3353  312f 90ed                                bcc _local_1027_10                       ; no...continue ;; @@312f 28
  3354  3131 833c45                              +lbra errlen                             ; yes...string too long error ;; @@3131 28
  3355                           ;; @@3134 28
  3356                           ;; @@3134 28
  3357  3134 a900               _local_1027_20   lda #0                                   ; fininl.  terminate input with a null ;; @@3134 28
  3358  3136 9d0002                              sta buf,x                                 ;; @@3136 28
  3359  3139 a2ff                                ldx #<buf_txtptr                         ; set up pointer to start of buffer-1 (for chrget) ;; @@3139 28
  3360  313b a001                                ldy #>buf_txtptr                          ;; @@313b 28
  3361  313d a515                                lda channl                               ; print 'return' only if terminal ;; @@313d 28
  3362  313f f3b506                              +lbeq crdo                                ;; @@313f 28
  3363  3142 60                                  rts                                       ;; @@3142 28
  3364                           ;; @@3143 28
  3365                          ;.end ;; @@3143 28
  3366                          ; .page ;; @@3143 28
  3367                          ; .subttl Runtime Stack Routines ;; @@3143 28
  3368                           ;; @@3143 28
  3369                          ; Find a specific token in the run-time stack. token to be found is in srchtk. ;; @@3143 28
  3370                          ; ;; @@3143 28
  3371                          ; If called by 'for' or 'next', scan entries in stack, looking for a specific ;; @@3143 28
  3372                          ; 'for-variable' (in (forpnt)).  If found, (fndpnt) will point to it, and z is ;; @@3143 28
  3373                          ; set.  Otherwise, (fndpnt) will point to either: ;; @@3143 28
  3374                          ;  1) the non-for token ;; @@3143 28
  3375                          ;  2) bottom-of-stack ;; @@3143 28
  3376                          ; ;; @@3143 28
  3377                          ; Special case: 'next' with no argument will match first 'for' entry on stack ;; @@3143 28
  3378                          ; found, if any.  This case is signaled by a (forpnt) with a msb of $ff (an ;; @@3143 28
  3379                          ; impossible value). ;; @@3143 28
  3380                          ; ;; @@3143 28
  3381                          ; All other calls to search will result in either: ;; @@3143 28
  3382                          ;  1) (success) z = 1, (fndpnt) = address ;; @@3143 28
  3383                          ;  2) (failure) z = 0 ;; @@3143 28
  3384                           ;; @@3143 28
  3385                           ;; @@3143 28
  3386                          ; Set up temporary pointer with current top of stack ;; @@3143 28
  3387                           ;; @@3143 28
  3388  3143 8502               search           sta srchtk                               ; save token to search for ;; @@3143 29
  3389  3145 20dd31                              jsr movtos                               ; tos => fndpnt ;; @@3145 29
  3390                           ;; @@3148 29
  3391                           ;; @@3148 29
  3392                          ; Test if pointer is at bottom of stack.  If so, the item was not found. ;; @@3148 29
  3393                           ;; @@3148 29
  3394  3148 a53f               _local_1028_5    lda fndpnt                                ;; @@3148 29
  3395  314a c9ff                                cmp #<stkbot                              ;; @@314a 29
  3396  314c d006                                bne _local_1028_10                       ; (fndpnt) <> bottom, ok ;; @@314c 29
  3397  314e a540                                lda fndpnt+1                             ; lsb's the same, test msb's ;; @@314e 29
  3398  3150 c905                                cmp #>stkbot                              ;; @@3150 29
  3399  3152 f03d                                beq _local_1028_98                       ; stack empty, rts ;; @@3152 29
  3400                           ;; @@3154 29
  3401  3154 a000               _local_1028_10   ldy #0                                    ;; @@3154 29
  3402  3156 a502                                lda srchtk                               ; what are we looking for? ;; @@3156 29
  3403  3158 c981                                cmp #for_token                           ; 'for' tokens are special cases ;; @@3158 29
  3404  315a d01b                                bne _local_1028_20                        ;; @@315a 29
  3405                           ;; @@315c 29
  3406                          ; Looking for a 'for' token.  If next token examined is not a 'for' token, ;; @@315c 29
  3407                          ; return with z = 0.  Otherwise, check the pointer to its 'for' variable. ;; @@315c 29
  3408                          ; If the variable pointer = (forpnt) or if (forpnt) = $FFxx, return with z=1. ;; @@315c 29
  3409                          ; Otherwise, set up x with length of a 'for' entry, and use the usual ;; @@315c 29
  3410                          ; mechanisim for examining the next entry. ;; @@315c 29
  3411                           ;; @@315c 29
  3412  315c d13f                                cmp (fndpnt),y                           ; indirect ok- looking at runtime stack???? ;; @@315c 29
  3413  315e d033                                bne _local_1028_99                       ; not 'for', do rts with z = 0 ;; @@315e 29
  3414  3160 a002                                ldy #2                                   ; point to msb of 'for' variable ;; @@3160 29
  3415  3162 a54c                                lda forpnt+1                              ;; @@3162 29
  3416  3164 c9ff                                cmp #$ff                                  ;; @@3164 29
  3417  3166 f02b                                beq _local_1028_99                       ; do rts with z = 1 ;; @@3166 29
  3418  3168 d13f                                cmp (fndpnt),y                            ;; @@3168 29
  3419  316a d007                                bne _local_1028_15                       ; not right variable, keep looking. ;; @@316a 29
  3420  316c 88                                  dey                                       ;; @@316c 29
  3421  316d a54b                                lda forpnt                               ; test lsb ;; @@316d 29
  3422  316f d13f                                cmp (fndpnt),y                            ;; @@316f 29
  3423  3171 f020                                beq _local_1028_99                       ; a hit! rts with z = 1 ;; @@3171 29
  3424                           ;; @@3173 29
  3425  3173 a212               _local_1028_15   ldx #lenfor                               ;; @@3173 29
  3426  3175 800e                                bra _local_1028_30                       ; keep looking ;; @@3175 29
  3427                           ;; @@3177 29
  3428  3177 b13f               _local_1028_20   lda (fndpnt),y                            ;; @@3177 29
  3429  3179 c502                                cmp srchtk                               ; is this the correct type of entry? ;; @@3179 29
  3430  317b f016                                beq _local_1028_99                       ; rts with z = 1 ;; @@317b 29
  3431                           ;; @@317d 29
  3432                          ; The entry on top of the run-time stack is not the entry we are looking for. ;; @@317d 29
  3433                          ; Find out what is there, and advance temp. pointer past it. ;; @@317d 29
  3434                           ;; @@317d 29
  3435  317d a212                                ldx #lenfor                              ; is it a 'for' entry? ;; @@317d 29
  3436  317f c981                                cmp #for_token                            ;; @@317f 29
  3437  3181 f002                                beq _local_1028_30                        ;; @@3181 29
  3438  3183 a205                                ldx #5                                   ; must be gosub or do by default ;; @@3183 29
  3439                           ;; @@3185 29
  3440  3185 8a                 _local_1028_30   txa                                       ;; @@3185 29
  3441  3186 18                                  clc                                       ;; @@3186 29
  3442  3187 653f                                adc fndpnt                                ;; @@3187 29
  3443  3189 853f                                sta fndpnt                                ;; @@3189 29
  3444  318b 90bb                                bcc _local_1028_5                         ;; @@318b 29
  3445  318d e640                                inc fndpnt+1                              ;; @@318d 29
  3446  318f 80b7                                bra _local_1028_5                        ; always ;; @@318f 29
  3447                           ;; @@3191 29
  3448  3191 a001               _local_1028_98   ldy #1                                   ; clear z flag ;; @@3191 29
  3449  3193 60                 _local_1028_99   rts                                       ;; @@3193 29
  3450                           ;; @@3194 29
  3451                          ; .page ;; @@3194 29
  3452                          ; GETSTK ;; @@3194 29
  3453                          ; ;; @@3194 29
  3454                          ; Add (.A) elements to top of run-time stack.  Error if result exceeds tos. ;; @@3194 29
  3455                           ;; @@3194 29
  3456  3194 49ff               getstk           eor #$ff                                 ; make value 2's comp. ;; @@3194 30
  3457  3196 38                                  sec                                       ;; @@3196 30
  3458  3197 657c                                adc tos                                   ;; @@3197 30
  3459  3199 857c                                sta tos                                   ;; @@3199 30
  3460  319b a47d                                ldy tos+1                                 ;; @@319b 30
  3461  319d b001                                bcs _local_1029_10                        ;; @@319d 30
  3462  319f 88                                  dey                                       ;; @@319f 30
  3463  31a0 847d               _local_1029_10   sty tos+1                                 ;; @@31a0 30
  3464  31a2 c004                                cpy #>stktop                              ;; @@31a2 30
  3465  31a4 939afc                              +lbcc omerr                               ;; @@31a4 30
  3466  31a7 d005                                bne _local_1029_20                        ;; @@31a7 30
  3467  31a9 c57c                                cmp tos                                   ;; @@31a9 30
  3468  31ab 9393fc                              +lbcc omerr                               ;; @@31ab 30
  3469  31ae 60                 _local_1029_20   rts                                       ;; @@31ae 30
  3470                           ;; @@31af 30
  3471                          ; .page ;; @@31af 30
  3472                          ; (a,y) is a certain address.  REASON makes sure it is less than (fretop). ;; @@31af 30
  3473                           ;; @@31af 30
  3474  31af c436               reason           cpy fretop+1                              ;; @@31af 31
  3475  31b1 9029                                bcc _local_1030_4                         ;; @@31b1 31
  3476  31b3 d004                                bne _local_1030_1                        ; go garbage collect ;; @@31b3 31
  3477  31b5 c535                                cmp fretop                                ;; @@31b5 31
  3478  31b7 9023                                bcc _local_1030_4                         ;; @@31b7 31
  3479                           ;; @@31b9 31
  3480  31b9 48                 _local_1030_1    pha                                       ;; @@31b9 31
  3481  31ba a209                                ldx #9                                   ; if tempf2 has zero in between ;; @@31ba 31
  3482  31bc 98                                  tya                                       ;; @@31bc 31
  3483                           ;; @@31bd 31
  3484  31bd 48                 _local_1030_2    pha                                       ;; @@31bd 31
  3485  31be b559                                lda highds-1,x                           ; save highds on stack ;; @@31be 31
  3486  31c0 ca                                  dex                                       ;; @@31c0 31
  3487  31c1 10fa                                bpl _local_1030_2                        ; put 8 of them on stack ;; @@31c1 31
  3488  31c3 20335c                              jsr garba2                               ; go garbage collect ;; @@31c3 31
  3489  31c6 a2f7                                ldx #$f7                                  ;; @@31c6 31
  3490                           ;; @@31c8 31
  3491  31c8 68                 _local_1030_3    pla                                       ;; @@31c8 31
  3492  31c9 9563                                sta highds+9,x                           ; restore after garbage collect ;; @@31c9 31
  3493  31cb e8                                  inx                                       ;; @@31cb 31
  3494  31cc 30fa                                bmi _local_1030_3                         ;; @@31cc 31
  3495  31ce 7a                                  ply                                       ;; @@31ce 31
  3496  31cf 68                                  pla                                      ; restore .a and .y ;; @@31cf 31
  3497  31d0 c436                                cpy fretop+1                             ; compare highs ;; @@31d0 31
  3498  31d2 9008                                bcc _local_1030_4                         ;; @@31d2 31
  3499  31d4 d36afc                              +lbne omerr                              ; higher is bad ;; @@31d4 31
  3500  31d7 c535                                cmp fretop                               ; compare the lows ;; @@31d7 31
  3501  31d9 b365fc                              +lbcs omerr                               ;; @@31d9 31
  3502  31dc 60                 _local_1030_4    rts                                       ;; @@31dc 31
  3503                           ;; @@31dd 31
  3504                          ; .page ;; @@31dd 31
  3505                           ;; @@31dd 31
  3506                          ;  Utilities involved in the operation of the BASIC run-time stack. ;; @@31dd 31
  3507                           ;; @@31dd 31
  3508                           ;; @@31dd 31
  3509                          ; Move top-of-stack pointer to (fndpnt) ;; @@31dd 31
  3510                           ;; @@31dd 31
  3511  31dd a57c               movtos           lda tos                                   ;; @@31dd 32
  3512  31df 853f                                sta fndpnt                                ;; @@31df 32
  3513  31e1 a57d                                lda tos+1                                 ;; @@31e1 32
  3514  31e3 8540                                sta fndpnt+1                              ;; @@31e3 32
  3515  31e5 60                                  rts                                       ;; @@31e5 32
  3516                           ;; @@31e6 32
  3517                           ;; @@31e6 32
  3518                           ;; @@31e6 32
  3519                          ; move (fndpnt) to (tos) ;; @@31e6 32
  3520                           ;; @@31e6 32
  3521  31e6 a53f               movfnd           lda fndpnt                                ;; @@31e6 32
  3522  31e8 857c                                sta tos                                   ;; @@31e8 32
  3523  31ea a540                                lda fndpnt+1                              ;; @@31ea 32
  3524  31ec 857d                                sta tos+1                                 ;; @@31ec 32
  3525  31ee 60                                  rts                                       ;; @@31ee 32
  3526                           ;; @@31ef 32
  3527                          ; Reduce size of run-time stack by (y).  No error checking performed! ;; @@31ef 32
  3528                           ;; @@31ef 32
  3529  31ef 98                 rlsstk           tya                                       ;; @@31ef 32
  3530  31f0 18                                  clc                                       ;; @@31f0 32
  3531  31f1 657c                                adc tos                                   ;; @@31f1 32
  3532  31f3 857c                                sta tos                                   ;; @@31f3 32
  3533  31f5 9002                                bcc _local_1031_10                        ;; @@31f5 32
  3534  31f7 e67d                                inc tos+1                                 ;; @@31f7 32
  3535  31f9 60                 _local_1031_10   rts                                       ;; @@31f9 32
  3536                           ;; @@31fa 32
  3537                          ;.end ;; @@31fa 32
  3538                          ; .page ;; @@31fa 32
  3539                          ; .subttl FindLine ;; @@31fa 32
  3540                           ;; @@31fa 32
  3541                          ; FindLine ;; @@31fa 32
  3542                          ; Searches the program text for the line whose number is passed in "linnum". ;; @@31fa 32
  3543                          ; There are two possible returns: ;; @@31fa 32
  3544                          ; ;; @@31fa 32
  3545                          ; 1) carry set. ;; @@31fa 32
  3546                          ;  Line found.  (lowtr) points to the link bytes of line sought. ;; @@31fa 32
  3547                          ; ;; @@31fa 32
  3548                          ; 2) carry clear. ;; @@31fa 32
  3549                          ;  Line not found.  (lowtr) points to the link bytes of the next ;; @@31fa 32
  3550                          ;  line greater than the one sought. ;; @@31fa 32
  3551                           ;; @@31fa 32
  3552                          FindLine                                                   ;; @@31fa 33
  3553  31fa a52d                                lda txttab                               ; init pointer to beginning of program ;; @@31fa 33
  3554  31fc a62e                                ldx txttab+1                              ;; @@31fc 33
  3555                           ;; @@31fe 33
  3556                          FindLink                                                   ;; @@31fe 33
  3557  31fe 8561                                sta lowtr                                ; current position in program ;; @@31fe 33
  3558  3200 8662                                stx lowtr+1                               ;; @@3200 33
  3559  3202 a001                                ldy #1                                    ;; @@3202 33
  3560  3204 20ad22                              jsr indlow                               ; end of program (null link)? ;; @@3204 33
  3561  3207 f023                                beq _local_1032_3                        ; yes, exit with .c=0 (not found) ;; @@3207 33
  3562  3209 c8                                  iny                                       ;; @@3209 33
  3563  320a c8                                  iny                                       ;; @@320a 33
  3564  320b 20ad22                              jsr indlow                               ; get line number of this line (high byte first) ;; @@320b 33
  3565                          ; sta syntmp ;; @@320e 33
  3566                          ; lda linnum+1 ;is this the line we're looking for? ;; @@320e 33
  3567                          ; cmp syntmp ;; @@320e 33
  3568                          ; bcc _local_1032_4  ; no- too high, so the line does not exist, exit ;; @@320e 33
  3569                          ; beq _local_1032_1 ;; @@320e 33
  3570                          ; dey  ; no- too low, so get link to next line ;; @@320e 33
  3571                          ; bra _local_1032_2 ;; @@320e 33
  3572  320e c517                                cmp linnum+1                             ; is this the line we're looking for?   [910925] ;; @@320e 33
  3573  3210 f005                                beq _local_1032_1                        ; maybe ;; @@3210 33
  3574  3212 b018                                bcs _local_1032_3                        ; no- too high, so the line does not exist, exit with .c=0 ;; @@3212 33
  3575  3214 88                                  dey                                      ; no- too low, so get link to next line ;; @@3214 33
  3576  3215 800a                                bra _local_1032_2                         ;; @@3215 33
  3577                           ;; @@3217 33
  3578  3217 88                 _local_1032_1    dey                                      ; maybe- have to check low byte ;; @@3217 33
  3579  3218 20ad22                              jsr indlow                                ;; @@3218 33
  3580                          ; sta syntmp ;; @@321b 33
  3581                          ; lda linnum ;; @@321b 33
  3582                          ; cmp syntmp ;; @@321b 33
  3583                          ; bcc _local_1032_4  ; no- too high, exit ;; @@321b 33
  3584                          ; beq _local_1032_4  ; yes- got it, exit ;; @@321b 33
  3585  321b c516                                cmp linnum                               ; is this the line we're looking for?   [910925] ;; @@321b 33
  3586  321d f00e                                beq _local_1032_4                        ; yes- got it, exit with .c=1 ;; @@321d 33
  3587  321f b00b                                bcs _local_1032_3                        ; no- too high, so the line does not exist, exit with .c=0 ;; @@321f 33
  3588                           ;; @@3221 33
  3589  3221 88                 _local_1032_2    dey                                      ; get link to next line ;; @@3221 33
  3590  3222 20ad22                              jsr indlow                                ;; @@3222 33
  3591  3225 aa                                  tax                                       ;; @@3225 33
  3592  3226 88                                  dey                                       ;; @@3226 33
  3593  3227 20ad22                              jsr indlow                                ;; @@3227 33
  3594  322a 80d2                                bra FindLink                             ; continue looking ;; @@322a 33
  3595                           ;; @@322c 33
  3596                           ;; @@322c 33
  3597  322c 18                 _local_1032_3    clc                                      ; exit, line not found (.c=0) ;; @@322c 33
  3598  322d 60                 _local_1032_4    rts                                      ; exit, line found (.c=1) ;; @@322d 33
  3599                           ;; @@322e 33
  3600                          ;.end ;; @@322e 33
  3601                          ; .page ;; @@322e 33
  3602                          ; .subttl LinGet ;; @@322e 33
  3603                           ;; @@322e 33
  3604                          ; LINGET  Reads a line # from the current txtptr position ;; @@322e 33
  3605                          ;   and stores it in linnum  (valid range is 0-63999). ;; @@322e 33
  3606                          ; ;; @@322e 33
  3607                          ;   On exit txtptr is pointing to the terminating char ;; @@322e 33
  3608                          ;   which is in .a with condition codes set. ;; @@322e 33
  3609                          ;   Endchr will be =0 if no digit input, else >0.  Use it ;; @@322e 33
  3610                          ;   to distinguish between line # 0 & null input. ;; @@322e 33
  3611                           ;; @@322e 33
  3612  322e a200               linget           ldx #0                                   ; enter with CHRGET flags set ;; @@322e 34
  3613  3230 860b                                stx endchr                               ; flags line # input ;; @@3230 34
  3614  3232 8616                                stx linnum                               ; init line # to 0 ;; @@3232 34
  3615  3234 8617                                stx linnum+1                              ;; @@3234 34
  3616                           ;; @@3236 34
  3617  3236 b04b               _local_1033_10   bcs _local_1033_40                       ; it's not a digit, do rts ;; @@3236 34
  3618  3238 e60b               _local_1033_15   inc endchr                               ; indicate line # input ;; @@3238 34
  3619  323a e92f                                sbc #$2f                                 ; '0'-1 since .c=0 ;; @@323a 34
  3620  323c 850a                                sta charac                               ; save for later ;; @@323c 34
  3621  323e a517                                lda linnum+1                              ;; @@323e 34
  3622  3240 8524                                sta index                                 ;; @@3240 34
  3623  3242 c919                                cmp #25                                  ; line number will be < 64000? ;; @@3242 34
  3624  3244 9006                                bcc _local_1033_20                       ; yes, continue ;; @@3244 34
  3625  3246 9f553a                              bbs1 helper,_local_1033_40               ; no, if called by AutoScroll it's okay ;; @@3246 34
  3626  3249 83fefb                              +lbra snerr                              ; else syntax error ;; @@3249 34
  3627                           ;; @@324c 34
  3628  324c a516               _local_1033_20   lda linnum                                ;; @@324c 34
  3629  324e 0a                                  asl                                      ; multiply by 10 ;; @@324e 34
  3630  324f 2624                                rol index                                 ;; @@324f 34
  3631  3251 0a                                  asl                                       ;; @@3251 34
  3632  3252 2624                                rol index                                 ;; @@3252 34
  3633  3254 6516                                adc linnum                                ;; @@3254 34
  3634  3256 8516                                sta linnum                                ;; @@3256 34
  3635  3258 a524                                lda index                                 ;; @@3258 34
  3636  325a 6517                                adc linnum+1                              ;; @@325a 34
  3637  325c 8517                                sta linnum+1                              ;; @@325c 34
  3638  325e 0616                                asl linnum                                ;; @@325e 34
  3639  3260 2617                                rol linnum+1                              ;; @@3260 34
  3640  3262 a516                                lda linnum                                ;; @@3262 34
  3641  3264 650a                                adc charac                               ; add in digit ;; @@3264 34
  3642  3266 8516                                sta linnum                                ;; @@3266 34
  3643  3268 9002                                bcc _local_1033_30                        ;; @@3268 34
  3644  326a e617                                inc linnum+1                              ;; @@326a 34
  3645                          _local_1033_30                                             ;; @@326c 34
  3646                          ; jsr chrget  ;ALLOW SPACES to terminate number  [910620] ;; @@326c 34
  3647                          ; bra _local_1033_10 ;; @@326c 34
  3648  326c e33d                                inw txtptr                               ; get next character from text ;; @@326c 34
  3649  326e a000                                ldy #0                                   ; re-get current character from text ;; @@326e 34
  3650  3270 20c522                              jsr indtxt                               ; lda (txtptr),y from RAM0 ;; @@3270 34
  3651  3273 c920                                cmp #' '                                 ; space=eol    [910708] ;; @@3273 34
  3652  3275 f00d                                beq _local_1033_50                        ;; @@3275 34
  3653  3277 c93a                                cmp #':'                                 ;  ;; @@3277 34
  3654  3279 b008                                bcs _local_1033_40                       ; eol ;; @@3279 34
  3655  327b 38                                  sec                                       ;; @@327b 34
  3656  327c e930                                sbc #'0'                                 ; alpha or numeric? ;; @@327c 34
  3657  327e 38                                  sec                                       ;; @@327e 34
  3658  327f e9d0                                sbc #$d0                                  ;; @@327f 34
  3659  3281 90b5                                bcc _local_1033_15                       ; numeric ;; @@3281 34
  3660  3283 60                 _local_1033_40   rts                                      ; exit ;; @@3283 34
  3661                           ;; @@3284 34
  3662  3284 20a540             _local_1033_50   jsr chargt                               ; terminating character is a space, eat it just this once ;; @@3284 34
  3663  3287 8304f0                              +lbra chrtst                             ; return with flags set appropriately (esp. for 'range') ;; @@3287 34
  3664                           ;; @@328a 34
  3665                          ;.end ;; @@328a 34
  3666                          ; .page ;; @@328a 34
  3667                          ; .subttl LIST ;; @@328a 34
  3668                           ;; @@328a 34
  3669  328a 7755               list             rmb7 helper                              ; clear 'help' flag for p1line ;; @@328a 35
  3670                           ;; @@328c 35
  3671                          ; Determine which form of LIST we have... ;; @@328c 35
  3672                           ;; @@328c 35
  3673  328c f3a900                              +lbeq list_memory                        ; branch if terminator (no parameter) ;; @@328c 35
  3674  328f 93a600                              +lbcc list_memory                        ; branch if a number (assume range parameter) ;; @@328f 35
  3675  3292 c9ab                                cmp #minus_token                          ;; @@3292 35
  3676  3294 f3a100                              +lbeq list_memory                        ; branch if a dash (assume range parameter) ;; @@3294 35
  3677                           ;; @@3297 35
  3678                           ;; @@3297 35
  3679                          ; LIST command is of the form  LIST filename [,U#] [,D#] ;; @@3297 35
  3680                           ;; @@3297 35
  3681                          list_file                                                  ;; @@3297 35
  3682  3297 a9e6                                lda #$e6                                 ; parse:  filename [,U#] [,D#] ;; @@3297 35
  3683  3299 202074                              jsr dosprs                               ; (like dopen:  0 0 0 *  * 0 0 1 ) ;; @@3299 35
  3684  329c 20dc77                              jsr chk1                                 ; check parameters ;; @@329c 35
  3685  329f a900                                lda #0                                    ;; @@329f 35
  3686  32a1 8d8311                              sta dossa                                ; setup as dload would (0 = load channel) ;; @@32a1 35
  3687  32a4 201d71                              jsr find_la                              ; find an available la to use (cannot use reserved one) ;; @@32a4 35
  3688  32a7 a009                                ldy #fopn                                 ;; @@32a7 35
  3689  32a9 a204                                ldx #4                                    ;; @@32a9 35
  3690  32ab 20fd70                              jsr open_file                            ; open the file ;; @@32ab 35
  3691  32ae b077                                bcs list_err                             ; exit if error ;; @@32ae 35
  3692                           ;; @@32b0 35
  3693  32b0 ae8111                              ldx dosla                                 ;; @@32b0 35
  3694  32b3 20c6ff                              jsr _chkin                               ; get input channel ;; @@32b3 35
  3695  32b6 b06f                                bcs list_err                             ; exit if bad?? ;; @@32b6 35
  3696  32b8 20cfff                              jsr _basin                               ; waste 'load address' ;; @@32b8 35
  3697  32bb 20cfff                              jsr _basin                                ;; @@32bb 35
  3698                           ;; @@32be 35
  3699  32be 20cfff             _local_1034_10   jsr _basin                               ; get link bytes ;; @@32be 35
  3700  32c1 8d0013                              sta dosstr                                ;; @@32c1 35
  3701  32c4 20cfff                              jsr _basin                                ;; @@32c4 35
  3702  32c7 8d0113                              sta dosstr+1                              ;; @@32c7 35
  3703  32ca 0d0013                              ora dosstr                                ;; @@32ca 35
  3704  32cd f051                                beq list_exit                            ; done if null pointer ;; @@32cd 35
  3705  32cf 20b7ff                              jsr _readst                               ;; @@32cf 35
  3706  32d2 d04c                                bne list_exit                            ; done if eof or bad status ;; @@32d2 35
  3707                          ; ???? assumes serial bus ;; @@32d4 35
  3708  32d4 a913                                lda #>dosstr                             ; point p1line's pointer at our line buffer ;; @@32d4 35
  3709  32d6 a200                                ldx #<dosstr                              ;; @@32d6 35
  3710  32d8 8562                                sta lowtr+1                               ;; @@32d8 35
  3711  32da 8661                                stx lowtr                                 ;; @@32da 35
  3712                           ;; @@32dc 35
  3713  32dc a202                                ldx #2                                    ;; @@32dc 35
  3714  32de 20cfff                              jsr _basin                               ; read line into buffer ;; @@32de 35
  3715  32e1 9d0013                              sta dosstr,x                              ;; @@32e1 35
  3716  32e4 e8                                  inx                                       ;; @@32e4 35
  3717  32e5 20cfff                              jsr _basin                               ; 2-byte line # ;; @@32e5 35
  3718  32e8 9d0013                              sta dosstr,x                              ;; @@32e8 35
  3719  32eb e8                                  inx                                       ;; @@32eb 35
  3720  32ec e0ff               _local_1034_20   cpx #255                                 ; check buffer (buflen????) ;; @@32ec 35
  3721  32ee b37f43                              +lbcs errlen                             ; 'too long' error ;; @@32ee 35
  3722  32f1 20cfff                              jsr _basin                                ;; @@32f1 35
  3723  32f4 9d0013                              sta dosstr,x                              ;; @@32f4 35
  3724  32f7 e8                                  inx                                       ;; @@32f7 35
  3725  32f8 a8                                  tay                                      ; save char ;; @@32f8 35
  3726  32f9 20b7ff                              jsr _readst                              ; check channel status (serial bus????) ;; @@32f9 35
  3727  32fc d022                                bne list_exit                            ; exit if eof or error ;; @@32fc 35
  3728  32fe 20e1ff                              jsr _stop                                 ;; @@32fe 35
  3729  3301 f01d                                beq list_exit                            ; exit if stop key down ;; @@3301 35
  3730  3303 98                                  tya                                       ;; @@3303 35
  3731  3304 d0e6                                bne _local_1034_20                       ; loop until eol ;; @@3304 35
  3732                           ;; @@3306 35
  3733  3306 20c770                              jsr dcato                                ; get output channel ;; @@3306 35
  3734  3309 20f737                              jsr crdo                                 ; start new line ;; @@3309 35
  3735  330c ae0213                              ldx dosstr+2                             ; get line # ;; @@330c 35
  3736  330f ad0313                              lda dosstr+3                              ;; @@330f 35
  3737  3312 207733                              jsr p1line                               ; print line #, space, and the line of code ;; @@3312 35
  3738  3315 20ccff                              jsr _clrch                                ;; @@3315 35
  3739  3318 ae8111                              ldx dosla                                 ;; @@3318 35
  3740  331b 20c6ff                              jsr _chkin                               ; get input channel ;; @@331b 35
  3741  331e 909e                                bcc _local_1034_10                       ; [900730] ;; @@331e 35
  3742                           ;; @@3320 35
  3743                          list_exit                                                  ;; @@3320 36
  3744  3320 20c770                              jsr dcato                                ; flush last line with a <cr> ;; @@3320 36
  3745  3323 20f737                              jsr crdo                                 ; flush current line ;; @@3323 36
  3746  3326 18                                  clc                                      ; no errors    [910404] ;; @@3326 36
  3747                          list_err                                                   ;; @@3327 36
  3748  3327 08                                  php                                      ; save error status   [910404] ;; @@3327 36
  3749  3328 48                                  pha                                       ;; @@3328 36
  3750  3329 20b438                              jsr release_channels                     ; release cmd channel, restore terminal ;; @@3329 36
  3751  332c ad8111                              lda dosla                                 ;; @@332c 36
  3752                          ; bra close_out  ;    removed [900725] ;; @@332f 36
  3753  332f 18                                  clc                                      ; a real close   new [910404] ;; @@332f 36
  3754  3330 20c3ff                              jsr _close                                ;; @@3330 36
  3755  3333 68                                  pla                                      ; pop error status, if any ;; @@3333 36
  3756  3334 28                                  plp                                       ;; @@3334 36
  3757  3335 833635                              +lbra exit_disk_op                        ;; @@3335 36
  3758                           ;; @@3338 36
  3759                          ; .page ;; @@3338 36
  3760                          ; LIST command is of the form  LIST [range] ;; @@3338 36
  3761                           ;; @@3338 36
  3762                          list_memory                                                ;; @@3338 36
  3763  3338 205042                              jsr range                                ; set up line range ;; @@3338 36
  3764                           ;; @@333b 36
  3765  333b a001               _local_1035_10   ldy #1                                    ;; @@333b 36
  3766  333d 20ad22                              jsr indlow                               ; get ms byte of line to list's pointer ;; @@333d 36
  3767  3340 d007                                bne _local_1035_20                       ; ok if not zero, but.. ;; @@3340 36
  3768  3342 88                                  dey                                       ;; @@3342 36
  3769  3343 20ad22                              jsr indlow                                ;; @@3343 36
  3770  3346 f3ae04                              +lbeq crdo                               ; ..if ls byte is also zero, we're done ;; @@3346 36
  3771                           ;; @@3349 36
  3772  3349 20cc2c             _local_1035_20   jsr is_stop_key_down                      ;; @@3349 36
  3773  334c 20f737                              jsr crdo                                 ; new line ;; @@334c 36
  3774  334f a002                                ldy #2                                    ;; @@334f 36
  3775  3351 20ad22                              jsr indlow                               ; get ms byte of line number ;; @@3351 36
  3776  3354 aa                                  tax                                       ;; @@3354 36
  3777  3355 c8                                  iny                                       ;; @@3355 36
  3778  3356 20ad22                              jsr indlow                               ; get ls byte ;; @@3356 36
  3779                           ;; @@3359 36
  3780  3359 c517                                cmp linnum+1                             ; test if we are past the last line requested ;; @@3359 36
  3781  335b d004                                bne _local_1035_30                        ;; @@335b 36
  3782  335d e416                                cpx linnum                                ;; @@335d 36
  3783  335f f003                                beq _local_1035_40                        ;; @@335f 36
  3784  3361 b39304             _local_1035_30   +lbcs crdo                               ; next line is > last line requested, exit ;; @@3361 36
  3785  3364 207733             _local_1035_40   jsr p1line                               ; print line #, space, and the line of code ;; @@3364 36
  3786  3367 a000                                ldy #0                                   ; move 'pointer to next line' into (lowtr) ;; @@3367 36
  3787  3369 20ad22                              jsr indlow                                ;; @@3369 36
  3788  336c aa                                  tax                                       ;; @@336c 36
  3789  336d c8                                  iny                                       ;; @@336d 36
  3790  336e 20ad22                              jsr indlow                                ;; @@336e 36
  3791  3371 8661                                stx lowtr                                 ;; @@3371 36
  3792  3373 8562                                sta lowtr+1                               ;; @@3373 36
  3793  3375 80c4                                bra _local_1035_10                        ;; @@3375 36
  3794                           ;; @@3377 36
  3795                          ; .page ;; @@3377 36
  3796                          ;****************************************************** ;; @@3377 36
  3797                          ; P1LINE Print 1 line of BASIC text ;; @@3377 36
  3798                          ; ;; @@3377 36
  3799                          ; Entry: (a,x) contains line number low,high ;; @@3377 36
  3800                          ;  (lowtr) points to beginning of line ;; @@3377 36
  3801                          ; ;; @@3377 36
  3802                          ; next-line   line-num  BASIC text......  null ;; @@3377 36
  3803                          ; lo    hi    lo    hi  byte byte...byte   00 ;; @@3377 36
  3804                          ;        ^           ^     ^ ;; @@3377 36
  3805                          ;    (lowtr)        .A    .X ;; @@3377 36
  3806                          ;****************************************************** ;; @@3377 36
  3807                           ;; @@3377 36
  3808  3377 4f7e03             p1line           bbr4 runmod,_local_1036_10               ; [910620] ;; @@3377 37
  3809  337a 837989                              +lbra edit_p1line                        ; handle things differently for plain text ;; @@337a 37
  3810                           ;; @@337d 37
  3811  337d a003               _local_1036_10   ldy #3                                    ;; @@337d 37
  3812  337f 844b                                sty lstpnt                                ;; @@337f 37
  3813  3381 8411                                sty dores                                ; reset quote-switch ;; @@3381 37
  3814  3383 207f64                              jsr linprt                               ; print line number ;; @@3383 37
  3815  3386 a920                                lda #' '                                 ; print a space ;; @@3386 37
  3816                           ;; @@3388 37
  3817  3388 a44b               p1l010           ldy lstpnt                                ;; @@3388 38
  3818  338a 297f                                and #$7f                                  ;; @@338a 38
  3819                           ;; @@338c 38
  3820  338c c93a               p1l015           cmp #':'                                 ; end-of-stmt?     [900516] ;; @@338c 38
  3821  338e d00b                                bne _local_1037_5                        ; no ;; @@338e 38
  3822  3390 7f5508                              bbr7 helper,_local_1037_5                ; yes, but skip e-o-s check if not HELP... ;; @@3390 38
  3823  3393 ff1105                              bbs7 dores,_local_1037_5                 ; or ':' is inside quotes ;; @@3393 38
  3824  3396 20cb3c                              jsr highlight_done                       ; yes, restore normal text color ;; @@3396 38
  3825  3399 a93a                                lda #':'                                  ;; @@3399 38
  3826                           ;; @@339b 38
  3827  339b 203d68             _local_1037_5    jsr outch                                ; outdo ;; @@339b 38
  3828  339e c922                                cmp #'"'                                 ; if quote character, toggle quote-switch ;; @@339e 38
  3829  33a0 d006                                bne _local_1037_10                        ;; @@33a0 38
  3830  33a2 a511                                lda dores                                 ;; @@33a2 38
  3831  33a4 49ff                                eor #$ff                                  ;; @@33a4 38
  3832  33a6 8511                                sta dores                                 ;; @@33a6 38
  3833                           ;; @@33a8 38
  3834  33a8 c8                 _local_1037_10   iny                                      ; point to next character (should never wrap) ;; @@33a8 38
  3835  33a9 8f5506                              bbs0 helper,_local_1037_15               ; branch if highlighting tokens ;; @@33a9 38
  3836  33ac df5503                              bbs5 helper,_local_1037_15               ; branch if called by FIND/CHANGE ;; @@33ac 38
  3837  33af 7f5503                              bbr7 helper,_local_1037_20               ; branch if called by LIST or HELP satisfied ;; @@33af 38
  3838  33b2 20963c             _local_1037_15   jsr helpsb                                ;; @@33b2 38
  3839                           ;; @@33b5 38
  3840  33b5 20ad22             _local_1037_20   jsr indlow                                ;; @@33b5 38
  3841  33b8 f31009                              +lbeq highlight_done                     ; finished when trailing null is found ;; @@33b8 38
  3842  33bb 6c0603                              jmp (iqplop)                             ; usually points to nqplop ;; @@33bb 38
  3843                           ;; @@33be 38
  3844                          ; .page ;; @@33be 38
  3845                          nqplop                                                    ; <<<<<<< vector entry ;; @@33be 39
  3846  33be 10cc                                bpl p1l015                               ; not a token, just print character ;; @@33be 39
  3847  33c0 ff11c9                              bbs7 dores,p1l015                        ; branch if inside quotes, print chr as is ;; @@33c0 39
  3848                           ;; @@33c3 39
  3849                          ;  At this point, we know we're talking token.  Scan the token text ;; @@33c3 39
  3850                          ;  list until the correct text is found, and print that text. ;; @@33c3 39
  3851                           ;; @@33c3 39
  3852  33c3 8554                                sta token_saver                          ; save token for REM check   [910626] ;; @@33c3 39
  3853  33c5 c9fe                                cmp #esc_command_token                   ; is this an escape token? ;; @@33c5 39
  3854  33c7 f042                                beq print_esc_cmd                        ; yes- escape command ;; @@33c7 39
  3855  33c9 c9ce                                cmp #esc_function_token                   ;; @@33c9 39
  3856  33cb f059                                beq print_esc_fn                         ; yes- escape function ;; @@33cb 39
  3857  33cd c9ff                                cmp #pi                                   ;; @@33cd 39
  3858  33cf f0bb                                beq p1l015                               ; no- pi is >$80, but should be printed 'as is' ;; @@33cf 39
  3859  33d1 aa                                  tax                                       ;; @@33d1 39
  3860  33d2 844b                                sty lstpnt                               ; no- use the token as index into ROM keyword list ;; @@33d2 39
  3861  33d4 a924                                lda #>keyword_list                        ;; @@33d4 39
  3862  33d6 a03a                                ldy #<keyword_list                        ;; @@33d6 39
  3863                           ;; @@33d8 39
  3864                          ; Scan list pointed to by (y,a) for token in (x), and print token's text ;; @@33d8 39
  3865                           ;; @@33d8 39
  3866  33d8 8525               p1l026           sta index1+1                             ; index1 points to token text list in ROM ;; @@33d8 39
  3867  33da 8424                                sty index1                                ;; @@33da 39
  3868  33dc a000                                ldy #0                                   ; begin scanning lists for this token's text ;; @@33dc 39
  3869  33de ca                                  dex                                       ;; @@33de 39
  3870  33df 1014                                bpl p1l070                               ; what luck! it's the first one ;; @@33df 39
  3871                           ;; @@33e1 39
  3872  33e1 e324               _local_1038_10   inw index1                               ; scan text until next command found ;; @@33e1 39
  3873  33e3 b124                                lda (index1),y                           ; ind.ok (ROM) ;; @@33e3 39
  3874  33e5 10fa                                bpl _local_1038_10                       ; loop until terminal char (msb=1) ;; @@33e5 39
  3875  33e7 ca                                  dex                                      ; is next text the one we want? ;; @@33e7 39
  3876  33e8 30f7                                bmi _local_1038_10                       ; no, keep scanning ;; @@33e8 39
  3877  33ea e324                                inw index1                               ; yes, point to first character ;; @@33ea 39
  3878                           ;; @@33ec 39
  3879  33ec 3f5506                              bbr3 helper,p1l070                       ; found text for this token, is it REM?  [910626] ;; @@33ec 39
  3880  33ef a554                                lda token_saver                          ; [910628] ;; @@33ef 39
  3881  33f1 c98f                                cmp #rem_token                            ;; @@33f1 39
  3882  33f3 f009                                beq p1l071                               ; yes, and REM highlighting is enabled ;; @@33f3 39
  3883                           ;; @@33f5 39
  3884                          p1l070                                                    ; found text for this token ;; @@33f5 40
  3885  33f5 4f5509                              bbr4 helper,p1l072                       ; branch if not highlighting tokens ;; @@33f5 40
  3886  33f8 b124                                lda (index1),y                           ; peek at first character ;; @@33f8 40
  3887  33fa 308c                                bmi p1l010                               ; branch if operator (1-byte, msb=1) ;; @@33fa 40
  3888  33fc 8755                                smb0 helper                              ; else begin highlight ;; @@33fc 40
  3889  33fe 20dc3c             p1l071           jsr highlight_text                        ;; @@33fe 40
  3890                           ;; @@3401 40
  3891  3401 b124               p1l072           lda (index1),y                           ; get char from ROM table ;; @@3401 40
  3892  3403 3083                                bmi p1l010                               ; msb=1=last char this token, contine line ;; @@3403 40
  3893  3405 203d68                              jsr outch                                ; else print it ;; @@3405 40
  3894  3408 c8                                  iny                                       ;; @@3408 40
  3895  3409 80f6                                bra p1l072                                ;; @@3409 40
  3896                           ;; @@340b 40
  3897                          ; .page ;; @@340b 40
  3898                          ; Print Escape Command ;; @@340b 40
  3899                           ;; @@340b 40
  3900                          print_esc_cmd                                              ;; @@340b 40
  3901  340b aa                                  tax                                      ; save type (cmd) in case it is a foreign esc token ;; @@340b 40
  3902  340c c8                                  iny                                       ;; @@340c 40
  3903  340d 20ad22                              jsr indlow                               ; look at second token ;; @@340d 40
  3904  3410 f379ff                              +lbeq p1l015                             ; none?  print funny character ;; @@3410 40
  3905  3413 844b                                sty lstpnt                                ;; @@3413 40
  3906  3415 c902                                cmp #first_esc_command_token             ; is this one of ours? ;; @@3415 40
  3907  3417 9028                                bcc print_foreign_esc                    ; nope ;; @@3417 40
  3908  3419 c946                                cmp #last_esc_command_token+1             ;; @@3419 40
  3909  341b b024                                bcs print_foreign_esc                    ; nope ;; @@341b 40
  3910  341d 697e                                adc #$80-first_esc_command_token         ; yes- make a pointer p1l will be proud of ;; @@341d 40
  3911  341f aa                                  tax                                       ;; @@341f 40
  3912  3420 a029                                ldy #<esc_command_list                    ;; @@3420 40
  3913  3422 a926                                lda #>esc_command_list                    ;; @@3422 40
  3914  3424 80b2                                bra p1l026                               ; go scan list and print it ;; @@3424 40
  3915                           ;; @@3426 40
  3916                           ;; @@3426 40
  3917                           ;; @@3426 40
  3918                          ; Print Escape Function ;; @@3426 40
  3919                           ;; @@3426 40
  3920                          print_esc_fn                                               ;; @@3426 40
  3921  3426 aa                                  tax                                      ; save type (function) in case it's a foreign esc token ;; @@3426 40
  3922  3427 c8                                  iny                                       ;; @@3427 40
  3923  3428 20ad22                              jsr indlow                               ; look at second token ;; @@3428 40
  3924  342b f35eff                              +lbeq p1l015                             ; none?  print funny character ;; @@342b 40
  3925  342e 844b                                sty lstpnt                                ;; @@342e 40
  3926  3430 c902                                cmp #first_esc_function_token            ; is this one of ours? ;; @@3430 40
  3927  3432 900d                                bcc print_foreign_esc                    ; nope ;; @@3432 40
  3928  3434 c90e                                cmp #last_esc_function_token+1            ;; @@3434 40
  3929  3436 b009                                bcs print_foreign_esc                    ; nope ;; @@3436 40
  3930  3438 697e                                adc #$80-first_esc_function_token        ; yes- make a pointer p1l will be proud of ;; @@3438 40
  3931  343a aa                                  tax                                       ;; @@343a 40
  3932  343b a09a                                ldy #<esc_function_list                   ;; @@343b 40
  3933  343d a927                                lda #>esc_function_list                   ;; @@343d 40
  3934  343f 8097                                bra p1l026                               ; go scan list and print it ;; @@343f 40
  3935                           ;; @@3441 40
  3936                          ; .page ;; @@3441 40
  3937                          ; The token to be printed is an escape token which is NOT recognized by BASIC. ;; @@3441 40
  3938                          ; We will jump through the indirect chain and see if anyone claims this token. ;; @@3441 40
  3939                          ; ;; @@3441 40
  3940                          ; At this point: ;; @@3441 40
  3941                          ; .C = 1 to signal 'unclaimed' ;; @@3441 40
  3942                          ; .X = type (0==>command, ff==>function) ;; @@3441 40
  3943                          ; .A = second token character ;; @@3441 40
  3944                          ; ;; @@3441 40
  3945                          ; If anyone claims this token, they should: ;; @@3441 40
  3946                          ; ;; @@3441 40
  3947                          ; > Clear .C to flag 'taken' ;; @@3441 40
  3948                          ; > Point (INDEX1) at the string to be printed (with msb of last char set) ;; @@3441 40
  3949                          ; > Note: string to print MUST be in RAM-0! ;; @@3441 40
  3950                           ;; @@3441 40
  3951                          print_foreign_esc                                           ;; @@3441 40
  3952  3441 e0fe                                cpx #esc_command_token                    ;; @@3441 40
  3953  3443 d003                                bne _local_1039_1                         ;; @@3443 40
  3954  3445 a200                                ldx #0                                    ;; @@3445 40
  3955  3447 2c                                  !text $2c                                 ;; @@3447 40
  3956                           ;; @@3448 40
  3957  3448 a2ff               _local_1039_1    ldx #$ff                                  ;; @@3448 40
  3958  344a 38                                  sec                                       ;; @@344a 40
  3959  344b 6c0e03                              jmp (iescpr)                              ;; @@344b 40
  3960                           ;; @@344e 40
  3961  344e b33bff             nescpr           +lbcs p1l015                             ; no takers, print a funny graphic character ;; @@344e 41
  3962  3451 a000                                ldy #0                                    ;; @@3451 41
  3963  3453 80a0                                bra p1l070                                ;; @@3453 41
  3964                           ;; @@3455 41
  3965                           ;; @@3455 41
  3966                          ;.end ;; @@3455 41
  3967                          ; .page ;; @@3455 41
  3968                          ; .subttl NEW  CLR ;; @@3455 41
  3969                          ; ;; @@3455 41
  3970                          ; The NEW command clears the program text as well as variable space. ;; @@3455 41
  3971                          ; ;; @@3455 41
  3972                           ;; @@3455 41
  3973  3455 f021               new              beq init_text                            ; Erase program in memory ;; @@3455 41
  3974  3457 c98c                                cmp #restore_token                       ; Restore an erased program?    [910103] ;; @@3457 41
  3975  3459 d3eef9                              +lbne snerr                              ; no- syntax error    [910410] ;; @@3459 41
  3976  345c 2022b5                              jsr chkeos                               ; yes- eat token, error if not eos  [910429] ;; @@345c 41
  3977  345f a52d                                lda txttab                               ; "seed" first link to fool 'chead' ;; @@345f 41
  3978  3461 a62e                                ldx txttab+1                              ;; @@3461 41
  3979  3463 8524                                sta index                                 ;; @@3463 41
  3980  3465 8625                                stx index+1                               ;; @@3465 41
  3981  3467 a900                                lda #0                                    ;; @@3467 41
  3982  3469 a001                                ldy #1                                    ;; @@3469 41
  3983  346b a224                                ldx #index                                ;; @@346b 41
  3984  346d 200c23                              jsr sta_far_ram0                         ; clear msb  (bleed-thru) ;; @@346d 41
  3985  3470 88                                  dey                                       ;; @@3470 41
  3986  3471 1a                                  inc                                       ;; @@3471 41
  3987  3472 200c23                              jsr sta_far_ram0                         ; set lsb   (bleed-thru) ;; @@3472 41
  3988  3475 839b09                              +lbra renumber                           ; make renumber check it for us (not 100%) & relink ;; @@3475 41
  3989                           ;; @@3478 41
  3990                           ;; @@3478 41
  3991                          init_text                                                  ;; @@3478 41
  3992  3478 a52d                                lda txttab                               ; find the bottom of basic text ;; @@3478 41
  3993  347a a62e                                ldx txttab+1                              ;; @@347a 41
  3994  347c 8524                                sta index                                 ;; @@347c 41
  3995  347e 8625                                stx index+1                               ;; @@347e 41
  3996  3480 c324                                dew index                                ; (the absolute bottom) ;; @@3480 41
  3997                           ;; @@3482 41
  3998  3482 a900                                lda #0                                    ;; @@3482 41
  3999  3484 a8                                  tay                                       ;; @@3484 41
  4000  3485 a224                                ldx #index                                ;; @@3485 41
  4001  3487 200c23                              jsr sta_far_ram0                         ; clear bottom     (bleed-thru) ;; @@3487 41
  4002  348a c8                                  iny                                       ;; @@348a 41
  4003  348b 200c23                              jsr sta_far_ram0                         ; clear first link bytes    (bleed-thru) ;; @@348b 41
  4004  348e c8                                  iny                                       ;; @@348e 41
  4005  348f 200c23                              jsr sta_far_ram0                         ; (bleed-thru) ;; @@348f 41
  4006  3492 18                                  clc                                       ;; @@3492 41
  4007  3493 a52d                                lda txttab                                ;; @@3493 41
  4008  3495 6902                                adc #2                                    ;; @@3495 41
  4009  3497 8582                                sta text_top                             ; set up (text_top), the end of text ;; @@3497 41
  4010  3499 a52e                                lda txttab+1                              ;; @@3499 41
  4011  349b 6900                                adc #0                                    ;; @@349b 41
  4012  349d 8583                                sta text_top+1                            ;; @@349d 41
  4013                           ;; @@349f 41
  4014  349f 577e                                rmb5 runmod                              ; trcflg. reset trace flag ;; @@349f 41
  4015                           ;; @@34a1 41
  4016                           ;; @@34a1 41
  4017  34a1 201f35             runc             jsr reset_txtptr                         ; load (txtptr) with (txttab)-1 ;; @@34a1 41
  4018  34a4 8025                                bra clearc                               ; "CLR" to clear vars    [910410] ;; @@34a4 41
  4019                           ;; @@34a6 41
  4020                          ; .page ;; @@34a6 41
  4021                          ; CLeaR Routines ;; @@34a6 41
  4022                          ; ;; @@34a6 41
  4023                           ;; @@34a6 41
  4024                          ; Special forms of CLR command: ;; @@34a6 41
  4025                          ; ;; @@34a6 41
  4026                          ; CLR ERR$ Clears program error status, useful in TRAP handlers which ;; @@34a6 41
  4027                          ;   have resolved an error & wish to RESUME with a clean status. ;; @@34a6 41
  4028                          ; ;; @@34a6 41
  4029                          ; CLR DS$  Clears the currently buffered DS,DS$ messages.  The next ;; @@34a6 41
  4030                          ;   use of DS or DS$ will make BASIC re a new message from DOS. ;; @@34a6 41
  4031                           ;; @@34a6 41
  4032  34a6 f023               clear            beq clearc                               ; branch if no args    [910410] ;; @@34a6 41
  4033                           ;; @@34a8 41
  4034  34a8 c9d3                                cmp #err_token                           ; CLR ERR$ ;; @@34a8 41
  4035  34aa d006                                bne _local_1040_10                       ; no ;; @@34aa 41
  4036  34ac 2022b5                              jsr chkeos                               ; yes- eat token & error if not eos ;; @@34ac 41
  4037  34af 832a10                              +lbra error_clear                        ; and go clear ERR$ ;; @@34af 41
  4038                           ;; @@34b2 41
  4039  34b2 c944               _local_1040_10   cmp #'D'                                 ; CLR DS$     [910717] ;; @@34b2 41
  4040  34b4 d00c                                bne _local_1040_20                       ; no- error ;; @@34b4 41
  4041  34b6 208322                              jsr chrget                                ;; @@34b6 41
  4042  34b9 c953                                cmp #'S'                                  ;; @@34b9 41
  4043  34bb d005                                bne _local_1040_20                        ;; @@34bb 41
  4044  34bd 208322                              jsr chrget                                ;; @@34bd 41
  4045  34c0 c924                                cmp #'$'                                  ;; @@34c0 41
  4046  34c2 d385f9             _local_1040_20   +lbne snerr                              ; no- error ;; @@34c2 41
  4047  34c5 2022b5                              jsr chkeos                                ;; @@34c5 41
  4048  34c8 83b743                              +lbra Clear_DS                           ; yes- clear current DS$ ;; @@34c8 41
  4049                           ;; @@34cb 41
  4050                          ; .page ;; @@34cb 41
  4051                          ; Clearc is a subroutine which initializes the variable and array space by ;; @@34cb 41
  4052                          ; resetting STREND (the end of array storage).  It falls into INIT_STACK, ;; @@34cb 41
  4053                          ; which resets the stack. ;; @@34cb 41
  4054                           ;; @@34cb 41
  4055  34cb 20e7ff             clearc           jsr _clall                               ; close all files ;; @@34cb 42
  4056  34ce a000                                ldy #0                                    ;; @@34ce 42
  4057  34d0 8479                                sty dsdesc                               ; flag 'no DS$ string' ;; @@34d0 42
  4058  34d2 88                                  dey                                      ; (y=$ff) ;; @@34d2 42
  4059  34d3 8ccb02                              sty trapno+1                             ; flag no current trap line ;; @@34d3 42
  4060  34d6 8cc802                              sty errlin                               ; reset last error pointers ;; @@34d6 42
  4061  34d9 8cc902                              sty errlin+1                              ;; @@34d9 42
  4062  34dc 8cc702                              sty errnum                                ;; @@34dc 42
  4063                           ;; @@34df 42
  4064  34df a539                                lda max_mem_1                            ; clear string space ;; @@34df 42
  4065  34e1 a43a                                ldy max_mem_1+1                           ;; @@34e1 42
  4066  34e3 8535                                sta fretop                                ;; @@34e3 42
  4067  34e5 8436                                sty fretop+1                              ;; @@34e5 42
  4068                           ;; @@34e7 42
  4069  34e7 a9ff                                lda #<stkbot                             ; empty run-time stack ;; @@34e7 42
  4070  34e9 a005                                ldy #>stkbot                              ;; @@34e9 42
  4071  34eb 857c                                sta tos                                   ;; @@34eb 42
  4072  34ed 847d                                sty tos+1                                 ;; @@34ed 42
  4073                           ;; @@34ef 42
  4074  34ef a52f                                lda vartab                                ;; @@34ef 42
  4075  34f1 a430                                ldy vartab+1                              ;; @@34f1 42
  4076  34f3 8531                                sta arytab                               ; this will delete all variables, ;; @@34f3 42
  4077  34f5 8432                                sty arytab+1                              ;; @@34f5 42
  4078  34f7 8533                                sta strend                               ; ..and arrays ;; @@34f7 42
  4079  34f9 8434                                sty strend+1                              ;; @@34f9 42
  4080                           ;; @@34fb 42
  4081  34fb a203                                ldx #pumony-puchrs                       ; reset print using chars ;; @@34fb 42
  4082  34fd bddb69             _local_1041_1    lda pudefs,x                              ;; @@34fd 42
  4083  3500 9dd411                              sta puchrs,x                              ;; @@3500 42
  4084  3503 ca                                  dex                                       ;; @@3503 42
  4085  3504 10f7                                bpl _local_1041_1                         ;; @@3504 42
  4086                           ;; @@3506 42
  4087  3506 20fc3d             fload            jsr restore__1                           ; reset pointer for DATA statements ;; @@3506 43
  4088                           ;; @@3509 43
  4089                          ; .page ;; @@3509 43
  4090                          ; INIT_STACK Routine (formerly STKINI) ;; @@3509 43
  4091                          ; ;; @@3509 43
  4092                          ;   Init_Stack resets the stack pointer.  String temporaries are freed up, ;; @@3509 43
  4093                          ;   SUBFLG is reset, continuing is prohibited. ;; @@3509 43
  4094                           ;; @@3509 43
  4095                          init_stack                                                 ;; @@3509 43
  4096  3509 7a                                  ply                                      ; pop return address ;; @@3509 43
  4097  350a 68                                  pla                                       ;; @@350a 43
  4098  350b a2fa                                ldx #stkend-257                          ; reset system stack pointer ;; @@350b 43
  4099  350d 9a                                  txs                                       ;; @@350d 43
  4100  350e 48                                  pha                                      ; push return address ;; @@350e 43
  4101  350f 5a                                  phy                                       ;; @@350f 43
  4102  3510 a21b                                ldx #tempst                              ; reset string temporaries ;; @@3510 43
  4103  3512 8618                                stx temppt                                ;; @@3512 43
  4104  3514 a900                                lda #0                                    ;; @@3514 43
  4105  3516 8512                                sta subflg                               ; allow subscripted & integer vars ;; @@3516 43
  4106  3518 8d7311                              sta oldtxt+1                             ; disallow continuing ;; @@3518 43
  4107  351b 8dd702                              sta bits                                 ; reset math bit/byte flag ;; @@351b 43
  4108                           ;; @@351e 43
  4109  351e 60                 stkrts           rts                                       ;; @@351e 43
  4110                           ;; @@351f 43
  4111                           ;; @@351f 43
  4112                           ;; @@351f 43
  4113                          reset_txtptr                                               ;; @@351f 43
  4114  351f 18                                  clc                                      ; load (txtptr) with (txttab)-1 ;; @@351f 43
  4115  3520 a52d                                lda txttab                                ;; @@3520 43
  4116  3522 69ff                                adc #$ff                                  ;; @@3522 43
  4117  3524 853d                                sta txtptr                                ;; @@3524 43
  4118  3526 a52e                                lda txttab+1                              ;; @@3526 43
  4119  3528 69ff                                adc #$ff                                  ;; @@3528 43
  4120  352a 853e                                sta txtptr+1                             ; set up text pointers ;; @@352a 43
  4121  352c 60                                  rts                                       ;; @@352c 43
  4122                           ;; @@352d 43
  4123                          ;.end ;; @@352d 43
  4124                          ; .page ;; @@352d 43
  4125                          ; .subttl RETURN ;; @@352d 43
  4126                          ;********************************************************************* ;; @@352d 43
  4127                          ; RETURN Routine ;; @@352d 43
  4128                          ; ;; @@352d 43
  4129                          ; Restores the line number and text pointer from the stack, and ;; @@352d 43
  4130                          ; eliminates all the FOR entries in front of the GOSUB entry. ;; @@352d 43
  4131                          ; ;; @@352d 43
  4132                          ;********************************************************************* ;; @@352d 43
  4133                           ;; @@352d 43
  4134                          return                                                     ;; @@352d 43
  4135                           ;; @@352d 43
  4136                          ; Ok, pay attention: we got here by a pseudo-jsr which left a return to NEWSTT ;; @@352d 43
  4137                          ; on the stack for us to return to.  There is also a return to NEWSTT left on ;; @@352d 43
  4138                          ; the stack from the GOSUB we are returning from.  This is true UNLESS we got ;; @@352d 43
  4139                          ; here on a sprite collision, in which case we still have the NEWSUB return ;; @@352d 43
  4140                          ; recently left by our current call, but the second return goes back to the ;; @@352d 43
  4141                          ; trapping mechanism.  The bottom line is: we have an extra return address on ;; @@352d 43
  4142                          ; the stack, which we have to get rid of before leaving. ;; @@352d 43
  4143                           ;; @@352d 43
  4144  352d 68                                  pla                                      ; mea culpa, mea culpa, mea culpa ;; @@352d 43
  4145  352e 68                                  pla                                       ;; @@352e 43
  4146  352f a98d                                lda #gosub_token                          ;; @@352f 43
  4147  3531 204331                              jsr search                               ; look for GOSUB on runtime stack ;; @@3531 43
  4148  3534 f005                                beq ret010                               ; found ;; @@3534 43
  4149  3536 a20c                                ldx #errrg                               ; else error ;; @@3536 43
  4150  3538 8314f9                              +lbra error                               ;; @@3538 43
  4151                           ;; @@353b 43
  4152  353b 20e631             ret010           jsr movfnd                               ; (fndpnt) => (tos) ;; @@353b 43
  4153  353e a005                                ldy #lengos                               ;; @@353e 43
  4154  3540 20ef31                              jsr rlsstk                               ; effectivly pop GOSUB off run-time stack ;; @@3540 43
  4155                          ; dey ;; @@3543 43
  4156                          ; lda (fndpnt),y ;; @@3543 43
  4157                          ; sta txtptr+1 ;; @@3543 43
  4158                          ; dey ;; @@3543 43
  4159                          ; lda (fndpnt),y ;; @@3543 43
  4160                          ; sta txtptr ;; @@3543 43
  4161                          ; dey ;; @@3543 43
  4162                          ; lda (fndpnt),y ;; @@3543 43
  4163  3543 204279                              jsr retpat                               ; 01/18/84 patch: correct RETURN to GOSUB from direct mode ;; @@3543 43
  4164                          ; lda (fndpnt),y ;; @@3546 43
  4165                          ; sta curlin ;jump to DATA to waste rest of stmt (in case of ON..GOSUB) ;; @@3546 43
  4166  3546 8000                                bra data                                  ;; @@3546 43
  4167                           ;; @@3548 43
  4168                          ;.end ;; @@3548 43
  4169                          ; .page ;; @@3548 43
  4170                          ; .subttl DATA ;; @@3548 43
  4171                           ;; @@3548 43
  4172                          data                                                       ;; @@3548 43
  4173  3548 205b35                              jsr datan                                ; skip to end of statement- offset in .y ;; @@3548 43
  4174  354b 98                 addon            tya                                       ;; @@354b 43
  4175  354c 18                                  clc                                       ;; @@354c 43
  4176  354d 653d                                adc txtptr                               ; add offset to end to txtptr ;; @@354d 43
  4177  354f 853d                                sta txtptr                                ;; @@354f 43
  4178  3551 9002                                bcc remrts                                ;; @@3551 43
  4179  3553 e63e                                inc txtptr+1                              ;; @@3553 43
  4180  3555 60                 remrts           rts                                      ; NEWSTT rts addr is still there ;; @@3555 43
  4181                           ;; @@3556 43
  4182                           ;; @@3556 43
  4183                           ;; @@3556 43
  4184  3556 205e35             rem              jsr remn                                 ; skip rest of statement ;; @@3556 43
  4185  3559 80f0                                bra addon                                ; will always branch ;; @@3559 43
  4186                           ;; @@355b 43
  4187                           ;; @@355b 43
  4188  355b a23a               datan            ldx #':'                                 ; DATA terminates on ":" and null ;; @@355b 43
  4189  355d 2c                                  !text $2c                                 ;; @@355d 43
  4190                           ;; @@355e 43
  4191  355e a200               remn             ldx #0                                   ; REM terminates on null only ;; @@355e 43
  4192  3560 860a                                stx charac                               ; preserve terminator ;; @@3560 43
  4193  3562 a000                                ldy #0                                   ; this makes charac=0 after swap ;; @@3562 43
  4194  3564 840b                                sty endchr                                ;; @@3564 43
  4195                           ;; @@3566 43
  4196  3566 a50b               _local_1042_10   lda endchr                                ;; @@3566 43
  4197  3568 a60a                                ldx charac                                ;; @@3568 43
  4198  356a 850a                                sta charac                                ;; @@356a 43
  4199  356c 860b                                stx endchr                                ;; @@356c 43
  4200  356e 20c522             _local_1042_20   jsr indtxt                                ;; @@356e 43
  4201  3571 f0e2                                beq remrts                               ; null always terminates ;; @@3571 43
  4202  3573 c50b                                cmp endchr                               ; is it some another terminator? ;; @@3573 43
  4203  3575 f0de                                beq remrts                               ; yes, it's finished ;; @@3575 43
  4204  3577 c8                                  iny                                      ; progress to next character ;; @@3577 43
  4205  3578 c922                                cmp #'"'                                 ; is it a quote? ;; @@3578 43
  4206  357a d0f2                                bne _local_1042_20                       ; no, just continue ;; @@357a 43
  4207  357c f0e8                                beq _local_1042_10                       ; yes, time to change ;; @@357c 43
  4208                           ;; @@357e 43
  4209                          ;.end ;; @@357e 43
  4210                          ; .page ;; @@357e 43
  4211                          ; .subttl IF  THEN  ELSE ;; @@357e 43
  4212                           ;; @@357e 43
  4213                          ;**************************************************************** ;; @@357e 43
  4214                          ;* ;; @@357e 43
  4215                          ;* IF Statment ;; @@357e 43
  4216                          ;* ;; @@357e 43
  4217                          ;* IF exp {GOTO line#  | THEN {line# | statements | b-block} } ;; @@357e 43
  4218                          ;*  [:ELSE {line# | statements | b-block} ] ;; @@357e 43
  4219                          ;* ;; @@357e 43
  4220                          ;* B-block ;; @@357e 43
  4221                          ;* ;; @@357e 43
  4222                          ;* BEGIN : [statement(s) on one or more lines] : BEND ;; @@357e 43
  4223                          ;* ;; @@357e 43
  4224                          ;**************************************************************** ;; @@357e 43
  4225                           ;; @@357e 43
  4226  357e 20ef4c             if               jsr frmevl                               ; evaluate the conditional expression ;; @@357e 44
  4227  3581 208522                              jsr chrgot                               ; re-get current character ;; @@3581 44
  4228  3584 c989                                cmp #goto_token                          ; is terminating character a GOTO? ;; @@3584 44
  4229  3586 f005                                beq _local_1043_10                       ; yes ;; @@3586 44
  4230  3588 a9a7                                lda #then_token                          ; no, it must be THEN ;; @@3588 44
  4231  358a 205d4e                              jsr synchr                                ;; @@358a 44
  4232                           ;; @@358d 44
  4233  358d a563               _local_1043_10   lda facexp                               ; test truth value of argument ;; @@358d 44
  4234  358f d026                                bne if_true                              ; branch if true ;; @@358f 44
  4235                           ;; @@3591 44
  4236                          if_false                                                   ;; @@3591 45
  4237  3591 208522                              jsr chrgot                               ; is there a b-block? ;; @@3591 45
  4238  3594 c9fe                                cmp #esc_command_token                    ;; @@3594 45
  4239  3596 d00b                                bne _local_1044_20                       ; no, must be an escape command ;; @@3596 45
  4240  3598 c8                                  iny                                      ; might be, look at escape token ;; @@3598 45
  4241  3599 20c522                              jsr indtxt                                ;; @@3599 45
  4242  359c c918                                cmp #begin_token                          ;; @@359c 45
  4243  359e d003                                bne _local_1044_20                       ; branch if not ;; @@359e 45
  4244  35a0 20d935                              jsr find_bend                            ; skip to end of b-block ;; @@35a0 45
  4245                           ;; @@35a3 45
  4246  35a3 204835             _local_1044_20   jsr data                                 ; may be 'else' clause. first skip over 'then' clause.. ;; @@35a3 45
  4247  35a6 a000                                ldy #0                                    ;; @@35a6 45
  4248  35a8 20c522                              jsr indtxt                               ; ..and see if end of stmt or end of line ;; @@35a8 45
  4249  35ab f0a9                                beq rem                                  ; end of line, no 'else'. go to next line ;; @@35ab 45
  4250  35ad 208322                              jsr chrget                               ; another statement on this line.. is it 'else'? ;; @@35ad 45
  4251  35b0 c9d5                                cmp #else_token                           ;; @@35b0 45
  4252  35b2 d0ef                                bne _local_1044_20                       ; no, keep looking on this line ;; @@35b2 45
  4253  35b4 208322                              jsr chrget                               ; yes! skip over token and execute clause (below) ;; @@35b4 45
  4254                           ;; @@35b7 45
  4255  35b7 208522             if_true          jsr chrgot                                ;; @@35b7 46
  4256  35ba f017                                beq _local_1045_20                       ; branch if end of statement ;; @@35ba 46
  4257  35bc b003                                bcs _local_1045_10                       ; branch if not a number ;; @@35bc 46
  4258  35be 833a07                              +lbra goto                               ; here if of the form 'THEN line#' ;; @@35be 46
  4259                           ;; @@35c1 46
  4260  35c1 c9fe               _local_1045_10   cmp #esc_command_token                   ; is this the beginning of a b-block? ;; @@35c1 46
  4261  35c3 d00e                                bne _local_1045_20                       ; no, must be an escape command ;; @@35c3 46
  4262  35c5 c8                                  iny                                      ; might be, look at escape token ;; @@35c5 46
  4263  35c6 20c522                              jsr indtxt                                ;; @@35c6 46
  4264  35c9 c918                                cmp #begin_token                          ;; @@35c9 46
  4265  35cb d006                                bne _local_1045_20                        ;; @@35cb 46
  4266  35cd 208322                              jsr chrget                               ; skip over 'BEGIN' if so... ;; @@35cd 46
  4267  35d0 208322                              jsr chrget                               ; ..and the second token, as well. ;; @@35d0 46
  4268                           ;; @@35d3 46
  4269  35d3 208522             _local_1045_20   jsr chrgot                               ; get back original character, & set up flags ;; @@35d3 46
  4270  35d6 8379f6                              +lbra xeqcm3                             ; ..and go execute whatever it is ;; @@35d6 46
  4271                           ;; @@35d9 46
  4272                          ; .page ;; @@35d9 46
  4273                          find_bend                                                 ; ... subroutine to find end of current b-block ;; @@35d9 47
  4274  35d9 208322                              jsr chrget                                ;; @@35d9 47
  4275  35dc d026                                bne _local_1046_20                        ;; @@35dc 47
  4276                           ;; @@35de 47
  4277                          ; End of statement.. set up next ;; @@35de 47
  4278                           ;; @@35de 47
  4279  35de c93a               _local_1046_10   cmp #':'                                 ; is this EOL? ;; @@35de 47
  4280  35e0 f0f7                                beq find_bend                            ; no, keep looking ;; @@35e0 47
  4281                           ;; @@35e2 47
  4282  35e2 7f7e48             _local_1046_15   bbr7 runmod,_local_1046_99               ; EOL: branch if direct mode, 'block terminator not found' error ;; @@35e2 47
  4283                           ;; @@35e5 47
  4284  35e5 a002                                ldy #2                                    ;; @@35e5 47
  4285  35e7 20c522                              jsr indtxt                               ; end of text? ;; @@35e7 47
  4286  35ea f041                                beq _local_1046_99                       ; yes, msb of next stmt pointer = 0. error ;; @@35ea 47
  4287                           ;; @@35ec 47
  4288  35ec c8                                  iny                                       ;; @@35ec 47
  4289  35ed 20c522                              jsr indtxt                                ;; @@35ed 47
  4290  35f0 853b                                sta curlin                               ; set up next line of text ;; @@35f0 47
  4291  35f2 c8                                  iny                                       ;; @@35f2 47
  4292  35f3 20c522                              jsr indtxt                                ;; @@35f3 47
  4293  35f6 853c                                sta curlin+1                              ;; @@35f6 47
  4294  35f8 98                                  tya                                       ;; @@35f8 47
  4295  35f9 18                                  clc                                       ;; @@35f9 47
  4296  35fa 653d                                adc txtptr                                ;; @@35fa 47
  4297  35fc 853d                                sta txtptr                                ;; @@35fc 47
  4298  35fe 90d9                                bcc find_bend                             ;; @@35fe 47
  4299  3600 e63e                                inc txtptr+1                              ;; @@3600 47
  4300  3602 80d5                                bra find_bend                            ; always ;; @@3602 47
  4301                           ;; @@3604 47
  4302  3604 c922               _local_1046_20   cmp #'"'                                  ;; @@3604 47
  4303  3606 d007                                bne _local_1046_30                        ;; @@3606 47
  4304  3608 203236                              jsr un_quote                             ; look for terminating quote, or EOL ;; @@3608 47
  4305  360b f0d1                                beq _local_1046_10                       ; EOL or ':' after closing quote ;; @@360b 47
  4306  360d d0ca                                bne find_bend                            ; ..else normal char, keep looking ;; @@360d 47
  4307                           ;; @@360f 47
  4308  360f c98f               _local_1046_30   cmp #rem_token                           ; REM? ;; @@360f 47
  4309  3611 d005                                bne _local_1046_35                       ; no ;; @@3611 47
  4310  3613 205635                              jsr rem                                  ; yes, trash this line ;; @@3613 47
  4311  3616 80ca                                bra _local_1046_15                       ; and go test for end of text ;; @@3616 47
  4312                           ;; @@3618 47
  4313  3618 c9fe               _local_1046_35   cmp #esc_command_token                   ; is this a BEND? ;; @@3618 47
  4314  361a d0bd                                bne find_bend                            ; can't be, has to be an escape ;; @@361a 47
  4315                           ;; @@361c 47
  4316  361c 208322                              jsr chrget                               ; skip over esc token ;; @@361c 47
  4317  361f c919                                cmp #bend_token                           ;; @@361f 47
  4318  3621 f009                                beq _local_1046_40                       ; this is what we came for, bye! ;; @@3621 47
  4319                           ;; @@3623 47
  4320  3623 c918                                cmp #begin_token                         ; not a BEND. is it a BEGIN? ;; @@3623 47
  4321  3625 d0b2                                bne find_bend                            ; it's just a normal, stick-in-the-mud char. keep looking. ;; @@3625 47
  4322                           ;; @@3627 47
  4323  3627 20d935                              jsr find_bend                            ; oh-oh, recursion. Dr. Ja-Ja warned me about this. ;; @@3627 47
  4324  362a 80ad                                bra find_bend                             ;; @@362a 47
  4325                           ;; @@362c 47
  4326  362c 60                 _local_1046_40   rts                                       ;; @@362c 47
  4327                           ;; @@362d 47
  4328  362d a225               _local_1046_99   ldx #err_no_bend                          ;; @@362d 47
  4329  362f 831df8                              +lbra error                               ;; @@362f 47
  4330                           ;; @@3632 47
  4331                          un_quote                                                  ; txtptr points to a '"'. look for closing '"', or EOL ;; @@3632 48
  4332  3632 a000                                ldy #0                                    ;; @@3632 48
  4333  3634 e33d               _local_1047_10   inw txtptr                                ;; @@3634 48
  4334  3636 20c522                              jsr indtxt                                ;; @@3636 48
  4335  3639 f007                                beq _local_1047_30                       ; EOL, get out here with .z set and a '00' in .a ;; @@3639 48
  4336  363b c922                                cmp #'"'                                  ;; @@363b 48
  4337  363d d0f5                                bne _local_1047_10                       ; keep looking until quote ;; @@363d 48
  4338  363f 4c8322                              jmp chrget                               ; got closing quote, get byte after quote, set flags ;; @@363f 48
  4339                           ;; @@3642 48
  4340  3642 60                 _local_1047_30   rts                                       ;; @@3642 48
  4341                           ;; @@3643 48
  4342                          ; .page ;; @@3643 48
  4343                           ;; @@3643 48
  4344  3643 c9fe               else             cmp #esc_command_token                   ; is this of the form "ELSE b-block"? ;; @@3643 49
  4345  3645 d00b                                bne _local_1048_10                       ; no, must be an escape command ;; @@3645 49
  4346  3647 c8                                  iny                                      ; might be, look at escape token ;; @@3647 49
  4347  3648 20c522                              jsr indtxt                                ;; @@3648 49
  4348  364b c918                                cmp #begin_token                          ;; @@364b 49
  4349  364d d003                                bne _local_1048_10                       ; no, justa plain-old "ELSE statement" ;; @@364d 49
  4350  364f 20d935                              jsr find_bend                            ; yes, it is a b-block. skip over the b-block. ;; @@364f 49
  4351  3652 8301ff             _local_1048_10   +lbra rem                                 ;; @@3652 49
  4352                           ;; @@3655 49
  4353                           ;; @@3655 49
  4354                          ;.end ;; @@3655 49
  4355                          ; .page ;; @@3655 49
  4356                          ; .subttl ON...GOTO  ON...GOSUB ;; @@3655 49
  4357                           ;; @@3655 49
  4358                          ;********************************************************* ;; @@3655 49
  4359                          ;* ON expression {GOTO | GOSUB} line_number ;; @@3655 49
  4360                          ;********************************************************* ;; @@3655 49
  4361                          ongoto                                                     ;; @@3655 50
  4362  3655 206c5d                              jsr getbyt                               ; get & save GOTO/GOSUB ;; @@3655 50
  4363  3658 48                                  pha                                       ;; @@3658 50
  4364  3659 c989                                cmp #goto_token                          ; GOTO? ;; @@3659 50
  4365  365b f005                                beq _local_1049_1                        ; yes ;; @@365b 50
  4366  365d c98d                                cmp #gosub_token                         ; GOSUB? ;; @@365d 50
  4367  365f d3e8f7                              +lbne snerr                              ; no, syntax error ;; @@365f 50
  4368                           ;; @@3662 50
  4369  3662 c667               _local_1049_1    dec faclo                                 ;; @@3662 50
  4370  3664 d004                                bne _local_1049_2                        ; skip another line number ;; @@3664 50
  4371  3666 68                                  pla                                      ; get dispatch character ;; @@3666 50
  4372  3667 83fff5                              +lbra xeqcm2                              ;; @@3667 50
  4373                           ;; @@366a 50
  4374  366a 208322             _local_1049_2    jsr chrget                               ; advance and set codes ;; @@366a 50
  4375  366d 202e32                              jsr linget                               ; read next line ;; @@366d 50
  4376  3670 c92c                                cmp #','                                 ; is it a "comma"? ;; @@3670 50
  4377  3672 f0ee                                beq _local_1049_1                         ;; @@3672 50
  4378  3674 68                                  pla                                      ; remove stack entry (token) ;; @@3674 50
  4379  3675 60                                  rts                                      ; either end of line or syntax error ;; @@3675 50
  4380                           ;; @@3676 50
  4381                          ;.end ;; @@3676 50
  4382                          ; .page ;; @@3676 50
  4383                          ; .subttl LET ;; @@3676 50
  4384                           ;; @@3676 50
  4385                          ;**************************************************************** ;; @@3676 50
  4386                          ;* ;; @@3676 50
  4387                          ;*  [LET] variable = expression ;; @@3676 50
  4388                          ;* ;; @@3676 50
  4389                          ;**************************************************************** ;; @@3676 50
  4390                           ;; @@3676 50
  4391  3676 207c4f             let              jsr ptrget                               ; get pntr to variable into "varpnt" ;; @@3676 51
  4392  3679 854b                                sta forpnt                               ; preserve pointer ;; @@3679 51
  4393  367b 844c                                sty forpnt+1                              ;; @@367b 51
  4394  367d a9b2                                lda #equal_token                          ;; @@367d 51
  4395  367f 205d4e                              jsr synchr                               ; "=" is necessary ;; @@367f 51
  4396                           ;; @@3682 51
  4397  3682 a510                                lda intflg                               ; save type for later ;; @@3682 51
  4398  3684 48                                  pha                                       ;; @@3684 51
  4399  3685 a50f                                lda valtyp                               ; retain the variable's value type too ;; @@3685 51
  4400  3687 48                                  pha                                       ;; @@3687 51
  4401                           ;; @@3688 51
  4402  3688 20ef4c                              jsr frmevl                               ; get value of formula into FAC ;; @@3688 51
  4403  368b 68                                  pla                                       ;; @@368b 51
  4404  368c 2a                                  rol                                      ; carry set for string, off for numeric ;; @@368c 51
  4405  368d 20de4c                              jsr chkval                               ; make sure VALTYP matches carry ;; @@368d 51
  4406                          ;and set zero flag for numeric ;; @@3690 51
  4407  3690 d022                                bne copstr                               ; if numeric, copy it ;; @@3690 51
  4408  3692 68                                  pla                                      ; get number type ;; @@3692 51
  4409                           ;; @@3693 51
  4410  3693 1018               qintgr           bpl copflt                               ; store a floating point number ;; @@3693 51
  4411  3695 20b262                              jsr round                                ; round integer ;; @@3695 51
  4412  3698 20b458                              jsr ayint                                ; make two-byte number ;; @@3698 51
  4413  369b a000                                ldy #0                                    ;; @@369b 51
  4414  369d a566                                lda facmo                                ; get high ;; @@369d 51
  4415  369f da                                  phx                                       ;; @@369f 51
  4416  36a0 a24b                                ldx #forpnt                               ;; @@36a0 51
  4417  36a2 20f022                              jsr sta_far_ram1 ;sta (forpnt),y         ; store it ;; @@36a2 51
  4418  36a5 c8                                  iny                                       ;; @@36a5 51
  4419  36a6 a567                                lda faclo                                ; get low ;; @@36a6 51
  4420  36a8 20f022                              jsr sta_far_ram1                         ; sta (forpnt),y ;; @@36a8 51
  4421  36ab fa                                  plx                                       ;; @@36ab 51
  4422  36ac 60                                  rts                                       ;; @@36ac 51
  4423                           ;; @@36ad 51
  4424                           ;; @@36ad 51
  4425                           ;; @@36ad 51
  4426  36ad a64b               copflt           ldx forpnt                                ;; @@36ad 51
  4427  36af a44c                                ldy forpnt+1                              ;; @@36af 51
  4428  36b1 83ae2b                              +lbra movmf_ram1                         ; put number @forpnt in var bank ;; @@36b1 51
  4429                           ;; @@36b4 51
  4430                           ;; @@36b4 51
  4431                           ;; @@36b4 51
  4432  36b4 68                 copstr           pla                                      ; if string, no INTFLG ;; @@36b4 51
  4433                           ;; @@36b5 51
  4434  36b5 a44c               inpcom           ldy forpnt+1                             ; TI$? ;; @@36b5 51
  4435  36b7 c002                                cpy #>zero                               ; (only TI$ can be this on assign) ;; @@36b7 51
  4436  36b9 f3c11c                              +lbeq Set_TI_String                      ; yes ;; @@36b9 51
  4437  36bc 8024                                bra getspt                               ; no ;; @@36bc 51
  4438                           ;; @@36be 51
  4439                          ; .page ;; @@36be 51
  4440  36be 68                 dskx1            pla                                       ;; @@36be 51
  4441  36bf c8                                  iny                                       ;; @@36bf 51
  4442                           ;; @@36c0 51
  4443  36c0 c536               dskx2            cmp fretop+1                              ;; @@36c0 51
  4444  36c2 9018                                bcc _local_1050_20                        ;; @@36c2 51
  4445  36c4 d008                                bne _local_1050_10                        ;; @@36c4 51
  4446  36c6 88                                  dey                                       ;; @@36c6 51
  4447  36c7 20a922                              jsr indfmo                                ;; @@36c7 51
  4448  36ca c535                                cmp fretop                                ;; @@36ca 51
  4449  36cc 900e                                bcc _local_1050_20                        ;; @@36cc 51
  4450                           ;; @@36ce 51
  4451  36ce a467               _local_1050_10   ldy faclo                                ; qvaria ;; @@36ce 51
  4452  36d0 c430                                cpy vartab+1                             ; if (vartab) > (facmo), don't copy ;; @@36d0 51
  4453  36d2 9008                                bcc _local_1050_20                        ;; @@36d2 51
  4454  36d4 d023                                bne copy                                 ; it is less ;; @@36d4 51
  4455  36d6 a566                                lda facmo                                 ;; @@36d6 51
  4456  36d8 c52f                                cmp vartab                               ; compare low orders ;; @@36d8 51
  4457  36da b01d                                bcs copy                                  ;; @@36da 51
  4458                           ;; @@36dc 51
  4459  36dc a566               _local_1050_20   lda facmo                                ; dntcpy ;; @@36dc 51
  4460  36de a467                                ldy facmo+1                               ;; @@36de 51
  4461  36e0 8035                                bra copyc                                 ;; @@36e0 51
  4462                           ;; @@36e2 51
  4463                          ; .page ;; @@36e2 51
  4464  36e2 a002               getspt           ldy #2                                   ; get pntr to descriptor ;; @@36e2 52
  4465  36e4 20a922                              jsr indfmo                                ;; @@36e4 52
  4466  36e7 c57b                                cmp dsdesc+2                             ; check for DS$ hi ;; @@36e7 52
  4467  36e9 d0d5                                bne dskx2                                ; nope ;; @@36e9 52
  4468  36eb 48                                  pha                                       ;; @@36eb 52
  4469  36ec 88                                  dey                                       ;; @@36ec 52
  4470  36ed 20a922                              jsr indfmo                                ;; @@36ed 52
  4471  36f0 c57a                                cmp dsdesc+1                             ; check for DS$ lo ;; @@36f0 52
  4472  36f2 d0ca                                bne dskx1                                ; nope ;; @@36f2 52
  4473  36f4 a579                                lda dsdesc                               ; check if len=0 ;; @@36f4 52
  4474  36f6 f0c6                                beq dskx1                                ; yup ;; @@36f6 52
  4475  36f8 68                                  pla                                      ; fall through to copy ;; @@36f8 52
  4476                           ;; @@36f9 52
  4477                           ;; @@36f9 52
  4478  36f9 a000               copy             ldy #0                                    ;; @@36f9 52
  4479  36fb 20a922                              jsr indfmo                                ;; @@36fb 52
  4480  36fe 20735a                              jsr strini                               ; get room to copy string into ;; @@36fe 52
  4481  3701 a552                                lda dscpnt                               ; get pointer to old descriptor, so ;; @@3701 52
  4482  3703 a453                                ldy dscpnt+1                              ;; @@3703 52
  4483  3705 8570                                sta strng1                               ; movins can find string ;; @@3705 52
  4484  3707 8471                                sty strng1+1                              ;; @@3707 52
  4485  3709 20355b                              jsr movins                               ; copy it ;; @@3709 52
  4486                           ;; @@370c 52
  4487  370c a570                                lda strng1                               ; fix to free get strings ;; @@370c 52
  4488  370e a471                                ldy strng1+1                              ;; @@370e 52
  4489  3710 20cc5b                              jsr fretms                               ; free the string, if it is a temp ;; @@3710 52
  4490                           ;; @@3713 52
  4491  3713 a963                                lda #<dsctmp                              ;; @@3713 52
  4492  3715 a000                                ldy #>dsctmp                              ;; @@3715 52
  4493                           ;; @@3717 52
  4494  3717 8552               copyc            sta dscpnt                                ;; @@3717 52
  4495  3719 8453                                sty dscpnt+1                              ;; @@3719 52
  4496  371b 8524                                sta index                                ; index points to new descriptor ;; @@371b 52
  4497  371d 8425                                sty index+1                               ;; @@371d 52
  4498  371f 20cc5b                              jsr fretms                                ;; @@371f 52
  4499                           ;; @@3722 52
  4500                          ; .page ;; @@3722 52
  4501                          ;   Fix the strings by flagging the old string as garbage and the new ;; @@3722 52
  4502                          ;   string by pointing it to its new descriptor. ;; @@3722 52
  4503                           ;; @@3722 52
  4504  3722 206737                              jsr stradj                               ; set up new string ;; @@3722 52
  4505  3725 9011                                bcc _local_1051_10                       ; leave it alone ;; @@3725 52
  4506  3727 a000                                ldy #0                                    ;; @@3727 52
  4507  3729 a54b                                lda forpnt                               ; put in backwards link ;; @@3729 52
  4508  372b da                                  phx                                       ;; @@372b 52
  4509  372c a224                                ldx #index                                ;; @@372c 52
  4510  372e 20f022                              jsr sta_far_ram1                          ;; @@372e 52
  4511  3731 c8                                  iny                                       ;; @@3731 52
  4512  3732 a54c                                lda forpnt+1                              ;; @@3732 52
  4513  3734 20f022                              jsr sta_far_ram1                          ;; @@3734 52
  4514  3737 fa                                  plx                                       ;; @@3737 52
  4515                           ;; @@3738 52
  4516  3738 a54b               _local_1051_10   lda forpnt                               ; fix old string ;; @@3738 52
  4517  373a 8524                                sta index                                 ;; @@373a 52
  4518  373c a54c                                lda forpnt+1                              ;; @@373c 52
  4519  373e 8525                                sta index+1                               ;; @@373e 52
  4520  3740 206737                              jsr stradj                               ; point to old string ;; @@3740 52
  4521  3743 9010                                bcc _local_1051_20                       ; in text do not fix ;; @@3743 52
  4522  3745 88                                  dey                                      ; restore y ;; @@3745 52
  4523  3746 da                                  phx                                       ;; @@3746 52
  4524  3747 a224                                ldx #index                                ;; @@3747 52
  4525  3749 a9ff                                lda #$ff                                 ; garbage flag ;; @@3749 52
  4526  374b 20f022                              jsr sta_far_ram1                          ;; @@374b 52
  4527  374e 88                                  dey                                       ;; @@374e 52
  4528  374f 68                                  pla                                      ; (was txa) ;; @@374f 52
  4529  3750 48                                  pha                                       ;; @@3750 52
  4530  3751 20f022                              jsr sta_far_ram1                         ; store length ;; @@3751 52
  4531  3754 fa                                  plx                                       ;; @@3754 52
  4532                           ;; @@3755 52
  4533  3755 a002               _local_1051_20   ldy #2                                   ; set the descriptor ;; @@3755 52
  4534  3757 da                                  phx                                       ;; @@3757 52
  4535  3758 a24b                                ldx #forpnt                               ;; @@3758 52
  4536  375a a952               _local_1051_30   lda #dscpnt                               ;; @@375a 52
  4537  375c 20d722                              jsr lda_far_ram1                         ; lda (dscpnt),y from RAM1 ;; @@375c 52
  4538  375f 20f022                              jsr sta_far_ram1                         ; sta (forpnt),y to   RAM1 ;; @@375f 52
  4539  3762 88                                  dey                                       ;; @@3762 52
  4540  3763 10f5                                bpl _local_1051_30                        ;; @@3763 52
  4541  3765 fa                                  plx                                       ;; @@3765 52
  4542  3766 60                                  rts                                       ;; @@3766 52
  4543                           ;; @@3767 52
  4544                          ; .page ;; @@3767 52
  4545                          ;   STRADJ takes the pointer index which points to a descriptor and ;; @@3767 52
  4546                          ;   indexes to the desciptor's string data.  If the string is not in ;; @@3767 52
  4547                          ;   string space (no action to take) we return with carry clear, else ;; @@3767 52
  4548                          ;   we return with the pointer set to the link bytes in the string, the ;; @@3767 52
  4549                          ;   length in .a and the carry set. ;; @@3767 52
  4550                           ;; @@3767 52
  4551  3767 a000               stradj           ldy #0                                    ;; @@3767 53
  4552  3769 20d522                              jsr indin1_ram1                          ; push length on stack ;; @@3769 53
  4553  376c 48                                  pha                                       ;; @@376c 53
  4554  376d f036                                beq _local_1052_50                       ; if length=0 do nothing ;; @@376d 53
  4555  376f c8                                  iny                                       ;; @@376f 53
  4556  3770 20d522                              jsr indin1_ram1                          ; get low byte (into .x) ;; @@3770 53
  4557  3773 aa                                  tax                                       ;; @@3773 53
  4558  3774 c8                                  iny                                       ;; @@3774 53
  4559  3775 20d522                              jsr indin1_ram1                          ; get high byte ;; @@3775 53
  4560  3778 c53a                                cmp max_mem_1+1                           ;; @@3778 53
  4561  377a 9006                                bcc _local_1052_10                       ; ok ;; @@377a 53
  4562  377c d027                                bne _local_1052_50                       ; if above top of memory ;; @@377c 53
  4563  377e e439                                cpx max_mem_1                            ; msb the same, test lsb ;; @@377e 53
  4564  3780 b023                                bcs _local_1052_50                       ; if above top of memory ;; @@3780 53
  4565                           ;; @@3782 53
  4566  3782 c536               _local_1052_10   cmp fretop+1                              ;; @@3782 53
  4567  3784 901f                                bcc _local_1052_50                       ; if below fretop ;; @@3784 53
  4568  3786 d004                                bne _local_1052_20                        ;; @@3786 53
  4569  3788 e435                                cpx fretop                                ;; @@3788 53
  4570  378a 9019                                bcc _local_1052_50                       ; if below fretop ;; @@378a 53
  4571                           ;; @@378c 53
  4572  378c c57b               _local_1052_20   cmp dsdesc+2                              ;; @@378c 53
  4573  378e d004                                bne _local_1052_30                       ; fix ;; @@378e 53
  4574  3790 e47a                                cpx dsdesc+1                              ;; @@3790 53
  4575  3792 f011                                beq _local_1052_50                        ;; @@3792 53
  4576                           ;; @@3794 53
  4577  3794 8624               _local_1052_30   stx index                                ; ok set pointer ;; @@3794 53
  4578  3796 8525                                sta index+1                               ;; @@3796 53
  4579  3798 68                                  pla                                      ; get back length ;; @@3798 53
  4580  3799 aa                                  tax                                      ; into x also ;; @@3799 53
  4581  379a 18                                  clc                                       ;; @@379a 53
  4582  379b 6524                                adc index                                 ;; @@379b 53
  4583  379d 8524                                sta index                                 ;; @@379d 53
  4584  379f 9002                                bcc _local_1052_40                        ;; @@379f 53
  4585  37a1 e625                                inc index+1                               ;; @@37a1 53
  4586  37a3 38                 _local_1052_40   sec                                      ; carry set ;; @@37a3 53
  4587  37a4 60                                  rts                                       ;; @@37a4 53
  4588                           ;; @@37a5 53
  4589  37a5 68                 _local_1052_50   pla                                      ; clean up stack ;; @@37a5 53
  4590  37a6 18                                  clc                                       ;; @@37a6 53
  4591  37a7 60                                  rts                                       ;; @@37a7 53
  4592                           ;; @@37a8 53
  4593                          ;.end ;; @@37a8 53
  4594                          ; .page ;; @@37a8 53
  4595                          ; .subttl PRINT  PRINT#  CMD ;; @@37a8 53
  4596                           ;; @@37a8 53
  4597                          ;*********************************************************** ;; @@37a8 53
  4598                          ;* ;; @@37a8 53
  4599                          ;* PRINT   PRINT#   CMD ;; @@37a8 53
  4600                          ;* ;; @@37a8 53
  4601                          ;********************************************************** ;; @@37a8 53
  4602                           ;; @@37a8 53
  4603  37a8 20ae37             printn           jsr cmd                                  ; docmd ;; @@37a8 54
  4604  37ab 830601                              +lbra release_channels                   ; restore terminal ;; @@37ab 54
  4605                           ;; @@37ae 54
  4606                           ;; @@37ae 54
  4607  37ae 206c5d             cmd              jsr getbyt                                ;; @@37ae 54
  4608  37b1 f005                                beq _local_1053_10                        ;; @@37b1 54
  4609  37b3 a92c                                lda #','                                 ; comma? ;; @@37b3 54
  4610  37b5 205d4e                              jsr synchr                                ;; @@37b5 54
  4611                           ;; @@37b8 54
  4612  37b8 08                 _local_1053_10   php                                      ; save stat (beq=eof) ;; @@37b8 54
  4613  37b9 48                                  pha                                      ; save char ;; @@37b9 54
  4614  37ba 8615                                stx channl                               ; channel to output on ;; @@37ba 54
  4615  37bc 204968                              jsr coout                                 ;; @@37bc 54
  4616  37bf 68                                  pla                                      ; get char back ;; @@37bf 54
  4617  37c0 28                                  plp                                      ; get stat back ;; @@37c0 54
  4618  37c1 8006                                bra print                                 ;; @@37c1 54
  4619                           ;; @@37c3 54
  4620                           ;; @@37c3 54
  4621  37c3 203e38             strdon           jsr strprt                                ;; @@37c3 55
  4622                           ;; @@37c6 55
  4623  37c6 208522             newchr           jsr chrgot                               ; reget last character ;; @@37c6 55
  4624                           ;; @@37c9 55
  4625  37c9 f02c               print            beq crdo                                 ; terminator only, so print crlf ;; @@37c9 55
  4626  37cb c9fb                                cmp #using_token                          ;; @@37cb 55
  4627  37cd f30f32                              +lbeq using                               ;; @@37cd 55
  4628                           ;; @@37d0 55
  4629                           ;; @@37d0 55
  4630                           ;; @@37d0 55
  4631  37d0 f032               printc           beq prtrts  ;here after seeing TAB(x) or "," or " ; " in which case ;; @@37d0 55
  4632                          ;a terminator does not mean a crlf but just RTS ;; @@37d2 55
  4633  37d2 c9a3                                cmp #tab_token                           ; TAB function? ;; @@37d2 55
  4634  37d4 f03f                                beq taber                                ; yes (c=1) ;; @@37d4 55
  4635  37d6 c9a6                                cmp #spc_token                           ; space function? ;; @@37d6 55
  4636  37d8 18                                  clc                                      ; clear carry ;; @@37d8 55
  4637  37d9 f03a                                beq taber                                ; yes (c=0) ;; @@37d9 55
  4638  37db c92c                                cmp #','                                 ; comma? ;; @@37db 55
  4639  37dd f026                                beq comprt                               ; yes ;; @@37dd 55
  4640  37df c93b                                cmp #';'                                 ; a semicolon? ;; @@37df 55
  4641  37e1 f04e                                beq notabr                               ; yes ;; @@37e1 55
  4642                           ;; @@37e3 55
  4643  37e3 20ef4c                              jsr frmevl                               ; evaluate the formula ;; @@37e3 55
  4644  37e6 ff0fda                              bbs7 valtyp,strdon                       ; branch if a string ;; @@37e6 55
  4645  37e9 208f64                              jsr fout                                  ;; @@37e9 55
  4646  37ec 20855a                              jsr strlit                               ; build descriptor ;; @@37ec 55
  4647  37ef 203e38                              jsr strprt                               ; print the number ;; @@37ef 55
  4648  37f2 205838                              jsr outspc                               ; print a space ;; @@37f2 55
  4649  37f5 80cf                                bra newchr                               ; always goes ;; @@37f5 55
  4650                           ;; @@37f7 55
  4651                           ;; @@37f7 55
  4652                           ;; @@37f7 55
  4653  37f7 a90d               crdo             lda #cr                                   ;; @@37f7 55
  4654  37f9 203d68                              jsr outch                                ; outdo ;; @@37f9 55
  4655                           ;; @@37fc 55
  4656  37fc 7f1505             crfin            bbr7 channl,prtrts                        ;; @@37fc 55
  4657  37ff a90a                                lda #lf                                   ;; @@37ff 55
  4658  3801 203d68                              jsr outch                                ; outdo ;; @@3801 55
  4659                          ; eor #$ff  ;???? ;; @@3804 55
  4660                           ;; @@3804 55
  4661  3804 60                 prtrts           rts                                       ;; @@3804 55
  4662                           ;; @@3805 55
  4663                           ;; @@3805 55
  4664                           ;; @@3805 55
  4665  3805 38                 comprt           sec                                       ;; @@3805 55
  4666  3806 20f0ff                              jsr _plot                                ; get tab position in x ;; @@3806 55
  4667  3809 98                                  tya                                       ;; @@3809 55
  4668  380a 38                                  sec                                       ;; @@380a 55
  4669  380b e90a               morco1           sbc #column_width                         ;; @@380b 55
  4670  380d b0fc                                bcs morco1                                ;; @@380d 55
  4671  380f 49ff                                eor #$ff                                  ;; @@380f 55
  4672  3811 6901                                adc #1                                    ;; @@3811 55
  4673  3813 d017                                bne aspac                                 ;; @@3813 55
  4674                           ;; @@3815 55
  4675  3815 08                 taber            php                                      ; remember if SPC(c=0) or TAB(c=1) function ;; @@3815 55
  4676  3816 38                                  sec                                       ;; @@3816 55
  4677  3817 20f0ff                              jsr _plot                                ; read tab position ;; @@3817 55
  4678  381a 8454                                sty trmpos                                ;; @@381a 55
  4679  381c 20695d                              jsr gtbytc                               ; get value into accx ;; @@381c 55
  4680  381f c929                                cmp #')'                                  ;; @@381f 55
  4681  3821 d326f6                              +lbne snerr                               ;; @@3821 55
  4682  3824 28                                  plp                                       ;; @@3824 55
  4683  3825 9006                                bcc xspac                                 ;; @@3825 55
  4684  3827 8a                                  txa                                       ;; @@3827 55
  4685  3828 e554                                sbc trmpos                                ;; @@3828 55
  4686  382a 9005                                bcc notabr                               ; negative, don't print any ;; @@382a 55
  4687  382c aa                 aspac            tax                                       ;; @@382c 55
  4688  382d e8                 xspac            inx                                       ;; @@382d 55
  4689  382e ca                 xspac2           dex                                       ;; @@382e 55
  4690  382f d005                                bne xspac1                                ;; @@382f 55
  4691                           ;; @@3831 55
  4692                           ;; @@3831 55
  4693  3831 208322             notabr           jsr chrget                               ; reget last character ;; @@3831 55
  4694  3834 809a                                bra printc                               ; don't call crdo ;; @@3834 55
  4695                           ;; @@3836 55
  4696                           ;; @@3836 55
  4697  3836 205838             xspac1           jsr outspc                                ;; @@3836 55
  4698  3839 d0f3                                bne xspac2                                ;; @@3839 55
  4699                           ;; @@383b 55
  4700                          ; .page ;; @@383b 55
  4701                          ; STROUT Routine ;; @@383b 55
  4702                          ; ;; @@383b 55
  4703                          ; Print the string pointed to by .x.  It must end with a null byte. ;; @@383b 55
  4704                           ;; @@383b 55
  4705  383b 20855a             strout           jsr strlit                               ; get a string literal ;; @@383b 55
  4706                           ;; @@383e 55
  4707  383e 206d5b             strprt           jsr frefac                               ; return temp pointer ;; @@383e 55
  4708  3841 aa                                  tax                                      ; put count into counter ;; @@3841 55
  4709  3842 a000                                ldy #0                                    ;; @@3842 55
  4710  3844 e8                                  inx                                      ; move one ahead ;; @@3844 55
  4711  3845 ca                 strpr2           dex                                       ;; @@3845 55
  4712  3846 f0bc                                beq prtrts                               ; all done ;; @@3846 55
  4713  3848 20d522                              jsr indin1_ram1                          ; lda (index),y ;; @@3848 55
  4714  384b 203d68                              jsr outch                                ; outdo ;; @@384b 55
  4715  384e c8                                  iny                                       ;; @@384e 55
  4716  384f c90d                                cmp #cr                                   ;; @@384f 55
  4717  3851 d0f2                                bne strpr2                                ;; @@3851 55
  4718  3853 20fc37                              jsr crfin                                ; type rest of carriage return ;; @@3853 55
  4719  3856 80ed                                bra strpr2                               ; and on and on ;; @@3856 55
  4720                           ;; @@3858 55
  4721  3858 a515               outspc           lda channl                               ; if terminal print skip chr., else print space ;; @@3858 55
  4722  385a d003                                bne realsp                                ;; @@385a 55
  4723  385c a91d                                lda #29                                  ; CBM cursor right (non-destructive skip char) ;; @@385c 55
  4724  385e 2c                                  !text $2c                                 ;; @@385e 55
  4725                           ;; @@385f 55
  4726  385f a920               realsp           lda #' '                                 ; space ;; @@385f 55
  4727  3861 2c                                  !text $2c                                 ;; @@3861 55
  4728                           ;; @@3862 55
  4729  3862 a93f               outqst           lda #'?'                                  ;; @@3862 55
  4730                           ;; @@3864 55
  4731                          ;outdo ;; @@3864 55
  4732  3864 4c3d68                              jmp outch                                ; output char in .a ;; @@3864 55
  4733                          ; and #$ff ;???? ;; @@3867 55
  4734                          ; rts ;; @@3867 55
  4735                           ;; @@3867 55
  4736                          ;.end ;; @@3867 55
  4737                          ; .page ;; @@3867 55
  4738                          ; .subttl INPUT  GET  READ  LINPUT ;; @@3867 55
  4739                           ;; @@3867 55
  4740  3867 20e258             get              jsr errdir                               ; direct mode illegal ;; @@3867 55
  4741  386a 8576                                sta z_p_temp_1                           ; flag to distinguish between GET and GETKEY ;; @@386a 55
  4742                           ;; @@386c 55
  4743  386c c923                                cmp #'#'                                 ; is it GET# ? ;; @@386c 55
  4744  386e f009                                beq getn                                 ; yes ;; @@386e 55
  4745  3870 c9f9                                cmp #key_token                           ; is it GETKEY ? ;; @@3870 55
  4746  3872 d015                                bne gettty                               ; no, must be plain GET ;; @@3872 55
  4747  3874 208322                              jsr chrget                               ; yes, skip over KEY token ;; @@3874 55
  4748  3877 8010                                bra gettty                                ;; @@3877 55
  4749                           ;; @@3879 55
  4750                           ;; @@3879 55
  4751  3879 208322             getn             jsr chrget                               ; GET# move up to next byte ;; @@3879 55
  4752  387c 206c5d                              jsr getbyt                               ; get channel into x ;; @@387c 55
  4753  387f a92c                                lda #','                                 ; comma? ;; @@387f 55
  4754  3881 205d4e                              jsr synchr                                ;; @@3881 55
  4755  3884 8615                                stx channl                                ;; @@3884 55
  4756  3886 205268                              jsr coin                                 ; chkin ;; @@3886 55
  4757                           ;; @@3889 55
  4758                           ;; @@3889 55
  4759                          gettty                                                    ; GET ;; @@3889 55
  4760  3889 a201                                ldx #<buf+1                              ; point to 0 ;; @@3889 55
  4761  388b a002                                ldy #>buf                                 ;; @@388b 55
  4762  388d a900                                lda #0                                   ; to stuff and to point ;; @@388d 55
  4763  388f 8d0102                              sta buf+1                                ; zero it ;; @@388f 55
  4764  3892 a940                                lda #$40                                 ; turn on v-bit ;; @@3892 55
  4765  3894 201b39                              jsr inpco1                               ; do the get ;; @@3894 55
  4766  3897 a615                                ldx channl                                ;; @@3897 55
  4767  3899 d019                                bne release_channels                     ; restore terminal channels ;; @@3899 55
  4768  389b 60                                  rts                                       ;; @@389b 55
  4769                           ;; @@389c 55
  4770                          ; .page ;; @@389c 55
  4771                          linputn                                                   ; input line from channel into a string var ;; @@389c 55
  4772  389c 208322                              jsr chrget                               ; (eat input# token) ;; @@389c 55
  4773  389f f787                                smb7 op                                   ;; @@389f 55
  4774  38a1 2c                                  !text $2c                                 ;; @@38a1 55
  4775                           ;; @@38a2 55
  4776  38a2 7787               inputn           rmb7 op                                  ; flag INPUT# vs. LINPUT# ;; @@38a2 55
  4777  38a4 206c5d                              jsr getbyt                               ; get channel number ;; @@38a4 55
  4778  38a7 a92c                                lda #','                                 ; a comma? ;; @@38a7 55
  4779  38a9 205d4e                              jsr synchr                                ;; @@38a9 55
  4780  38ac 8615                                stx channl                                ;; @@38ac 55
  4781  38ae 205268                              jsr coin                                 ; chkin ;; @@38ae 55
  4782  38b1 20e938                              jsr notqti                               ; do input to variables ;; @@38b1 55
  4783                           ;; @@38b4 55
  4784                           ;; @@38b4 55
  4785                          release_channels                                          ; iodone, iorele. ;; @@38b4 55
  4786  38b4 20ccff                              jsr _clrch                               ; clear I/O channels ;; @@38b4 55
  4787                          ; ldx #0   ;restore normal terminal channels ;; @@38b7 55
  4788  38b7 8515                                sta channl                               ; (was stx)     [910909] ;; @@38b7 55
  4789  38b9 60                                  rts                                       ;; @@38b9 55
  4790                           ;; @@38ba 55
  4791                           ;; @@38ba 55
  4792                          linput                                                    ; input line from console into a string var ;; @@38ba 55
  4793  38ba 208322                              jsr chrget                               ; (eat input token) ;; @@38ba 55
  4794  38bd f787                                smb7 op                                   ;; @@38bd 55
  4795  38bf 2c                                  !text $2c                                 ;; @@38bf 55
  4796                           ;; @@38c0 55
  4797  38c0 7787               input            rmb7 op                                  ; flag INPUT vs. LINPUT ;; @@38c0 55
  4798  38c2 c922                                cmp #'"'                                 ; a quote? ;; @@38c2 55
  4799  38c4 d023                                bne notqti                               ; no message ;; @@38c4 55
  4800  38c6 20164e                              jsr strtxt                               ; literalize the string in text ;; @@38c6 55
  4801                           ;; @@38c9 55
  4802  38c9 208522                              jsr chrgot                               ; looking for prompt string terminator  [910219] ;; @@38c9 55
  4803  38cc c92c                                cmp #','                                  ;; @@38cc 55
  4804  38ce d011                                bne _local_1054_10                        ;; @@38ce 55
  4805  38d0 8dff01                              sta buf_txtptr                           ; is comma- supress '?' after prompt  [910219] ;; @@38d0 55
  4806  38d3 208322                              jsr chrget                               ; eat comma ;; @@38d3 55
  4807  38d6 203e38                              jsr strprt                               ; print prompt ;; @@38d6 55
  4808  38d9 20e258                              jsr errdir                               ; error if direct mode ;; @@38d9 55
  4809  38dc 201c31                              jsr InputLine                            ; get first item ;; @@38dc 55
  4810  38df 8013                                bra getagn1                              ; see if there's more to do ;; @@38df 55
  4811                           ;; @@38e1 55
  4812  38e1 a93b               _local_1054_10   lda #';'                                 ; must end in semicolon ;; @@38e1 55
  4813  38e3 205d4e                              jsr synchr                                ;; @@38e3 55
  4814  38e6 203e38                              jsr strprt                               ; print prompt ;; @@38e6 55
  4815                           ;; @@38e9 55
  4816  38e9 20e258             notqti           jsr errdir                               ; use common routine since def direct ;; @@38e9 56
  4817  38ec a92c                                lda #','                                 ; get comma ;; @@38ec 56
  4818  38ee 8dff01                              sta buf_txtptr                           ; (data reader expects buffer to start with terminator) ;; @@38ee 56
  4819                           ;; @@38f1 56
  4820  38f1 201231             getagn           jsr PromptedInput                        ; type "?" and input a line of text ;; @@38f1 56
  4821  38f4 a515               getagn1          lda channl                                ;; @@38f4 56
  4822  38f6 f00d                                beq _local_1055_10                        ;; @@38f6 56
  4823  38f8 20b7ff                              jsr _readst                              ; get status byte ;; @@38f8 56
  4824                          ; and #2   ; (assumes serial bus????)  [910618] eoi ok ;; @@38fb 56
  4825  38fb 2987                                and #%10000111                           ; serial: err if dnp, r/w timeout errors ;; @@38fb 56
  4826  38fd f006                                beq _local_1055_10                       ; a-ok rs232: err if brk, ovr, frm, par errors ;; @@38fd 56
  4827  38ff 20b438                              jsr release_channels                     ; bad, close channel ;; @@38ff 56
  4828  3902 8343fc                              +lbra data                               ; skip rest of input ;; @@3902 56
  4829                           ;; @@3905 56
  4830  3905 ad0002             _local_1055_10   lda buf                                  ; bufful. get anything? ;; @@3905 56
  4831  3908 d00f                                bne inpcon                               ; yes- process input ;; @@3908 56
  4832                          ; lda channl  ;didn't get anything.  is this keyboard? [901212] ;; @@390a 56
  4833                          ; bne getagn  ; no- keep looking for data ???? ;; @@390a 56
  4834  390a 205b35                              jsr datan                                ; skip to end of statement ;; @@390a 56
  4835  390d 833bfc                              +lbra addon                               ;; @@390d 56
  4836                           ;; @@3910 56
  4837                          ; .page ;; @@3910 56
  4838  3910 7787               read             rmb7 op                                  ; flag READ vs. LREAD    [910102] ;; @@3910 57
  4839  3912 a643                                ldx datptr                               ; get last data location ;; @@3912 57
  4840  3914 a444                                ldy datptr+1                              ;; @@3914 57
  4841  3916 a998                                lda #$98                                 ; initiator= read ;; @@3916 57
  4842  3918 2c                                  !text $2c                                 ;; @@3918 57
  4843                           ;; @@3919 57
  4844  3919 a900               inpcon           lda #0                                   ; initiator= input ;; @@3919 57
  4845  391b 8513               inpco1           sta input_flag                           ; $98=read, $40=get, $00=input ;; @@391b 57
  4846                           ;; @@391d 57
  4847                          ; In the processing of DATA and READ statements, one pointer points to the data ;; @@391d 57
  4848                          ; (i.e., the numbers being fetched) and another points to the list of variables. ;; @@391d 57
  4849                          ; ;; @@391d 57
  4850                          ; The pointer into the data always starts pointing to a terminator- a ",", ":", or EOL. ;; @@391d 57
  4851                          ; At this point TXTPTR points to list of variables and (x,y) points to data or input line. ;; @@391d 57
  4852                           ;; @@391d 57
  4853  391d 8645                                stx inpptr                               ; pointer to data ;; @@391d 57
  4854  391f 8446                                sty inpptr+1                              ;; @@391f 57
  4855                           ;; @@3921 57
  4856  3921 207c4f             inloop           jsr ptrget                               ; get a pointer to the variable ;; @@3921 57
  4857  3924 854b                                sta forpnt                               ; store its address ;; @@3924 57
  4858  3926 844c                                sty forpnt+1                              ;; @@3926 57
  4859                           ;; @@3928 57
  4860  3928 a201                                ldx #1                                    ;; @@3928 57
  4861  392a b53d               _local_1056_1    lda txtptr,x                             ; move variable list pointer to 'vartxt' ;; @@392a 57
  4862  392c 954d                                sta vartxt,x                              ;; @@392c 57
  4863  392e b545                                lda inpptr,x                             ; move data line pointer to 'txtptr' ;; @@392e 57
  4864  3930 953d                                sta txtptr,x                              ;; @@3930 57
  4865  3932 ca                                  dex                                       ;; @@3932 57
  4866  3933 10f5                                bpl _local_1056_1                         ;; @@3933 57
  4867                           ;; @@3935 57
  4868  3935 208522                              jsr chrgot                               ; get first data byte ;; @@3935 57
  4869  3938 d02f                                bne datbk1                               ; not null, so we got something ;; @@3938 57
  4870  393a 2413                                bit input_flag                           ; READ($98), GET($40), or INPUT($00)? ;; @@393a 57
  4871  393c 501a                                bvc qdata                                ; branch if READ or INPUT ;; @@393c 57
  4872  393e a576                                lda z_p_temp_1                           ; GET or GETKEY? ;; @@393e 57
  4873  3940 c9f9                                cmp #key_token                            ;; @@3940 57
  4874  3942 d008                                bne _local_1056_3                        ; branch if GET ;; @@3942 57
  4875                           ;; @@3944 57
  4876  3944 205b68             _local_1056_2    jsr cgetl                                ; GETKEY ;; @@3944 57
  4877  3947 aa                                  tax                                      ; test if null ;; @@3947 57
  4878  3948 f0fa                                beq _local_1056_2                        ; it is null, keep scanning ;; @@3948 57
  4879  394a d003                                bne _local_1056_4                        ; got a key, go put it in var ;; @@394a 57
  4880                           ;; @@394c 57
  4881  394c 205b68             _local_1056_3    jsr cgetl                                ; get a key if pressed, otherwise gets a zero ;; @@394c 57
  4882  394f 8d0002             _local_1056_4    sta buf                                   ;; @@394f 57
  4883  3952 a2ff                                ldx #<buf_txtptr                          ;; @@3952 57
  4884  3954 a001                                ldy #>buf_txtptr                          ;; @@3954 57
  4885  3956 800d                                bra datbk                                 ;; @@3956 57
  4886                           ;; @@3958 57
  4887                          ; .page ;; @@3958 57
  4888  3958 33ef00             qdata            +lbmi datlop                             ; branch if READ ;; @@3958 58
  4889  395b a515                                lda channl                               ; else it's INPUT ;; @@395b 58
  4890  395d d003                                bne _local_1057_10                        ;; @@395d 58
  4891  395f 206238                              jsr outqst                               ; console input, so display '? ' prompt ;; @@395f 58
  4892                           ;; @@3962 58
  4893  3962 201231             _local_1057_10   jsr PromptedInput                        ; get another line ;; @@3962 58
  4894                           ;; @@3965 58
  4895  3965 863d               datbk            stx txtptr                               ; set for CHRGET ;; @@3965 59
  4896  3967 843e                                sty txtptr+1                              ;; @@3967 59
  4897                           ;; @@3969 59
  4898  3969 7f8708             datbk1           bbr7 op,_local_1058_1                    ; no chrgot if LINPUT (want leading spaces) [910513] ;; @@3969 59
  4899  396c 20a540                              jsr chargt                                ;; @@396c 59
  4900  396f 208e22                              jsr chrtst                                ;; @@396f 59
  4901  3972 8003                                bra _local_1058_2                         ;; @@3972 59
  4902                           ;; @@3974 59
  4903  3974 208322             _local_1058_1    jsr chrget                               ; get next data byte ;; @@3974 59
  4904  3977 7f0f32             _local_1058_2    bbr7 valtyp,_local_1058_50               ; get value type, input a number if numeric ;; @@3977 59
  4905  397a 6f1309                              bbr6 input_flag,_local_1058_10           ; branch if not get, set quote ;; @@397a 59
  4906  397d e8                                  inx                                       ;; @@397d 59
  4907  397e 863d                                stx txtptr                                ;; @@397e 59
  4908  3980 a900               _local_1058_5    lda #0                                   ; [901212] ;; @@3980 59
  4909  3982 850a                                sta charac                                ;; @@3982 59
  4910  3984 800f                                bra _local_1058_20                        ;; @@3984 59
  4911                           ;; @@3986 59
  4912  3986 ff87f7             _local_1058_10   bbs7 op,_local_1058_5                    ; no terminators if LINPUT or LREAD  [901212] ;; @@3986 59
  4913  3989 850a                                sta charac                               ; setqut.  assume quoted string ;; @@3989 59
  4914  398b c922                                cmp #'"'                                 ; terminators ok? ;; @@398b 59
  4915  398d f007                                beq _local_1058_30                       ; yes (sets .c) ;; @@398d 59
  4916  398f a93a                                lda #':'                                 ; set terminators to ":" and... ;; @@398f 59
  4917  3991 850a                                sta charac                                ;; @@3991 59
  4918  3993 a92c                                lda #','                                 ; ...comma ;; @@3993 59
  4919                           ;; @@3995 59
  4920  3995 18                 _local_1058_20   clc                                      ; resetc ;; @@3995 59
  4921  3996 850b               _local_1058_30   sta endchr                               ; nowget ;; @@3996 59
  4922  3998 a53d                                lda txtptr                                ;; @@3998 59
  4923  399a a43e                                ldy txtptr+1                              ;; @@399a 59
  4924  399c 6900                                adc #0                                   ; .c is set properly above ;; @@399c 59
  4925  399e 9001                                bcc _local_1058_40                        ;; @@399e 59
  4926  39a0 c8                                  iny                                       ;; @@39a0 59
  4927  39a1 208b5a             _local_1058_40   jsr strlt2                               ; make a string descriptor for the value & copy if needed ;; @@39a1 59
  4928  39a4 20224e                              jsr st2txt                               ; copy strng2 to txtptr (st-2-txt... get it?) ;; @@39a4 59
  4929  39a7 20b536                              jsr inpcom                               ; do assignment ;; @@39a7 59
  4930  39aa 800d                                bra _local_1058_60                        ;; @@39aa 59
  4931                           ;; @@39ac 59
  4932  39ac ff871d             _local_1058_50   bbs7 op,_local_1058_100                  ; error if LINPUT (string input only)  [901212] ;; @@39ac 59
  4933  39af a200                                ldx #0                                   ; numins. flag 'text bank' (0) ;; @@39af 59
  4934  39b1 208d63                              jsr fin                                   ;; @@39b1 59
  4935  39b4 a510                                lda intflg                               ; set codes on flags ;; @@39b4 59
  4936  39b6 209336                              jsr qintgr                               ; go decide on float ;; @@39b6 59
  4937                           ;; @@39b9 59
  4938  39b9 208522             _local_1058_60   jsr chrgot                               ; strdn2. read last character ;; @@39b9 59
  4939  39bc f041                                beq trmok                                ; ":" or EOL is ok ;; @@39bc 59
  4940  39be c92c                                cmp #','                                 ; a comma? ;; @@39be 59
  4941  39c0 f03d                                beq trmok                                 ;; @@39c0 59
  4942                           ;; @@39c2 59
  4943  39c2 a513                                lda input_flag                           ; is this get, read, or input? ;; @@39c2 59
  4944  39c4 f00a                                beq _local_1058_110                      ; input ;; @@39c4 59
  4945  39c6 3004                                bmi _local_1058_100                      ; read ;; @@39c6 59
  4946  39c8 a615                                ldx channl                               ; get. if not kbd, go use 'bad file data error' ;; @@39c8 59
  4947  39ca d008                                bne _local_1058_120                       ;; @@39ca 59
  4948                           ;; @@39cc 59
  4949  39cc a216               _local_1058_100  ldx #errtm                               ; tmerr. 'get from kbd' or 'read' saw a bad type ;; @@39cc 59
  4950  39ce 8006                                bra _local_1058_130                      ; always ;; @@39ce 59
  4951                           ;; @@39d0 59
  4952  39d0 a515               _local_1058_110  lda channl                                ;; @@39d0 59
  4953  39d2 f005                                beq _local_1058_200                      ; do again if keybd input ;; @@39d2 59
  4954  39d4 a218               _local_1058_120  ldx #errbd                               ; input saw bad file data ;; @@39d4 59
  4955  39d6 8376f4             _local_1058_130  +lbra error                               ;; @@39d6 59
  4956                           ;; @@39d9 59
  4957                           ;; @@39d9 59
  4958  39d9 20dc3c             _local_1058_200  jsr highlight_text                       ; [911119] ;; @@39d9 59
  4959  39dc 207dff                              jsr _primm                                ;; @@39dc 59
  4960  39df 3f5245444f204652...                 !text "?REDO FROM START",cr,0             ;; @@39df 59
  4961  39f1 20cb3c                              jsr highlight_done                       ; [911119] ;; @@39f1 59
  4962                           ;; @@39f4 59
  4963  39f4 ad7211             ott              lda oldtxt                                ;; @@39f4 60
  4964  39f7 ac7311                              ldy oldtxt+1                              ;; @@39f7 60
  4965  39fa 853d                                sta txtptr                               ; put user back to beginning of input ;; @@39fa 60
  4966  39fc 843e                                sty txtptr+1                              ;; @@39fc 60
  4967  39fe 60                                  rts                                       ;; @@39fe 60
  4968                           ;; @@39ff 60
  4969                           ;; @@39ff 60
  4970                           ;; @@39ff 60
  4971  39ff a201               trmok            ldx #1                                    ;; @@39ff 60
  4972  3a01 b53d               _local_1059_1    lda txtptr,x                              ;; @@3a01 60
  4973  3a03 9545                                sta inpptr,x                             ; save for more reads ;; @@3a03 60
  4974  3a05 b54d                                lda vartxt,x                              ;; @@3a05 60
  4975  3a07 953d                                sta txtptr,x                             ; point to variable list ;; @@3a07 60
  4976  3a09 ca                                  dex                                       ;; @@3a09 60
  4977  3a0a 10f5                                bpl _local_1059_1                         ;; @@3a0a 60
  4978                           ;; @@3a0c 60
  4979  3a0c 208522                              jsr chrgot                               ; look at last vartab character ;; @@3a0c 60
  4980  3a0f f006                                beq _local_1059_2                        ; that's the end of the list ;; @@3a0f 60
  4981  3a11 205b4e                              jsr chkcom                               ; not end. check for comma ;; @@3a11 60
  4982  3a14 830aff                              +lbra inloop                              ;; @@3a14 60
  4983                           ;; @@3a17 60
  4984  3a17 a545               _local_1059_2    lda inpptr                               ; put away a new data pntr name ;; @@3a17 60
  4985  3a19 a446                                ldy inpptr+1                              ;; @@3a19 60
  4986  3a1b 7f1305                              bbr7 input_flag,_local_1059_3             ;; @@3a1b 60
  4987  3a1e 8543                                sta datptr                                ;; @@3a1e 60
  4988  3a20 8444                                sty datptr+1                              ;; @@3a20 60
  4989  3a22 60                                  rts                                       ;; @@3a22 60
  4990                           ;; @@3a23 60
  4991  3a23 a000               _local_1059_3    ldy #0                                   ; last data chr could have been ',' or ':' but should be null ;; @@3a23 60
  4992  3a25 a945                                lda #inpptr                               ;; @@3a25 60
  4993  3a27 20c722                              jsr lda_far_ram0                          ;; @@3a27 60
  4994  3a2a f01d                                beq _local_1059_4                        ; it is null ;; @@3a2a 60
  4995  3a2c a515                                lda channl                               ; if not terminal, no type ;; @@3a2c 60
  4996  3a2e d019                                bne _local_1059_4                         ;; @@3a2e 60
  4997                           ;; @@3a30 60
  4998  3a30 20dc3c                              jsr highlight_text                       ; [911119] ;; @@3a30 60
  4999  3a33 207dff                              jsr _primm                                ;; @@3a33 60
  5000  3a36 3f45585452412049...                 !text "?EXTRA IGNORED", cr,0              ;; @@3a36 60
  5001  3a46 20cb3c                              jsr highlight_done                       ; [911119] ;; @@3a46 60
  5002                           ;; @@3a49 60
  5003  3a49 60                 _local_1059_4    rts                                      ; do next statement ;; @@3a49 60
  5004                           ;; @@3a4a 60
  5005                          ; .page ;; @@3a4a 60
  5006                          ; DATLOP Routine Subroutine to find data. ;; @@3a4a 60
  5007                          ; ;; @@3a4a 60
  5008                          ; The search is made by using the execution code for data to skip over ;; @@3a4a 60
  5009                          ; statements, the start word of each statement is compared with "data_token". ;; @@3a4a 60
  5010                          ; Each new line number is stored in "datlin" so that if any error occurs while ;; @@3a4a 60
  5011                          ; reading data the error message can give the line number of the bad data. ;; @@3a4a 60
  5012                           ;; @@3a4a 60
  5013  3a4a 205b35             datlop           jsr datan                                ; skip some text ;; @@3a4a 61
  5014  3a4d c8                                  iny                                       ;; @@3a4d 61
  5015  3a4e aa                                  tax                                      ; end of line? ;; @@3a4e 61
  5016  3a4f d016                                bne _local_1060_10                       ; no ;; @@3a4f 61
  5017  3a51 a20d                                ldx #errod                               ; yes, "no data" error ;; @@3a51 61
  5018  3a53 c8                                  iny                                       ;; @@3a53 61
  5019  3a54 20c522                              jsr indtxt                                ;; @@3a54 61
  5020  3a57 f3f5f3                              +lbeq error                               ;; @@3a57 61
  5021                           ;; @@3a5a 61
  5022  3a5a c8                                  iny                                       ;; @@3a5a 61
  5023  3a5b 20c522                              jsr indtxt                               ; get high byte of line number ;; @@3a5b 61
  5024  3a5e 8541                                sta datlin                                ;; @@3a5e 61
  5025  3a60 c8                                  iny                                       ;; @@3a60 61
  5026  3a61 20c522                              jsr indtxt                               ; get low byte ;; @@3a61 61
  5027  3a64 c8                                  iny                                       ;; @@3a64 61
  5028  3a65 8542                                sta datlin+1                              ;; @@3a65 61
  5029                           ;; @@3a67 61
  5030  3a67 204b35             _local_1060_10   jsr addon                                ; nowlin.  txtptr+.y ;; @@3a67 61
  5031  3a6a 208522                              jsr chrgot                               ; span blanks ;; @@3a6a 61
  5032  3a6d aa                                  tax                                      ; used later ;; @@3a6d 61
  5033  3a6e e083                                cpx #data_token                          ; is it a DATA statement? ;; @@3a6e 61
  5034  3a70 d0d8                                bne datlop                               ; not quite right, keep looking ;; @@3a70 61
  5035  3a72 83f4fe                              +lbra datbk1                             ; this is the one ;; @@3a72 61
  5036                           ;; @@3a75 61
  5037                           ;; @@3a75 61
  5038                          ;.end ;; @@3a75 61
  5039                          ; .page ;; @@3a75 61
  5040                          ; .subttl NEXT ;; @@3a75 61
  5041                           ;; @@3a75 61
  5042                          ; Next routine ;; @@3a75 61
  5043                          ; ;; @@3a75 61
  5044                          ; 'FOR' entry on the stack has the following format: ;; @@3a75 61
  5045                          ; ;; @@3a75 61
  5046                          ; Low address ;; @@3a75 61
  5047                          ;  token (for_token) 1 byte ;; @@3a75 61
  5048                          ;  a pointer to the loop variable 2 bytes ;; @@3a75 61
  5049                          ;  the step 5 bytes ;; @@3a75 61
  5050                          ;  a byte reflecting the sign of the incr. 2 bytes ;; @@3a75 61
  5051                          ;  the upper value (packed) 5 bytes ;; @@3a75 61
  5052                          ;  the line number of the FOR statement 2 bytes ;; @@3a75 61
  5053                          ;  a text pointer into the FOR statement 2 bytes ;; @@3a75 61
  5054                          ; High address ;; @@3a75 61
  5055                          ; ;; @@3a75 61
  5056                          ; (total 16 bytes) ;; @@3a75 61
  5057                           ;; @@3a75 61
  5058  3a75 d013               next             bne _local_1061_10                       ; hop if 'next' variable given ;; @@3a75 62
  5059  3a77 a0ff                                ldy #$ff                                 ; flag no specific 'for' variable ;; @@3a77 62
  5060  3a79 8014                                bra _local_1061_20                       ; always ;; @@3a79 62
  5061                           ;; @@3a7b 62
  5062  3a7b a012               _local_1061_5    ldy #lenfor                              ; done, clean up stack ;; @@3a7b 62
  5063  3a7d 20ef31                              jsr rlsstk                               ; release (y) items from stack ;; @@3a7d 62
  5064  3a80 208522                              jsr chrgot                                ;; @@3a80 62
  5065  3a83 c92c                                cmp #','                                 ; ie., NEXT j,k ;; @@3a83 62
  5066  3a85 d069                                bne _local_1061_45                        ;; @@3a85 62
  5067  3a87 208322                              jsr chrget                                ;; @@3a87 62
  5068                           ;; @@3a8a 62
  5069  3a8a 207c4f             _local_1061_10   jsr ptrget                               ; get pointer to variable in (a,y) ;; @@3a8a 62
  5070  3a8d 854b                                sta forpnt                                ;; @@3a8d 62
  5071                           ;; @@3a8f 62
  5072  3a8f 844c               _local_1061_20   sty forpnt+1                              ;; @@3a8f 62
  5073  3a91 a981                                lda #for_token                            ;; @@3a91 62
  5074  3a93 204331                              jsr search                               ; look for FOR entry in run-time stack ;; @@3a93 62
  5075  3a96 f005                                beq _local_1061_30                       ; branch if found ;; @@3a96 62
  5076  3a98 a20a                                ldx #errnf                               ; otherwise 'error, not found' ;; @@3a98 62
  5077  3a9a 83b2f3                              +lbra error                               ;; @@3a9a 62
  5078                           ;; @@3a9d 62
  5079                           ;; @@3a9d 62
  5080                          ; Set up to move STEP value to FAC ;; @@3a9d 62
  5081                           ;; @@3a9d 62
  5082  3a9d 20e631             _local_1061_30   jsr movfnd                               ; (fndpnt) => (tos) ;; @@3a9d 62
  5083  3aa0 a53f                                lda fndpnt                                ;; @@3aa0 62
  5084  3aa2 18                                  clc                                       ;; @@3aa2 62
  5085  3aa3 6903                                adc #3                                   ; offset to step value ;; @@3aa3 62
  5086  3aa5 a440                                ldy fndpnt+1                              ;; @@3aa5 62
  5087  3aa7 9001                                bcc _local_1061_35                        ;; @@3aa7 62
  5088  3aa9 c8                                  iny                                       ;; @@3aa9 62
  5089                           ;; @@3aaa 62
  5090  3aaa 200e62             _local_1061_35   jsr movfm                                ; actually "move from ROM", but sys stack is in "common" ;; @@3aaa 62
  5091  3aad a008                                ldy #8                                   ; MOVFM doesn't move sign.  Get it ;; @@3aad 62
  5092  3aaf b13f                                lda (fndpnt),y                            ;; @@3aaf 62
  5093  3ab1 8568                                sta facsgn                                ;; @@3ab1 62
  5094                           ;; @@3ab3 62
  5095                          ; Get pointer to FOR variable ;; @@3ab3 62
  5096                           ;; @@3ab3 62
  5097  3ab3 a001                                ldy #1                                    ;; @@3ab3 62
  5098  3ab5 b13f                                lda (fndpnt),y                           ; get lsb ;; @@3ab5 62
  5099  3ab7 48                                  pha                                       ;; @@3ab7 62
  5100  3ab8 aa                                  tax                                       ;; @@3ab8 62
  5101  3ab9 c8                                  iny                                       ;; @@3ab9 62
  5102  3aba b13f                                lda (fndpnt),y                           ; get msb ;; @@3aba 62
  5103  3abc 48                                  pha                                       ;; @@3abc 62
  5104  3abd a8                                  tay                                      ; msb in y ;; @@3abd 62
  5105  3abe 8a                                  txa                                      ; lsb in a ;; @@3abe 62
  5106  3abf 20bb5d                              jsr fadd                                 ; add STEP value to FOR variable (fadd gets from bank 1) ;; @@3abf 62
  5107  3ac2 7a                                  ply                                      ; msb in y ;; @@3ac2 62
  5108  3ac3 fa                                  plx                                      ; lsb in x ;; @@3ac3 62
  5109  3ac4 206262                              jsr movmf_ram1                           ; put result back into FOR variable in var bank ;; @@3ac4 62
  5110                           ;; @@3ac7 62
  5111                          ; Make (a,y) point at TO value in stack ;; @@3ac7 62
  5112                           ;; @@3ac7 62
  5113  3ac7 a53f                                lda fndpnt                                ;; @@3ac7 62
  5114  3ac9 18                                  clc                                       ;; @@3ac9 62
  5115  3aca 6909                                adc #9                                    ;; @@3aca 62
  5116  3acc a440                                ldy fndpnt+1                              ;; @@3acc 62
  5117  3ace 9001                                bcc _local_1061_40                        ;; @@3ace 62
  5118  3ad0 c8                                  iny                                       ;; @@3ad0 62
  5119                           ;; @@3ad1 62
  5120                          ; Test if loop done ;; @@3ad1 62
  5121                           ;; @@3ad1 62
  5122                          _local_1061_40                                             ;; @@3ad1 62
  5123                          ; sta sw_rom_ram0 ;???? ;; @@3ad1 62
  5124  3ad1 20f162                              jsr fcomp                                ; compare FAC to value pointed to by (a,y) ;; @@3ad1 62
  5125  3ad4 a008                                ldy #8                                    ;; @@3ad4 62
  5126  3ad6 38                                  sec                                       ;; @@3ad6 62
  5127  3ad7 f13f                                sbc (fndpnt),y                           ; (common area????) ;; @@3ad7 62
  5128  3ad9 f0a0                                beq _local_1061_5                        ; branch taken if done ;; @@3ad9 62
  5129                           ;; @@3adb 62
  5130  3adb a011                                ldy #17                                  ; not done, set pointers to re-execute loop ;; @@3adb 62
  5131  3add b13f                                lda (fndpnt),y                           ; (common area????) ;; @@3add 62
  5132  3adf 853d                                sta txtptr                                ;; @@3adf 62
  5133  3ae1 88                                  dey                                       ;; @@3ae1 62
  5134  3ae2 b13f                                lda (fndpnt),y                            ;; @@3ae2 62
  5135  3ae4 853e                                sta txtptr+1                              ;; @@3ae4 62
  5136  3ae6 88                                  dey                                       ;; @@3ae6 62
  5137  3ae7 b13f                                lda (fndpnt),y                            ;; @@3ae7 62
  5138  3ae9 853c                                sta curlin+1                              ;; @@3ae9 62
  5139  3aeb 88                                  dey                                       ;; @@3aeb 62
  5140  3aec b13f                                lda (fndpnt),y                            ;; @@3aec 62
  5141  3aee 853b                                sta curlin                                ;; @@3aee 62
  5142  3af0 60                 _local_1061_45   rts                                       ;; @@3af0 62
  5143                           ;; @@3af1 62
  5144                          ;.end ;; @@3af1 62
  5145                          ; .page ;; @@3af1 62
  5146                          ; .subttl DIM ;; @@3af1 62
  5147                           ;; @@3af1 62
  5148                          ; The DIMension code sets DIMFLG and then falls into the variable search ;; @@3af1 62
  5149                          ; routine, which looks at DIMFLG at 3 different points: ;; @@3af1 62
  5150                          ; ;; @@3af1 62
  5151                          ; 1) If an entry is found, DIMFLG being on indicates a ;; @@3af1 62
  5152                          ;    doubly-defined variable. ;; @@3af1 62
  5153                          ; 2) When a new entry is being built, DIMFLG being on indicates ;; @@3af1 62
  5154                          ;    the indices should be used for the size of each index. ;; @@3af1 62
  5155                          ;    Otherwise the default of ten is used. ;; @@3af1 62
  5156                          ; 3) When the build entry code finishes, indexing will be done ;; @@3af1 62
  5157                          ;    only if DIMFLG is off. ;; @@3af1 62
  5158                           ;; @@3af1 62
  5159                           ;; @@3af1 62
  5160  3af1 205b4e             dim3             jsr chkcom                               ; must be a comma ;; @@3af1 63
  5161                           ;; @@3af4 63
  5162  3af4 aa                 dim              tax                                      ; make .x non-zero (.a must be non-zero to work correctly) ;; @@3af4 63
  5163  3af5 20814f                              jsr ptrgt1                                ;; @@3af5 63
  5164  3af8 208522                              jsr chrgot                               ; get last character ;; @@3af8 63
  5165  3afb d0f4                                bne dim3                                  ;; @@3afb 63
  5166  3afd 60                                  rts                                       ;; @@3afd 63
  5167                           ;; @@3afe 63
  5168                          ;.end ;; @@3afe 63
  5169                          ; .page ;; @@3afe 63
  5170                          ; .subttl SYS ;; @@3afe 63
  5171                           ;; @@3afe 63
  5172  3afe 208a5d             sys              jsr getwrd                               ; convert arg to integer value ;; @@3afe 63
  5173  3b01 a516                                lda linnum                               ; set up arg's for call to 'long jsr' ;; @@3b01 63
  5174  3b03 8504                                sta _pclo                                 ;; @@3b03 63
  5175  3b05 a517                                lda linnum+1                              ;; @@3b05 63
  5176  3b07 8503                                sta _pchi                                 ;; @@3b07 63
  5177  3b09 add102                              lda current_bank                          ;; @@3b09 63
  5178  3b0c 8502                                sta _bank                                 ;; @@3b0c 63
  5179                           ;; @@3b0e 63
  5180  3b0e 202679                              jsr optbyt                               ; (optional) .A reg arg ;; @@3b0e 63
  5181  3b11 9002                                bcc _local_1062_10                        ;; @@3b11 63
  5182  3b13 8606                                stx _a_reg                                ;; @@3b13 63
  5183                           ;; @@3b15 63
  5184  3b15 202679             _local_1062_10   jsr optbyt                               ; (optional) .X reg arg ;; @@3b15 63
  5185  3b18 9002                                bcc _local_1062_20                        ;; @@3b18 63
  5186  3b1a 8607                                stx _x_reg                                ;; @@3b1a 63
  5187                           ;; @@3b1c 63
  5188  3b1c 202679             _local_1062_20   jsr optbyt                               ; (optional) .Y reg arg ;; @@3b1c 63
  5189  3b1f 9009                                bcc _local_1062_30                        ;; @@3b1f 63
  5190  3b21 8608                                stx _y_reg                                ;; @@3b21 63
  5191                           ;; @@3b23 63
  5192  3b23 202679             _local_1062_25   jsr optbyt                               ; (optional) .Z reg arg ;; @@3b23 63
  5193  3b26 9002                                bcc _local_1062_30                        ;; @@3b26 63
  5194  3b28 8609                                stx _z_reg                                ;; @@3b28 63
  5195                           ;; @@3b2a 63
  5196  3b2a 202679             _local_1062_30   jsr optbyt                               ; (optional) .S reg arg ;; @@3b2a 63
  5197  3b2d 9002                                bcc _local_1062_40                        ;; @@3b2d 63
  5198  3b2f 8605                                stx _s_reg                                ;; @@3b2f 63
  5199                           ;; @@3b31 63
  5200  3b31 4c6eff             _local_1062_40   jmp _jsr_far                             ; far, far away ;; @@3b31 63
  5201                          ;If returns, Kernel will update _reg's for us ;; @@3b34 63
  5202                           ;; @@3b34 63
  5203                          ;.end ;; @@3b34 63
  5204                          ; .page ;; @@3b34 63
  5205                          ; .subttl DMA ;; @@3b34 63
  5206                           ;; @@3b34 63
  5207                          ; DMA - Set up for DMA operation (FETCH/STASH/SWAP) ;; @@3b34 63
  5208                          ; ;; @@3b34 63
  5209                          ;  Syntax:  DMA  command,length,source(l/h/b),destination(l/h/b)[,subcmd,mod(l/h)] [,...] ;; @@3b34 63
  5210                           ;; @@3b34 63
  5211                           ;; @@3b34 63
  5212                          dma                                                       ; params are not longer optional-  [910520] F018A ;; @@3b34 64
  5213  3b34 206c5d                              jsr getbyt                               ; get command ;; @@3b34 64
  5214  3b37 9009               _local_1063_1    bcc _local_1063_10                        ;; @@3b37 64
  5215  3b39 8a                                  txa                                      ; [910102] ;; @@3b39 64
  5216  3b3a 2904                                and #%00000100                           ;  ;; @@3b3a 64
  5217  3b3c d3bf16                              +lbne fcerr                              ; (disallow chained DMA lists) ;; @@3b3c 64
  5218  3b3f 8e5001                              stx dma2_cmd                              ;; @@3b3f 64
  5219                           ;; @@3b42 64
  5220  3b42 20875d             _local_1063_10   jsr comwrd                               ; get length ;; @@3b42 64
  5221                          ; bcc _local_1063_20 ;; @@3b45 64
  5222  3b45 8c5101                              sty dma2_cnt_lo                           ;; @@3b45 64
  5223  3b48 8d5201                              sta dma2_cnt_hi                           ;; @@3b48 64
  5224                           ;; @@3b4b 64
  5225  3b4b 20875d             _local_1063_20   jsr comwrd                               ; get source address & bank ;; @@3b4b 64
  5226                          ; bcc _local_1063_30 ;; @@3b4e 64
  5227  3b4e 8c5301                              sty dma2_src_lo                           ;; @@3b4e 64
  5228  3b51 8d5401                              sta dma2_src_hi                           ;; @@3b51 64
  5229  3b54 20825d             _local_1063_30   jsr combyt                                ;; @@3b54 64
  5230                          ; bcc _local_1063_40 ;; @@3b57 64
  5231  3b57 8e5501                              stx dma2_src_bank                         ;; @@3b57 64
  5232                           ;; @@3b5a 64
  5233  3b5a 20875d             _local_1063_40   jsr comwrd                               ; get destination address & bank ;; @@3b5a 64
  5234                          ; bcc _local_1063_50 ;; @@3b5d 64
  5235  3b5d 8c5601                              sty dma2_dest_lo                          ;; @@3b5d 64
  5236  3b60 8d5701                              sta dma2_dest_hi                          ;; @@3b60 64
  5237  3b63 20825d             _local_1063_50   jsr combyt                                ;; @@3b63 64
  5238                          ; bcc _local_1063_60 ;; @@3b66 64
  5239  3b66 8e5801                              stx dma2_dest_bank                        ;; @@3b66 64
  5240                           ;; @@3b69 64
  5241  3b69 202479             _local_1063_60   jsr optzer                               ; get subcmd, default=0    [910520] F018A ;; @@3b69 64
  5242                          ; bcc _local_1063_65 ;; @@3b6c 64
  5243  3b6c 8e5901                              stx dma2_subcmd                           ;; @@3b6c 64
  5244                           ;; @@3b6f 64
  5245  3b6f 202479             _local_1063_65   jsr optzer                               ; get mod lo/hi, default=0   [910102] ;; @@3b6f 64
  5246                          ; bcc _local_1063_70 ;; @@3b72 64
  5247  3b72 8e5a01                              stx dma2_mod_lo                           ;; @@3b72 64
  5248  3b75 202479             _local_1063_70   jsr optzer                                ;; @@3b75 64
  5249                          ; bcc _local_1063_80 ;; @@3b78 64
  5250  3b78 8e5b01                              stx dma2_mod_hi                           ;; @@3b78 64
  5251                           ;; @@3b7b 64
  5252  3b7b a000               _local_1063_80   ldy #0                                   ; dma_list (bank 0) ;; @@3b7b 64
  5253  3b7d a201                                ldx #>dma2_cmd                            ;; @@3b7d 64
  5254  3b7f a950                                lda #<dma2_cmd                            ;; @@3b7f 64
  5255  3b81 8c02d7                              sty dma_ctlr+2                           ; dma_list bank ;; @@3b81 64
  5256  3b84 8e01d7                              stx dma_ctlr+1                           ; dma_list hi ;; @@3b84 64
  5257  3b87 8d00d7                              sta dma_ctlr                             ; dma_list lo & trigger ;; @@3b87 64
  5258  3b8a 2c03d7             _local_1063_85   bit dma_ctlr+3                           ; check status (in case IRQ enabled)  [910103] ;; @@3b8a 64
  5259  3b8d 30fb                                bmi _local_1063_85                       ; busy ;; @@3b8d 64
  5260                           ;; @@3b8f 64
  5261  3b8f 208522                              jsr chrgot                               ; eol? ;; @@3b8f 64
  5262  3b92 f005                                beq _local_1063_90                       ; yes ;; @@3b92 64
  5263  3b94 202679                              jsr optbyt                               ; no- continue after getting comma & next cmd byte ;; @@3b94 64
  5264  3b97 809e                                bra _local_1063_1                         ;; @@3b97 64
  5265                           ;; @@3b99 64
  5266  3b99 60                 _local_1063_90   rts                                       ;; @@3b99 64
  5267                           ;; @@3b9a 64
  5268                          ;.end ;; @@3b9a 64
  5269                          ; .page ;; @@3b9a 64
  5270                          ; .subttl  TRON  TROFF ;; @@3b9a 64
  5271                           ;; @@3b9a 64
  5272                           ;; @@3b9a 64
  5273                          tron                                                      ; trace mode on ;; @@3b9a 65
  5274  3b9a d77e                                smb5 runmod                              ; trcflg ;; @@3b9a 65
  5275  3b9c 60                                  rts                                       ;; @@3b9c 65
  5276                           ;; @@3b9d 65
  5277                           ;; @@3b9d 65
  5278                          troff                                                     ; trace mode off ;; @@3b9d 65
  5279  3b9d 577e                                rmb5 runmod                              ; trcflg ;; @@3b9d 65
  5280  3b9f 60                                  rts                                       ;; @@3b9f 65
  5281                           ;; @@3ba0 65
  5282                           ;; @@3ba0 65
  5283                          ;.end ;; @@3ba0 65
  5284                          ; .page ;; @@3ba0 65
  5285                          ; .subttl  RREG ;; @@3ba0 65
  5286                           ;; @@3ba0 65
  5287                          ; RREG - Return values of 6502 registers following a SYS call. ;; @@3ba0 65
  5288                          ; ;; @@3ba0 65
  5289                          ; Syntax : RREG [.A variable [,[.X[...Z] variable] [,[.S variable] ]]] ;; @@3ba0 65
  5290                           ;; @@3ba0 65
  5291  3ba0 a900               rreg             lda #0                                    ;; @@3ba0 65
  5292  3ba2 850d                                sta count                                 ;; @@3ba2 65
  5293                           ;; @@3ba4 65
  5294  3ba4 208522             _local_1064_10   jsr chrgot                                ;; @@3ba4 65
  5295  3ba7 f038                                beq _local_1064_50                       ; reached end of statement- done ;; @@3ba7 65
  5296  3ba9 c92c                                cmp #','                                 ; skip this arg? ;; @@3ba9 65
  5297  3bab f022                                beq _local_1064_30                       ; branch if so ;; @@3bab 65
  5298  3bad 207c4f                              jsr ptrget                               ; get pointer to target variable ;; @@3bad 65
  5299  3bb0 854b                                sta forpnt                               ; a little bit of set up so we can share LET code ;; @@3bb0 65
  5300  3bb2 844c                                sty forpnt+1                              ;; @@3bb2 65
  5301  3bb4 a50f                                lda valtyp                               ; what kind of variable name did ptrget find? ;; @@3bb4 65
  5302  3bb6 d32e11                              +lbne chkerr                             ; type mismatch error if string ;; @@3bb6 65
  5303                           ;; @@3bb9 65
  5304  3bb9 a40d                                ldy count                                ; which register's value are we looking for? ;; @@3bb9 65
  5305  3bbb b90600                              lda _a_reg,y                             ; .A, .X, .Y, & .Z are contiguious ;; @@3bbb 65
  5306  3bbe c004                                cpy #4                                    ;; @@3bbe 65
  5307  3bc0 d002                                bne _local_1064_20                        ;; @@3bc0 65
  5308  3bc2 a505                                lda _s_reg                               ; but .S isn't ;; @@3bc2 65
  5309                           ;; @@3bc4 65
  5310  3bc4 a8                 _local_1064_20   tay                                      ; low byte in .Y ;; @@3bc4 65
  5311  3bc5 a900                                lda #0                                   ; high byte of zero ;; @@3bc5 65
  5312  3bc7 203f4e                              jsr givayf                               ; go float it ;; @@3bc7 65
  5313  3bca a510                                lda intflg                               ; set conditions for type of var (int/float) ;; @@3bca 65
  5314  3bcc 209336                              jsr qintgr                               ; ..and use part of LET to do the work ;; @@3bcc 65
  5315                           ;; @@3bcf 65
  5316  3bcf e60d               _local_1064_30   inc count                                ; 5 registers to do ;; @@3bcf 65
  5317  3bd1 a50d                                lda count                                 ;; @@3bd1 65
  5318  3bd3 c905                                cmp #5                                    ;; @@3bd3 65
  5319  3bd5 b00a                                bcs _local_1064_50                        ;; @@3bd5 65
  5320  3bd7 208522                              jsr chrgot                               ; was this e-o-statement? ;; @@3bd7 65
  5321  3bda f005                                beq _local_1064_50                        ;; @@3bda 65
  5322  3bdc 208322                              jsr chrget                               ; not e-o-s, skip over comma, ;; @@3bdc 65
  5323  3bdf d0c3                                bne _local_1064_10                       ; ..and go do next ;; @@3bdf 65
  5324                           ;; @@3be1 65
  5325  3be1 60                 _local_1064_50   rts                                       ;; @@3be1 65
  5326                           ;; @@3be2 65
  5327                          ;.end ;; @@3be2 65
  5328                          ; .page ;; @@3be2 65
  5329                          ; .subttl MID$ ;; @@3be2 65
  5330                           ;; @@3be2 65
  5331                          ; Alternate use of the MID$ function, as the target of an assignment. ;; @@3be2 65
  5332                          ; ;; @@3be2 65
  5333                          ; MID$(string_var,starting_position [,length]) = string_expression ;; @@3be2 65
  5334                           ;; @@3be2 65
  5335                          midd2                                                      ;; @@3be2 66
  5336                          midwrk           =midd2-1                                  ;; @@3be2 66
  5337                           ;; @@3be2 66
  5338  3be2 20584e                              jsr chkopn                               ; check for '(' ;; @@3be2 66
  5339  3be5 207c4f                              jsr ptrget                               ; get pointer to descriptor of string-var ;; @@3be5 66
  5340  3be8 854b                                sta forpnt                               ; store for later use ;; @@3be8 66
  5341  3bea 844c                                sty forpnt+1                              ;; @@3bea 66
  5342  3bec 20dd4c                              jsr chkstr                               ; check if string ;; @@3bec 66
  5343                           ;; @@3bef 66
  5344  3bef 20825d                              jsr combyt                               ; look for comma, followed by 1 byte starting address ;; @@3bef 66
  5345  3bf2 ca                                  dex                                      ; adjust starting addr ;; @@3bf2 66
  5346  3bf3 8677                                stx hulp                                 ; store    " " ;; @@3bf3 66
  5347                           ;; @@3bf5 66
  5348  3bf5 c929                                cmp #')'                                 ; finished? ;; @@3bf5 66
  5349  3bf7 f004                                beq _local_1065_10                       ; branch if so (use default length) ;; @@3bf7 66
  5350  3bf9 20825d                              jsr combyt                               ; ..else get length ;; @@3bf9 66
  5351  3bfc 2c                                  !text $2c                                 ;; @@3bfc 66
  5352                           ;; @@3bfd 66
  5353  3bfd a2ff               _local_1065_10   ldx #$ff                                 ; default length ;; @@3bfd 66
  5354  3bff 8676                                stx z_p_temp_1                            ;; @@3bff 66
  5355  3c01 20554e                              jsr chkcls                               ; look for ')' ;; @@3c01 66
  5356  3c04 a9b2                                lda #equal_token                         ; look for '=' ;; @@3c04 66
  5357  3c06 205d4e                              jsr synchr                                ;; @@3c06 66
  5358  3c09 20ef4c                              jsr frmevl                               ; bring on the source! ;; @@3c09 66
  5359  3c0c 20dd4c                              jsr chkstr                               ; nothing funny ;; @@3c0c 66
  5360                           ;; @@3c0f 66
  5361  3c0f a002                                ldy #2                                   ; get string descriptors ;; @@3c0f 66
  5362  3c11 a94b               _local_1065_20   lda #forpnt                              ; target ;; @@3c11 66
  5363  3c13 20d722                              jsr lda_far_ram1                         ; lda (forpnt),y ;; @@3c13 66
  5364  3c16 995d00                              sta str1,y                                ;; @@3c16 66
  5365  3c19 20a922                              jsr indfmo                               ; source ;; @@3c19 66
  5366  3c1c 996000                              sta str2,y                                ;; @@3c1c 66
  5367  3c1f 88                                  dey                                       ;; @@3c1f 66
  5368  3c20 10ef                                bpl _local_1065_20                        ;; @@3c20 66
  5369                           ;; @@3c22 66
  5370                          ; Test for target string in text was removed-  all strings are copied to ;; @@3c22 66
  5371                          ; string RAM when they are created. ;; @@3c22 66
  5372                           ;; @@3c22 66
  5373  3c22 38                                  sec                                      ; adjust pointer to source string so that the same ;; @@3c22 66
  5374  3c23 a561                                lda str2+1                               ; ..index can load & save ;; @@3c23 66
  5375  3c25 e577                                sbc hulp                                  ;; @@3c25 66
  5376  3c27 8561                                sta str2+1                                ;; @@3c27 66
  5377  3c29 b002                                bcs _local_1065_30                        ;; @@3c29 66
  5378  3c2b c662                                dec str2+2                                ;; @@3c2b 66
  5379                           ;; @@3c2d 66
  5380  3c2d a576               _local_1065_30   lda z_p_temp_1                           ; get specified length (or default) ;; @@3c2d 66
  5381  3c2f c560                                cmp str2                                 ; compare with length of source ;; @@3c2f 66
  5382  3c31 9002                                bcc _local_1065_40                       ; ok if less, ;; @@3c31 66
  5383  3c33 a560                                lda str2                                 ; ..else use length of source ;; @@3c33 66
  5384  3c35 aa                 _local_1065_40   tax                                       ;; @@3c35 66
  5385  3c36 f01f                                beq _local_1065_80                       ; done if length=0 ;; @@3c36 66
  5386  3c38 18                                  clc                                       ;; @@3c38 66
  5387  3c39 6577                                adc hulp                                 ; add length to starting posn. ;; @@3c39 66
  5388  3c3b b3c015                              +lbcs fcerr                              ; illegal quantity error if > 256 ;; @@3c3b 66
  5389  3c3e c55d                                cmp str1                                  ;; @@3c3e 66
  5390  3c40 9003                                bcc _local_1065_60                        ;; @@3c40 66
  5391  3c42 d3b915                              +lbne fcerr                              ; ...or if > target length ;; @@3c42 66
  5392                           ;; @@3c45 66
  5393  3c45 a477               _local_1065_60   ldy hulp                                 ; get adjusted starting address ;; @@3c45 66
  5394  3c47 da                 _local_1065_70   phx                                       ;; @@3c47 66
  5395  3c48 a25e                                ldx #str1+1                               ;; @@3c48 66
  5396  3c4a a961                                lda #str2+1                               ;; @@3c4a 66
  5397  3c4c 20d722                              jsr lda_far_ram1                         ; fetch from string bank ;; @@3c4c 66
  5398  3c4f 20f022                              jsr sta_far_ram1                         ; this is what it's all about ;; @@3c4f 66
  5399  3c52 c8                                  iny                                       ;; @@3c52 66
  5400  3c53 fa                                  plx                                       ;; @@3c53 66
  5401  3c54 ca                                  dex                                       ;; @@3c54 66
  5402  3c55 d0f0                                bne _local_1065_70                       ; keep going for specified length ;; @@3c55 66
  5403                           ;; @@3c57 66
  5404  3c57 83131f             _local_1065_80   +lbra frefac                             ; free up temp. string, rts ;; @@3c57 66
  5405                           ;; @@3c5a 66
  5406                          ;.end ;; @@3c5a 66
  5407                           ;; @@3c5a 66
  5408                          ; .page ;; @@3c5a 66
  5409                          ; .subttl  AUTO ;; @@3c5a 66
  5410                           ;; @@3c5a 66
  5411                          ; AUTO Increment ;; @@3c5a 66
  5412                          ;   Syntax :    auto {line-number} (line-number = 0 means turn off) ;; @@3c5a 66
  5413                           ;; @@3c5a 66
  5414                          auto                                                       ;; @@3c5a 67
  5415  3c5a 20ed58                              jsr errind                                ;; @@3c5a 67
  5416  3c5d 202e32                              jsr linget                                ;; @@3c5d 67
  5417  3c60 a516                                lda linnum                                ;; @@3c60 67
  5418  3c62 8574                                sta autinc                                ;; @@3c62 67
  5419  3c64 a517                                lda linnum+1                              ;; @@3c64 67
  5420  3c66 8575                                sta autinc+1                              ;; @@3c66 67
  5421  3c68 60                                  rts                                       ;; @@3c68 67
  5422                           ;; @@3c69 67
  5423                          ;.end ;; @@3c69 67
  5424                          ; .page ;; @@3c69 67
  5425                          ; .subttl  HELP ;; @@3c69 67
  5426                           ;; @@3c69 67
  5427  3c69 aec702             help             ldx errnum                               ; check for error status ;; @@3c69 67
  5428  3c6c e8                                  inx                                       ;; @@3c6c 67
  5429  3c6d f022                                beq _local_1066_1                        ; exit if there is no current error ;; @@3c6d 67
  5430  3c6f adc802                              lda errlin                                ;; @@3c6f 67
  5431  3c72 acc902                              ldy errlin+1                              ;; @@3c72 67
  5432  3c75 8516                                sta linnum                                ;; @@3c75 67
  5433  3c77 8417                                sty linnum+1                              ;; @@3c77 67
  5434  3c79 20fa31                              jsr FindLine                             ; find the beginning of line with error ;; @@3c79 67
  5435  3c7c 9013                                bcc _local_1066_1                        ; exit if line not found? ;; @@3c7c 67
  5436                           ;; @@3c7e 67
  5437  3c7e 20f737                              jsr crdo                                 ; begin a new line ;; @@3c7e 67
  5438  3c81 a616                                ldx linnum                                ;; @@3c81 67
  5439  3c83 a517                                lda linnum+1                              ;; @@3c83 67
  5440  3c85 ab5500                              ldz helper                                ;; @@3c85 67
  5441  3c88 4755                                rmb4 helper                              ; temporarily disable token highlighting ;; @@3c88 67
  5442  3c8a f755                                smb7 helper                              ; set 'help' flag for P1LINE ;; @@3c8a 67
  5443  3c8c 207733                              jsr p1line                               ; display line & highlight error ;; @@3c8c 67
  5444  3c8f 6455                                stz helper                                ;; @@3c8f 67
  5445  3c91 7755               _local_1066_1    rmb7 helper                              ; reset 'help' flag ;; @@3c91 67
  5446  3c93 8361fb                              +lbra crdo                               ; and return to caller ;; @@3c93 67
  5447                           ;; @@3c96 67
  5448                           ;; @@3c96 67
  5449                           ;; @@3c96 67
  5450                          helpsb                                                    ; logic to highlight error or find string ;; @@3c96 68
  5451  3c96 cf5532                              bbs4 helper,highlight_done               ; branch if highlighting tokens ;; @@3c96 68
  5452  3c99 df5514                              bbs5 helper,_local_1067_10               ; branch if FIND ;; @@3c99 68
  5453                           ;; @@3c9c 68
  5454  3c9c a662                                ldx lowtr+1                              ; has P1LINE reached code in error? ;; @@3c9c 68
  5455  3c9e 98                                  tya                                       ;; @@3c9e 68
  5456  3c9f 18                                  clc                                       ;; @@3c9f 68
  5457  3ca0 6561                                adc lowtr                                ; add character pointer to line pointer... ;; @@3ca0 68
  5458  3ca2 9001                                bcc _local_1067_1                         ;; @@3ca2 68
  5459  3ca4 e8                                  inx                                       ;; @@3ca4 68
  5460  3ca5 ecce02             _local_1067_1    cpx errtxt+1                             ; and compare to error pointer ;; @@3ca5 68
  5461  3ca8 d005                                bne _local_1067_3                        ; not there ;; @@3ca8 68
  5462  3caa cdcd02                              cmp errtxt                                ;; @@3caa 68
  5463  3cad b02d                                bcs highlight_text                       ; we're there- begin highlighting ;; @@3cad 68
  5464  3caf 60                 _local_1067_3    rts                                       ;; @@3caf 68
  5465                           ;; @@3cb0 68
  5466                           ;; @@3cb0 68
  5467  3cb0 c43f               _local_1067_10   cpy fndpnt                               ; at first character of find string? ;; @@3cb0 68
  5468  3cb2 9013                                bcc _local_1067_30                       ; before it ;; @@3cb2 68
  5469  3cb4 adda02                              lda find_count                            ;; @@3cb4 68
  5470  3cb7 f00e                                beq _local_1067_30                       ; past it ;; @@3cb7 68
  5471  3cb9 300d                                bmi _local_1067_40                       ; at last character ;; @@3cb9 68
  5472  3cbb c58a                                cmp fstr1+2                               ;; @@3cbb 68
  5473  3cbd 9003                                bcc _local_1067_20                       ; in middle of string ;; @@3cbd 68
  5474  3cbf 20dc3c                              jsr highlight_text                       ; at first char- start highlight ;; @@3cbf 68
  5475  3cc2 ceda02             _local_1067_20   dec find_count                           ; one less character to highlight ;; @@3cc2 68
  5476  3cc5 f0fb                                beq _local_1067_20                       ; special case- ;; @@3cc5 68
  5477                          ;make it negative for next time around ;; @@3cc7 68
  5478  3cc7 60                 _local_1067_30   rts                                       ;; @@3cc7 68
  5479                           ;; @@3cc8 68
  5480  3cc8 eeda02             _local_1067_40   inc find_count                           ; make it zero ;; @@3cc8 68
  5481                           ;; @@3ccb 68
  5482                           ;; @@3ccb 68
  5483                          highlight_done                                            ; nasty kludge to colorize error or found text ;; @@3ccb 69
  5484  3ccb add902                              lda highlight_save                        ;; @@3ccb 69
  5485  3cce 300b                                bmi _local_1068_10                       ; (unless it's already normal) ;; @@3cce 69
  5486  3cd0 85f1                                sta _color                               ; restore normal color ;; @@3cd0 69
  5487  3cd2 0980                                ora #$80                                  ;; @@3cd2 69
  5488  3cd4 8dd902                              sta highlight_save                       ; mark highlight_save invalid ;; @@3cd4 69
  5489  3cd7 7755                                rmb7 helper                              ; remove HELP flag ;; @@3cd7 69
  5490  3cd9 1755                                rmb1 helper                              ; remove token flag ;; @@3cd9 69
  5491  3cdb 60                 _local_1068_10   rts                                       ;; @@3cdb 69
  5492                           ;; @@3cdc 69
  5493                           ;; @@3cdc 69
  5494                          highlight_text                                            ; nasty kludge to colorize error or found text ;; @@3cdc 70
  5495  3cdc 2cd902                              bit highlight_save                        ;; @@3cdc 70
  5496  3cdf 100a                                bpl _local_1069_10                       ; (unless it's already highlighted) ;; @@3cdf 70
  5497  3ce1 a5f1                                lda _color                               ; save current (normal) color ;; @@3ce1 70
  5498  3ce3 8dd902                              sta highlight_save                       ; msb=0 to mark highlight_save valid ;; @@3ce3 70
  5499  3ce6 add802                              lda highlight_color                       ;; @@3ce6 70
  5500  3ce9 85f1                                sta _color                               ; change color to highlight ;; @@3ce9 70
  5501  3ceb 60                 _local_1069_10   rts                                       ;; @@3ceb 70
  5502                           ;; @@3cec 70
  5503                          ;.end ;; @@3cec 70
  5504                          ; .page ;; @@3cec 70
  5505                          ; .subttl  GOSUB  GOTO ;; @@3cec 70
  5506                           ;; @@3cec 70
  5507                          ; GOSUB-  Push text pointer, line #, & gosub token on stack: ;; @@3cec 70
  5508                          ; ;; @@3cec 70
  5509                          ;  (bottom) highest memory ;; @@3cec 70
  5510                          ;=========================================================== ;; @@3cec 70
  5511                          ;  txtptr+1 address of next statement ;; @@3cec 70
  5512                          ;  txtptr ;; @@3cec 70
  5513                          ;  ======== ;; @@3cec 70
  5514                          ;  curlin+1 current line number ;; @@3cec 70
  5515                          ;  curlin ;; @@3cec 70
  5516                          ;  ======== ;; @@3cec 70
  5517                          ;  'gosub' token <== (tos) top of stack pointer ;; @@3cec 70
  5518                          ;=========================================================== ;; @@3cec 70
  5519                          ;  (top of stack) lowest memory ;; @@3cec 70
  5520                           ;; @@3cec 70
  5521                           ;; @@3cec 70
  5522  3cec cf7e6a             gosub            bbs4 runmod,edit_err                     ; [910620] ;; @@3cec 71
  5523  3cef 20393d                              jsr gosub_sub                             ;; @@3cef 71
  5524  3cf2 208522                              jsr chrgot                               ; get character and set carry for linget ;; @@3cf2 71
  5525  3cf5 20fb3c                              jsr goto                                  ;; @@3cf5 71
  5526  3cf8 8312ef                              +lbra newstt                              ;; @@3cf8 71
  5527                           ;; @@3cfb 71
  5528                          ; .page ;; @@3cfb 71
  5529  3cfb cf7e5b             goto             bbs4 runmod,edit_err                     ; [910620] ;; @@3cfb 71
  5530  3cfe 202e32                              jsr linget                               ; pick up the line number in LINNUM ;; @@3cfe 71
  5531  3d01 a50b                                lda endchr                               ; test if linget found any number ;; @@3d01 71
  5532  3d03 f344f1                              +lbeq snerr                              ; no number error ;; @@3d03 71
  5533                           ;; @@3d06 71
  5534  3d06 205e35             goto_1           jsr remn                                 ; jump to end of line (entry for interrupt code) ;; @@3d06 71
  5535  3d09 38                                  sec                                       ;; @@3d09 71
  5536  3d0a a53b                                lda curlin                                ;; @@3d0a 71
  5537  3d0c e516                                sbc linnum                                ;; @@3d0c 71
  5538  3d0e a53c                                lda curlin+1                              ;; @@3d0e 71
  5539  3d10 e517                                sbc linnum+1                              ;; @@3d10 71
  5540  3d12 b00b                                bcs luk4it                                ;; @@3d12 71
  5541  3d14 98                                  tya                                       ;; @@3d14 71
  5542  3d15 38                                  sec                                       ;; @@3d15 71
  5543  3d16 653d                                adc txtptr                                ;; @@3d16 71
  5544  3d18 a63e                                ldx txtptr+1                              ;; @@3d18 71
  5545  3d1a 9007                                bcc lukall                                ;; @@3d1a 71
  5546  3d1c e8                                  inx                                       ;; @@3d1c 71
  5547  3d1d 8004                                bra lukall                               ; always goes ;; @@3d1d 71
  5548                           ;; @@3d1f 71
  5549                           ;; @@3d1f 71
  5550  3d1f a52d               luk4it           lda txttab                                ;; @@3d1f 71
  5551  3d21 a62e                                ldx txttab+1                              ;; @@3d21 71
  5552                           ;; @@3d23 71
  5553  3d23 20fe31             lukall           jsr FindLink                             ; (a,x) are all set up ;; @@3d23 71
  5554  3d26 9315f1                              +lbcc userr                              ; undefined statement error ;; @@3d26 71
  5555  3d29 a561                                lda lowtr                                 ;; @@3d29 71
  5556  3d2b e901                                sbc #1                                    ;; @@3d2b 71
  5557  3d2d 853d                                sta txtptr                                ;; @@3d2d 71
  5558  3d2f a562                                lda lowtr+1                               ;; @@3d2f 71
  5559  3d31 e900                                sbc #0                                    ;; @@3d31 71
  5560  3d33 853e                                sta txtptr+1                              ;; @@3d33 71
  5561  3d35 7f7e63                              bbr7 runmod,setexc                       ; branch if in direct mode ;; @@3d35 71
  5562  3d38 60                                  rts                                       ;; @@3d38 71
  5563                           ;; @@3d39 71
  5564                           ;; @@3d39 71
  5565                           ;; @@3d39 71
  5566                          gosub_sub                                                  ;; @@3d39 71
  5567  3d39 a905                                lda #lengos                              ; free up necessary space on stack ;; @@3d39 71
  5568  3d3b 209431                              jsr getstk                               ; make sure there is room ;; @@3d3b 71
  5569  3d3e a004                                ldy #lengos-1                             ;; @@3d3e 71
  5570  3d40 a53e                                lda txtptr+1                             ; push on the text pointer ;; @@3d40 71
  5571  3d42 917c                                sta (tos),y                              ; (common area) ;; @@3d42 71
  5572  3d44 88                                  dey                                       ;; @@3d44 71
  5573  3d45 a53d                                lda txtptr                                ;; @@3d45 71
  5574  3d47 917c                                sta (tos),y                              ; (common area) ;; @@3d47 71
  5575  3d49 88                                  dey                                       ;; @@3d49 71
  5576  3d4a a53c                                lda curlin+1                             ; push on the current line number ;; @@3d4a 71
  5577  3d4c 917c                                sta (tos),y                              ; (common area) ;; @@3d4c 71
  5578  3d4e 88                                  dey                                       ;; @@3d4e 71
  5579  3d4f a53b                                lda curlin                                ;; @@3d4f 71
  5580  3d51 917c                                sta (tos),y                              ; (common area) ;; @@3d51 71
  5581  3d53 88                                  dey                                       ;; @@3d53 71
  5582  3d54 a98d                                lda #gosub_token                         ; (a) was smashed by GETSTK ;; @@3d54 71
  5583  3d56 917c                                sta (tos),y                              ; (common area) ;; @@3d56 71
  5584  3d58 60                                  rts                                       ;; @@3d58 71
  5585                           ;; @@3d59 71
  5586                           ;; @@3d59 71
  5587                          edit_err                                                   ;; @@3d59 71
  5588  3d59 a22a                                ldx #edit_mode_error                     ; [910620] ;; @@3d59 71
  5589  3d5b 83f1f0                              +lbra error                               ;; @@3d5b 71
  5590                           ;; @@3d5e 71
  5591                          ;.end ;; @@3d5e 71
  5592                          ; .page ;; @@3d5e 71
  5593                          ; .subttl  GO  GO64 ;; @@3d5e 71
  5594                           ;; @@3d5e 71
  5595                          go_without_to                                              ;; @@3d5e 71
  5596  3d5e 208322                              jsr chrget                               ; what is next character? ;; @@3d5e 71
  5597  3d61 c9a4                                cmp #to_token                            ; ..is it GO TO? ;; @@3d61 71
  5598  3d63 d005                                bne _local_1070_1                         ;; @@3d63 71
  5599  3d65 208322                              jsr chrget                               ; ..yes, set up for goto ;; @@3d65 71
  5600  3d68 8091                                bra goto                                 ; ..bye! ;; @@3d68 71
  5601                           ;; @@3d6a 71
  5602  3d6a 206c5d             _local_1070_1    jsr getbyt                               ; is it GO 64? ;; @@3d6a 71
  5603  3d6d e040                                cpx #64                                   ;; @@3d6d 71
  5604  3d6f d3d8f0                              +lbne snerr                              ; ...no, error ;; @@3d6f 71
  5605                           ;; @@3d72 71
  5606                          ; The user wants to go to C64 mode. ;; @@3d72 71
  5607                           ;; @@3d72 71
  5608  3d72 20c378             _local_1070_2    jsr are_you_sure                          ;; @@3d72 71
  5609  3d75 d03c                                bne cont_rts                             ; must have had second thoughts. never mind ;; @@3d75 71
  5610                          ; jsr put_io_in_map ;; @@3d77 71
  5611  3d77 4c53ff                              jmp _go_64                                ;; @@3d77 71
  5612                           ;; @@3d7a 71
  5613                           ;; @@3d7a 71
  5614                          ;.end ;; @@3d7a 71
  5615                          ; .page ;; @@3d7a 71
  5616                          ; .subttl  CONTINUE ;; @@3d7a 71
  5617                          ;********************************************************** ;; @@3d7a 71
  5618                          ;* ;; @@3d7a 71
  5619                          ;* CONTINUE Execution after STOP/END ;; @@3d7a 71
  5620                          ;* ;; @@3d7a 71
  5621                          ;********************************************************** ;; @@3d7a 71
  5622                           ;; @@3d7a 71
  5623  3d7a d037               cont             bne cont_rts                             ; make sure there is a terminator ;; @@3d7a 72
  5624  3d7c cf7eda                              bbs4 runmod,edit_err                     ; [910620] ;; @@3d7c 72
  5625  3d7f ff7e31                              bbs7 runmod,cont_rts                     ; if in run-mode just rts ;; @@3d7f 72
  5626                           ;; @@3d82 72
  5627  3d82 a21a                                ldx #errcn                               ; continue error. ;; @@3d82 72
  5628  3d84 ac7311                              ldy oldtxt+1                             ; a stored txtptr of zero set up by INIT_STACK ;; @@3d84 72
  5629  3d87 f3c5f0                              +lbeq error                              ; indicates there is nothing to continue ;; @@3d87 72
  5630                           ;; @@3d8a 72
  5631  3d8a ad7211                              lda oldtxt                               ; STOP, END, typing crlf to INPUT, and STOP key ;; @@3d8a 72
  5632  3d8d 853d                                sta txtptr                                ;; @@3d8d 72
  5633  3d8f 843e                                sty txtptr+1                              ;; @@3d8f 72
  5634  3d91 ad7011                              lda oldlin                                ;; @@3d91 72
  5635  3d94 ac7111                              ldy oldlin+1                              ;; @@3d94 72
  5636  3d97 853b                                sta curlin                                ;; @@3d97 72
  5637  3d99 843c                                sty curlin+1                              ;; @@3d99 72
  5638                           ;; @@3d9b 72
  5639  3d9b f77e               setexc           smb7 runmod                              ; set up run mode ;; @@3d9b 72
  5640  3d9d a900                                lda #0                                    ;; @@3d9d 72
  5641  3d9f 8574                                sta autinc                               ; turn auto increment off ;; @@3d9f 72
  5642  3da1 8575                                sta autinc+1                              ;; @@3da1 72
  5643  3da3 8ddc02                              sta intval                               ; enable & reset collision-trapping mechanism ;; @@3da3 72
  5644  3da6 85f6                                sta _autoinsert                          ; disable auto-insert mode ????? ;; @@3da6 72
  5645                           ;; @@3da8 72
  5646  3da8 a202                                ldx #2                                   ; turn off all interrupt trip flags ;; @@3da8 72
  5647  3daa 9ddd02             _local_1071_10   sta int_trip_flag,x                       ;; @@3daa 72
  5648  3dad ca                                  dex                                       ;; @@3dad 72
  5649  3dae 10fa                                bpl _local_1071_10                        ;; @@3dae 72
  5650                           ;; @@3db0 72
  5651  3db0 2090ff                              jsr _setmsg                              ; turn kernel messages off & rts ;; @@3db0 72
  5652                           ;; @@3db3 72
  5653                          cont_rts                                                   ;; @@3db3 73
  5654  3db3 60                                  rts                                       ;; @@3db3 73
  5655                           ;; @@3db4 73
  5656                          ;.end ;; @@3db4 73
  5657                          ; .page ;; @@3db4 73
  5658                          ; .subttl  RUN ;; @@3db4 73
  5659                          ;*********************************************************** ;; @@3db4 73
  5660                          ;* ;; @@3db4 73
  5661                          ;* RUN Command ;; @@3db4 73
  5662                          ;* ;; @@3db4 73
  5663                          ;* RUN [line_number] ;; @@3db4 73
  5664                          ;* RUN filename [[ON] Ddrive_number[,Uunit_number]] ;; @@3db4 73
  5665                          ;* ;; @@3db4 73
  5666                          ;* Entry:  RUN_A_PROGRAM sets up, links, and executes ;; @@3db4 73
  5667                          ;*  a program previously loaded into RAM. ;; @@3db4 73
  5668                          ;* ;; @@3db4 73
  5669                          ;*********************************************************** ;; @@3db4 73
  5670                           ;; @@3db4 73
  5671  3db4 cf7ea2             run              bbs4 runmod,edit_err                     ; [910620] ;; @@3db4 73
  5672  3db7 f019                                beq run__10                              ; branch if no arguments ;; @@3db7 73
  5673  3db9 901d                                bcc run__20                              ; branch if number (i.e., RUN line_number) ;; @@3db9 73
  5674                           ;; @@3dbb 73
  5675                           ;; @@3dbb 73
  5676                          ; Here if of the form "RUN file_name" ;; @@3dbb 73
  5677                           ;; @@3dbb 73
  5678  3dbb e77e                                smb6 runmod                              ; set flag for load not to go to ready ;; @@3dbb 73
  5679  3dbd 206971                              jsr dload                                ; use DLOAD's parser, and load the program ;; @@3dbd 73
  5680  3dc0 b3732a                              +lbcs erexit                             ; if problem loading   [900801] ;; @@3dc0 73
  5681                           ;; @@3dc3 73
  5682                          run_a_program                                              ;; @@3dc3 73
  5683  3dc3 20f737                              jsr crdo                                 ; [911010] ;; @@3dc3 73
  5684  3dc6 203e42                              jsr fix_links                            ; re-link the program ;; @@3dc6 73
  5685  3dc9 209b3d                              jsr setexc                               ; set various run modes ;; @@3dc9 73
  5686  3dcc 20a134                              jsr runc                                  ;; @@3dcc 73
  5687  3dcf 833bee                              +lbra newstt                             ; start executing ;; @@3dcf 73
  5688                           ;; @@3dd2 73
  5689                           ;; @@3dd2 73
  5690                          ; Here if of the form "RUN" ;; @@3dd2 73
  5691                           ;; @@3dd2 73
  5692  3dd2 209b3d             run__10          jsr setexc                               ; set various run codes ;; @@3dd2 73
  5693  3dd5 83c9f6                              +lbra runc                               ; ..and start executing ;; @@3dd5 73
  5694                           ;; @@3dd8 73
  5695                           ;; @@3dd8 73
  5696                          ; Here if of the form "RUN line_number" ;; @@3dd8 73
  5697                           ;; @@3dd8 73
  5698  3dd8 20cb34             run__20          jsr clearc                               ; first trash all variables ;; @@3dd8 73
  5699  3ddb 208522                              jsr chrgot                                ;; @@3ddb 73
  5700  3dde 20fb3c                              jsr goto                                 ; set up to execute from new line number ;; @@3dde 73
  5701  3de1 209b3d                              jsr setexc                               ; ..and do a little housekeeping, ;; @@3de1 73
  5702  3de4 8326ee                              +lbra newstt                             ; ..otherwise it's business as usual ;; @@3de4 73
  5703                           ;; @@3de7 73
  5704                          ;.end ;; @@3de7 73
  5705                          ; .page ;; @@3de7 73
  5706                          ; .subttl  RESTORE ;; @@3de7 73
  5707                          ;********************************************************************* ;; @@3de7 73
  5708                          ;* ;; @@3de7 73
  5709                          ;* RESTORE Command ;; @@3de7 73
  5710                          ;* ;; @@3de7 73
  5711                          ;* Reset pointers to next DATA statement.  Allows optional argument ;; @@3de7 73
  5712                          ;* specifying a specific line number, otherwise the default is the ;; @@3de7 73
  5713                          ;* beginning of text area. ;; @@3de7 73
  5714                          ;* ;; @@3de7 73
  5715                          ;********************************************************************* ;; @@3de7 73
  5716                           ;; @@3de7 73
  5717                          restor                                                     ;; @@3de7 73
  5718  3de7 f013                                beq restore__1                           ; branch if no argument...use default ;; @@3de7 73
  5719  3de9 208a5d                              jsr getwrd                               ; get 2 byte argument (???? no check for real number means a var legal) ;; @@3de9 73
  5720  3dec 8416                                sty linnum                                ;; @@3dec 73
  5721  3dee 8517                                sta linnum+1                              ;; @@3dee 73
  5722  3df0 20fa31                              jsr FindLine                             ; get pointer to specified line ;; @@3df0 73
  5723  3df3 9348f0                              +lbcc userr                              ; error if not found ;; @@3df3 73
  5724                           ;; @@3df6 73
  5725  3df6 a561                                lda lowtr                                ; decrement 2 byte pointer, and save it ;; @@3df6 73
  5726  3df8 a462                                ldy lowtr+1                               ;; @@3df8 73
  5727  3dfa 8005                                bra restore__2                           ; always ;; @@3dfa 73
  5728                           ;; @@3dfc 73
  5729                           ;; @@3dfc 73
  5730                          restore__1                                                ; entry from FLOAD ;; @@3dfc 73
  5731  3dfc 38                                  sec                                       ;; @@3dfc 73
  5732  3dfd a52d                                lda txttab                                ;; @@3dfd 73
  5733  3dff a42e                                ldy txttab+1                              ;; @@3dff 73
  5734                           ;; @@3e01 73
  5735                          restore__2                                                 ;; @@3e01 73
  5736  3e01 e901                                sbc #1                                    ;; @@3e01 73
  5737  3e03 b001                                bcs _local_1072_1                         ;; @@3e03 73
  5738  3e05 88                                  dey                                       ;; @@3e05 73
  5739  3e06 8543               _local_1072_1    sta datptr                                ;; @@3e06 73
  5740  3e08 8444                                sty datptr+1                              ;; @@3e08 73
  5741  3e0a 60                                  rts                                       ;; @@3e0a 73
  5742                           ;; @@3e0b 73
  5743                          ;.end ;; @@3e0b 73
  5744                          ; .page ;; @@3e0b 73
  5745                          ; .subttl  RENUMBER ;; @@3e0b 73
  5746                          ;*********************************************************************** ;; @@3e0b 73
  5747                          ; ;; @@3e0b 73
  5748                          ; RENUMBER Command ;; @@3e0b 73
  5749                          ; ;; @@3e0b 73
  5750                          ; Syntax:  RENUMBER [n1 [,[n2] ,n3]] ;; @@3e0b 73
  5751                          ; ;; @@3e0b 73
  5752                          ;  n1 = new start line number, default 10 ;; @@3e0b 73
  5753                          ;  n2 = line increment, default 10 ;; @@3e0b 73
  5754                          ;  n3 = start line, default first ;; @@3e0b 73
  5755                          ; ;; @@3e0b 73
  5756                          ; - Syntax error may occur for missing commas or bad line numbers. ;; @@3e0b 73
  5757                          ; - Illegal quantity error for line increment of 0 or for bad range. ;; @@3e0b 73
  5758                          ; - Overflow error if increment wraps line number during renumber, ;; @@3e0b 73
  5759                          ;  line number too large error if renumbering would force line ;; @@3e0b 73
  5760                          ;  numbers greater than 63999. ;; @@3e0b 73
  5761                          ; - Out of memory error if the renumbered program would be too large. ;; @@3e0b 73
  5762                          ; - Unresolved reference error if an imbedded line number references ;; @@3e0b 73
  5763                          ;  a line which does not exist. ;; @@3e0b 73
  5764                          ; ;; @@3e0b 73
  5765                          ; Otherwise returns to "ready" mode upon completion. ;; @@3e0b 73
  5766                          ; ;; @@3e0b 73
  5767                          ;*********************************************************************** ;; @@3e0b 73
  5768                           ;; @@3e0b 73
  5769                           ;; @@3e0b 73
  5770                          ; Before any data is changed in any way, two preliminary passes are ;; @@3e0b 73
  5771                          ; made to insure no errors would occur during the actual renumbering ;; @@3e0b 73
  5772                          ; process (as detailed below). ;; @@3e0b 73
  5773                          ; ;; @@3e0b 73
  5774                          ; Pass 1 makes sure that the renumbered program would have no line ;; @@3e0b 73
  5775                          ; numbers greater than 63999 (nothing is actually renumbered; the ;; @@3e0b 73
  5776                          ; statement table is not modified). ;; @@3e0b 73
  5777                          ; ;; @@3e0b 73
  5778                          ; Pass 2 checks if the renumbered program would be too long and also ;; @@3e0b 73
  5779                          ; checks for non-existant line number destinations. ;; @@3e0b 73
  5780                          ; ;; @@3e0b 73
  5781                          ; Pass 3 examines the entire statement table first for imbedded line ;; @@3e0b 73
  5782                          ; numbers (branches) to fix. This is done by looking for keywords (GOTO, ;; @@3e0b 73
  5783                          ; GOSUB, THEN, RUN) which are usually followed by line numbers. The old ;; @@3e0b 73
  5784                          ; line number is mapped to a new value and the string representing the ;; @@3e0b 73
  5785                          ; new branch label replaces the original text. ;; @@3e0b 73
  5786                          ; ;; @@3e0b 73
  5787                          ; Pass 4 then replaces the statement number bytes by their final values. ;; @@3e0b 73
  5788                          ; and the table is relinked. ;; @@3e0b 73
  5789                           ;; @@3e0b 73
  5790                           ;; @@3e0b 73
  5791                          testwd                                                     ;; @@3e0b 74
  5792  3e0b 898a8da7                            !text goto_token,run_token,gosub_token,then_token  ;; @@3e0b 74
  5793  3e0f 8cd6d7d5                            !text restore_token,resume_token,trap_token,else_token  ;; @@3e0f 74
  5794                           ;; @@3e13 74
  5795                          renumber                                                   ;; @@3e13 74
  5796  3e13 20ed58                              jsr errind                               ; allowed only in direct mode ;; @@3e13 74
  5797                           ;; @@3e16 74
  5798                          ; Set up default values for n1, n2, and n3 ;; @@3e16 74
  5799                           ;; @@3e16 74
  5800  3e16 a900                                lda #0                                   ; line #10... ;; @@3e16 74
  5801  3e18 a20a                                ldx #10                                   ;; @@3e18 74
  5802  3e1a 8e7911                              stx renum_tmp_1                          ; default renum origin (n1) ;; @@3e1a 74
  5803  3e1d 8d7a11                              sta renum_tmp_1+1                         ;; @@3e1d 74
  5804  3e20 8e7b11                              stx renum_tmp_2                          ; default increment (n2) ;; @@3e20 74
  5805  3e23 8d7c11                              sta renum_tmp_2+1                         ;; @@3e23 74
  5806  3e26 855c                                sta hightr                               ; default start line # (n3) ;; @@3e26 74
  5807  3e28 855d                                sta hightr+1                              ;; @@3e28 74
  5808                           ;; @@3e2a 74
  5809  3e2a 208522                              jsr chrgot                               ; any parameters? ;; @@3e2a 74
  5810  3e2d f053                                beq ren_pass_1                           ; no... ;; @@3e2d 74
  5811                           ;; @@3e2f 74
  5812                           ;; @@3e2f 74
  5813                          ; Check for new starting line number (n1) ;; @@3e2f 74
  5814                           ;; @@3e2f 74
  5815  3e2f 202e32                              jsr linget                               ; check for a number ;; @@3e2f 74
  5816  3e32 a50b                                lda endchr                               ; was there one? ;; @@3e32 74
  5817  3e34 f00a                                beq renum_10                             ; no...use default ;; @@3e34 74
  5818  3e36 a516                                lda linnum                                ;; @@3e36 74
  5819  3e38 a617                                ldx linnum+1                              ;; @@3e38 74
  5820  3e3a 8d7911                              sta renum_tmp_1                           ;; @@3e3a 74
  5821  3e3d 8e7a11                              stx renum_tmp_1+1                         ;; @@3e3d 74
  5822                           ;; @@3e40 74
  5823                          ; Check for new increment ;; @@3e40 74
  5824                           ;; @@3e40 74
  5825                          renum_10                                                   ;; @@3e40 74
  5826  3e40 20f278                              jsr optwrd                               ; an increment given? ;; @@3e40 74
  5827  3e43 900c                                bcc renum_30                             ; no...use default ;; @@3e43 74
  5828                           ;; @@3e45 74
  5829  3e45 8c7b11                              sty renum_tmp_2                           ;; @@3e45 74
  5830  3e48 8d7c11                              sta renum_tmp_2+1                         ;; @@3e48 74
  5831  3e4b 0d7b11                              ora renum_tmp_2                          ; increment must be >0 ;; @@3e4b 74
  5832  3e4e f3ad13                              +lbeq fcerr                              ; illegal quantity error ;; @@3e4e 74
  5833                           ;; @@3e51 74
  5834                          ; Check for starting line number ;; @@3e51 74
  5835                           ;; @@3e51 74
  5836                          renum_30                                                   ;; @@3e51 74
  5837  3e51 20f278                              jsr optwrd                               ; starting line number given? ;; @@3e51 74
  5838  3e54 902c                                bcc ren_pass_1                           ; no... ;; @@3e54 74
  5839                           ;; @@3e56 74
  5840  3e56 845c                                sty hightr                                ;; @@3e56 74
  5841  3e58 8416                                sty linnum                                ;; @@3e58 74
  5842  3e5a 855d                                sta hightr+1                              ;; @@3e5a 74
  5843  3e5c 8517                                sta linnum+1                              ;; @@3e5c 74
  5844  3e5e 20fa31                              jsr FindLine                             ; test for illegal renumber range ;; @@3e5e 74
  5845  3e61 a561                                lda lowtr                                ; (n1 must be >= n3) ;; @@3e61 74
  5846  3e63 a662                                ldx lowtr+1                               ;; @@3e63 74
  5847  3e65 855a                                sta highds                               ; pointer to first statement to renumber ;; @@3e65 74
  5848  3e67 865b                                stx highds+1                              ;; @@3e67 74
  5849  3e69 ad7911                              lda renum_tmp_1                           ;; @@3e69 74
  5850  3e6c ae7a11                              ldx renum_tmp_1+1                         ;; @@3e6c 74
  5851  3e6f 8516                                sta linnum                                ;; @@3e6f 74
  5852  3e71 8617                                stx linnum+1                              ;; @@3e71 74
  5853  3e73 20fa31                              jsr FindLine                             ; lowtr = ptr to 1st stmt to be overlapped ;; @@3e73 74
  5854  3e76 38                                  sec                                       ;; @@3e76 74
  5855  3e77 a561                                lda lowtr                                ; can't be smaller ;; @@3e77 74
  5856  3e79 e55a                                sbc highds                                ;; @@3e79 74
  5857  3e7b a562                                lda lowtr+1                               ;; @@3e7b 74
  5858  3e7d e55b                                sbc highds+1                              ;; @@3e7d 74
  5859  3e7f 937c13                              +lbcc fcerr                              ; bad... ;; @@3e7f 74
  5860                           ;; @@3e82 74
  5861                          ; .page ;; @@3e82 74
  5862                          ;*********************************************************************** ;; @@3e82 74
  5863                          ;**************  R E N U M B E R    P A S S    O N E  ****************** ;; @@3e82 74
  5864                          ;*********************************************************************** ;; @@3e82 74
  5865                           ;; @@3e82 74
  5866                          ; Pass 1 makes sure that the renumbered program will not have any line numbers ;; @@3e82 74
  5867                          ; greater than 63999 (however, nothing is actually renumbered in this pass). ;; @@3e82 74
  5868                           ;; @@3e82 74
  5869                          ren_pass_1                                                 ;; @@3e82 74
  5870  3e82 20472c                              jsr tto                                  ; save txtptr for restoration when done ;; @@3e82 74
  5871  3e85 207240                              jsr n1_reset                             ; put n1 in FAC, reset txtptr ;; @@3e85 74
  5872  3e88 20a540                              jsr chargt                               ; skip low link ;; @@3e88 74
  5873  3e8b c8                                  iny                                      ; (.y=1) ;; @@3e8b 74
  5874  3e8c 20c522                              jsr indtxt                               ; skip high link ;; @@3e8c 74
  5875  3e8f f03a                                beq ren_pass_2                           ; end of program => begin pass 2 (assumes txttab > 0) ;; @@3e8f 74
  5876                           ;; @@3e91 74
  5877                          r_pass1_10                                                 ;; @@3e91 74
  5878  3e91 c8                                  iny                                      ; (.y=2) ;; @@3e91 74
  5879  3e92 20c522                              jsr indtxt                               ; line number low ;; @@3e92 74
  5880  3e95 38                                  sec                                       ;; @@3e95 74
  5881  3e96 e55c                                sbc hightr                               ; in line range which is to be renumbered? ;; @@3e96 74
  5882  3e98 c8                                  iny                                      ; (.y=3) ;; @@3e98 74
  5883  3e99 20c522                              jsr indtxt                               ; line number high ;; @@3e99 74
  5884  3e9c e55d                                sbc hightr+1                              ;; @@3e9c 74
  5885  3e9e b007                                bcs r_pass1_20                           ; yes => fake renumbering ;; @@3e9e 74
  5886  3ea0 20ba3e                              jsr set_next                             ; goto next line ;; @@3ea0 74
  5887  3ea3 d0ec                                bne r_pass1_10                           ; if z=0 then not end-of-text => keep going ;; @@3ea3 74
  5888  3ea5 f024                                beq ren_pass_2                           ; else end ;; @@3ea5 74
  5889                           ;; @@3ea7 74
  5890                          r_pass1_20                                                 ;; @@3ea7 74
  5891  3ea7 20ba3e                              jsr set_next                             ; goto next line ;; @@3ea7 74
  5892  3eaa f01f                                beq ren_pass_2                           ; if z=1 then end-of-text => exit ;; @@3eaa 74
  5893  3eac 209340                              jsr new_num                              ; create next line number ;; @@3eac 74
  5894  3eaf b004                                bcs r_pass1_30                           ; if c=1 then it wrapped => error ;; @@3eaf 74
  5895  3eb1 c9f9                                cmp #>63999                              ; can't have lines > 63999 ;; @@3eb1 74
  5896  3eb3 90f2                                bcc r_pass1_20                           ; if c=0 then ok ;; @@3eb3 74
  5897                           ;; @@3eb5 74
  5898                          r_pass1_30                                                ; renumbering will generate an illegal line # ;; @@3eb5 74
  5899  3eb5 a226                                ldx #err_too_large                       ; 'line number too large' error ;; @@3eb5 74
  5900  3eb7 8395ef                              +lbra error                               ;; @@3eb7 74
  5901                           ;; @@3eba 74
  5902                          set_next                                                   ;; @@3eba 74
  5903  3eba a000                                ldy #0                                   ; set for next BASIC line ;; @@3eba 74
  5904  3ebc 20c522                              jsr indtxt                               ; low link ;; @@3ebc 74
  5905  3ebf aa                                  tax                                       ;; @@3ebf 74
  5906  3ec0 c8                                  iny                                      ; (.y=1) ;; @@3ec0 74
  5907  3ec1 20c522                              jsr indtxt                               ; high link ;; @@3ec1 74
  5908  3ec4 f004                                beq set_end                              ; if z=1 then end of program => exit ;; @@3ec4 74
  5909  3ec6 863d                                stx txtptr                                ;; @@3ec6 74
  5910  3ec8 853e                                sta txtptr+1                              ;; @@3ec8 74
  5911  3eca 60                 set_end          rts                                       ;; @@3eca 74
  5912                           ;; @@3ecb 74
  5913                          ; .page ;; @@3ecb 74
  5914                          ;*********************************************************************** ;; @@3ecb 74
  5915                          ;**************  R E N U M B E R    P A S S    T W O  ****************** ;; @@3ecb 74
  5916                          ;*********************************************************************** ;; @@3ecb 74
  5917                           ;; @@3ecb 74
  5918                          ; Pass 2 checks if the renumbered program will be too long and also ;; @@3ecb 74
  5919                          ; checks for non-existant line number destinations. ;; @@3ecb 74
  5920                           ;; @@3ecb 74
  5921                          ren_pass_2                                                 ;; @@3ecb 74
  5922  3ecb 4f7e05                              bbr4 runmod,_local_1073_10               ; skip pass two and three if plain text (edit mode) [910620] ;; @@3ecb 74
  5923  3ece 207240                              jsr n1_reset                             ; yes- just setup up starting line # and reset txtptr ;; @@3ece 74
  5924  3ed1 8014                                bra ren_pass_4                           ; then renumber just the text's line numbers ;; @@3ed1 74
  5925                           ;; @@3ed3 74
  5926  3ed3 a901               _local_1073_10   lda #$01                                 ; set flag for 'pass 2' ;; @@3ed3 74
  5927  3ed5 8576                                sta z_p_temp_1                            ;; @@3ed5 74
  5928  3ed7 a582                                lda text_top                             ; copy top-of-text pointer for later use ;; @@3ed7 74
  5929  3ed9 a683                                ldx text_top+1                           ; (we don't want to change original here) ;; @@3ed9 74
  5930  3edb 853f                                sta fndpnt                                ;; @@3edb 74
  5931  3edd 8640                                stx fndpnt+1                              ;; @@3edd 74
  5932  3edf 20293f                              jsr imbed_lines                          ; search for imbedded lines (but don't change) ;; @@3edf 74
  5933                           ;; @@3ee2 74
  5934                           ;; @@3ee2 74
  5935                           ;; @@3ee2 74
  5936                          ;*********************************************************************** ;; @@3ee2 74
  5937                          ;************  R E N U M B E R    P A S S    T H R E E  **************** ;; @@3ee2 74
  5938                          ;*********************************************************************** ;; @@3ee2 74
  5939                           ;; @@3ee2 74
  5940                          ; Pass 3 actually renumbers the imbedded destination line numbers ;; @@3ee2 74
  5941                          ; which follow goto, gosub, trap, etc. ;; @@3ee2 74
  5942                           ;; @@3ee2 74
  5943                          ren_pass_3                                                 ;; @@3ee2 75
  5944  3ee2 c676                                dec z_p_temp_1                           ; z_p_temp_1 = 0 (for pass 3) ;; @@3ee2 75
  5945  3ee4 20293f                              jsr imbed_lines                          ; search for and update imbedded line #'s ;; @@3ee4 75
  5946                           ;; @@3ee7 75
  5947                          ; .page ;; @@3ee7 75
  5948                          ;*********************************************************************** ;; @@3ee7 75
  5949                          ;*************  R E N U M B E R    P A S S    F O U R  ***************** ;; @@3ee7 75
  5950                          ;*********************************************************************** ;; @@3ee7 75
  5951                           ;; @@3ee7 75
  5952                          ; Pass 4 actually renumbers the program line numbers & exits ;; @@3ee7 75
  5953                           ;; @@3ee7 75
  5954                          ren_pass_4                                                 ;; @@3ee7 75
  5955  3ee7 20a340                              jsr chargt_x2                            ; skip link ;; @@3ee7 75
  5956  3eea f031                                beq renumber_exit                        ; null link=> end-of-text, exit (assumes txttab > 0) ;; @@3eea 75
  5957  3eec 20a540                              jsr chargt                               ; not null... ;; @@3eec 75
  5958  3eef 8516                                sta linnum                               ; if line# >= start#, replace with facho ;; @@3eef 75
  5959  3ef1 c8                                  iny                                       ;; @@3ef1 75
  5960  3ef2 20c522                              jsr indtxt                                ;; @@3ef2 75
  5961  3ef5 38                                  sec                                       ;; @@3ef5 75
  5962  3ef6 e55d                                sbc hightr+1                              ;; @@3ef6 75
  5963  3ef8 901b                                bcc r_pass4_20                           ; no, let alone ;; @@3ef8 75
  5964  3efa d006                                bne r_pass4_10                           ; yes, replace ;; @@3efa 75
  5965  3efc a516                                lda linnum                                ;; @@3efc 75
  5966  3efe e55c                                sbc hightr                                ;; @@3efe 75
  5967  3f00 9013                                bcc r_pass4_20                           ; no, let alone ;; @@3f00 75
  5968                           ;; @@3f02 75
  5969                          r_pass4_10                                                 ;; @@3f02 75
  5970  3f02 a564                                lda facho                                 ;; @@3f02 75
  5971                          ; phx ;; @@3f04 75
  5972  3f04 200a23                              jsr sta_far_txt                          ; sta (txtptr),y  hi  (bleed-thru) ;; @@3f04 75
  5973  3f07 88                                  dey                                       ;; @@3f07 75
  5974  3f08 a565                                lda facho+1                               ;; @@3f08 75
  5975  3f0a 200a23                              jsr sta_far_txt                          ; sta (txtptr),y  lo (bleed-thru) ;; @@3f0a 75
  5976                          ; plx ;; @@3f0d 75
  5977  3f0d 20a540                              jsr chargt                               ; skip past 2nd byte of line# ;; @@3f0d 75
  5978  3f10 208a40                              jsr line_inc                             ; incr line# and scan to eol ;; @@3f10 75
  5979  3f13 80d2                                bra ren_pass_4                           ; always... ;; @@3f13 75
  5980                           ;; @@3f15 75
  5981                          r_pass4_20                                                 ;; @@3f15 75
  5982  3f15 20a540                              jsr chargt                               ; skip past line# ;; @@3f15 75
  5983  3f18 208d40                              jsr scan_thru                            ; scan to eol ;; @@3f18 75
  5984  3f1b 80ca                                bra ren_pass_4                           ; always... ;; @@3f1b 75
  5985                           ;; @@3f1d 75
  5986                           ;; @@3f1d 75
  5987                          renumber_exit                                              ;; @@3f1d 75
  5988  3f1d 203e42                              jsr fix_links                            ; patch things up: relink & set eot ;; @@3f1d 75
  5989                           ;; @@3f20 75
  5990                          direct_mode_exit                                           ;; @@3f20 75
  5991  3f20 20f439                              jsr ott                                  ; restore txtptr for next command in buffer ;; @@3f20 75
  5992  3f23 a900                                lda #0                                   ; but disallow continuing ;; @@3f23 75
  5993  3f25 8d7311                              sta oldtxt+1                              ;; @@3f25 75
  5994  3f28 60                                  rts                                       ;; @@3f28 75
  5995                           ;; @@3f29 75
  5996                          ; .page ;; @@3f29 75
  5997                          ;*********************************************************************** ;; @@3f29 75
  5998                          ;*************  R E N U M B E R   S U B R O U T I N E S  *************** ;; @@3f29 75
  5999                          ;*********************************************************************** ;; @@3f29 75
  6000                           ;; @@3f29 75
  6001                          ; Look for imbedded line #'s (after GOTO, GOSUB, etc.) ;; @@3f29 75
  6002                          ; but only change them in pass 3 (ie. z_p_temp_1 = 0) ;; @@3f29 75
  6003                           ;; @@3f29 75
  6004                          imbed_lines                                                ;; @@3f29 75
  6005  3f29 201f35                              jsr reset_txtptr                         ; start at first line: load (txtptr) with (txttab)-1 ;; @@3f29 75
  6006                           ;; @@3f2c 75
  6007                          next_line                                                  ;; @@3f2c 75
  6008  3f2c 20a340                              jsr chargt_x2                            ; skip link (assumes txttab > 0) ;; @@3f2c 75
  6009  3f2f f34001                              +lbeq n1_reset                           ; null link: put current line # in fac, reset txtptr, exit ;; @@3f2f 75
  6010  3f32 20a540                              jsr chargt                               ; line number ;; @@3f32 75
  6011  3f35 854b                                sta forpnt                               ; save in case there is an error ;; @@3f35 75
  6012  3f37 20a540                              jsr chargt                                ;; @@3f37 75
  6013  3f3a 854c                                sta forpnt+1                              ;; @@3f3a 75
  6014                           ;; @@3f3c 75
  6015                          next_char                                                  ;; @@3f3c 75
  6016  3f3c 20a540                              jsr chargt                               ; first character in the line ;; @@3f3c 75
  6017                           ;; @@3f3f 75
  6018                          chk_quote                                                  ;; @@3f3f 75
  6019  3f3f c922                                cmp #'"'                                 ; opening double quote? ;; @@3f3f 75
  6020  3f41 d00b                                bne not_quote                            ; no... ;; @@3f41 75
  6021  3f43 20a540             _local_1074_20   jsr chargt                               ; scan line ;; @@3f43 75
  6022  3f46 f0e4                                beq next_line                            ; end... ;; @@3f46 75
  6023  3f48 c922                                cmp #'"'                                 ; close double quote ;; @@3f48 75
  6024  3f4a d0f7                                bne _local_1074_20                       ; no... continue ;; @@3f4a 75
  6025  3f4c 80ee                                bra next_char                            ; yes... resume renumber ;; @@3f4c 75
  6026                           ;; @@3f4e 75
  6027                          not_quote                                                  ;; @@3f4e 76
  6028  3f4e aa                                  tax                                      ; end of line? ;; @@3f4e 76
  6029  3f4f f0db                                beq next_line                            ; yes... ;; @@3f4f 76
  6030  3f51 10e9                                bpl next_char                            ; not a token... ;; @@3f51 76
  6031                           ;; @@3f53 76
  6032  3f53 a208                                ldx #8                                   ; check special token list ;; @@3f53 76
  6033  3f55 dd0a3e             _local_1075_30   cmp testwd-1,x                            ;; @@3f55 76
  6034  3f58 f028                                beq iline_10                             ; a match... ;; @@3f58 76
  6035  3f5a ca                                  dex                                       ;; @@3f5a 76
  6036  3f5b d0f8                                bne _local_1075_30                       ; continue until zero ;; @@3f5b 76
  6037                           ;; @@3f5d 76
  6038  3f5d c9cb                                cmp #go_token                            ; wasn't in the token list. check for 'go to' ;; @@3f5d 76
  6039  3f5f d00b                                bne chk_escape                           ; not 'go', go check for 'collision' *c128 fix* ;; @@3f5f 76
  6040  3f61 208322             hop_1            jsr chrget                               ; got a 'go', look for 'to' ;; @@3f61 77
  6041  3f64 f0c6                                beq next_line                            ; end of line, abort ;; @@3f64 77
  6042  3f66 c9a4                                cmp #to_token                             ;; @@3f66 77
  6043  3f68 f018                                beq iline_10                             ; got it! go to fix number routine ;; @@3f68 77
  6044  3f6a 80d0                                bra next_char                            ; no 'to', keep looking ;; @@3f6a 77
  6045                           ;; @@3f6c 77
  6046                          ; Look for 'COLLISION'.  This is an escape command. *c128 fix* ????????? ;; @@3f6c 77
  6047                           ;; @@3f6c 77
  6048                          chk_escape                                                 ;; @@3f6c 77
  6049  3f6c c9fe                                cmp #esc_command_token                    ;; @@3f6c 77
  6050  3f6e d0cc                                bne next_char                             ;; @@3f6e 77
  6051  3f70 208322                              jsr chrget                                ;; @@3f70 77
  6052  3f73 f0ec                                beq hop_1                                ; end of line ,abort ;; @@3f73 77
  6053  3f75 c917                                cmp #collision_token                      ;; @@3f75 77
  6054  3f77 d0c3                                bne next_char                             ;; @@3f77 77
  6055  3f79 208322             _local_1076_40   jsr chrget                               ; got it! skip over first argument ;; @@3f79 77
  6056  3f7c f0e3                                beq hop_1                                ; end of line, abort ;; @@3f7c 77
  6057  3f7e c92c                                cmp #','                                  ;; @@3f7e 77
  6058  3f80 d0f7                                bne _local_1076_40                       ; not there yet ;; @@3f80 77
  6059                           ;; @@3f82 77
  6060                           ;; @@3f82 77
  6061                          iline_10                                                   ;; @@3f82 78
  6062  3f82 a53d                                lda txtptr                               ; save current txtptr ;; @@3f82 78
  6063  3f84 8d7011                              sta oldlin                                ;; @@3f84 78
  6064  3f87 a53e                                lda txtptr+1                              ;; @@3f87 78
  6065  3f89 8d7111                              sta oldlin+1                              ;; @@3f89 78
  6066  3f8c 208322                              jsr chrget                                ;; @@3f8c 78
  6067  3f8f b0ae                                bcs chk_quote                            ; not a #... ;; @@3f8f 78
  6068  3f91 202e32                              jsr linget                               ; get line # from text ;; @@3f91 78
  6069  3f94 202340                              jsr form_line                            ; replace if this line # > n3 ;; @@3f94 78
  6070  3f97 ad7011                              lda oldlin                               ; restore old txtptr ;; @@3f97 78
  6071  3f9a 853d                                sta txtptr                                ;; @@3f9a 78
  6072  3f9c ad7111                              lda oldlin+1                              ;; @@3f9c 78
  6073  3f9f 853e                                sta txtptr+1                              ;; @@3f9f 78
  6074                           ;; @@3fa1 78
  6075  3fa1 208322                              jsr chrget                               ; skip over leading spaces ;; @@3fa1 78
  6076  3fa4 c33d                                dew txtptr                               ; then backup (txtptr) by 1 ;; @@3fa4 78
  6077  3fa6 a2ff                                ldx #$ff                                  ;; @@3fa6 78
  6078  3fa8 a576                                lda z_p_temp_1                           ; if this is pass2 then don't actually change ;; @@3fa8 78
  6079  3faa f037                                beq p3code                               ; if z=1 then pass3 => ok to change ;; @@3faa 78
  6080  3fac 20b83f                              jsr p2code                               ; renumber 'pass two': trial run to see if enough room ;; @@3fac 78
  6081  3faf 208522                              jsr chrgot                               ; re-get last character from BASIC text & rts ;; @@3faf 78
  6082                           ;; @@3fb2 78
  6083                          iline_20                                                   ;; @@3fb2 78
  6084  3fb2 c92c                                cmp #','                                 ; comma from 'on'? ;; @@3fb2 78
  6085  3fb4 f0cc                                beq iline_10                             ; it is... ;; @@3fb4 78
  6086  3fb6 8087                                bra chk_quote                            ; no... ;; @@3fb6 78
  6087                           ;; @@3fb8 78
  6088                          ; .page ;; @@3fb8 78
  6089                          ;*********** This part of imbed_lines executed in pass 2 only ********** ;; @@3fb8 78
  6090                           ;; @@3fb8 78
  6091                          p2code                                                    ; updates text_top without actually changing lines ;; @@3fb8 78
  6092  3fb8 e8                                  inx                                       ;; @@3fb8 78
  6093  3fb9 bd0101                              lda fbuffr+1,x                           ; get character from number ;; @@3fb9 78
  6094  3fbc f01c                                beq _local_1077_20                       ; end of number ;; @@3fbc 78
  6095  3fbe 208322                              jsr chrget                               ; get digit from old number ;; @@3fbe 78
  6096  3fc1 90f5                                bcc p2code                               ; digit...move on ;; @@3fc1 78
  6097                           ;; @@3fc3 78
  6098  3fc3 e33f               _local_1077_10   inw fndpnt                                ;; @@3fc3 78
  6099  3fc5 38                                  sec                                      ; have we run out of memory (theoretically)? ;; @@3fc5 78
  6100  3fc6 a53f                                lda fndpnt                               ; (compare with limit-of-memory pointer) ;; @@3fc6 78
  6101  3fc8 edcf02                              sbc max_mem_0                             ;; @@3fc8 78
  6102  3fcb a540                                lda fndpnt+1                              ;; @@3fcb 78
  6103  3fcd edd002                              sbc max_mem_0+1                           ;; @@3fcd 78
  6104  3fd0 b36eee                              +lbcs omerr                              ; yes- out of memory error ;; @@3fd0 78
  6105  3fd3 e8                                  inx                                      ; no - next... ;; @@3fd3 78
  6106  3fd4 bd0101                              lda fbuffr+1,x                            ;; @@3fd4 78
  6107  3fd7 d0ea                                bne _local_1077_10                        ;; @@3fd7 78
  6108  3fd9 60                 _local_1077_15   rts                                      ; no more ;; @@3fd9 78
  6109                           ;; @@3fda 78
  6110  3fda 208322             _local_1077_20   jsr chrget                                ;; @@3fda 78
  6111  3fdd b0fa                                bcs _local_1077_15                       ; old stuff after # is other char ;; @@3fdd 78
  6112  3fdf c33f                                dew fndpnt                               ; digit...move down ;; @@3fdf 78
  6113  3fe1 80f7                                bra _local_1077_20                       ; still digits... ;; @@3fe1 78
  6114                           ;; @@3fe3 78
  6115                          ; .page ;; @@3fe3 78
  6116                          ;*********** This part of imbed_lines executed in pass 3 only ********** ;; @@3fe3 78
  6117                           ;; @@3fe3 78
  6118                          p3code                                                     ;; @@3fe3 79
  6119  3fe3 e8                                  inx                                       ;; @@3fe3 79
  6120  3fe4 bd0101                              lda fbuffr+1,x                           ; get character from number ;; @@3fe4 79
  6121  3fe7 f026                                beq _local_1078_30                       ; end of number ;; @@3fe7 79
  6122                           ;; @@3fe9 79
  6123  3fe9 48                                  pha                                      ; save digit from new number ;; @@3fe9 79
  6124  3fea 20a540                              jsr chargt                               ; get digit from old number ;; @@3fea 79
  6125  3fed c93a                                cmp #':'                                 ; command terminator or letter? ;; @@3fed 79
  6126  3fef b00c                                bcs _local_1078_10                        ;; @@3fef 79
  6127  3ff1 c920                                cmp #' '                                 ; space? (fix for goto10 :rem) ;; @@3ff1 79
  6128  3ff3 f008                                beq _local_1078_10                        ;; @@3ff3 79
  6129  3ff5 38                                  sec                                       ;; @@3ff5 79
  6130  3ff6 e930                                sbc #'0'                                 ; number? ;; @@3ff6 79
  6131  3ff8 38                                  sec                                       ;; @@3ff8 79
  6132  3ff9 e9d0                                sbc #$d0                                  ;; @@3ff9 79
  6133  3ffb 9008                                bcc _local_1078_20                       ; digit...move on ;; @@3ffb 79
  6134                           ;; @@3ffd 79
  6135  3ffd 20ac40             _local_1078_10   jsr move_init                            ; other char...move up ;; @@3ffd 79
  6136  4000 201741                              jsr moveup                                ;; @@4000 79
  6137  4003 e382                                inw text_top                              ;; @@4003 79
  6138                           ;; @@4005 79
  6139  4005 68                 _local_1078_20   pla                                       ;; @@4005 79
  6140  4006 da                                  phx                                       ;; @@4006 79
  6141  4007 a000                                ldy #0                                    ;; @@4007 79
  6142  4009 200a23                              jsr sta_far_txt                          ; put new digit in new number (bleed-thru) ;; @@4009 79
  6143  400c fa                                  plx                                       ;; @@400c 79
  6144  400d 80d4                                bra p3code                                ;; @@400d 79
  6145                           ;; @@400f 79
  6146                           ;; @@400f 79
  6147  400f 208322             _local_1078_30   jsr chrget                                ;; @@400f 79
  6148  4012 b09e                                bcs iline_20                             ; old stuff after # is other char ;; @@4012 79
  6149                           ;; @@4014 79
  6150  4014 20ac40             _local_1078_40   jsr move_init                            ; digit...move down ;; @@4014 79
  6151  4017 20c440                              jsr movedown                              ;; @@4017 79
  6152  401a c382                                dew text_top                              ;; @@401a 79
  6153  401c 208522                              jsr chrgot                                ;; @@401c 79
  6154  401f 90f3                                bcc _local_1078_40                       ; still digits... ;; @@401f 79
  6155                           ;; @@4021 79
  6156  4021 808f                                bra iline_20                             ; branch always ;; @@4021 79
  6157                           ;; @@4023 79
  6158                          ; .page ;; @@4023 79
  6159                          ;*************************** FORM_LINE ********************************* ;; @@4023 79
  6160                           ;; @@4023 79
  6161                          ; Remaps the destination line if it is greater than n3 ;; @@4023 79
  6162                           ;; @@4023 79
  6163                          form_line                                                  ;; @@4023 80
  6164  4023 207240                              jsr n1_reset                              ;; @@4023 80
  6165                          find_it                                                    ;; @@4026 80
  6166  4026 20a340                              jsr chargt_x2                            ; new line, skip over link ;; @@4026 80
  6167  4029 d00d                                bne _local_1079_70                       ; if we get to end-of-text without finding the ;; @@4029 80
  6168  402b a227                                ldx #err_ref                             ; line # then 'unresolved reference' error ;; @@402b 80
  6169  402d a54b                                lda forpnt                                ;; @@402d 80
  6170  402f 853b                                sta curlin                               ; fake error routine into saying 'in line xxxxx' ;; @@402f 80
  6171  4031 a54c                                lda forpnt+1                              ;; @@4031 80
  6172  4033 853c                                sta curlin+1                              ;; @@4033 80
  6173  4035 8317ee                              +lbra error                               ;; @@4035 80
  6174                           ;; @@4038 80
  6175  4038 20a540             _local_1079_70   jsr chargt                               ; get line number low ;; @@4038 80
  6176  403b 855a                                sta highds                               ; highds = current line# in loop ;; @@403b 80
  6177  403d c516                                cmp linnum                                ;; @@403d 80
  6178  403f d027                                bne _local_1079_100                       ;; @@403f 80
  6179  4041 20a540                              jsr chargt                               ; get line number high ;; @@4041 80
  6180  4044 855b                                sta highds+1                              ;; @@4044 80
  6181  4046 c517                                cmp linnum+1                              ;; @@4046 80
  6182  4048 d023                                bne _local_1079_110                       ;; @@4048 80
  6183  404a 38                                  sec                                      ; if linnum < start#, no remapping ;; @@404a 80
  6184  404b e55d                                sbc hightr+1                              ;; @@404b 80
  6185  404d 9008                                bcc _local_1079_80                        ;; @@404d 80
  6186  404f d00e                                bne _local_1079_90                        ;; @@404f 80
  6187  4051 a516                                lda linnum                                ;; @@4051 80
  6188  4053 e55c                                sbc hightr                                ;; @@4053 80
  6189  4055 b008                                bcs _local_1079_90                        ;; @@4055 80
  6190                           ;; @@4057 80
  6191  4057 a516               _local_1079_80   lda linnum                               ; use same line# ;; @@4057 80
  6192  4059 8565                                sta facho+1                               ;; @@4059 80
  6193  405b a517                                lda linnum+1                              ;; @@405b 80
  6194  405d 8564                                sta facho                                 ;; @@405d 80
  6195                           ;; @@405f 80
  6196  405f a290               _local_1079_90   ldx #$90                                 ; make replacement string ;; @@405f 80
  6197  4061 38                                  sec                                       ;; @@4061 80
  6198  4062 20df62                              jsr floatc                                ;; @@4062 80
  6199  4065 832724                              +lbra fout                                ;; @@4065 80
  6200                           ;; @@4068 80
  6201                           ;; @@4068 80
  6202  4068 20a540             _local_1079_100  jsr chargt                                ;; @@4068 80
  6203  406b 855b                                sta highds+1                             ; (** 01/27/84 fix) ;; @@406b 80
  6204                           ;; @@406d 80
  6205  406d 207f40             _local_1079_110  jsr line_add                             ; scan to end of line ;; @@406d 80
  6206  4070 80b4                                bra find_it                              ; always ;; @@4070 80
  6207                           ;; @@4072 80
  6208                          ; .page ;; @@4072 80
  6209                          ;*************************** N1_RESET ********************************** ;; @@4072 80
  6210                           ;; @@4072 80
  6211                          ; Copies n1 (new renumber origin) into facho & sets (txtptr) = (txttab)-1 ;; @@4072 80
  6212                           ;; @@4072 80
  6213                          n1_reset                                                   ;; @@4072 81
  6214  4072 ad7911                              lda renum_tmp_1                           ;; @@4072 81
  6215  4075 8565                                sta facho+1                               ;; @@4075 81
  6216  4077 ad7a11                              lda renum_tmp_1+1                         ;; @@4077 81
  6217  407a 8564                                sta facho                                 ;; @@407a 81
  6218  407c 83a0f4                              +lbra reset_txtptr                        ;; @@407c 81
  6219                           ;; @@407f 81
  6220                           ;; @@407f 81
  6221                          ;*************************** LINE_ADD ********************************** ;; @@407f 81
  6222                           ;; @@407f 81
  6223                          ; Adds n2 (new line increment) to line number stored in facho if the ;; @@407f 81
  6224                          ; current line number (highds) >= n3 (line to start renumbering with). ;; @@407f 81
  6225                          ; The line is then scanned. ;; @@407f 81
  6226                           ;; @@407f 81
  6227                          line_add                                                   ;; @@407f 81
  6228  407f a55a                                lda highds                               ; if line# >= start# then incr new# ;; @@407f 81
  6229  4081 38                                  sec                                       ;; @@4081 81
  6230  4082 e55c                                sbc hightr                                ;; @@4082 81
  6231  4084 a55b                                lda highds+1                              ;; @@4084 81
  6232  4086 e55d                                sbc hightr+1                              ;; @@4086 81
  6233  4088 9003                                bcc scan_thru                             ;; @@4088 81
  6234                           ;; @@408a 81
  6235                          line_inc                                                   ;; @@408a 81
  6236  408a 209340                              jsr new_num                               ;; @@408a 81
  6237                           ;; @@408d 81
  6238                          scan_thru                                                  ;; @@408d 81
  6239  408d 20a540                              jsr chargt                               ; scan to end of line ;; @@408d 81
  6240  4090 d0fb                                bne scan_thru                             ;; @@4090 81
  6241  4092 60                                  rts                                       ;; @@4092 81
  6242                           ;; @@4093 81
  6243                           ;; @@4093 81
  6244                          ;**************************** NEW_NUM ********************************** ;; @@4093 81
  6245                           ;; @@4093 81
  6246                          ; Adds n2 (the new line increment) to the line number stored in facho. ;; @@4093 81
  6247                           ;; @@4093 81
  6248                          new_num                                                    ;; @@4093 81
  6249  4093 a565                                lda facho+1                              ; increment new line# ;; @@4093 81
  6250  4095 18                                  clc                                       ;; @@4095 81
  6251  4096 6d7b11                              adc renum_tmp_2                           ;; @@4096 81
  6252  4099 8565                                sta facho+1                               ;; @@4099 81
  6253  409b a564                                lda facho                                 ;; @@409b 81
  6254  409d 6d7c11                              adc renum_tmp_2+1                         ;; @@409d 81
  6255  40a0 8564                                sta facho                                 ;; @@40a0 81
  6256  40a2 60                                  rts                                       ;; @@40a2 81
  6257                           ;; @@40a3 81
  6258                           ;; @@40a3 81
  6259                          ;********************** CHARGT & CHARGT_X2 ***************************** ;; @@40a3 81
  6260                           ;; @@40a3 81
  6261                          ; Chargt simulates chrget but doesn't ignore spaces & carry has no ;; @@40a3 81
  6262                          ; significance.  Chargt_x2 executes chargt twice. ;; @@40a3 81
  6263                          ; Used by Renumber, Find/Change, etc. ;; @@40a3 81
  6264                           ;; @@40a3 81
  6265                          chargt_x2                                                  ;; @@40a3 81
  6266  40a3 e33d                                inw txtptr                               ; jsr chargt ;; @@40a3 81
  6267                          chargt                                                     ;; @@40a5 81
  6268  40a5 a000                                ldy #0                                   ; increment txtptr ;; @@40a5 81
  6269  40a7 e33d                                inw txtptr                                ;; @@40a7 81
  6270  40a9 8319e2                              +lbra indtxt                              ;; @@40a9 81
  6271                           ;; @@40ac 81
  6272                          ; .page ;; @@40ac 81
  6273                          ;*********************************************************************** ;; @@40ac 81
  6274                          ;************************* MEMORY MOVE ROUTINES ************************ ;; @@40ac 81
  6275                          ;*********************************************************************** ;; @@40ac 81
  6276                           ;; @@40ac 81
  6277                          ;****************************** MOVEINIT ******************************* ;; @@40ac 81
  6278                           ;; @@40ac 81
  6279                          ; Setup for Renumber memory move. ;; @@40ac 81
  6280                           ;; @@40ac 81
  6281                          move_init                                                  ;; @@40ac 81
  6282  40ac a53d                                lda txtptr                               ; index1 = txtptr ;; @@40ac 81
  6283  40ae 8524                                sta index1                                ;; @@40ae 81
  6284  40b0 a53e                                lda txtptr+1                              ;; @@40b0 81
  6285  40b2 8525                                sta index1+1                              ;; @@40b2 81
  6286                           ;; @@40b4 81
  6287  40b4 a582                                lda text_top                             ; index2 = text_top ;; @@40b4 81
  6288  40b6 8526                                sta index2                                ;; @@40b6 81
  6289  40b8 a583                                lda text_top+1                            ;; @@40b8 81
  6290  40ba 8527                                sta index2+1                              ;; @@40ba 81
  6291                           ;; @@40bc 81
  6292  40bc a901                                lda #1                                   ; move 1 character ;; @@40bc 81
  6293  40be 850d                                sta count                                ; lo ;; @@40be 81
  6294  40c0 3a                                  dec                                       ;; @@40c0 81
  6295  40c1 856d                                sta argmo                                ; hi ;; @@40c1 81
  6296                           ;; @@40c3 81
  6297  40c3 60                                  rts                                       ;; @@40c3 81
  6298                           ;; @@40c4 81
  6299                          ; .page ;; @@40c4 81
  6300                          ;****************************** MOVEDOWN ******************************* ;; @@40c4 81
  6301                           ;; @@40c4 81
  6302                          ; Move block of BASIC text from INDEX1+COUNT to INDEX2 down to INDEX1. ;; @@40c4 81
  6303                          ; Used by commands Renumber, Find/Change. ;; @@40c4 81
  6304                           ;; @@40c4 81
  6305                          movedown                                                   ;; @@40c4 81
  6306  40c4 38                                  sec                                      ; set up DMA list:   [900524] ;; @@40c4 81
  6307  40c5 a526                                lda index2                                ;; @@40c5 81
  6308  40c7 e524                                sbc index1                                ;; @@40c7 81
  6309  40c9 8d4501                              sta dma1_cnt_lo                          ; cnt = index2-index1-count ;; @@40c9 81
  6310  40cc a527                                lda index2+1                              ;; @@40cc 81
  6311  40ce e525                                sbc index1+1                              ;; @@40ce 81
  6312  40d0 8d4601                              sta dma1_cnt_hi                           ;; @@40d0 81
  6313  40d3 38                                  sec                                       ;; @@40d3 81
  6314  40d4 ad4501                              lda dma1_cnt_lo                           ;; @@40d4 81
  6315  40d7 e50d                                sbc count                                ; lo ;; @@40d7 81
  6316  40d9 8d4501                              sta dma1_cnt_lo                           ;; @@40d9 81
  6317  40dc ad4601                              lda dma1_cnt_hi                           ;; @@40dc 81
  6318  40df e56d                                sbc argmo                                ; hi ;; @@40df 81
  6319  40e1 8d4601                              sta dma1_cnt_hi                           ;; @@40e1 81
  6320                           ;; @@40e4 81
  6321  40e4 18                                  clc                                       ;; @@40e4 81
  6322  40e5 a524                                lda index1                                ;; @@40e5 81
  6323  40e7 8d4a01                              sta dma1_dest_lo                         ; dest = index1 ;; @@40e7 81
  6324  40ea 650d                                adc count                                 ;; @@40ea 81
  6325  40ec 8d4701                              sta dma1_src_lo                          ; src = index1+count ;; @@40ec 81
  6326  40ef a525                                lda index1+1                              ;; @@40ef 81
  6327  40f1 8d4b01                              sta dma1_dest_hi                          ;; @@40f1 81
  6328  40f4 656d                                adc argmo                                 ;; @@40f4 81
  6329  40f6 8d4801                              sta dma1_src_hi                           ;; @@40f6 81
  6330                           ;; @@40f9 81
  6331  40f9 a584                                lda text_bank                            ; bank = BASIC text bank ;; @@40f9 81
  6332                          ; and #%00001111  ;      [910520] F018A ;; @@40fb 81
  6333  40fb 8d4901                              sta dma1_src_bank                         ;; @@40fb 81
  6334  40fe 8d4c01                              sta dma1_dest_bank                        ;; @@40fe 81
  6335                           ;; @@4101 81
  6336                          execute_DMA1                                              ; [910620] Edit ;; @@4101 81
  6337  4101 a900                                lda #0                                    ;; @@4101 81
  6338  4103 8d4401                              sta dma1_cmd                             ; command = copy from startpoint ;; @@4103 81
  6339  4106 8d4d01                              sta dma1_subcmd                          ; [910520] F018A ;; @@4106 81
  6340                           ;; @@4109 81
  6341  4109 8d02d7                              sta dma_ctlr+2                           ; dma_list bank ;; @@4109 81
  6342  410c a901                                lda #>dma1_cmd                            ;; @@410c 81
  6343  410e 8d01d7                              sta dma_ctlr+1                           ; dma_list hi ;; @@410e 81
  6344  4111 a944                                lda #<dma1_cmd                            ;; @@4111 81
  6345  4113 8d00d7                              sta dma_ctlr                             ; dma_list lo & trigger ;; @@4113 81
  6346  4116 60                                  rts                                       ;; @@4116 81
  6347                           ;; @@4117 81
  6348                          ; .page ;; @@4117 81
  6349                          ;******************************* MOVEUP ******************************** ;; @@4117 81
  6350                           ;; @@4117 81
  6351                          ; Move block of BASIC text from INDEX1 to INDEX2 up to INDEX2+COUNT. ;; @@4117 81
  6352                          ; Used by commands Renumber, Find/Change. ;; @@4117 81
  6353                           ;; @@4117 81
  6354                          moveup                                                     ;; @@4117 81
  6355  4117 38                                  sec                                      ; set up DMA list:   [900524] ;; @@4117 81
  6356  4118 a526                                lda index2                                ;; @@4118 81
  6357  411a e524                                sbc index1                                ;; @@411a 81
  6358  411c 8d4501                              sta dma1_cnt_lo                          ; cnt = index2-index1 ;; @@411c 81
  6359  411f a527                                lda index2+1                              ;; @@411f 81
  6360  4121 e525                                sbc index1+1                              ;; @@4121 81
  6361  4123 8d4601                              sta dma1_cnt_hi                           ;; @@4123 81
  6362                           ;; @@4126 81
  6363  4126 c326                                dew index2                               ; (index2 = text_top = end+1) ;; @@4126 81
  6364  4128 18                                  clc                                       ;; @@4128 81
  6365  4129 a526                                lda index2                                ;; @@4129 81
  6366  412b 8d4701                              sta dma1_src_lo                          ; src = index2 ;; @@412b 81
  6367  412e 650d                                adc count                                 ;; @@412e 81
  6368  4130 8d4a01                              sta dma1_dest_lo                         ; dest = index2+count ;; @@4130 81
  6369  4133 a527                                lda index2+1                              ;; @@4133 81
  6370  4135 8d4801                              sta dma1_src_hi                           ;; @@4135 81
  6371  4138 656d                                adc argmo                                 ;; @@4138 81
  6372  413a 8d4b01                              sta dma1_dest_hi                          ;; @@413a 81
  6373                           ;; @@413d 81
  6374                          ; lda dma_ctlr+3  ;dma controller version    [910520] F018A ;; @@413d 81
  6375                          ; and #1 ;; @@413d 81
  6376                          ; beq _local_1080_10   ; F018    removed [910808] F018B ;; @@413d 81
  6377  413d a930                                lda #%00110000                           ; F018A,B ;; @@413d 81
  6378  413f 8d4401             _local_1080_10   sta dma1_cmd                             ; command=copy, source=start   [910102] ;; @@413f 81
  6379                          ; php ;; @@4142 81
  6380  4142 a584                                lda text_bank                            ; bank = BASIC text bank   [910520] F018A ;; @@4142 81
  6381                          ; plp   ;version?    removed [910808] F018B ;; @@4144 81
  6382                          ; bne _local_1080_20   ; F018A ;; @@4144 81
  6383                          ; and #%00001111  ; F018     [910102] ;; @@4144 81
  6384                          ; ora #%01000000  ;(copy source=endpoint)    [910102] ;; @@4144 81
  6385  4144 8d4901             _local_1080_20   sta dma1_src_bank                        ; banks ;; @@4144 81
  6386  4147 8d4c01                              sta dma1_dest_bank                        ;; @@4147 81
  6387                           ;; @@414a 81
  6388  414a a900                                lda #0                                   ; [910219] ;; @@414a 81
  6389                          ; sta dma1_cmd  ; command = copy, source=endpoint ;; @@414c 81
  6390  414c 8d4d01                              sta dma1_subcmd                          ; [910520] F018A ;; @@414c 81
  6391                          ; dec a   ;      [910219] ;; @@414f 81
  6392  414f 8d02d7                              sta dma_ctlr+2                           ; dma_list bank ;; @@414f 81
  6393  4152 a001                                ldy #>dma1_cmd                           ; dma_list ;; @@4152 81
  6394  4154 a944                                lda #<dma1_cmd                            ;; @@4154 81
  6395  4156 8c01d7                              sty dma_ctlr+1                           ; dma_list hi ;; @@4156 81
  6396  4159 8d00d7                              sta dma_ctlr                             ; dma_list lo & trigger ;; @@4159 81
  6397  415c 60                                  rts                                       ;; @@415c 81
  6398                           ;; @@415d 81
  6399                          ;.end ;; @@415d 81
  6400                          ; .page ;; @@415d 81
  6401                          ; .subttl  FOR ;; @@415d 81
  6402                          ; FOR ;; @@415d 81
  6403                          ; ;; @@415d 81
  6404                          ; Push the following information on the run-time stack: ;; @@415d 81
  6405                          ; ;; @@415d 81
  6406                          ; (bottom)   highest memory ;; @@415d 81
  6407                          ; ========================= ;; @@415d 81
  6408                          ;  txtptr    address of next statement ;; @@415d 81
  6409                          ;  txtptr+1 ;; @@415d 81
  6410                          ;  ======== ;; @@415d 81
  6411                          ;  curlin+1  current line number ;; @@415d 81
  6412                          ;  curlin ;; @@415d 81
  6413                          ;  ======== ;; @@415d 81
  6414                          ;  to lo ;; @@415d 81
  6415                          ;  to mo ;; @@415d 81
  6416                          ;  to moh    'to' value ;; @@415d 81
  6417                          ;  to ho ;; @@415d 81
  6418                          ;  to exp ;; @@415d 81
  6419                          ;  ======== ;; @@415d 81
  6420                          ;  step sign ;; @@415d 81
  6421                          ;  step lo ;; @@415d 81
  6422                          ;  step mo ;; @@415d 81
  6423                          ;  step moh  'step' value ;; @@415d 81
  6424                          ;  step ho ;; @@415d 81
  6425                          ;  step exp ;; @@415d 81
  6426                          ;  ======== ;; @@415d 81
  6427                          ;  forpnt+1  'for' variable pointer ;; @@415d 81
  6428                          ;  forpnt ;; @@415d 81
  6429                          ;  ======== ;; @@415d 81
  6430                          ;  'for' token       <== (tos) top of stack pointer ;; @@415d 81
  6431                          ; ============================ ;; @@415d 81
  6432                          ; (top of stack)  lowest memory ;; @@415d 81
  6433                           ;; @@415d 81
  6434                           ;; @@415d 81
  6435  415d a980               for              lda #$80                                  ;; @@415d 82
  6436  415f 8512                                sta subflg                               ; no arrays(), no integers% ;; @@415f 82
  6437  4161 207636                              jsr let                                  ; get & set FOR variables ;; @@4161 82
  6438  4164 a981                                lda #for_token                           ; set up for call to see if ;; @@4164 82
  6439  4166 204331                              jsr search                               ; ..this 'for' variable is unique ;; @@4166 82
  6440  4169 f008                                beq _local_1081_10                       ; branch if not ;; @@4169 82
  6441                           ;; @@416b 82
  6442                          ; If the variable is not unique, (fndpnt) will point to last occurance ;; @@416b 82
  6443                          ; in stack, and we will reset the stack to that point.  Otherwise we ;; @@416b 82
  6444                          ; will adjust the pointer by 'lenfor' and start from that point. ;; @@416b 82
  6445                           ;; @@416b 82
  6446  416b a912                                lda #lenfor                               ;; @@416b 82
  6447  416d 209431                              jsr getstk                               ; updates stack pointer, error if overflow ;; @@416d 82
  6448  4170 20dd31                              jsr movtos                               ; (tos) => (fndpnt) ;; @@4170 82
  6449                           ;; @@4173 82
  6450  4173 20e631             _local_1081_10   jsr movfnd                               ; (fndpnt) => (tos)   (redundant for new entries) ;; @@4173 82
  6451  4176 205b35                              jsr datan                                ; find address of next statement ;; @@4176 82
  6452  4179 98                                  tya                                      ; offset from (txtptr) in y ;; @@4179 82
  6453  417a a011                                ldy #lenfor-1                             ;; @@417a 82
  6454                           ;; @@417c 82
  6455  417c 18                                  clc                                      ; Push address of next statement on stack ;; @@417c 82
  6456  417d 653d                                adc txtptr                                ;; @@417d 82
  6457  417f 917c                                sta (tos),y                              ; (common area) ;; @@417f 82
  6458  4181 a53e                                lda txtptr+1                              ;; @@4181 82
  6459  4183 6900                                adc #0                                    ;; @@4183 82
  6460  4185 88                                  dey                                       ;; @@4185 82
  6461  4186 917c                                sta (tos),y                              ; (common area) ;; @@4186 82
  6462                           ;; @@4188 82
  6463  4188 a53c                                lda curlin+1                             ; Push current line number on stack ;; @@4188 82
  6464  418a 88                                  dey                                       ;; @@418a 82
  6465  418b 917c                                sta (tos),y                              ; (common area) ;; @@418b 82
  6466  418d a53b                                lda curlin                                ;; @@418d 82
  6467  418f 88                                  dey                                       ;; @@418f 82
  6468  4190 917c                                sta (tos),y                              ; (common area) ;; @@4190 82
  6469                           ;; @@4192 82
  6470  4192 a9a4                                lda #to_token                            ; Look for TO, must appear ;; @@4192 82
  6471  4194 205d4e                              jsr synchr                                ;; @@4194 82
  6472  4197 20db4c                              jsr chknum                               ; get TO value ;; @@4197 82
  6473  419a 20d84c                              jsr frmnum                                ;; @@419a 82
  6474  419d a568                                lda facsgn                                ;; @@419d 82
  6475  419f 097f                                ora #$7f                                  ;; @@419f 82
  6476  41a1 2564                                and facho                                 ;; @@41a1 82
  6477  41a3 8564                                sta facho                                 ;; @@41a3 82
  6478                           ;; @@41a5 82
  6479  41a5 a204                                ldx #4                                    ;; @@41a5 82
  6480  41a7 a00d                                ldy #lenfor-5                             ;; @@41a7 82
  6481  41a9 b563               _local_1081_20   lda facexp,x                             ; Push faclo,mo,moh,ho,exp ;; @@41a9 82
  6482  41ab 917c                                sta (tos),y                              ; (common area) ;; @@41ab 82
  6483  41ad ca                                  dex                                       ;; @@41ad 82
  6484  41ae 88                                  dey                                       ;; @@41ae 82
  6485  41af 10f8                                bpl _local_1081_20                        ;; @@41af 82
  6486                           ;; @@41b1 82
  6487  41b1 a999                                lda #<fone                               ; Push STEP value ;; @@41b1 82
  6488  41b3 a05f                                ldy #>fone                               ; (point to default 'one' in ROM) ;; @@41b3 82
  6489  41b5 200e62                              jsr movfm                                 ;; @@41b5 82
  6490  41b8 208522                              jsr chrgot                                ;; @@41b8 82
  6491  41bb c9a9                                cmp #step_token                           ;; @@41bb 82
  6492  41bd d006                                bne _local_1081_30                       ; branch if no step given ;; @@41bd 82
  6493  41bf 208322                              jsr chrget                                ;; @@41bf 82
  6494  41c2 20d84c                              jsr frmnum                                ;; @@41c2 82
  6495                           ;; @@41c5 82
  6496  41c5 20c162             _local_1081_30   jsr sign                                  ;; @@41c5 82
  6497  41c8 48                                  pha                                      ; save sign for a moment ;; @@41c8 82
  6498  41c9 20b262                              jsr round                                 ;; @@41c9 82
  6499  41cc 68                                  pla                                       ;; @@41cc 82
  6500                           ;; @@41cd 82
  6501  41cd a008                                ldy #lenfor-10                            ;; @@41cd 82
  6502  41cf a205                                ldx #5                                    ;; @@41cf 82
  6503  41d1 917c               _local_1081_40   sta (tos),y                              ; (common area) ;; @@41d1 82
  6504  41d3 b562                                lda facexp-1,x                            ;; @@41d3 82
  6505  41d5 88                                  dey                                       ;; @@41d5 82
  6506  41d6 ca                                  dex                                       ;; @@41d6 82
  6507  41d7 10f8                                bpl _local_1081_40                        ;; @@41d7 82
  6508                           ;; @@41d9 82
  6509  41d9 a54c                                lda forpnt+1                             ; Finally push pointer to 'for' variable, & 'for' token ;; @@41d9 82
  6510  41db 917c                                sta (tos),y                              ; (common area) ;; @@41db 82
  6511  41dd a54b                                lda forpnt                                ;; @@41dd 82
  6512  41df 88                                  dey                                       ;; @@41df 82
  6513  41e0 917c                                sta (tos),y                              ; (common area) ;; @@41e0 82
  6514  41e2 a981                                lda #for_token                            ;; @@41e2 82
  6515  41e4 88                                  dey                                       ;; @@41e4 82
  6516  41e5 917c                                sta (tos),y                              ; (common area) ;; @@41e5 82
  6517  41e7 60                                  rts                                       ;; @@41e7 82
  6518                           ;; @@41e8 82
  6519                          ;.end ;; @@41e8 82
  6520                          ; .page ;; @@41e8 82
  6521                          ; .subttl  DELETE ;; @@41e8 82
  6522                           ;; @@41e8 82
  6523                          ; Delete a range of source   -or-   Delete a disk file ;; @@41e8 82
  6524                          ; ;; @@41e8 82
  6525                          ; Syntax: DELETE from# - to# (same range parameters as LIST) ;; @@41e8 82
  6526                          ;  DELETE "filename" (same parameters as SCRATCH) ;; @@41e8 82
  6527                           ;; @@41e8 82
  6528                          ; Determine which form of DELETE we have... ;; @@41e8 82
  6529                           ;; @@41e8 82
  6530  41e8 9007               delete           bcc delete_line                          ; branch if a number (assume range parameter) ;; @@41e8 83
  6531  41ea c9ab                                cmp #minus_token                          ;; @@41ea 83
  6532  41ec f003                                beq delete_line                          ; branch if a dash (assume range parameter) ;; @@41ec 83
  6533  41ee 83e330                              +lbra scratch                            ; branch if string (assume filename or U#) ;; @@41ee 83
  6534                           ;; @@41f1 83
  6535                          delete_line                                                ;; @@41f1 83
  6536  41f1 20ed58                              jsr errind                               ; direct mode only command ;; @@41f1 83
  6537  41f4 208522                              jsr chrgot                               ; requires line# or range, no default ;; @@41f4 83
  6538  41f7 f350ec                              +lbeq snerr                              ; error, none given ;; @@41f7 83
  6539                           ;; @@41fa 83
  6540  41fa 205042                              jsr range                                ; parse range, find starting line, ptr to ending line ;; @@41fa 83
  6541  41fd a561                                lda lowtr                                 ;; @@41fd 83
  6542  41ff a662                                ldx lowtr+1                               ;; @@41ff 83
  6543  4201 8524                                sta index1                               ; (destination) ;; @@4201 83
  6544  4203 8625                                stx index1+1                              ;; @@4203 83
  6545                           ;; @@4205 83
  6546  4205 20fa31                              jsr FindLine                             ; find ending line ;; @@4205 83
  6547  4208 9015                                bcc _local_1082_20                       ; branch if not found ;; @@4208 83
  6548  420a a001                                ldy #1                                    ;; @@420a 83
  6549  420c 20ad22                              jsr indlow                               ; if eot, use this ptr.  else, need ptr to next ;; @@420c 83
  6550  420f 88                                  dey                                       ;; @@420f 83
  6551  4210 aa                                  tax                                      ; save it in case of swap ;; @@4210 83
  6552  4211 d005                                bne _local_1082_10                       ; branch if not eot (end-of-text) ;; @@4211 83
  6553  4213 20ad22                              jsr indlow                                ;; @@4213 83
  6554  4216 f007                                beq _local_1082_20                       ; branch if eot (null link bytes) ;; @@4216 83
  6555                           ;; @@4218 83
  6556  4218 20ad22             _local_1082_10   jsr indlow                                ;; @@4218 83
  6557  421b 8561                                sta lowtr                                ; (source) ;; @@421b 83
  6558  421d 8662                                stx lowtr+1                               ;; @@421d 83
  6559                           ;; @@421f 83
  6560  421f a561               _local_1082_20   lda lowtr                                ; check that start <= end ;; @@421f 83
  6561  4221 38                                  sec                                       ;; @@4221 83
  6562  4222 e524                                sbc index1                               ; calculate delta ;; @@4222 83
  6563  4224 850d                                sta count                                ; (count) ;; @@4224 83
  6564  4226 a562                                lda lowtr+1                              ; (does not catch case where ;; @@4226 83
  6565  4228 e525                                sbc index1+1                             ; start>end when end=start+1, ;; @@4228 83
  6566  422a 856d                                sta argmo                                ; but it does no harm) ;; @@422a 83
  6567  422c 050d                                ora count                                 ;; @@422c 83
  6568  422e f00e                                beq fix_links                            ; all done- nothing to move!? ;; @@422e 83
  6569  4230 9317ec                              +lbcc snerr                              ; error- bad range (start > end) ;; @@4230 83
  6570                           ;; @@4233 83
  6571  4233 a582                                lda text_top                             ; setup for common DMA move routine: [900530] ;; @@4233 83
  6572  4235 a683                                ldx text_top+1                            ;; @@4235 83
  6573  4237 8526                                sta index2                               ; index2 = top ;; @@4237 83
  6574  4239 8627                                stx index2+1                             ; index1 = destination ;; @@4239 83
  6575                          ; count  = delta ;; @@423b 83
  6576                           ;; @@423b 83
  6577  423b 20c440                              jsr movedown                             ; delete the text, then relink & exit ;; @@423b 83
  6578                           ;; @@423e 83
  6579                           ;; @@423e 83
  6580                           ;; @@423e 83
  6581                          fix_links                                                 ; <<<<<<<<<<<<<<<<<<<<<<<<<<< entry from renumber ;; @@423e 84
  6582                           ;; @@423e 84
  6583  423e 20b930                              jsr link_program                         ; relink program ;; @@423e 84
  6584  4241 a524                                lda index1                                ;; @@4241 84
  6585  4243 a625                                ldx index1+1                              ;; @@4243 84
  6586  4245 18                                  clc                                       ;; @@4245 84
  6587  4246 6902                                adc #2                                    ;; @@4246 84
  6588  4248 9001                                bcc _local_1083_10                        ;; @@4248 84
  6589  424a e8                                  inx                                       ;; @@424a 84
  6590  424b 8582               _local_1083_10   sta text_top                             ; set eot pointer ;; @@424b 84
  6591  424d 8683                                stx text_top+1                            ;; @@424d 84
  6592  424f 60                                  rts                                      ; C128-04 fix: was 'jmp ready' (FAB) ;; @@424f 84
  6593                           ;; @@4250 84
  6594                          ; .page ;; @@4250 84
  6595                          ;******************************** ;; @@4250 84
  6596                          ;* ;; @@4250 84
  6597                          ;*    Input Range Parameters ;; @@4250 84
  6598                          ;* ;; @@4250 84
  6599                          ;******************************** ;; @@4250 84
  6600                           ;; @@4250 84
  6601  4250 f012               range            beq _local_1084_10                       ; a terminator from chrgot? ;; @@4250 85
  6602  4252 9010                                bcc _local_1084_10                       ; a number? ;; @@4252 85
  6603  4254 c9ab                                cmp #minus_token                         ; a dash? ;; @@4254 85
  6604  4256 d02e                                bne _local_1084_40   ;if it's not a dash, error (C128-03 fix ; FAB) ;; @@4256 85
  6605  4258 a001                                ldy #1                                    ;; @@4258 85
  6606  425a 20c522                              jsr indtxt                               ; let's peek, and see what follows the dash! ;; @@425a 85
  6607  425d f027                                beq _local_1084_40                       ; uh-oh! it's of the form 'delete -' - error ;; @@425d 85
  6608  425f c93a                                cmp #':'                                 ; the other terminator ;; @@425f 85
  6609  4261 f023                                beq _local_1084_40                       ; ..still bad ;; @@4261 85
  6610  4263 38                                  sec                                      ; set up for linget ;; @@4263 85
  6611                           ;; @@4264 85
  6612  4264 202e32             _local_1084_10   jsr linget                               ; get first # ;; @@4264 85
  6613  4267 20fa31                              jsr FindLine                             ; find it & set ptrs ;; @@4267 85
  6614  426a 208522                              jsr chrgot                               ; get last char ;; @@426a 85
  6615  426d f00c                                beq _local_1084_20                       ; skip done ;; @@426d 85
  6616  426f c9ab                                cmp #minus_token                         ; a dash? ;; @@426f 85
  6617  4271 d013                                bne _local_1084_40                       ; no- syntax error ;; @@4271 85
  6618  4273 208322                              jsr chrget                               ; yes- skip dash ;; @@4273 85
  6619  4276 202e32                              jsr linget                               ; get second # ;; @@4276 85
  6620  4279 d00b                                bne _local_1084_40                       ; error- wasn't a number ;; @@4279 85
  6621                           ;; @@427b 85
  6622  427b a50b               _local_1084_20   lda endchr                               ; was a # input? ;; @@427b 85
  6623  427d d006                                bne _local_1084_30                       ; yes ;; @@427d 85
  6624  427f a9ff                                lda #$ff                                 ; no - make max ;; @@427f 85
  6625  4281 8516                                sta linnum                                ;; @@4281 85
  6626  4283 8517                                sta linnum+1                              ;; @@4283 85
  6627  4285 60                 _local_1084_30   rts                                       ;; @@4285 85
  6628                           ;; @@4286 85
  6629                           ;; @@4286 85
  6630  4286 83c1eb             _local_1084_40   +lbra snerr                              ; syntax error ;; @@4286 85
  6631                           ;; @@4289 85
  6632                          ;.end ;; @@4289 85
  6633                          ; .page ;; @@4289 85
  6634                          ; .subttl  FIND  CHANGE ;; @@4289 85
  6635                           ;; @@4289 85
  6636                          ; FIND   "string"                    [,line_range] ;; @@4289 85
  6637                          ; CHANGE "oldstring" TO "newstring"  [,line_range] ;; @@4289 85
  6638                          ; ;; @@4289 85
  6639                          ; where <"> delimiter can be any character, but only ;; @@4289 85
  6640                          ; double-quotes will prevent tokenization of strings. ;; @@4289 85
  6641                          ; ;; @@4289 85
  6642                          ; N.B.: I am assuming that lines cannot be greater than 255 chars, as is ;; @@4289 85
  6643                          ; the case where the line was entered "normally", that is, using LINGET. ;; @@4289 85
  6644                           ;; @@4289 85
  6645                          find                                                       ;; @@4289 86
  6646  4289 7787                                rmb7 op                                  ; FIND flag ;; @@4289 86
  6647  428b 2c                                  !text $2c                                 ;; @@428b 86
  6648                           ;; @@428c 86
  6649                          change                                                     ;; @@428c 86
  6650  428c f787                                smb7 op                                  ; CHANGE flag ;; @@428c 86
  6651  428e 6787                                rmb6 op                                  ; reset change-all mode ;; @@428e 86
  6652  4290 20ed58                              jsr errind                               ; report error if not in direct mode ;; @@4290 86
  6653                           ;; @@4293 86
  6654  4293 208522                              jsr chrgot                               ; get delimeter ;; @@4293 86
  6655  4296 a200                                ldx #0                                   ; evaluate string args ;; @@4296 86
  6656  4298 202644                              jsr delimit_string                       ; string1 ;; @@4298 86
  6657  429b a58a                                lda fstr1+2                               ;; @@429b 86
  6658  429d f35e0f                              +lbeq fcerr                              ; error if string1 null ;; @@429d 86
  6659  42a0 7f8713                              bbr7 op,_local_1085_10                   ; branch if no string2 ;; @@42a0 86
  6660  42a3 208322                              jsr chrget                               ; pick up required 'to' token ;; @@42a3 86
  6661  42a6 c9a4                                cmp #to_token                             ;; @@42a6 86
  6662  42a8 d39feb                              +lbne snerr                              ; error if missing ;; @@42a8 86
  6663  42ab 208322                              jsr chrget                                ;; @@42ab 86
  6664  42ae f399eb                              +lbeq snerr                              ; error if eol ;; @@42ae 86
  6665  42b1 a203                                ldx #3                                    ;; @@42b1 86
  6666  42b3 202644                              jsr delimit_string                       ; string2 ;; @@42b3 86
  6667                           ;; @@42b6 86
  6668  42b6 208322             _local_1085_10   jsr chrget                               ; line number range given? ;; @@42b6 86
  6669  42b9 f003                                beq _local_1085_20                       ; no, eol ;; @@42b9 86
  6670  42bb 205b4e                              jsr chkcom                               ; yes, pick up required comma ;; @@42bb 86
  6671  42be 205042             _local_1085_20   jsr range                                ; set up line number range (lowtr,linnum) ;; @@42be 86
  6672  42c1 20472c                              jsr tto                                  ; save txtptr for restoration when done ;; @@42c1 86
  6673  42c4 7755                                rmb7 helper                              ; clear 'help' flag for 'p1line' ;; @@42c4 86
  6674  42c6 a555                                lda helper                                ;; @@42c6 86
  6675  42c8 48                                  pha                                       ;; @@42c8 86
  6676  42c9 4755                                rmb4 helper                              ; temporarily disable token highlighting ;; @@42c9 86
  6677  42cb d755                                smb5 helper                              ; set   'find' flag for 'p1line' ;; @@42cb 86
  6678  42cd 800e                                bra find_loop_1                          ; begin ;; @@42cd 86
  6679                           ;; @@42cf 86
  6680                          ; .page ;; @@42cf 86
  6681                          find_loop                                                  ;; @@42cf 87
  6682  42cf a000                                ldy #0                                   ; move to next line (copy link bytes to lowtr) ;; @@42cf 87
  6683  42d1 20ad22                              jsr indlow                                ;; @@42d1 87
  6684  42d4 aa                                  tax                                       ;; @@42d4 87
  6685  42d5 c8                                  iny                                       ;; @@42d5 87
  6686  42d6 20ad22                              jsr indlow                                ;; @@42d6 87
  6687  42d9 8661                                stx lowtr                                 ;; @@42d9 87
  6688  42db 8562                                sta lowtr+1                               ;; @@42db 87
  6689                           ;; @@42dd 87
  6690                          find_loop_1                                                ;; @@42dd 87
  6691  42dd a001                                ldy #1                                    ;; @@42dd 87
  6692  42df 20ad22                              jsr indlow                               ; check link ;; @@42df 87
  6693  42e2 d007                                bne _local_1086_10                       ; not null- continue ;; @@42e2 87
  6694  42e4 88                                  dey                                       ;; @@42e4 87
  6695  42e5 20ad22                              jsr indlow                                ;; @@42e5 87
  6696  42e8 f31d01                              +lbeq find_exit                          ; null- exit ;; @@42e8 87
  6697                           ;; @@42eb 87
  6698  42eb a002               _local_1086_10   ldy #2                                    ;; @@42eb 87
  6699  42ed 20ad22                              jsr indlow                               ; check line number ;; @@42ed 87
  6700  42f0 aa                                  tax                                       ;; @@42f0 87
  6701  42f1 c8                                  iny                                       ;; @@42f1 87
  6702  42f2 20ad22                              jsr indlow                                ;; @@42f2 87
  6703  42f5 c517                                cmp linnum+1                              ;; @@42f5 87
  6704  42f7 d004                                bne _local_1086_20                        ;; @@42f7 87
  6705  42f9 e416                                cpx linnum                                ;; @@42f9 87
  6706  42fb f003                                beq _local_1086_30                       ; line is <= last line requested, continue ;; @@42fb 87
  6707  42fd b30801             _local_1086_20   +lbcs find_exit                          ; line is >  last line requested, exit ;; @@42fd 87
  6708                           ;; @@4300 87
  6709  4300 a203               _local_1086_30   ldx #3                                   ; set initial position - 1 (past link & line#) ;; @@4300 87
  6710  4302 863f                                stx fndpnt                                ;; @@4302 87
  6711                           ;; @@4304 87
  6712                          ; .page ;; @@4304 87
  6713                          find_loop_2                                                ;; @@4304 88
  6714  4304 20e1ff                              jsr _stop                                ; check stop key ;; @@4304 88
  6715  4307 f31001                              +lbeq find_break                         ; exit if down ;; @@4307 88
  6716                           ;; @@430a 88
  6717  430a a63f                                ldx fndpnt                               ; duh, where are we? ;; @@430a 88
  6718  430c 18                                  clc                                       ;; @@430c 88
  6719  430d 8a                                  txa                                      ; program: ;; @@430d 88
  6720  430e 6561                                adc lowtr                                ; txtptr = line start + position in line ;; @@430e 88
  6721  4310 853d                                sta txtptr                                ;; @@4310 88
  6722  4312 a900                                lda #0                                    ;; @@4312 88
  6723  4314 6562                                adc lowtr+1                               ;; @@4314 88
  6724  4316 853e                                sta txtptr+1                             ; search string: ;; @@4316 88
  6725  4318 a300                                ldz #0                                   ; at the beginning ;; @@4318 88
  6726                           ;; @@431a 88
  6727  431a 20a540             _local_1087_40   jsr chargt                               ; get next character from text ;; @@431a 88
  6728  431d f0b0                                beq find_loop                            ; eol (no match this line) ;; @@431d 88
  6729  431f e8                                  inx                                      ; bump pointer to next character ;; @@431f 88
  6730  4320 d288                                cmp (fstr1),z                            ; character match?  ind okay- buffer ;; @@4320 88
  6731  4322 d0f6                                bne _local_1087_40                       ; no ;; @@4322 88
  6732  4324 863f                                stx fndpnt                               ; yes- save next position ;; @@4324 88
  6733                           ;; @@4326 88
  6734  4326 1b                 _local_1087_50   inz                                      ; bump position in search string ;; @@4326 88
  6735  4327 d48a                                cpz fstr1+2                              ; string match? ;; @@4327 88
  6736  4329 b00b                                bcs print_line                           ; yes ;; @@4329 88
  6737  432b 20a540                              jsr chargt                                ;; @@432b 88
  6738  432e f09f                                beq find_loop                            ; no- eol ;; @@432e 88
  6739  4330 d288                                cmp (fstr1),z                            ; ind okay- buffer ;; @@4330 88
  6740  4332 d0d0                                bne find_loop_2                          ; no- rewind to beginning of search string ;; @@4332 88
  6741  4334 f0f0                                beq _local_1087_50                       ; maybe- still more chars to compare ;; @@4334 88
  6742                           ;; @@4336 88
  6743                           ;; @@4336 88
  6744                          ; Print the line of text at LOWTR, highlighting the section of code ;; @@4336 88
  6745                          ; beginning at LOWTR+FNDPNT and running for FIND_COUNT characters. ;; @@4336 88
  6746                           ;; @@4336 88
  6747                          print_line                                                 ;; @@4336 89
  6748  4336 20f737                              jsr crdo                                 ; get a new display line ;; @@4336 89
  6749  4339 a58a                                lda fstr1+2                              ; length of string to highlight ;; @@4339 89
  6750  433b 8dda02                              sta find_count                            ;; @@433b 89
  6751  433e a002                                ldy #2                                    ;; @@433e 89
  6752  4340 20ad22                              jsr indlow                               ; get ms byte of line number ;; @@4340 89
  6753  4343 aa                                  tax                                       ;; @@4343 89
  6754  4344 c8                                  iny                                       ;; @@4344 89
  6755  4345 20ad22                              jsr indlow                               ; get ls byte ;; @@4345 89
  6756  4348 207733                              jsr p1line                               ; print #, space, and the line of code ;; @@4348 89
  6757  434b 7f87b6                              bbr7 op,find_loop_2                      ; Find op? branch if so and continue search ;; @@434b 89
  6758                           ;; @@434e 89
  6759                          ; .page ;; @@434e 89
  6760                          ; Change operation ;; @@434e 89
  6761                          ; Query the user and replace string1 with string2 if he wants to. ;; @@434e 89
  6762                          ; Options are  'Y' (yes),  '*' (do all),  'CR' (quit),  anything else means no. ;; @@434e 89
  6763                           ;; @@434e 89
  6764                          change_line                                                ;; @@434e 89
  6765  434e ef8720                              bbs6 op,_local_1088_100                  ; branch if change-all mode set ;; @@434e 89
  6766  4351 207dff                              jsr _primm                               ; prompt & get response ;; @@4351 89
  6767  4354 0d204348414e4745...                 !text cr," CHANGE? ",0                    ;; @@4354 89
  6768  435f 20d878                              jsr response_get                          ;; @@435f 89
  6769  4362 c959                                cmp #'Y'                                  ;; @@4362 89
  6770  4364 f00b                                beq _local_1088_100                      ; yes, change it ;; @@4364 89
  6771  4366 c90d                                cmp #cr                                   ;; @@4366 89
  6772  4368 f39d00                              +lbeq find_exit                          ; cr only, abort entire operation ;; @@4368 89
  6773  436b c92a                                cmp #'*'                                  ;; @@436b 89
  6774  436d d095                                bne find_loop_2                          ; *, change all.  else don't change ;; @@436d 89
  6775  436f e787                                smb6 op                                   ;; @@436f 89
  6776                           ;; @@4371 89
  6777                          ; Replace string1 with string2.  Requires moving text up/down beginning at ;; @@4371 89
  6778                          ; LOWTR+FNDPNT+(LEN(string1)-LEN(string2)) through TEXT_TOP and copying ;; @@4371 89
  6779                          ; string1 into text beginning at LOWTR+FNDPNT for LEN(string2) characters. ;; @@4371 89
  6780                           ;; @@4371 89
  6781  4371 a582               _local_1088_100  lda text_top                             ; setup upper address of text to move (index2) ;; @@4371 89
  6782  4373 8526                                sta index2                                ;; @@4373 89
  6783  4375 a583                                lda text_top+1                           ; TEXT_TOP ;; @@4375 89
  6784  4377 8527                                sta index2+1                              ;; @@4377 89
  6785                           ;; @@4379 89
  6786  4379 18                                  clc                                      ; setup lower address of text to move (index1) ;; @@4379 89
  6787  437a a53f                                lda fndpnt                                ;; @@437a 89
  6788  437c 6561                                adc lowtr                                 ;; @@437c 89
  6789  437e 8524                                sta index1                               ; LOWTR+FNDPNT ;; @@437e 89
  6790  4380 a900                                lda #0                                    ;; @@4380 89
  6791  4382 856d                                sta argmo                                ; count hi ;; @@4382 89
  6792  4384 6562                                adc lowtr+1                               ;; @@4384 89
  6793  4386 8525                                sta index1+1                              ;; @@4386 89
  6794                           ;; @@4388 89
  6795  4388 38                                  sec                                      ; calc number of chars to insert/delete ;; @@4388 89
  6796  4389 a58a                                lda fstr1+2                              ; LEN(string1)-LEN(string2) ;; @@4389 89
  6797  438b e58d                                sbc fstr2+2                               ;; @@438b 89
  6798  438d f052                                beq _local_1088_20                       ; branch if string1 = string2 (no move) ;; @@438d 89
  6799  438f 103d                                bpl _local_1088_10                       ; branch if string1 > string2 (delete) ;; @@438f 89
  6800                          ; else      string1 < string2 (insert) ;; @@4391 89
  6801                           ;; @@4391 89
  6802  4391 42                                  neg                                      ; Move memory up to make room for larger string2 ;; @@4391 89
  6803  4392 850d                                sta count                                 ;; @@4392 89
  6804  4394 a000                                ldy #0                                   ; first check for line too long ;; @@4394 89
  6805  4396 20ad22                              jsr indlow                                ;; @@4396 89
  6806  4399 650d                                adc count                                 ;; @@4399 89
  6807  439b 4b                                  taz                                       ;; @@439b 89
  6808  439c c8                                  iny                                       ;; @@439c 89
  6809  439d 20ad22                              jsr indlow                               ; (link+#chr)-line_sa must be <256 ;; @@439d 89
  6810  43a0 6900                                adc #0                                    ;; @@43a0 89
  6811  43a2 a8                                  tay                                       ;; @@43a2 89
  6812  43a3 38                                  sec                                       ;; @@43a3 89
  6813  43a4 6b                                  tza                                       ;; @@43a4 89
  6814  43a5 e561                                sbc lowtr                                 ;; @@43a5 89
  6815  43a7 98                                  tya                                       ;; @@43a7 89
  6816  43a8 e562                                sbc lowtr+1                               ;; @@43a8 89
  6817  43aa d3c332                              +lbne errlen                             ; error, line > 255 characters ;; @@43aa 89
  6818                           ;; @@43ad 89
  6819  43ad 18                                  clc                                      ; now check for sufficient memory ;; @@43ad 89
  6820  43ae a483                                ldy text_top+1                            ;; @@43ae 89
  6821  43b0 a50d                                lda count                                 ;; @@43b0 89
  6822  43b2 6582                                adc text_top                              ;; @@43b2 89
  6823  43b4 9001                                bcc _local_1088_1                         ;; @@43b4 89
  6824  43b6 c8                                  iny                                       ;; @@43b6 89
  6825  43b7 ccd002             _local_1088_1    cpy max_mem_0+1                           ;; @@43b7 89
  6826  43ba 9009                                bcc _local_1088_2                        ; result is less than top-of-memory: ok ;; @@43ba 89
  6827  43bc d382ea                              +lbne omerr                              ; msb >  top, overflow ;; @@43bc 89
  6828  43bf cdcf02                              cmp max_mem_0                            ; msb's the same, test lsb's ;; @@43bf 89
  6829  43c2 b37cea                              +lbcs omerr                              ; lsb >= top, overflow ;; @@43c2 89
  6830  43c5 8582               _local_1088_2    sta text_top                              ;; @@43c5 89
  6831  43c7 8483                                sty text_top+1                           ; set new top of text pointer ;; @@43c7 89
  6832  43c9 201741                              jsr moveup                               ; make room ;; @@43c9 89
  6833  43cc 8013                                bra _local_1088_20                       ; go copy string2 into area ;; @@43cc 89
  6834                           ;; @@43ce 89
  6835  43ce 850d               _local_1088_10   sta count                                ; Move memory down for smaller string2 ;; @@43ce 89
  6836  43d0 a483                                ldy text_top+1                            ;; @@43d0 89
  6837  43d2 a582                                lda text_top                              ;; @@43d2 89
  6838  43d4 38                                  sec                                       ;; @@43d4 89
  6839  43d5 e50d                                sbc count                                 ;; @@43d5 89
  6840  43d7 b001                                bcs _local_1088_11                        ;; @@43d7 89
  6841  43d9 88                                  dey                                       ;; @@43d9 89
  6842  43da 8582               _local_1088_11   sta text_top                              ;; @@43da 89
  6843  43dc 8483                                sty text_top+1                           ; set new top of text pointer ;; @@43dc 89
  6844  43de 20c440                              jsr movedown                             ; squish out excess space ;; @@43de 89
  6845                           ;; @@43e1 89
  6846  43e1 a58d               _local_1088_20   lda fstr2+2                              ; Copy string2 into text ;; @@43e1 89
  6847  43e3 f015                                beq _local_1088_40                       ; branch if null, nothing to copy ;; @@43e3 89
  6848  43e5 8dda02                              sta find_count                           ; how many characters to copy ;; @@43e5 89
  6849  43e8 a261                                ldx #lowtr                                ;; @@43e8 89
  6850  43ea a43f                                ldy fndpnt                               ; index into text ;; @@43ea 89
  6851  43ec a300                                ldz #0                                   ; index into string2 ;; @@43ec 89
  6852  43ee b28b               _local_1088_30   lda (fstr2),z                            ; ind okay- buffer ;; @@43ee 89
  6853  43f0 200c23                              jsr sta_far_ram0                         ; do the copy ;; @@43f0 89
  6854  43f3 c8                                  iny                                       ;; @@43f3 89
  6855  43f4 1b                                  inz                                       ;; @@43f4 89
  6856  43f5 ceda02                              dec find_count                            ;; @@43f5 89
  6857  43f8 d0f4                                bne _local_1088_30                        ;; @@43f8 89
  6858                           ;; @@43fa 89
  6859  43fa 20b930             _local_1088_40   jsr link_program                         ; relink program ;; @@43fa 89
  6860  43fd 18                                  clc                                       ;; @@43fd 89
  6861  43fe a53f                                lda fndpnt                               ; place find position after new text ;; @@43fe 89
  6862  4400 658d                                adc fstr2+2                               ;; @@4400 89
  6863  4402 3a                                  dec                                       ;; @@4402 89
  6864  4403 853f                                sta fndpnt                                ;; @@4403 89
  6865  4405 83fcfe                              +lbra find_loop_2                        ; and resume searching ;; @@4405 89
  6866                           ;; @@4408 89
  6867                          ; .page ;; @@4408 89
  6868                          find_exit                                                  ;; @@4408 90
  6869  4408 20f737                              jsr crdo                                 ; normal exit ;; @@4408 90
  6870  440b 68                                  pla                                       ;; @@440b 90
  6871  440c 8555                                sta helper                               ; restore token highlight status ;; @@440c 90
  6872  440e 5755                                rmb5 helper                              ; remove 'find' flag ;; @@440e 90
  6873  4410 830dfb                              +lbra direct_mode_exit                   ; done ;; @@4410 90
  6874                           ;; @@4413 90
  6875                           ;; @@4413 90
  6876                           ;; @@4413 90
  6877                          find_omerr                                                ; out of memory ;; @@4413 90
  6878  4413 a210                                ldx #errom                                ;; @@4413 90
  6879  4415 2c                                  !text $2c                                 ;; @@4415 90
  6880                          find_errlen                                               ; string too long ;; @@4416 90
  6881  4416 a217                                ldx #errls                                ;; @@4416 90
  6882  4418 38                                  sec                                       ;; @@4418 90
  6883  4419 89                                  !text $89                                 ;; @@4419 90
  6884                          find_break                                                ; stop key break ;; @@441a 90
  6885  441a 18                                  clc                                       ;; @@441a 90
  6886  441b 68                                  pla                                       ;; @@441b 90
  6887  441c 8555                                sta helper                               ; restore token highlight status ;; @@441c 90
  6888  441e 5755                                rmb5 helper                              ; remove 'find' flag ;; @@441e 90
  6889  4420 93aee8                              +lbcc break_exit                         ; [910925] ;; @@4420 90
  6890  4423 8329ea                              +lbra error                               ;; @@4423 90
  6891                           ;; @@4426 90
  6892                           ;; @@4426 90
  6893                          delimit_string                                            ; command is in buffer, .x = ptr to strptr ;; @@4426 90
  6894  4426 8564                                sta match                                ; delimiter character ;; @@4426 90
  6895  4428 a53d                                lda txtptr                               ; point to first character in string ;; @@4428 90
  6896  442a 1a                                  inc                                      ; (never wraps- string in input buffer) ;; @@442a 90
  6897  442b 9588                                sta fstr1,x                              ; set pointer to string data ;; @@442b 90
  6898  442d a53e                                lda txtptr+1                              ;; @@442d 90
  6899  442f 9589                                sta fstr1+1,x                             ;; @@442f 90
  6900  4431 a9ff                                lda #$ff                                 ; set string length ;; @@4431 90
  6901  4433 958a                                sta fstr1+2,x                             ;; @@4433 90
  6902                           ;; @@4435 90
  6903  4435 f68a               _local_1089_10   inc fstr1+2,x                             ;; @@4435 90
  6904  4437 20a540                              jsr chargt                               ; build string ;; @@4437 90
  6905  443a f30dea                              +lbeq snerr                              ; error if eol encountered inside string ;; @@443a 90
  6906  443d c564                                cmp match                                 ;; @@443d 90
  6907  443f d0f4                                bne _local_1089_10                       ; continue until matching delimiter found ;; @@443f 90
  6908  4441 60                                  rts                                       ;; @@4441 90
  6909                           ;; @@4442 90
  6910                          ;.end ;; @@4442 90
  6911                          ; .page ;; @@4442 90
  6912                          ; .subttl  PUDEF ;; @@4442 90
  6913                           ;; @@4442 90
  6914  4442 20675b             puctrl           jsr frmstr                               ; do frmevl,frestr. return with a=len, index=~string ;; @@4442 91
  6915  4445 a8                                  tay                                       ;; @@4445 91
  6916  4446 88                                  dey                                       ;; @@4446 91
  6917  4447 c004                                cpy #4                                    ;; @@4447 91
  6918  4449 b3b20d                              +lbcs fcerr                              ; len > 4 is illegal value error ;; @@4449 91
  6919                           ;; @@444c 91
  6920  444c 20d522             _local_1090_1    jsr indin1_ram1                          ; lda (index),y ;; @@444c 91
  6921  444f 99d411                              sta puchrs,y                              ;; @@444f 91
  6922  4452 88                                  dey                                       ;; @@4452 91
  6923  4453 10f7                                bpl _local_1090_1                         ;; @@4453 91
  6924  4455 60                                  rts                                       ;; @@4455 91
  6925                           ;; @@4456 91
  6926                          ;.end ;; @@4456 91
  6927                          ; .page ;; @@4456 91
  6928                          ; .subttl  TRAP ;; @@4456 91
  6929                           ;; @@4456 91
  6930                          trap                                                       ;; @@4456 92
  6931                          ; jsr errdir ;why not????      [910925] ;; @@4456 92
  6932  4456 208522                              jsr chrgot                               ; if no #, means 'turn off trap' ;; @@4456 92
  6933  4459 f007                                beq _local_1091_10                        ;; @@4459 92
  6934  445b 208a5d                              jsr getwrd                                ;; @@445b 92
  6935  445e 8cca02                              sty trapno                                ;; @@445e 92
  6936  4461 2c                                  !text $2c                                 ;; @@4461 92
  6937                           ;; @@4462 92
  6938  4462 a9ff               _local_1091_10   lda #$ff                                 ; flag no trap ;; @@4462 92
  6939  4464 8dcb02                              sta trapno+1                              ;; @@4464 92
  6940  4467 60                                  rts                                       ;; @@4467 92
  6941                           ;; @@4468 92
  6942                          ;.end ;; @@4468 92
  6943                           ;; @@4468 92
  6944                          ; .page ;; @@4468 92
  6945                          ; .subttl  RESUME ;; @@4468 92
  6946                           ;; @@4468 92
  6947                          ; RESUME command ;; @@4468 92
  6948                          ; ;; @@4468 92
  6949                          ; Used to resume execution following a TRAPped error. ;; @@4468 92
  6950                          ; ;; @@4468 92
  6951                          ; Syntax: RESUME [line_number | NEXT] ;; @@4468 92
  6952                          ; ;; @@4468 92
  6953                          ; Can take the following forms: ;; @@4468 92
  6954                          ; ;; @@4468 92
  6955                          ; RESUME   :resume executing at the statement which caused ;; @@4468 92
  6956                          ;     the error. ;; @@4468 92
  6957                          ; RESUME NEXT  :resume execution at the statement FOLLOWING ;; @@4468 92
  6958                          ;     the statement which caused the error. ;; @@4468 92
  6959                          ; RESUME line_number :resume at the specified line number. ;; @@4468 92
  6960                           ;; @@4468 92
  6961                           ;; @@4468 92
  6962  4468 20e258             resume           jsr errdir                               ; no direct mode ;; @@4468 93
  6963  446b aec902                              ldx errlin+1                             ; is there an error to resume from? ;; @@446b 93
  6964  446e e8                                  inx                                       ;; @@446e 93
  6965  446f f077                                beq rescnt                               ; can't resume! ;; @@446f 93
  6966  4471 208522                              jsr chrgot                               ; look for arguments ;; @@4471 93
  6967  4474 f046                                beq resswp                               ; no arg's...restart err'd line ;; @@4474 93
  6968  4476 9039                                bcc _local_1092_3                        ; numeric argument ;; @@4476 93
  6969  4478 c982                                cmp #next_token                          ; only other choice is 'next' ;; @@4478 93
  6970  447a d3cde9                              +lbne snerr                              ; if not, syntax error ;; @@447a 93
  6971                           ;; @@447d 93
  6972  447d 20bc44                              jsr resswp                               ; resume execution with next stm't ;; @@447d 93
  6973  4480 a000                                ldy #0                                    ;; @@4480 93
  6974  4482 20c522                              jsr indtxt                                ;; @@4482 93
  6975  4485 d024                                bne _local_1092_2                        ; must be a ':' ;; @@4485 93
  6976  4487 c8                                  iny                                      ; must be a null,get next line ;; @@4487 93
  6977  4488 20c522                              jsr indtxt                               ; make sure its not end-of-text ;; @@4488 93
  6978  448b d007                                bne _local_1092_1                         ;; @@448b 93
  6979  448d c8                                  iny                                       ;; @@448d 93
  6980  448e 20c522                              jsr indtxt                                ;; @@448e 93
  6981  4491 f3b9e9                              +lbeq ready                              ; 2 nulls, eot. bye! ;; @@4491 93
  6982                           ;; @@4494 93
  6983  4494 a003               _local_1092_1    ldy #3                                   ; new line, update pointers ;; @@4494 93
  6984  4496 20c522                              jsr indtxt                                ;; @@4496 93
  6985  4499 853b                                sta curlin                                ;; @@4499 93
  6986  449b c8                                  iny                                       ;; @@449b 93
  6987  449c 20c522                              jsr indtxt                                ;; @@449c 93
  6988  449f 853c                                sta curlin+1                              ;; @@449f 93
  6989  44a1 98                                  tya                                       ;; @@44a1 93
  6990  44a2 18                                  clc                                       ;; @@44a2 93
  6991  44a3 653d                                adc txtptr                                ;; @@44a3 93
  6992  44a5 853d                                sta txtptr                                ;; @@44a5 93
  6993  44a7 9002                                bcc _local_1092_2                         ;; @@44a7 93
  6994  44a9 e63e                                inc txtptr+1                              ;; @@44a9 93
  6995  44ab 208322             _local_1092_2    jsr chrget                               ; skip over this character, into body of statement ;; @@44ab 93
  6996  44ae 8397f0                              +lbra data                               ; advance until null or ':', then rts ;; @@44ae 93
  6997                           ;; @@44b1 93
  6998                           ;; @@44b1 93
  6999  44b1 208a5d             _local_1092_3    jsr getwrd                               ; resnum. numeric argument ;; @@44b1 93
  7000  44b4 8517                                sta linnum+1                              ;; @@44b4 93
  7001  44b6 20d644                              jsr resend                                ;; @@44b6 93
  7002  44b9 8363f8                              +lbra luk4it                              ;; @@44b9 93
  7003                           ;; @@44bc 93
  7004                           ;; @@44bc 93
  7005  44bc adcd02             resswp           lda errtxt                               ; backup one so chrget will work ;; @@44bc 94
  7006  44bf d003                                bne _local_1093_10                        ;; @@44bf 94
  7007  44c1 cece02                              dec errtxt+1                              ;; @@44c1 94
  7008  44c4 cecd02             _local_1093_10   dec errtxt                                ;; @@44c4 94
  7009                           ;; @@44c7 94
  7010  44c7 a201                                ldx #1                                    ;; @@44c7 94
  7011  44c9 bdc802             _local_1093_20   lda errlin,x                             ; restore line# ;; @@44c9 94
  7012  44cc 953b                                sta curlin,x                              ;; @@44cc 94
  7013  44ce bdcd02                              lda errtxt,x                             ; restore text pointer to statement ;; @@44ce 94
  7014  44d1 953d                                sta txtptr,x                              ;; @@44d1 94
  7015  44d3 ca                                  dex                                       ;; @@44d3 94
  7016  44d4 10f3                                bpl _local_1093_20                        ;; @@44d4 94
  7017                           ;; @@44d6 94
  7018                           ;; @@44d6 94
  7019  44d6 aecc02             resend           ldx tmptrp                               ; restore trap line to allow traps again ;; @@44d6 95
  7020  44d9 8ecb02                              stx trapno+1                              ;; @@44d9 95
  7021                          error_clear                                                ;; @@44dc 95
  7022  44dc a2ff                                ldx #$ff                                  ;; @@44dc 95
  7023  44de 8ec702                              stx errnum                               ; reset error status- he's saying he's fixed it ;; @@44de 95
  7024  44e1 8ec802                              stx errlin                                ;; @@44e1 95
  7025  44e4 8ec902                              stx errlin+1                             ; flag 'no further resumes until next error' ;; @@44e4 95
  7026  44e7 60                                  rts                                       ;; @@44e7 95
  7027                           ;; @@44e8 95
  7028                           ;; @@44e8 95
  7029  44e8 a21f               rescnt           ldx #errcr                                ;; @@44e8 95
  7030  44ea 8362e9                              +lbra error                               ;; @@44ea 95
  7031                           ;; @@44ed 95
  7032                          ;.end ;; @@44ed 95
  7033                          ; .page ;; @@44ed 95
  7034                          ; .subttl  DO  LOOP  UNTIL  WHILE  EXIT ;; @@44ed 95
  7035                           ;; @@44ed 95
  7036  44ed a001               do               ldy #1                                    ;; @@44ed 95
  7037  44ef b93d00             _local_1094_1    lda txtptr,y                             ; save current pointers for stack entry ;; @@44ef 95
  7038  44f2 997911                              sta tmptxt,y                              ;; @@44f2 95
  7039  44f5 b93b00                              lda curlin,y                              ;; @@44f5 95
  7040  44f8 997b11                              sta tmplin,y                              ;; @@44f8 95
  7041  44fb 88                                  dey                                       ;; @@44fb 95
  7042  44fc 10f1                                bpl _local_1094_1                         ;; @@44fc 95
  7043                           ;; @@44fe 95
  7044  44fe 208522                              jsr chrgot                               ; look for 'while' or 'until' ;; @@44fe 95
  7045  4501 f01b                                beq doyes                                ; unconditional ;; @@4501 95
  7046  4503 c9fc                                cmp #until_token                          ;; @@4503 95
  7047  4505 f010                                beq do10                                  ;; @@4505 95
  7048  4507 c9fd                                cmp #while_token                          ;; @@4507 95
  7049  4509 d03f                                bne snrjmp                                ;; @@4509 95
  7050                           ;; @@450b 95
  7051                           ;; @@450b 95
  7052                          ;  Here for WHILE ;; @@450b 95
  7053                           ;; @@450b 95
  7054  450b 20cf45                              jsr frmjmp                                ;; @@450b 95
  7055  450e a563                                lda facexp                                ;; @@450e 95
  7056  4510 d00c                                bne doyes                                ; conditional evaluated true ;; @@4510 95
  7057                           ;; @@4512 95
  7058  4512 208522             dono             jsr chrgot                                ;; @@4512 96
  7059  4515 8039                                bra fnd010                               ; advance to end of block, do rts ;; @@4515 96
  7060                           ;; @@4517 96
  7061                           ;; @@4517 96
  7062                          ;  Here for UNTIL ;; @@4517 96
  7063                           ;; @@4517 96
  7064  4517 20cf45             do10             jsr frmjmp                                ;; @@4517 96
  7065  451a a563                                lda facexp                                ;; @@451a 96
  7066  451c d0f4                                bne dono                                  ;; @@451c 96
  7067                           ;; @@451e 96
  7068  451e a905               doyes            lda #5                                   ; 'do' needs 5 bytes on the run-time stack ;; @@451e 96
  7069  4520 209431                              jsr getstk                                ;; @@4520 96
  7070  4523 a004                                ldy #4                                   ; ..now stuff those 5 bytes! ;; @@4523 96
  7071  4525 ad7a11                              lda tmptxt+1                              ;; @@4525 96
  7072  4528 917c                                sta (tos),y                              ; (common area) ;; @@4528 96
  7073  452a 88                                  dey                                       ;; @@452a 96
  7074  452b ad7911                              lda tmptxt                                ;; @@452b 96
  7075  452e 917c                                sta (tos),y                              ; (common area) ;; @@452e 96
  7076  4530 88                                  dey                                       ;; @@4530 96
  7077  4531 ad7c11                              lda tmplin+1                              ;; @@4531 96
  7078  4534 917c                                sta (tos),y                              ; (common area) ;; @@4534 96
  7079  4536 88                                  dey                                       ;; @@4536 96
  7080  4537 ad7b11                              lda tmplin                                ;; @@4537 96
  7081  453a 917c                                sta (tos),y                              ; (common area) ;; @@453a 96
  7082  453c 88                                  dey                                       ;; @@453c 96
  7083  453d a9eb                                lda #do_token                             ;; @@453d 96
  7084  453f 917c                                sta (tos),y                              ; (common area) ;; @@453f 96
  7085  4541 60                                  rts                                       ;; @@4541 96
  7086                           ;; @@4542 96
  7087                           ;; @@4542 96
  7088                          ;  Here for EXIT ;; @@4542 96
  7089                           ;; @@4542 96
  7090  4542 20a045             exit             jsr popdgo                               ; pop do entry off stack ;; @@4542 96
  7091  4545 208522                              jsr chrgot                                ;; @@4545 96
  7092  4548 f006                                beq fnd010                                ;; @@4548 96
  7093  454a 83fde8             snrjmp           +lbra snerr                               ;; @@454a 96
  7094                           ;; @@454d 96
  7095                           ;; @@454d 96
  7096                           ;; @@454d 96
  7097                          ;  Find end of current block ;; @@454d 96
  7098                           ;; @@454d 96
  7099  454d 208322             fndend           jsr chrget                                ;; @@454d 96
  7100                           ;; @@4550 96
  7101  4550 f017               fnd010           beq _local_1095_20                       ; end of statement ;; @@4550 96
  7102  4552 c9ec                                cmp #loop_token                           ;; @@4552 96
  7103  4554 f3f1ef                              +lbeq data                               ; a hit!  read to end of statement, rts ;; @@4554 96
  7104  4557 c922                                cmp #'"'                                 ; quote ;; @@4557 96
  7105  4559 f009                                beq _local_1095_10                        ;; @@4559 96
  7106  455b c9eb                                cmp #do_token                             ;; @@455b 96
  7107  455d d0ee                                bne fndend                               ; keep looking ;; @@455d 96
  7108  455f 204d45                              jsr fndend                               ; recursivly ;; @@455f 96
  7109  4562 80ae                                bra dono                                 ; do a chrgot, go to fnd010 ;; @@4562 96
  7110                           ;; @@4564 96
  7111                           ;; @@4564 96
  7112  4564 203236             _local_1095_10   jsr un_quote                             ; look for terminating quote, or end of statement ;; @@4564 96
  7113  4567 d0e4                                bne fndend                               ; character after quote wasn't terminator, keep going ;; @@4567 96
  7114                           ;; @@4569 96
  7115  4569 c93a               _local_1095_20   cmp #':'                                 ; end of line or end of stmt? ;; @@4569 96
  7116  456b f0e0                                beq fndend                               ; just stmt, keep going ;; @@456b 96
  7117  456d 7f7e3f                              bbr7 runmod,fnderr                       ; if direct mode, not found error ;; @@456d 96
  7118  4570 a002                                ldy #2                                    ;; @@4570 96
  7119  4572 20c522                              jsr indtxt                               ; end of text? ;; @@4572 96
  7120  4575 f038                                beq fnderr                               ; 'fraid so ;; @@4575 96
  7121  4577 c8                                  iny                                      ; y=3 ;; @@4577 96
  7122  4578 20c522                              jsr indtxt                               ; update pointers ;; @@4578 96
  7123  457b 853b                                sta curlin                                ;; @@457b 96
  7124  457d c8                                  iny                                       ;; @@457d 96
  7125  457e 20c522                              jsr indtxt                                ;; @@457e 96
  7126  4581 853c                                sta curlin+1                              ;; @@4581 96
  7127  4583 98                                  tya                                       ;; @@4583 96
  7128  4584 18                                  clc                                       ;; @@4584 96
  7129  4585 653d                                adc txtptr                                ;; @@4585 96
  7130  4587 853d                                sta txtptr                                ;; @@4587 96
  7131  4589 90c2                                bcc fndend                                ;; @@4589 96
  7132  458b e63e                                inc txtptr+1                              ;; @@458b 96
  7133  458d 80be                                bra fndend                                ;; @@458d 96
  7134                           ;; @@458f 96
  7135                          ; .page ;; @@458f 96
  7136  458f f035               loop             beq popngo                               ; no conditionals, just do it ;; @@458f 97
  7137  4591 c9fd                                cmp #while_token                          ;; @@4591 97
  7138  4593 f02c                                beq loop10                                ;; @@4593 97
  7139  4595 c9fc                                cmp #until_token                          ;; @@4595 97
  7140  4597 d0b1                                bne snrjmp                                ;; @@4597 97
  7141                           ;; @@4599 97
  7142                          ;  Here for UNTIL ;; @@4599 97
  7143                           ;; @@4599 97
  7144  4599 20cf45                              jsr frmjmp                                ;; @@4599 97
  7145  459c a563                                lda facexp                                ;; @@459c 97
  7146  459e f026                                beq popngo                               ; false, do it again! ;; @@459e 97
  7147                           ;; @@45a0 97
  7148  45a0 a9eb               popdgo           lda #do_token                            ; pop, but don't go ;; @@45a0 97
  7149  45a2 204331                              jsr search                                ;; @@45a2 97
  7150  45a5 d015                                bne poperr                               ; branch if not found ;; @@45a5 97
  7151  45a7 20e631                              jsr movfnd                                ;; @@45a7 97
  7152  45aa a005                                ldy #5                                    ;; @@45aa 97
  7153  45ac 8340ec                              +lbra rlsstk                              ;; @@45ac 97
  7154                           ;; @@45af 97
  7155                           ;; @@45af 97
  7156                          fnderr                                                     ;; @@45af 97
  7157  45af ad7b11                              lda tmplin                               ; loop not found error: must make curlin match oldtxt ;; @@45af 97
  7158  45b2 ae7c11                              ldx tmplin+1                              ;; @@45b2 97
  7159  45b5 853b                                sta curlin                                ;; @@45b5 97
  7160  45b7 863c                                stx curlin+1                              ;; @@45b7 97
  7161                           ;; @@45b9 97
  7162  45b9 a220                                ldx #errlnf                               ;; @@45b9 97
  7163  45bb 2c                                  !text $2c                                 ;; @@45bb 97
  7164                          poperr                                                     ;; @@45bc 97
  7165  45bc a221                                ldx #errlwd                              ; loop without do ;; @@45bc 97
  7166  45be 838ee8                              +lbra error                               ;; @@45be 97
  7167                           ;; @@45c1 97
  7168                           ;; @@45c1 97
  7169                           ;; @@45c1 97
  7170                          ;  Here for WHILE ;; @@45c1 97
  7171                           ;; @@45c1 97
  7172                          loop10                                                     ;; @@45c1 97
  7173  45c1 20cf45                              jsr frmjmp                                ;; @@45c1 97
  7174  45c4 f0da                                beq popdgo                               ; false, exit ;; @@45c4 97
  7175                          popngo                                                     ;; @@45c6 97
  7176  45c6 63d8ff                              bsr popdgo                                ;; @@45c6 97
  7177                          ; dey ;; @@45c9 97
  7178                          ; lda (fndpnt),y ;restore pointers ;; @@45c9 97
  7179                          ; sta txtptr+1 ;; @@45c9 97
  7180                          ; dey ;; @@45c9 97
  7181                          ; lda (fndpnt),y ;; @@45c9 97
  7182                          ; sta txtptr ;; @@45c9 97
  7183                          ; dey ;; @@45c9 97
  7184                          ; lda (fndpnt),y ;; @@45c9 97
  7185  45c9 204279                              jsr retpat                               ; (** 01/18/84 fixes 'loop' to a direct mode 'do') ;; @@45c9 97
  7186                          ; lda (fndpnt),y ;; @@45cc 97
  7187                          ; sta curlin ;; @@45cc 97
  7188  45cc 831eff                              +lbra do                                  ;; @@45cc 97
  7189                           ;; @@45cf 97
  7190                          frmjmp                                                     ;; @@45cf 97
  7191  45cf 208322                              jsr chrget                                ;; @@45cf 97
  7192  45d2 831a07                              +lbra frmevl                              ;; @@45d2 97
  7193                           ;; @@45d5 97
  7194                          ;.end ;; @@45d5 97
  7195                          ; .page ;; @@45d5 97
  7196                          ; .subttl  KEY ;; @@45d5 97
  7197                           ;; @@45d5 97
  7198                          ;************************************************************** ;; @@45d5 97
  7199                          ; ;; @@45d5 97
  7200                          ;   KEY  Programmable Key Functions    [900725] ;; @@45d5 97
  7201                          ; ;; @@45d5 97
  7202                          ;************************************************************** ;; @@45d5 97
  7203                           ;; @@45d5 97
  7204  45d5 f033               key              beq Key_List                             ; KEY ? yes- no args ;; @@45d5 97
  7205                           ;; @@45d7 97
  7206  45d7 a6d1               _local_1096_1    ldx _kyndx                               ; is function key buffered? ;; @@45d7 97
  7207  45d9 d0fc                                bne _local_1096_1                        ; yes- hang until IRQ finishes processing it ???? ;; @@45d9 97
  7208                           ;; @@45db 97
  7209  45db c991                                cmp #on_token                            ; KEY ON ? ;; @@45db 97
  7210  45dd d004                                bne _local_1096_10                        ;; @@45dd 97
  7211  45df 57f7                                rmb5 _locks                              ; yes- reset Editor's lock bit ;; @@45df 97
  7212  45e1 8024                                bra _local_1096_30                       ; exit ;; @@45e1 97
  7213                           ;; @@45e3 97
  7214  45e3 c993               _local_1096_10   cmp #load_token                          ; KEY LOAD <filename>[,D#,U#] ;; @@45e3 97
  7215  45e5 f3d400                              +lbeq Key_load                            ;; @@45e5 97
  7216                           ;; @@45e8 97
  7217  45e8 c994                                cmp #save_token                          ; KEY SAVE <filename>[,D#,U#] ;; @@45e8 97
  7218  45ea f32f01                              +lbeq Key_Save                            ;; @@45ea 97
  7219                           ;; @@45ed 97
  7220  45ed c98c                                cmp #restore_token                       ; KEY RESTORE ?      [910925] ;; @@45ed 97
  7221  45ef d007                                bne _local_1096_20                       ; no ;; @@45ef 97
  7222  45f1 57f7                                rmb5 _locks                              ; yes- reset Editor's lock bit (enable keys) ;; @@45f1 97
  7223  45f3 20b546                              jsr key_restore                          ; init key definitions ;; @@45f3 97
  7224  45f6 800f                                bra _local_1096_30                       ; exit ;; @@45f6 97
  7225                           ;; @@45f8 97
  7226  45f8 c9fe               _local_1096_20   cmp #esc_command_token                   ; KEY OFF ? ;; @@45f8 97
  7227  45fa d39e00                              +lbne Key_Change                         ; no- must be new key definition ;; @@45fa 97
  7228  45fd 208322                              jsr chrget                                ;; @@45fd 97
  7229  4600 c924                                cmp #off_token                            ;; @@4600 97
  7230  4602 d345e8                              +lbne snerr                              ; no- bad syntax ;; @@4602 97
  7231  4605 d7f7                                smb5 _locks                              ; yes- set Editor's lock bit ;; @@4605 97
  7232  4607 8379dc             _local_1096_30   +lbra chrget                             ; exit ;; @@4607 97
  7233                           ;; @@460a 97
  7234                          ; .page ;; @@460a 97
  7235                          ;************************************************************** ;; @@460a 97
  7236                          ; ;; @@460a 97
  7237                          ;   Key_List  List all function key definitions ;; @@460a 97
  7238                          ; ;; @@460a 97
  7239                          ;************************************************************** ;; @@460a 97
  7240                           ;; @@460a 97
  7241                          Key_List                                                   ;; @@460a 98
  7242  460a a200                                ldx #0                                   ; display all key definitions ;; @@460a 98
  7243  460c a000                                ldy #0                                    ;; @@460c 98
  7244                           ;; @@460e 98
  7245  460e e8                 lstky1           inx                                      ; get key number = 1-16 ;; @@460e 98
  7246  460f bdff0f                              lda _pky_lengths-1,x                     ; get key size ;; @@460f 98
  7247  4612 f05a                                beq lstest                               ; skip if key not defined ;; @@4612 98
  7248  4614 8577                                sta keysiz                               ; save size ;; @@4614 98
  7249  4616 8676                                stx z_p_temp_1                           ; save key number ;; @@4616 98
  7250                           ;; @@4618 98
  7251  4618 5a                                  phy                                       ;; @@4618 98
  7252  4619 a203                                ldx #3                                    ;; @@4619 98
  7253  461b bd8c46             _local_1097_20   lda preamb,x                             ; print key preamble: ;; @@461b 98
  7254  461e 20d2ff                              jsr _bsout                                ;; @@461e 98
  7255  4621 ca                                  dex                                      ; 'KEY ' ;; @@4621 98
  7256  4622 10f7                                bpl _local_1097_20                        ;; @@4622 98
  7257  4624 a676                                ldx z_p_temp_1                           ; key number ;; @@4624 98
  7258  4626 a900                                lda #0                                    ;; @@4626 98
  7259  4628 207f64                              jsr linprt                                ;; @@4628 98
  7260  462b a92c                                lda #','                                  ;; @@462b 98
  7261  462d 20d2ff                              jsr _bsout                               ; comma ;; @@462d 98
  7262                           ;; @@4630 98
  7263  4630 7a                                  ply                                       ;; @@4630 98
  7264  4631 a207                                ldx #7                                   ; (length of 'keydat' string) ;; @@4631 98
  7265  4633 b91010             lsloop           lda _pky_buffer,y                        ; print key definition ;; @@4633 99
  7266  4636 c8                                  iny                                       ;; @@4636 99
  7267  4637 48                                  pha                                      ; save character ;; @@4637 99
  7268  4638 da                                  phx                                      ; save position in output string ;; @@4638 99
  7269                           ;; @@4639 99
  7270  4639 a204                                ldx #4                                   ; check for special (non-printable) characters ;; @@4639 99
  7271  463b dd9646             _local_1098_50   cmp keychr-1,x                            ;; @@463b 99
  7272  463e f033                                beq list_special                         ; yes, display it as 'CHR$(...)' ;; @@463e 99
  7273  4640 ca                                  dex                                       ;; @@4640 99
  7274  4641 d0f8                                bne _local_1098_50                        ;; @@4641 99
  7275                           ;; @@4643 99
  7276  4643 fa                                  plx                                      ; restore position ;; @@4643 99
  7277  4644 e008                                cpx #8                                    ;; @@4644 99
  7278  4646 9007                                bcc _local_1098_60                       ; 1st time thru- display leading quote ;; @@4646 99
  7279  4648 d00a                                bne _local_1098_70                       ; previous was a character- no additions needed ;; @@4648 99
  7280  464a a92b                                lda #'+'                                 ; add since previous was quote or return ;; @@464a 99
  7281  464c 20d2ff                              jsr _bsout                                ;; @@464c 99
  7282  464f a922               _local_1098_60   lda #'"'                                  ;; @@464f 99
  7283  4651 20d2ff                              jsr _bsout                               ; add leading quote ;; @@4651 99
  7284  4654 68                 _local_1098_70   pla                                      ; restore character ;; @@4654 99
  7285  4655 20d2ff                              jsr _bsout                               ; display it ;; @@4655 99
  7286  4658 a209                                ldx #9                                   ; mark normal character ;; @@4658 99
  7287                           ;; @@465a 99
  7288  465a c677               lstnd            dec keysiz                                ;; @@465a 100
  7289  465c d0d5                                bne lsloop                               ; loop to end of definition ;; @@465c 100
  7290  465e e009                                cpx #9                                    ;; @@465e 100
  7291  4660 9005                                bcc _local_1099_10                       ; skip if previous not normal character ;; @@4660 100
  7292  4662 a922                                lda #'"'                                  ;; @@4662 100
  7293  4664 20d2ff                              jsr _bsout                               ; add ending quote ;; @@4664 100
  7294                           ;; @@4667 100
  7295  4667 a98d               _local_1099_10   lda #$8d                                  ;; @@4667 100
  7296  4669 20d2ff                              jsr _bsout                               ; add ending return (shifted) ;; @@4669 100
  7297                           ;; @@466c 100
  7298  466c a676                                ldx z_p_temp_1                           ; key number ;; @@466c 100
  7299  466e e010               lstest           cpx #number_fkeys                         ;; @@466e 101
  7300  4670 d09c                                bne lstky1                               ; ...loop until done all keys ;; @@4670 101
  7301  4672 60                                  rts                                       ;; @@4672 101
  7302                           ;; @@4673 101
  7303                           ;; @@4673 101
  7304                          list_special                                               ;; @@4673 101
  7305  4673 fa                                  plx                                      ; restore .x ;; @@4673 101
  7306  4674 bd8d46             _local_1100_10   lda keydat-3,x                           ; display something like  ' "+CHR$( ' ;; @@4674 101
  7307  4677 20d2ff                              jsr _bsout                                ;; @@4677 101
  7308  467a ca                                  dex                                       ;; @@467a 101
  7309  467b e003                                cpx #3                                    ;; @@467b 101
  7310  467d b0f5                                bcs _local_1100_10                        ;; @@467d 101
  7311  467f 68                                  pla                                      ; restore character ;; @@467f 101
  7312  4680 203779                              jsr prtdec                               ; display decimal value of chr in .a ;; @@4680 101
  7313  4683 a929                                lda #')'                                 ; finish off with closing paren. ;; @@4683 101
  7314  4685 20d2ff                              jsr _bsout                                ;; @@4685 101
  7315  4688 a208                                ldx #8                                   ; mark end of special ;; @@4688 101
  7316  468a 80ce                                bra lstnd                                ; ..always ;; @@468a 101
  7317                           ;; @@468c 101
  7318                           ;; @@468c 101
  7319  468c 2059454b           preamb           !text " YEK"                             ; key preamble ;; @@468c 102
  7320                           ;; @@4690 102
  7321  4690 28245248432b22     keydat           !text "($RHC+",$22                       ; chr$( string ;; @@4690 102
  7322                           ;; @@4697 102
  7323  4697 0d8d221b           keychr           !text cr,$8d,$22,esc                     ; special KEY chars- return, sft-return, quote, esc ;; @@4697 102
  7324                           ;; @@469b 102
  7325                          ; .page ;; @@469b 102
  7326                          ;************************************************************************ ;; @@469b 102
  7327                          ; ;; @@469b 102
  7328                          ;   Key_Change  Add, Delete or Change function key definition ;; @@469b 102
  7329                          ; ;; @@469b 102
  7330                          ;************************************************************************ ;; @@469b 102
  7331                           ;; @@469b 102
  7332                          Key_Change                                                 ;; @@469b 102
  7333  469b 206c5d                              jsr getbyt                               ; get key number (1-16) ;; @@469b 102
  7334  469e 8676                                stx z_p_temp_1                           ; save key number     [910925] ;; @@469e 102
  7335  46a0 ca                                  dex                                       ;; @@46a0 102
  7336  46a1 e010                                cpx #number_fkeys                         ;; @@46a1 102
  7337  46a3 b3580b                              +lbcs fcerr                              ; exit - key number invalid ;; @@46a3 102
  7338                           ;; @@46a6 102
  7339                          ; stx z_p_temp_1 ;save key number ;; @@46a6 102
  7340  46a6 205b4e                              jsr chkcom                               ; look for comma ;; @@46a6 102
  7341  46a9 20675b                              jsr frmstr                               ; do frmevl, frestr. returns len in .a, addr in 'index' ;; @@46a9 102
  7342  46ac a8                                  tay                                      ; set up for call to do-a-key ;; @@46ac 102
  7343  46ad a901                                lda #1                                   ; tell do-a-key that string is in bank 1 ;; @@46ad 102
  7344  46af 8526                                sta index+2                               ;; @@46af 102
  7345  46b1 a924                                lda #index                               ; now .A points to (adr lo, adr hi, bank #) ;; @@46b1 102
  7346  46b3 a676                                ldx z_p_temp_1                            ;; @@46b3 102
  7347                          ; inx         [910925] ;; @@46b5 102
  7348                          key_restore                                                ;; @@46b5 102
  7349                          ; jsr put_io_in_map ;; @@46b5 102
  7350  46b5 2068ff                              jsr _doakey                              ; re-define the key ;; @@46b5 102
  7351  46b8 b386e7                              +lbcs omerr                              ; bad return (.c=1) ;; @@46b8 102
  7352  46bb 60                                  rts                                      ; ok return  (.c=0) ;; @@46bb 102
  7353                           ;; @@46bc 102
  7354                          ; .page ;; @@46bc 102
  7355                          ;************************************************************************ ;; @@46bc 102
  7356                          ;   Key_Load  Load function key definitions (from disk)   [900725] ;; @@46bc 102
  7357                          ;************************************************************************ ;; @@46bc 102
  7358                           ;; @@46bc 102
  7359                          Key_load                                                   ;; @@46bc 102
  7360  46bc 20c946                              jsr GetLoadChannel                       ; get a channel      [911001] ;; @@46bc 102
  7361  46bf a010                                ldy #>_pky_lengths                        ;; @@46bf 102
  7362  46c1 a900                                lda #<_pky_lengths                        ;; @@46c1 102
  7363  46c3 20fa46                              jsr LoadBlock                            ; load it ;; @@46c3 102
  7364  46c6 835eec                              +lbra list_err                           ; release channel, close file, return to main ;; @@46c6 102
  7365                           ;; @@46c9 102
  7366                           ;; @@46c9 102
  7367                          GetLoadChannel                                            ; Used by KeyLoad and SpriteLoad    [911001] ;; @@46c9 102
  7368  46c9 208322                              jsr chrget                               ; eat LOAD token ;; @@46c9 102
  7369  46cc a9e6                                lda #$e6                                 ; parse:  filename [,U#] [,D#] ;; @@46cc 102
  7370  46ce 202074                              jsr dosprs                               ; (like dopen:  0 0 0 *  * 0 0 1 ) ;; @@46ce 102
  7371  46d1 20dc77                              jsr chk1                                 ; check parameters ;; @@46d1 102
  7372  46d4 a900                                lda #0                                    ;; @@46d4 102
  7373  46d6 8d8311                              sta dossa                                ; setup as dload would (0 = load channel) ;; @@46d6 102
  7374  46d9 201d71                              jsr find_la                              ; find an unused LA to use (cannot use reserved one) ;; @@46d9 102
  7375  46dc a009                                ldy #fopn                                 ;; @@46dc 102
  7376  46de a204                                ldx #4                                    ;; @@46de 102
  7377  46e0 20fd70                              jsr open_file                            ; open the file ;; @@46e0 102
  7378  46e3 b033                                bcs LoadEOF                              ; exit if problem ;; @@46e3 102
  7379  46e5 ae8111                              ldx dosla                                 ;; @@46e5 102
  7380  46e8 20c6ff                              jsr _chkin                               ; get input channel ;; @@46e8 102
  7381  46eb b02b                                bcs LoadEOF                              ; exit if bad?? ;; @@46eb 102
  7382  46ed 20cfff                              jsr _basin                               ; waste dummy load address ;; @@46ed 102
  7383  46f0 20cfff                              jsr _basin                                ;; @@46f0 102
  7384  46f3 20b7ff                              jsr _readst                              ; prevent corruption if there's a problem ;; @@46f3 102
  7385  46f6 d01c                                bne LoadERR                              ; exit if problem ;; @@46f6 102
  7386  46f8 18                                  clc                                       ;; @@46f8 102
  7387  46f9 60                                  rts                                       ;; @@46f9 102
  7388                           ;; @@46fa 102
  7389                          ; .page ;; @@46fa 102
  7390                          LoadBlock                                                  ;; @@46fa 102
  7391  46fa 855a                                sta highds                               ; where to put data ;; @@46fa 102
  7392  46fc 845b                                sty highds+1                              ;; @@46fc 102
  7393                          LoadBlockNext                                              ;; @@46fe 102
  7394  46fe a000                                ldy #0                                    ;; @@46fe 102
  7395  4700 20cfff             _local_1101_10   jsr _basin                               ; read definitions ;; @@4700 102
  7396  4703 915a                                sta (highds),y                            ;; @@4703 102
  7397  4705 20b7ff                              jsr _readst                              ; check channel status ;; @@4705 102
  7398  4708 d00e                                bne LoadEOF                              ; exit if eof or error ;; @@4708 102
  7399  470a 20e1ff                              jsr _stop                                 ;; @@470a 102
  7400  470d f009                                beq LoadEOF                              ; exit if stop key down ;; @@470d 102
  7401  470f c8                                  iny                                       ;; @@470f 102
  7402  4710 d0ee                                bne _local_1101_10                       ; continue up to 1 page maximum ;; @@4710 102
  7403  4712 18                                  clc                                      ; indicate "more" ;; @@4712 102
  7404  4713 60                                  rts                                       ;; @@4713 102
  7405                           ;; @@4714 102
  7406                           ;; @@4714 102
  7407                          LoadERR                                                    ;; @@4714 103
  7408  4714 a21d                                ldx #erload                              ; Load Error ;; @@4714 103
  7409  4716 38                                  sec                                       ;; @@4716 103
  7410  4717 89                                  !text $89                                 ;; @@4717 103
  7411                           ;; @@4718 103
  7412                          LoadEOF                                                    ;; @@4718 103
  7413  4718 18                                  clc                                       ;; @@4718 103
  7414  4719 830bec                              +lbra list_err                           ; release channel, close file, return to main ;; @@4719 103
  7415                           ;; @@471c 103
  7416                          ; .page ;; @@471c 103
  7417                          ;************************************************************************ ;; @@471c 103
  7418                          ;   Key_Save  Save function key definitions (from disk)   [900725] ;; @@471c 103
  7419                          ;************************************************************************ ;; @@471c 103
  7420                           ;; @@471c 103
  7421                          Key_Save                                                   ;; @@471c 103
  7422  471c 202e47                              jsr GetSaveChannel                       ; [910930] ;; @@471c 103
  7423  471f a95a                                lda #highds                              ; set starting & ending addresses ;; @@471f 103
  7424  4721 a010                                ldy #>_pky_lengths                       ; start address & pointer to it ;; @@4721 103
  7425  4723 a200                                ldx #<_pky_lengths                        ;; @@4723 103
  7426  4725 845b                                sty highds+1                              ;; @@4725 103
  7427  4727 865a                                stx highds                                ;; @@4727 103
  7428  4729 c8                                  iny                                      ; end address = start address + 256 + 1 ;; @@4729 103
  7429  472a e8                                  inx                                       ;; @@472a 103
  7430  472b 833d21                              +lbra savenb                             ; [910925] ;; @@472b 103
  7431                          ; jsr _savesp  ;save it ;; @@472e 103
  7432                          ;; clc   ; return no error  ????why not  [910404] ;; @@472e 103
  7433                          ; bra exit_disk_op ; but if direct mode print DOS error  [910404] ;; @@472e 103
  7434                           ;; @@472e 103
  7435                           ;; @@472e 103
  7436                           ;; @@472e 103
  7437                          GetSaveChannel                                            ; Used by KeySave and SpriteSave    [910930] ;; @@472e 103
  7438  472e 208322                              jsr chrget                               ; eat SAVE token ;; @@472e 103
  7439  4731 a966                                lda #$66                                 ; parse:  filename [,U#] [,D#] ;; @@4731 103
  7440  4733 202074                              jsr dosprs                               ; parse options ;; @@4733 103
  7441  4736 20e177                              jsr chk2                                 ; check required parameters ;; @@4736 103
  7442                           ;; @@4739 103
  7443  4739 a009                                ldy #fopn                                ; DOS table offset ;; @@4739 103
  7444  473b a904                                lda #4                                   ; length ;; @@473b 103
  7445  473d 20f276                              jsr sendp                                 ;; @@473d 103
  7446  4740 a900                                lda #sys_bank                            ; set banks ???? buffer in system bank ???? ;; @@4740 103
  7447  4742 a200                                ldx #sys_bank                             ;; @@4742 103
  7448  4744 4c6bff                              jmp _setbank                              ;; @@4744 103
  7449                           ;; @@4747 103
  7450                          ;.end ;; @@4747 103
  7451                          ; .page ;; @@4747 103
  7452                          ; .subttl  BANK ;; @@4747 103
  7453                           ;; @@4747 103
  7454                          ;************************************************************************ ;; @@4747 103
  7455                          ;*  Set Memory Bank for PEEK,POKE,WAIT,BLOAD,BSAVE and SYS,BOOT Commands ;; @@4747 103
  7456                          ;* ;; @@4747 103
  7457                          ;*  Syntax: BANK DATA  n  for PEEK,POKE,WAIT,BLOAD,BSAVE ;; @@4747 103
  7458                          ;*  BANK SYS  [a,x,y,z] for SYS,BOOT Commands ;; @@4747 103
  7459                          ;* ;; @@4747 103
  7460                          ;* where   n=  %11111111  to access I/O area (System MAP) ;; @@4747 103
  7461                          ;*      %0xxxxxxx to use physical bank n ;; @@4747 103
  7462                          ;* ;; @@4747 103
  7463                          ;* or      a,x,y,z  describe precise configuration for MAPper ;; @@4747 103
  7464                          ;*    if omitted, the System MAP is to be used. ;; @@4747 103
  7465                          ;* ;; @@4747 103
  7466                          ;* The DATA option is to access data,  i.e., LDA/STA_far ;; @@4747 103
  7467                          ;* The SYS  option is to execute code, i.e., JMP/JSR_far ;; @@4747 103
  7468                          ;* ;; @@4747 103
  7469                          ;*  Idea: BANK SCREEN n  when REC is finalized???? ;; @@4747 103
  7470                          ;************************************************************************ ;; @@4747 103
  7471                           ;; @@4747 103
  7472  4747 206c5d             bank             jsr getbyt                               ; get bank number in .x ;; @@4747 103
  7473  474a 8ed102                              stx current_bank                          ;; @@474a 103
  7474  474d 60                                  rts                                       ;; @@474d 103
  7475                           ;; @@474e 103
  7476                           ;; @@474e 103
  7477                          ;.end ;; @@474e 103
  7478                          ; .page ;; @@474e 103
  7479                          ; .subttl  PLAY ;; @@474e 103
  7480                           ;; @@474e 103
  7481                          ; C65 Music Interpreter ;; @@474e 103
  7482                          ; ;; @@474e 103
  7483                          ; Syntax : PLAY "music_string" ;; @@474e 103
  7484                          ; ;; @@474e 103
  7485                          ; Where : music_string is a string of characters composed of: ;; @@474e 103
  7486                          ; ;; @@474e 103
  7487                          ; A..G   : notes ;; @@474e 103
  7488                          ; W,H,Q,I,S : set note lengths to whole,half,quarter,eighth,sixteenth ;; @@474e 103
  7489                          ; U   : set volume level   (0-9) ;; @@474e 103
  7490                          ; O   : set octave    (0-6) ;; @@474e 103
  7491                          ; T   : set current envelope  (0-9) ;; @@474e 103
  7492                          ; V   : select voice to play  (1-6: 1-3 right, 4-6 left) ;; @@474e 103
  7493                          ; X   : filter    (0-1: 0=off, 1=on) ;; @@474e 103
  7494                          ; M   : measure ;; @@474e 103
  7495                          ; R   : rest ;; @@474e 103
  7496                          ; .   : dot ;; @@474e 103
  7497                          ; #   : sharp ;; @@474e 103
  7498                          ; $   : flat ;; @@474e 103
  7499                           ;; @@474e 103
  7500                           ;; @@474e 103
  7501  474e 20675b             play             jsr frmstr                               ; frmevl,frestr,return w/ .A=len, (index)=>string ;; @@474e 103
  7502                          ; sta sw_rom_ram0  ;???? ;; @@4751 103
  7503  4751 8576                                sta z_p_temp_1                           ; save number of characters ;; @@4751 103
  7504  4753 207b49                              jsr clear_play_flags                     ; set 'dot' and 'sharp' to 0. return with Acc=0 ;; @@4753 103
  7505  4756 8577                                sta hulp                                 ; zero counter ;; @@4756 103
  7506                           ;; @@4758 103
  7507  4758 a477               _local_1102_10   ldy hulp                                  ;; @@4758 103
  7508  475a c476                                cpy z_p_temp_1                            ;; @@475a 103
  7509  475c f00a                                beq play_rts                             ; done! ;; @@475c 103
  7510  475e 20d522                              jsr indin1_ram1                           ;; @@475e 103
  7511  4761 206947                              jsr play_one_character                    ;; @@4761 103
  7512  4764 e677                                inc hulp                                  ;; @@4764 103
  7513  4766 d0f0                                bne _local_1102_10                       ; always ;; @@4766 103
  7514                          play_rts                                                   ;; @@4768 104
  7515  4768 60                                  rts                                       ;; @@4768 104
  7516                           ;; @@4769 104
  7517                          ; .page ;; @@4769 104
  7518                          play_one_character                                           ;; @@4769 104
  7519  4769 c920                                cmp #' '                                 ; spaces are a 'no-op' ;; @@4769 104
  7520  476b f0fb                                beq play_rts                              ;; @@476b 104
  7521                           ;; @@476d 104
  7522  476d c941               _local_1103_5    cmp #'A'                                 ; note name a-g? ;; @@476d 104
  7523  476f 9005                                bcc _local_1103_10                        ;; @@476f 104
  7524  4771 c948                                cmp #'H'                                  ;; @@4771 104
  7525  4773 934501                              +lbcc play_note                          ; yes...play it ;; @@4773 104
  7526                           ;; @@4776 104
  7527  4776 a204               _local_1103_10   ldx #4                                   ; test for notes,'w,h,q,i,s' ;; @@4776 104
  7528  4778 dd9649             _local_1103_20   cmp notes,x                               ;; @@4778 104
  7529  477b f31c01                              +lbeq set_note_length                     ;; @@477b 104
  7530  477e ca                                  dex                                       ;; @@477e 104
  7531  477f 10f7                                bpl _local_1103_20                        ;; @@477f 104
  7532                           ;; @@4781 104
  7533  4781 c952                                cmp #'R'                                 ; rest? ;; @@4781 104
  7534  4783 f3a001                              +lbeq play_rest                           ;; @@4783 104
  7535  4786 c92e                                cmp #'.'                                 ; dotted note? ;; @@4786 104
  7536  4788 f30b01                              +lbeq play_dot                            ;; @@4788 104
  7537                           ;; @@478b 104
  7538  478b a205                                ldx #5                                   ; test for v,o,t,x,u,m commands ;; @@478b 104
  7539  478d dd9b49             _local_1103_30   cmp mutabl,x                              ;; @@478d 104
  7540  4790 f36b01                              +lbeq play_command                        ;; @@4790 104
  7541  4793 ca                                  dex                                       ;; @@4793 104
  7542  4794 10f7                                bpl _local_1103_30                       ; test all 5 characters in table ;; @@4794 104
  7543                           ;; @@4796 104
  7544  4796 c923                                cmp #'#'                                 ; sharp? ;; @@4796 104
  7545  4798 f37c01                              +lbeq play_sharp                          ;; @@4798 104
  7546  479b c924                                cmp #'$'                                 ; flat? ;; @@479b 104
  7547  479d f37a01                              +lbeq play_flat                           ;; @@479d 104
  7548                           ;; @@47a0 104
  7549                          ; .page ;; @@47a0 104
  7550                          ; Must be a digit here for Octave, Voice, envelope (T), filter (X), or volume (U) ;; @@47a0 104
  7551                           ;; @@47a0 104
  7552  47a0 38                                  sec                                       ;; @@47a0 104
  7553  47a1 e930                                sbc #'0'                                 ; mask nybble ;; @@47a1 104
  7554  47a3 c90a                                cmp #10                                  ; must be in range 0..9 ;; @@47a3 104
  7555  47a5 b3e800                              +lbcs play_bad_value                      ;; @@47a5 104
  7556                           ;; @@47a8 104
  7557  47a8 0edb11                              asl flag                                 ; octave, voice, envelope, filter, or volume? ;; @@47a8 104
  7558  47ab b041                                bcs set_voice                             ;; @@47ab 104
  7559  47ad 0edb11                              asl flag                                 ; octave, envelope, filter, or volume? ;; @@47ad 104
  7560  47b0 b047                                bcs set_octave                            ;; @@47b0 104
  7561  47b2 0edb11                              asl flag                                 ; envelope, filter, or volume? ;; @@47b2 104
  7562  47b5 b04c                                bcs set_envelope                          ;; @@47b5 104
  7563  47b7 0edb11                              asl flag                                 ; filter or volume? ;; @@47b7 104
  7564  47ba 9072                                bcc set_volume                            ;; @@47ba 104
  7565                           ;; @@47bc 104
  7566                          set_filter                                                 ;; @@47bc 105
  7567  47bc 207648                              jsr wait_for_all_quiet                   ; [910722] ;; @@47bc 105
  7568  47bf c902                                cmp #2                                    ;; @@47bf 105
  7569  47c1 b3cc00                              +lbcs play_bad_value                     ; value too large ;; @@47c1 105
  7570  47c4 4a                                  lsr                                      ; .c=on/off ;; @@47c4 105
  7571  47c5 ac6f12                              ldy voice                                ; 0-5 ;; @@47c5 105
  7572  47c8 be064a                              ldx filter_offset,y                      ; 0 0 0 4 4 4 ;; @@47c8 105
  7573  47cb bd7a12                              lda filters1+2,x                         ; get current filter data for this SID  [910612] ;; @@47cb 105
  7574  47ce 195f79                              ora vbits,y                              ; update filter voice bit ;; @@47ce 105
  7575  47d1 b003                                bcs _local_1104_20                       ; branch to turn filter on ;; @@47d1 105
  7576  47d3 595f79                              eor vbits,y                              ; else, turn filter off   [910612] ;; @@47d3 105
  7577                           ;; @@47d6 105
  7578  47d6 9d7a12             _local_1104_20   sta filters1+2,x                          ;; @@47d6 105
  7579                          ; lda filters1+3,x ;why????     [910612] ;; @@47d9 105
  7580                          ; sta filters1+4,x ;save new filter-type/volume ;; @@47d9 105
  7581                           ;; @@47d9 105
  7582                          ; jsr put_io_in_map ;; @@47d9 105
  7583  47d9 b9004a                              lda SID_offset,y                         ; get hardware offset for current voice ;; @@47d9 105
  7584  47dc 29f0                                and #$f0                                 ; $00 or $20 ;; @@47dc 105
  7585  47de a8                                  tay                                       ;; @@47de 105
  7586                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@47df 105
  7587  47df a303                                ldz #3                                    ;; @@47df 105
  7588  47e1 bd7812             _local_1104_30   lda filters1,x                           ; update the hardware ;; @@47e1 105
  7589  47e4 9915d4                              sta sid1+21,y                             ;; @@47e4 105
  7590  47e7 e8                                  inx                                       ;; @@47e7 105
  7591  47e8 c8                                  iny                                       ;; @@47e8 105
  7592  47e9 3b                                  dez                                       ;; @@47e9 105
  7593  47ea 10f5                                bpl _local_1104_30                        ;; @@47ea 105
  7594                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@47ec 105
  7595  47ec 8063                                bra clear_flag                           ; always ;; @@47ec 105
  7596                           ;; @@47ee 105
  7597                          ; .page ;; @@47ee 105
  7598                          set_voice                                                  ;; @@47ee 106
  7599  47ee 3a                                  dec                                       ;; @@47ee 106
  7600  47ef c906                                cmp #6                                   ; stereo SIDs: 0-2=right, 3-5=left  [910612] ;; @@47ef 106
  7601  47f1 b39c00                              +lbcs play_bad_value                      ;; @@47f1 106
  7602  47f4 8d6f12                              sta voice                                ; 0-5 ;; @@47f4 106
  7603  47f7 8058                                bra clear_flag                           ; always ;; @@47f7 106
  7604                           ;; @@47f9 106
  7605                           ;; @@47f9 106
  7606                          set_octave                                                 ;; @@47f9 106
  7607  47f9 c907                                cmp #7                                    ;; @@47f9 106
  7608  47fb b39200                              +lbcs play_bad_value                     ; too big octave ;; @@47fb 106
  7609  47fe 8d7012                              sta octave                               ; set octave ;; @@47fe 106
  7610  4801 804e                                bra clear_flag                           ; always ;; @@4801 106
  7611                           ;; @@4803 106
  7612                           ;; @@4803 106
  7613                          set_envelope                                               ;; @@4803 106
  7614  4803 206a48                              jsr wait_for_quiet                       ; [910626] ;; @@4803 106
  7615  4806 aa                                  tax                                       ;; @@4806 106
  7616                          set_envelope_1                                            ; entry for initialization code ;; @@4807 106
  7617                          ; jsr put_io_in_map ;; @@4807 106
  7618  4807 ac6f12                              ldy voice                                 ;; @@4807 106
  7619  480a bd9d12                              lda wavtab,x                              ;; @@480a 106
  7620  480d 996912                              sta waveform,y                           ; set waveform ;; @@480d 106
  7621  4810 b9004a                              lda SID_offset,y                         ; get hardware offset for this voice ;; @@4810 106
  7622  4813 a8                                  tay                                       ;; @@4813 106
  7623                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@4814 106
  7624  4814 bd8912                              lda atktab,x                              ;; @@4814 106
  7625  4817 9905d4                              sta sid1+5,y                             ; set attack/decay ;; @@4817 106
  7626  481a bd9312                              lda sustab,x                              ;; @@481a 106
  7627  481d 9906d4                              sta sid1+6,y                             ; set sustain/release ;; @@481d 106
  7628  4820 bda712                              lda pulslw,x                              ;; @@4820 106
  7629  4823 9902d4                              sta sid1+2,y                             ; set pulse width - low byte ;; @@4823 106
  7630  4826 bdb112                              lda pulshi,x                              ;; @@4826 106
  7631  4829 9903d4                              sta sid1+3,y                             ; set pulse width - high byte ;; @@4829 106
  7632                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@482c 106
  7633  482c 8023                                bra clear_flag                            ;; @@482c 106
  7634                           ;; @@482e 106
  7635                          ; .page ;; @@482e 106
  7636                          set_volume                                                 ;; @@482e 106
  7637  482e 207648                              jsr wait_for_all_quiet                   ; [910626] ;; @@482e 106
  7638  4831 aa                                  tax                                       ;; @@4831 106
  7639  4832 ac6f12                              ldy voice                                ; [910612] ;; @@4832 106
  7640  4835 b9064a                              lda filter_offset,y                      ; get filter offset for this voice ;; @@4835 106
  7641  4838 a8                                  tay                                       ;; @@4838 106
  7642  4839 b97b12                              lda filters1+3,y                         ; get mode/volume for this SID ;; @@4839 106
  7643  483c 29f0                                and #$f0                                 ; mask out old volume ;; @@483c 106
  7644  483e 1d0c4a                              ora voltab,x                             ; add new volume ;; @@483e 106
  7645  4841 997b12                              sta filters1+3,y                         ; save for filter change ;; @@4841 106
  7646                          ; lda filters1+4,y ;get current filter-type/volume ????why  [910612] ;; @@4844 106
  7647                          ; and #$f0 ;; @@4844 106
  7648                          ; ora voltab,x ;; @@4844 106
  7649  4844 aa                                  tax                                       ;; @@4844 106
  7650  4845 ac6f12                              ldy voice                                 ;; @@4845 106
  7651  4848 b9004a                              lda SID_offset,y                         ; get hardware offset for current voice ;; @@4848 106
  7652  484b 29f0                                and #$f0                                 ; $00 or $20 ;; @@484b 106
  7653  484d a8                                  tay                                       ;; @@484d 106
  7654                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@484e 106
  7655  484e 9b18d4                              stx sid1+24,y                            ; set new volume ;; @@484e 106
  7656                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@4851 106
  7657                          ;fall into clear_flag ;; @@4851 106
  7658                          ; .page ;; @@4851 106
  7659                          clear_flag                                                 ;; @@4851 106
  7660  4851 a900                                lda #0                                    ;; @@4851 106
  7661  4853 8ddb11                              sta flag                                  ;; @@4853 106
  7662  4856 60                                  rts                                       ;; @@4856 106
  7663                           ;; @@4857 106
  7664                           ;; @@4857 106
  7665                          go_fast                                                    ;; @@4857 106
  7666  4857 a586                                lda sid_speed_flag                        ;; @@4857 106
  7667  4859 0c31d0                              tsb vic+49                                ;; @@4859 106
  7668  485c 60                                  rts                                       ;; @@485c 106
  7669                           ;; @@485d 106
  7670                           ;; @@485d 106
  7671                          go_slow                                                    ;; @@485d 106
  7672  485d 48                                  pha                                       ;; @@485d 106
  7673  485e a940                                lda #$40                                  ;; @@485e 106
  7674  4860 2d31d0                              and vic+49                                ;; @@4860 106
  7675  4863 1c31d0                              trb vic+49                                ;; @@4863 106
  7676  4866 8586                                sta sid_speed_flag                        ;; @@4866 106
  7677  4868 68                                  pla                                       ;; @@4868 106
  7678  4869 60                                  rts                                       ;; @@4869 106
  7679                           ;; @@486a 106
  7680                           ;; @@486a 106
  7681                          wait_for_quiet                                            ; Wait for current voice to be quiet  [910626] ;; @@486a 106
  7682  486a ac6f12                              ldy voice                                 ;; @@486a 106
  7683  486d be9049                              ldx times2,y                             ; voice*2 ;; @@486d 106
  7684  4870 3c5e12             _local_1105_10   bit voices+1,x                           ; test if voice is active   [910617] ;; @@4870 106
  7685  4873 10fb                                bpl _local_1105_10                       ; loop until inactive (IRQ) ;; @@4873 106
  7686  4875 60                                  rts                                       ;; @@4875 106
  7687                           ;; @@4876 106
  7688                           ;; @@4876 106
  7689                          wait_for_all_quiet                                          ; Wait for all voices on this SID to be quiet [910626] ;; @@4876 107
  7690  4876 a003                                ldy #3                                    ;; @@4876 107
  7691  4878 ae6f12                              ldx voice                                 ;; @@4878 107
  7692  487b e003                                cpx #3                                   ; determine left/right SID ;; @@487b 107
  7693  487d b002                                bcs _local_1106_10                        ;; @@487d 107
  7694  487f a000                                ldy #0                                    ;; @@487f 107
  7695  4881 a303               _local_1106_10   ldz #3                                   ; for each of 3 voices ;; @@4881 107
  7696  4883 be9049             _local_1106_20   ldx times2,y                              ;; @@4883 107
  7697  4886 3c5e12             _local_1106_30   bit voices+1,x                           ; wait for voice to be inactive (IRQ) ;; @@4886 107
  7698  4889 10fb                                bpl _local_1106_30                        ;; @@4889 107
  7699  488b c8                                  iny                                      ; next voice ;; @@488b 107
  7700  488c 3b                                  dez                                       ;; @@488c 107
  7701  488d d0f4                                bne _local_1106_20                       ; until done 3 voices ;; @@488d 107
  7702  488f 60                                  rts                                       ;; @@488f 107
  7703                           ;; @@4890 107
  7704                          ; .page ;; @@4890 107
  7705                          play_bad_value                                             ;; @@4890 108
  7706  4890 205148                              jsr clear_flag                            ;; @@4890 108
  7707  4893 836809                              +lbra fcerr                              ; illegal quantity ;; @@4893 108
  7708                           ;; @@4896 108
  7709                          play_dot                                                   ;; @@4896 108
  7710  4896 8d7212                              sta dnote                                 ;; @@4896 108
  7711  4899 60                                  rts                                       ;; @@4899 108
  7712                           ;; @@489a 108
  7713                           ;; @@489a 108
  7714                           ;; @@489a 108
  7715                          set_note_length                                            ;; @@489a 108
  7716                          ; ldy #<beats  ;found note (.x), divide beats accordingly ;; @@489a 108
  7717                          ; sty ntime ;; @@489a 108
  7718                          ; ldy #>beats ;; @@489a 108
  7719                          ; sty ntime+1 ;; @@489a 108
  7720                           ;; @@489a 108
  7721  489a 2c0311                              bit _pal_ntsc                            ; determine if PAL or NTSC system  [910724] ;; @@489a 108
  7722  489d 3006                                bmi _local_1107_1                        ; ...branch if PAL ;; @@489d 108
  7723  489f a3a0                                ldz #<beats_ntsc                         ; (whole note 4/4 time = 2 sec) ;; @@489f 108
  7724  48a1 a005                                ldy #>beats_ntsc                          ;; @@48a1 108
  7725  48a3 8004                                bra _local_1107_2                         ;; @@48a3 108
  7726  48a5 a3b0               _local_1107_1    ldz #<beats_pal                           ;; @@48a5 108
  7727  48a7 a004                                ldy #>beats_pal                           ;; @@48a7 108
  7728  48a9 9c7612             _local_1107_2    stz ntime                                 ;; @@48a9 108
  7729  48ac 8c7712                              sty ntime+1                               ;; @@48ac 108
  7730                           ;; @@48af 108
  7731  48af ca                 _local_1107_10   dex                                       ;; @@48af 108
  7732  48b0 3008                                bmi _local_1107_20                       ; finished dividing, exit ;; @@48b0 108
  7733  48b2 4e7712                              lsr ntime+1                               ;; @@48b2 108
  7734  48b5 6e7612                              ror ntime                                 ;; @@48b5 108
  7735  48b8 80f5                                bra _local_1107_10                        ;; @@48b8 108
  7736                           ;; @@48ba 108
  7737  48ba 60                 _local_1107_20   rts                                       ;; @@48ba 108
  7738                           ;; @@48bb 108
  7739                          ; .page ;; @@48bb 108
  7740                          play_note                                                  ;; @@48bb 109
  7741  48bb 38                                  sec                                       ;; @@48bb 109
  7742  48bc e941                                sbc #'A'                                  ;; @@48bc 109
  7743  48be aa                                  tax                                       ;; @@48be 109
  7744  48bf bda149                              lda scalen,x                             ; note #0-11 ;; @@48bf 109
  7745  48c2 aa                                  tax                                       ;; @@48c2 109
  7746  48c3 a906                                lda #6                                    ;; @@48c3 109
  7747  48c5 38                                  sec                                       ;; @@48c5 109
  7748  48c6 ed7012                              sbc octave                                ;; @@48c6 109
  7749  48c9 a8                                  tay                                       ;; @@48c9 109
  7750  48ca 8a                                  txa                                       ;; @@48ca 109
  7751  48cb 18                                  clc                                       ;; @@48cb 109
  7752  48cc 6d7112                              adc sharp                                 ;; @@48cc 109
  7753  48cf 1003                                bpl _local_1108_10                       ; added sharp or nat ;; @@48cf 109
  7754  48d1 a90b                                lda #11                                  ; underflow ;; @@48d1 109
  7755  48d3 c8                                  iny                                      ; bump octave down ;; @@48d3 109
  7756  48d4 c90c               _local_1108_10   cmp #12                                  ; overflow? ;; @@48d4 109
  7757  48d6 9003                                bcc _local_1108_20                       ; no... ;; @@48d6 109
  7758  48d8 a900                                lda #0                                    ;; @@48d8 109
  7759  48da 88                                  dey                                      ; bump octave up ;; @@48da 109
  7760  48db aa                 _local_1108_20   tax                                       ;; @@48db 109
  7761  48dc bda849                              lda scalel,x                              ;; @@48dc 109
  7762  48df 8d7412                              sta pitch                                 ;; @@48df 109
  7763                           ;; @@48e2 109
  7764  48e2 2c0311                              bit _pal_ntsc                            ; determine if PAL or NTSC system ;; @@48e2 109
  7765  48e5 3005                                bmi _local_1108_25                       ; ...branch if PAL ;; @@48e5 109
  7766  48e7 bdb449                              lda scaleh,x                             ; continue as before patch ;; @@48e7 109
  7767  48ea 8009                                bra _local_1108_30                        ;; @@48ea 109
  7768                           ;; @@48ec 109
  7769  48ec bdc049             _local_1108_25   lda scalelp,x                            ; load from PAL tables ;; @@48ec 109
  7770  48ef 8d7412                              sta pitch                                 ;; @@48ef 109
  7771  48f2 bdcc49                              lda scalehp,x                             ;; @@48f2 109
  7772                           ;; @@48f5 109
  7773  48f5 88                 _local_1108_30   dey                                       ;; @@48f5 109
  7774  48f6 3028                                bmi play_note_1                          ; go play note ;; @@48f6 109
  7775  48f8 4a                                  lsr                                       ;; @@48f8 109
  7776  48f9 6e7412                              ror pitch                                 ;; @@48f9 109
  7777  48fc 80f7                                bra _local_1108_30                        ;; @@48fc 109
  7778                           ;; @@48fe 109
  7779                          ; .page ;; @@48fe 109
  7780                          play_command                                               ;; @@48fe 110
  7781  48fe c94d                                cmp #'M'                                 ; measure? ;; @@48fe 110
  7782  4900 f007                                beq _local_1109_10                        ;; @@4900 110
  7783                           ;; @@4902 110
  7784  4902 bd6d79                              lda rbits,x                              ; all others, set flag for next number ;; @@4902 110
  7785  4905 8ddb11                              sta flag                                  ;; @@4905 110
  7786  4908 60                                  rts                                       ;; @@4908 110
  7787                           ;; @@4909 110
  7788                          ; Wait for msb of all 3 voice counters to underflow ;; @@4909 110
  7789                           ;; @@4909 110
  7790                          ;_local_1109_10 ldy #5 ;; @@4909 110
  7791                          ;_local_1109_20 lda voices,y ;; @@4909 110
  7792                          ; bpl _local_1109_20 ;; @@4909 110
  7793                          ; dey ;; @@4909 110
  7794                          ; dey ;; @@4909 110
  7795                          ; bpl _local_1109_20 ;; @@4909 110
  7796                          ; rts ;; @@4909 110
  7797                           ;; @@4909 110
  7798  4909 a005               _local_1109_10   ldy #5                                   ; [910626] ;; @@4909 110
  7799  490b be9049             _local_1109_20   ldx times2,y                              ;; @@490b 110
  7800  490e 3c5e12             _local_1109_30   bit voices+1,x                           ; wait for voice to be inactive (IRQ) ;; @@490e 110
  7801  4911 10fb                                bpl _local_1109_30                        ;; @@4911 110
  7802  4913 88                                  dey                                      ; next voice ;; @@4913 110
  7803  4914 10f5                                bpl _local_1109_20                       ; until done 6 voices ;; @@4914 110
  7804  4916 60                                  rts                                       ;; @@4916 110
  7805                           ;; @@4917 110
  7806                           ;; @@4917 110
  7807                           ;; @@4917 110
  7808                          play_sharp                                                 ;; @@4917 111
  7809  4917 a901                                lda #1                                    ;; @@4917 111
  7810  4919 2c                                  !text $2c                                 ;; @@4919 111
  7811                          play_flat                                                  ;; @@491a 111
  7812  491a a9ff                                lda #$ff                                  ;; @@491a 111
  7813  491c 8d7112                              sta sharp                                 ;; @@491c 111
  7814  491f 60                                  rts                                       ;; @@491f 111
  7815                           ;; @@4920 111
  7816                          ; .page ;; @@4920 111
  7817                          play_note_1                                               ; play a note ;; @@4920 111
  7818  4920 8d7512                              sta pitch+1                               ;; @@4920 111
  7819  4923 a900                                lda #0                                   ; flag 'not rest' ;; @@4923 111
  7820  4925 2c                                  !text $2c                                ; hop ;; @@4925 111
  7821                          play_rest                                                  ;; @@4926 111
  7822  4926 a9ff                                lda #$ff                                 ; flag 'rest' ;; @@4926 111
  7823  4928 48                                  pha                                      ; save flag ;; @@4928 111
  7824  4929 ae6f12                              ldx voice                                 ;; @@4929 111
  7825  492c bc9049                              ldy times2,x                             ; y=x*2 ;; @@492c 111
  7826  492f b95e12             _local_1110_10   lda voices+1,y                           ; test if there is a note playing ;; @@492f 111
  7827  4932 10fb                                bpl _local_1110_10                       ; and loop if so ;; @@4932 111
  7828                           ;; @@4934 111
  7829  4934 78                                  sei                                       ;; @@4934 111
  7830  4935 ad7612                              lda ntime                                ; load counter for current length ;; @@4935 111
  7831  4938 995d12                              sta voices,y                              ;; @@4938 111
  7832  493b ad7712                              lda ntime+1                               ;; @@493b 111
  7833  493e 995e12                              sta voices+1,y                            ;; @@493e 111
  7834  4941 ad7212                              lda dnote                                ; test if this is a dotted note ;; @@4941 111
  7835  4944 f017                                beq _local_1110_20                       ; no ;; @@4944 111
  7836  4946 ad7712                              lda ntime+1                               ;; @@4946 111
  7837  4949 4a                                  lsr                                      ; duration is 1.5 x current length ;; @@4949 111
  7838  494a 48                                  pha                                       ;; @@494a 111
  7839  494b ad7612                              lda ntime                                 ;; @@494b 111
  7840  494e 6a                                  ror                                       ;; @@494e 111
  7841  494f 18                                  clc                                       ;; @@494f 111
  7842  4950 795d12                              adc voices,y                              ;; @@4950 111
  7843  4953 995d12                              sta voices,y                              ;; @@4953 111
  7844  4956 68                                  pla                                       ;; @@4956 111
  7845  4957 795e12                              adc voices+1,y                            ;; @@4957 111
  7846  495a 995e12                              sta voices+1,y                            ;; @@495a 111
  7847                           ;; @@495d 111
  7848  495d 68                 _local_1110_20   pla                                      ; test if this is a rest ;; @@495d 111
  7849  495e 301a                                bmi _local_1110_30                       ; and branch if so- clear play flags and exit [910722] ;; @@495e 111
  7850                           ;; @@4960 111
  7851                          ; jsr put_io_in_map ;; @@4960 111
  7852                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@4960 111
  7853  4960 bc004a                              ldy SID_offset,x                         ; get offset to voice hardware ;; @@4960 111
  7854  4963 ad7412                              lda pitch                                 ;; @@4963 111
  7855  4966 9900d4                              sta sid1,y                                ;; @@4966 111
  7856  4969 ad7512                              lda pitch+1                               ;; @@4969 111
  7857  496c 9901d4                              sta sid1+1,y                              ;; @@496c 111
  7858  496f a908                                lda #$08                                 ; reset this voice ;; @@496f 111
  7859  4971 9904d4                              sta sid1+4,y                              ;; @@4971 111
  7860  4974 bd6912                              lda waveform,x                           ; and finally, turn on gate ;; @@4974 111
  7861  4977 9904d4                              sta sid1+4,y                              ;; @@4977 111
  7862                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@497a 111
  7863  497a 58                 _local_1110_30   cli                                       ;; @@497a 111
  7864                           ;; @@497b 111
  7865                          ; .page ;; @@497b 111
  7866                          clear_play_flags                                           ;; @@497b 112
  7867  497b a900                                lda #0                                    ;; @@497b 112
  7868  497d 8d7112                              sta sharp                                ; clear flags ;; @@497d 112
  7869  4980 8d7212                              sta dnote                                 ;; @@4980 112
  7870  4983 58                                  cli                                       ;; @@4983 112
  7871  4984 60                                  rts                                       ;; @@4984 112
  7872                           ;; @@4985 112
  7873                           ;; @@4985 112
  7874  4985 206c5d             tempo            jsr getbyt                               ; duration of whole note 4/4 time = 24/rate ;; @@4985 112
  7875  4988 8a                                  txa                                       ;; @@4988 112
  7876  4989 f37208                              +lbeq fcerr                              ; can't be zero- illegal quantity error ;; @@4989 112
  7877  498c 8e7312                              stx tempo_rate                            ;; @@498c 112
  7878  498f 60                                  rts                                       ;; @@498f 112
  7879                           ;; @@4990 112
  7880                          ; .page ;; @@4990 112
  7881  4990 00020406080a       times2           !text 0,2,4,6,8,10                       ; [910612] stereo ;; @@4990 112
  7882                           ;; @@4996 112
  7883  4996 5748514953         notes            !text "WHQIS"                            ; sixteenth,eigth,quarter,half,and whole notes ;; @@4996 112
  7884                           ;; @@499b 112
  7885  499b 564f5458554d       mutabl           !text "VOTXUM"                           ; voice,octave,envelope,filter,volume,& measure ;; @@499b 112
  7886                           ;; @@49a1 112
  7887  49a1 090b0002040507     scalen           !text 9,11,0,2,4,5,7                     ; a,b,c,d,e,f,g ;; @@49a1 112
  7888                           ;; @@49a8 112
  7889  49a8 0f0c46bf7d83       scalel           !text $0f,$0c,$46,$bf,$7d,$83            ; c,c#,d,d#,e,f,f#,g,g#,a,a#,b (NTSC, octave 6) ;; @@49a8 112
  7890  49ae d67a73c87c97                        !text $d6,$7a,$73,$c8,$7c,$97            ; [910729] ;; @@49ae 112
  7891                           ;; @@49b4 112
  7892  49b4 43474b4f5459       scaleh           !text $43,$47,$4b,$4f,$54,$59            ; c,c#,d,d#,e,f,f#,g,g#,a,a#,b (NTSC, octave 6) ;; @@49b4 112
  7893  49ba 5e646a70777e                        !text $5e,$64,$6a,$70,$77,$7e            ; [910729] ;; @@49ba 112
  7894                           ;; @@49c0 112
  7895  49c0 878bcc4e1424       scalelp          !text $87,$8b,$cc,$4e,$14,$24            ; c,c#,d,d#,e,f,f#,g,g#,a,a#,b (PAL,  octave 6) ;; @@49c0 112
  7896  49c6 802d3291527a                        !text $80,$2d,$32,$91,$52,$7a            ; [910729] ;; @@49c6 112
  7897                           ;; @@49cc 112
  7898  49cc 43474b50555a       scalehp          !text $43,$47,$4b,$50,$55,$5a            ; c,c#,d,d#,e,f,f#,g,g#,a,a#,b (PAL,  octave 6) ;; @@49cc 112
  7899  49d2 5f656b71787f                        !text $5f,$65,$6b,$71,$78,$7f            ; [910729] ;; @@49d2 112
  7900                           ;; @@49d8 112
  7901                          ;  Music envelope tables, default values downloaded to RAM: ;; @@49d8 112
  7902                          ; ;; @@49d8 112
  7903                          ; 0: piano   1: accordion    2: calliope  3: drum     4: flute ;; @@49d8 112
  7904                          ; 5: guitar  6: harpsichord  7: organ     8: trumpet  9: xylophone ;; @@49d8 112
  7905                           ;; @@49d8 112
  7906                          ;  Attack/decay rates ;; @@49d8 112
  7907                           ;; @@49d8 112
  7908  49d8 09c0000594090909...atkmus           !text $09,$c0,$00,$05,$94,$09,$09,$09,$89,$09  ;; @@49d8 112
  7909                           ;; @@49e2 112
  7910                          ;  Sustain/release rates ;; @@49e2 112
  7911                           ;; @@49e2 112
  7912  49e2 00c0f05040210090...susmus           !text $00,$c0,$f0,$50,$40,$21,$00,$90,$41,$00  ;; @@49e2 112
  7913                           ;; @@49ec 112
  7914                          ;  Waveform table ;; @@49ec 112
  7915                           ;; @@49ec 112
  7916  49ec 4121118111214141...wavmus           !text $41,$21,$11,$81,$11,$21,$41,$41,$41,$11  ;; @@49ec 112
  7917                           ;; @@49f6 112
  7918                          ;  Pulse width hi table ;; @@49f6 112
  7919                           ;; @@49f6 112
  7920  49f6 0600000000000208...pwhmus           !text $06,$00,$00,$00,$00,$00,$02,$08,$02,$00  ;; @@49f6 112
  7921                           ;; @@4a00 112
  7922                          ;  Offset tables ;; @@4a00 112
  7923                           ;; @@4a00 112
  7924                          SID_offset                                                 ;; @@4a00 112
  7925  4a00 00070e20272e                        !text $00,$07,$0e,$20,$27,$2e            ; [910612] stereo ;; @@4a00 112
  7926                          filter_offset                                              ;; @@4a06 112
  7927  4a06 000000040404                        !text 0,0,0,4,4,4                         ;; @@4a06 112
  7928                           ;; @@4a0c 112
  7929                          ;  Volume levels ;; @@4a0c 112
  7930                           ;; @@4a0c 112
  7931  4a0c 0001030507080a0c...voltab           !text 0,1,3,5,7,8,10,12,14,15             ;; @@4a0c 112
  7932                           ;; @@4a16 112
  7933                          ;.end ;; @@4a16 112
  7934                          ; .page ;; @@4a16 112
  7935                          ; .subttl  FILTER ;; @@4a16 112
  7936                           ;; @@4a16 112
  7937                          ;****************************************************************** ;; @@4a16 112
  7938                          ; ;; @@4a16 112
  7939                          ;  FILTER  sid, freq, lp, bp, hp, res   --  set values for filter ;; @@4a16 112
  7940                          ; ;; @@4a16 112
  7941                          ;     sid =  right (1), left (2) ;; @@4a16 112
  7942                          ;          freq =  filter frequency (0-1023) ;; @@4a16 112
  7943                          ;            lp =  low pass filter on (1) or off (0) ;; @@4a16 112
  7944                          ;            bp =  band pass filter on (1) or off (0) ;; @@4a16 112
  7945                          ;            hp =  high pass filter on (1) or off (0) ;; @@4a16 112
  7946                          ;           res =  resonance (0-15) ;; @@4a16 112
  7947                          ; ;; @@4a16 112
  7948                          ;****************************************************************** ;; @@4a16 112
  7949                           ;; @@4a16 112
  7950  4a16 206c5d             filter           jsr getbyt                               ; get left/right SID    [910612] ;; @@4a16 112
  7951  4a19 ca                                  dex                                       ;; @@4a19 112
  7952  4a1a e002                                cpx #2                                    ;; @@4a1a 112
  7953  4a1c b3df07                              +lbcs fcerr                               ;; @@4a1c 112
  7954  4a1f bd084a                              lda filter_offset+2,x                    ; get filter offset for specified SID ;; @@4a1f 112
  7955  4a22 8576                                sta z_p_temp_1                            ;; @@4a22 112
  7956  4a24 aa                                  tax                                       ;; @@4a24 112
  7957                           ;; @@4a25 112
  7958  4a25 a000                                ldy #0                                    ;; @@4a25 112
  7959  4a27 bd7812             _local_1111_10   lda filters1,x                           ; save current voice's filter params ;; @@4a27 112
  7960  4a2a 998012                              sta fltsav,y                              ;; @@4a2a 112
  7961  4a2d e8                                  inx                                       ;; @@4a2d 112
  7962  4a2e c8                                  iny                                       ;; @@4a2e 112
  7963  4a2f c004                                cpy #4                                    ;; @@4a2f 112
  7964  4a31 90f4                                bcc _local_1111_10                        ;; @@4a31 112
  7965                           ;; @@4a33 112
  7966  4a33 20f278                              jsr optwrd                               ; get filter frequency ;; @@4a33 112
  7967  4a36 9017                                bcc _local_1111_20                       ; skip if no value given ;; @@4a36 112
  7968  4a38 c908                                cmp #8                                   ; test m.s. byte ;; @@4a38 112
  7969  4a3a b3c107                              +lbcs fcerr                              ; error if > 2047 ;; @@4a3a 112
  7970  4a3d 8c8012                              sty fltsav                               ; save lower byte ;; @@4a3d 112
  7971                           ;; @@4a40 112
  7972                          ; Idea: shift lower 3 bits of upper byte into lower byte, forming bits 10-3 ;; @@4a40 112
  7973                           ;; @@4a40 112
  7974  4a40 8c8112                              sty fltsav+1                              ;; @@4a40 112
  7975  4a43 4a                                  lsr                                       ;; @@4a43 112
  7976  4a44 6e8112                              ror fltsav+1                              ;; @@4a44 112
  7977  4a47 4a                                  lsr                                       ;; @@4a47 112
  7978  4a48 6e8112                              ror fltsav+1                             ; save upper 7 bits (10-3) ;; @@4a48 112
  7979  4a4b 4a                                  lsr                                       ;; @@4a4b 112
  7980  4a4c 6e8112                              ror fltsav+1                              ;; @@4a4c 112
  7981                           ;; @@4a4f 112
  7982  4a4f a910               _local_1111_20   lda #$10                                 ; start at type=LP ;; @@4a4f 112
  7983  4a51 8d8412                              sta fltflg                                ;; @@4a51 112
  7984  4a54 ad8012                              lda fltsav                                ;; @@4a54 112
  7985                           ;; @@4a57 112
  7986  4a57 202679             _local_1111_30   jsr optbyt                               ; get filter types (LP,BP,HP) ;; @@4a57 112
  7987  4a5a 9017                                bcc _local_1111_50                       ; skip if no value input ;; @@4a5a 112
  7988  4a5c e001                                cpx #1                                   ; (set .c: 0=0, 1=1) ;; @@4a5c 112
  7989  4a5e 9005                                bcc _local_1111_35                        ;; @@4a5e 112
  7990  4a60 f003                                beq _local_1111_35                        ;; @@4a60 112
  7991  4a62 839907                              +lbra fcerr                              ; error if >1 ;; @@4a62 112
  7992                           ;; @@4a65 112
  7993  4a65 ad8312             _local_1111_35   lda fltsav+3                             ; get filter flags byte ;; @@4a65 112
  7994  4a68 0d8412                              ora fltflg                               ; set filter on ;; @@4a68 112
  7995  4a6b b003                                bcs _local_1111_40                       ; skip if it should be on ;; @@4a6b 112
  7996  4a6d 4d8412                              eor fltflg                               ; turn filter off ;; @@4a6d 112
  7997  4a70 8d8312             _local_1111_40   sta fltsav+3                             ; save value ;; @@4a70 112
  7998                           ;; @@4a73 112
  7999  4a73 0e8412             _local_1111_50   asl fltflg                               ; shift for next filter ;; @@4a73 112
  8000  4a76 10df                                bpl _local_1111_30                       ; loop 3 times ;; @@4a76 112
  8001                           ;; @@4a78 112
  8002  4a78 202679                              jsr optbyt                               ; get resonance value ;; @@4a78 112
  8003  4a7b 9016                                bcc _local_1111_70                       ; skip if no value given ;; @@4a7b 112
  8004                          ; cpx #16 ;; @@4a7d 112
  8005                          ; bcs fcerr  ;error if >15 ;; @@4a7d 112
  8006  4a7d 2010b5                              jsr chknyb                               ; [910930] ;; @@4a7d 112
  8007  4a80 8a                                  txa                                       ;; @@4a80 112
  8008  4a81 0a                                  asl                                      ; shift to upper nibble ;; @@4a81 112
  8009  4a82 0a                                  asl                                       ;; @@4a82 112
  8010  4a83 0a                                  asl                                       ;; @@4a83 112
  8011  4a84 0a                                  asl                                       ;; @@4a84 112
  8012  4a85 8dbc12                              sta nibble                                ;; @@4a85 112
  8013  4a88 ad8212                              lda fltsav+2                             ; get current value ;; @@4a88 112
  8014  4a8b 290f                                and #$0f                                 ; mask it out ;; @@4a8b 112
  8015  4a8d 0dbc12                              ora nibble                               ; add new value ;; @@4a8d 112
  8016  4a90 8d8212                              sta fltsav+2                             ; save it ;; @@4a90 112
  8017                           ;; @@4a93 112
  8018  4a93 a676               _local_1111_70   ldx z_p_temp_1                           ; hardware offset for this voice's filter [910612] ;; @@4a93 112
  8019  4a95 a000                                ldy #0                                    ;; @@4a95 112
  8020  4a97 b98012             _local_1111_80   lda fltsav,y                             ; copy new filter params to hardware ;; @@4a97 112
  8021  4a9a 9d7812                              sta filters1,x                            ;; @@4a9a 112
  8022  4a9d e8                                  inx                                       ;; @@4a9d 112
  8023  4a9e c8                                  iny                                       ;; @@4a9e 112
  8024  4a9f c004                                cpy #4                                    ;; @@4a9f 112
  8025  4aa1 90f4                                bcc _local_1111_80                        ;; @@4aa1 112
  8026  4aa3 60                                  rts                                       ;; @@4aa3 112
  8027                           ;; @@4aa4 112
  8028                          ;.end ;; @@4aa4 112
  8029                          ; .page ;; @@4aa4 112
  8030                          ; .subttl  ENVELOPE ;; @@4aa4 112
  8031                           ;; @@4aa4 112
  8032                          ;**************************************************************** ;; @@4aa4 112
  8033                          ; ;; @@4aa4 112
  8034                          ;  ENVELOPE n, attack, decay, sustain, release, waveform, pulse width ;; @@4aa4 112
  8035                          ;        set music envelope ;; @@4aa4 112
  8036                          ;                n = envelope number (0-9) ;; @@4aa4 112
  8037                          ;            wave  =   0 : triangle waveform ;; @@4aa4 112
  8038                          ;                      1 : sawtooth waveform ;; @@4aa4 112
  8039                          ;                      2 : pulse waveform ;; @@4aa4 112
  8040                          ;                      3 : noise waveform ;; @@4aa4 112
  8041                          ;                      4 : ring modulation ;; @@4aa4 112
  8042                          ;            pulse = pulse width if pulse waveform is selected (0-4095) ;; @@4aa4 112
  8043                          ; ;; @@4aa4 112
  8044                          ;****************************************************************** ;; @@4aa4 112
  8045                           ;; @@4aa4 112
  8046                          envelope                                                   ;; @@4aa4 113
  8047  4aa4 206c5d                              jsr getbyt                               ; get envelope number ;; @@4aa4 113
  8048  4aa7 e00a                                cpx #10                                   ;; @@4aa7 113
  8049  4aa9 b35207                              +lbcs fcerr                              ; exit - invalid tone number ;; @@4aa9 113
  8050  4aac 8e8512                              stx tonnum                               ; save number ;; @@4aac 113
  8051  4aaf bd8912                              lda atktab,x                             ; get attack/decay rates ;; @@4aaf 113
  8052  4ab2 8d8612                              sta tonval                                ;; @@4ab2 113
  8053  4ab5 bd9312                              lda sustab,x                             ; get sustain/release rates ;; @@4ab5 113
  8054  4ab8 8d8712                              sta tonval+1                              ;; @@4ab8 113
  8055  4abb bd9d12                              lda wavtab,x                             ; get waveform and filter ;; @@4abb 113
  8056  4abe 8d8812                              sta tonval+2                              ;; @@4abe 113
  8057                           ;; @@4ac1 113
  8058  4ac1 a200                                ldx #0                                    ;; @@4ac1 113
  8059  4ac3 8ebb12             _local_1112_20   stx parcnt                                ;; @@4ac3 113
  8060  4ac6 202679                              jsr optbyt                               ; get parameter - attack or sustain ;; @@4ac6 113
  8061  4ac9 9016                                bcc _local_1112_30                       ; skip if no input ;; @@4ac9 113
  8062  4acb 8a                                  txa                                       ;; @@4acb 113
  8063  4acc 0a                                  asl                                       ;; @@4acc 113
  8064  4acd 0a                                  asl                                      ; shift to upper nibble ;; @@4acd 113
  8065  4ace 0a                                  asl                                       ;; @@4ace 113
  8066  4acf 0a                                  asl                                       ;; @@4acf 113
  8067  4ad0 8dbc12                              sta nibble                               ; save it ;; @@4ad0 113
  8068  4ad3 aebb12                              ldx parcnt                                ;; @@4ad3 113
  8069  4ad6 bd8612                              lda tonval,x                             ; get current value ;; @@4ad6 113
  8070  4ad9 290f                                and #$0f                                 ; mask it out ;; @@4ad9 113
  8071  4adb 0dbc12                              ora nibble                               ; add new value ;; @@4adb 113
  8072  4ade 9d8612                              sta tonval,x                             ; save it ;; @@4ade 113
  8073                           ;; @@4ae1 113
  8074  4ae1 202679             _local_1112_30   jsr optbyt                               ; get decay or release rate ;; @@4ae1 113
  8075  4ae4 9014                                bcc _local_1112_40                       ; skip if no input ;; @@4ae4 113
  8076  4ae6 8a                                  txa                                       ;; @@4ae6 113
  8077  4ae7 290f                                and #$0f                                 ; use only lower nibble ;; @@4ae7 113
  8078  4ae9 8dbc12                              sta nibble                               ; save it ;; @@4ae9 113
  8079  4aec aebb12                              ldx parcnt                                ;; @@4aec 113
  8080  4aef bd8612                              lda tonval,x                             ; get current value ;; @@4aef 113
  8081  4af2 29f0                                and #$f0                                 ; mask it out ;; @@4af2 113
  8082  4af4 0dbc12                              ora nibble                               ; add new value ;; @@4af4 113
  8083  4af7 9d8612                              sta tonval,x                             ; save it ;; @@4af7 113
  8084                           ;; @@4afa 113
  8085  4afa aebb12             _local_1112_40   ldx parcnt                                ;; @@4afa 113
  8086  4afd e8                                  inx                                       ;; @@4afd 113
  8087  4afe e001                                cpx #1                                    ;; @@4afe 113
  8088  4b00 f0c1                                beq _local_1112_20                       ; loop to do sustain/release rates ;; @@4b00 113
  8089  4b02 202679                              jsr optbyt                               ; get waveform ;; @@4b02 113
  8090  4b05 9011                                bcc _local_1112_90                       ; skip if no value ;; @@4b05 113
  8091  4b07 a915                                lda #$15                                 ; assume ring modulation ;; @@4b07 113
  8092  4b09 e004                                cpx #4                                    ;; @@4b09 113
  8093  4b0b f008                                beq _local_1112_80                       ; skip if correct ;; @@4b0b 113
  8094  4b0d b3ee06                              +lbcs fcerr                              ; error if >4 ;; @@4b0d 113
  8095  4b10 bd6979                              lda sbits+4,x                            ; get waveform bit ;; @@4b10 113
  8096  4b13 0901                                ora #1                                   ; set gate bit ;; @@4b13 113
  8097                           ;; @@4b15 113
  8098  4b15 8d8812             _local_1112_80   sta tonval+2                             ; save waveform ;; @@4b15 113
  8099                           ;; @@4b18 113
  8100  4b18 20f278             _local_1112_90   jsr optwrd                               ; is there a pulse width arg? ;; @@4b18 113
  8101  4b1b 9013                                bcc _local_1112_110                      ; nope, done ;; @@4b1b 113
  8102                           ;; @@4b1d 113
  8103  4b1d aa                                  tax                                      ; save msb ;; @@4b1d 113
  8104  4b1e ad8812                              lda tonval+2                             ; get waveform ;; @@4b1e 113
  8105  4b21 2940                                and #$40                                  ;; @@4b21 113
  8106  4b23 f00b                                beq _local_1112_110                      ; skip if not pulse waveform ;; @@4b23 113
  8107  4b25 8a                                  txa                                       ;; @@4b25 113
  8108  4b26 ae8512                              ldx tonnum                               ; get envelope number ;; @@4b26 113
  8109  4b29 9db112                              sta pulshi,x                             ; save high byte of pulse width ;; @@4b29 113
  8110  4b2c 98                                  tya                                       ;; @@4b2c 113
  8111  4b2d 9da712                              sta pulslw,x                             ; save low byte ;; @@4b2d 113
  8112                           ;; @@4b30 113
  8113  4b30 ae8512             _local_1112_110  ldx tonnum                                ;; @@4b30 113
  8114  4b33 ad8612                              lda tonval                               ; set inputted values ;; @@4b33 113
  8115  4b36 9d8912                              sta atktab,x                              ;; @@4b36 113
  8116  4b39 ad8712                              lda tonval+1                              ;; @@4b39 113
  8117  4b3c 9d9312                              sta sustab,x                              ;; @@4b3c 113
  8118  4b3f ad8812                              lda tonval+2                              ;; @@4b3f 113
  8119  4b42 9d9d12                              sta wavtab,x                              ;; @@4b42 113
  8120                          volrts                                                     ;; @@4b45 114
  8121  4b45 60                                  rts                                       ;; @@4b45 114
  8122                           ;; @@4b46 114
  8123                          ;.end ;; @@4b46 114
  8124                          ; .page ;; @@4b46 114
  8125                          ; .subttl  VOLUME ;; @@4b46 114
  8126                           ;; @@4b46 114
  8127                          ;*************************************************************** ;; @@4b46 114
  8128                          ;* ;; @@4b46 114
  8129                          ;*  VOLUME - set volume of SID chips ;; @@4b46 114
  8130                          ;* ;; @@4b46 114
  8131                          ;* Syntax : VOLUME [right] [,left] ;; @@4b46 114
  8132                          ;* ;; @@4b46 114
  8133                          ;* Where  : vol in 0..15 ;; @@4b46 114
  8134                          ;* ;; @@4b46 114
  8135                          ;*************************************************************** ;; @@4b46 114
  8136                           ;; @@4b46 114
  8137  4b46 f301e3             volume           +lbeq snerr                              ; stereo parameters    [910612] ;; @@4b46 114
  8138  4b49 c92c                                cmp #','                                  ;; @@4b49 114
  8139  4b4b f017                                beq _local_1113_10                       ; left volume only ;; @@4b4b 114
  8140                          ; jsr getbyt  ;right volume in .x ;; @@4b4d 114
  8141                          ; cpx #16 ;; @@4b4d 114
  8142                          ; bcs fcerr  ;too large ;; @@4b4d 114
  8143  4b4d 200db5                              jsr getnyb                               ; [910930] ;; @@4b4d 114
  8144  4b50 8676                                stx z_p_temp_1                           ; a temp (sorry fred) ;; @@4b50 114
  8145                           ;; @@4b52 114
  8146                          ; The way this is done must work with 'PLAY' without too much conflict. ;; @@4b52 114
  8147                          ; So, along with setting the SID 'volume' reg, we'll also set up PLAY's ;; @@4b52 114
  8148                          ; record of current volume as well. ;; @@4b52 114
  8149                           ;; @@4b52 114
  8150  4b52 ad7b12                              lda filters1+3                            ;; @@4b52 114
  8151  4b55 29f0                                and #$f0                                  ;; @@4b55 114
  8152  4b57 0576                                ora z_p_temp_1                            ;; @@4b57 114
  8153  4b59 8d7b12                              sta filters1+3                            ;; @@4b59 114
  8154                           ;; @@4b5c 114
  8155                          ; lda filters1+4  ;???? why     [910612] ;; @@4b5c 114
  8156                          ; and #$f0 ;; @@4b5c 114
  8157                          ; ora z_p_temp_1 ;; @@4b5c 114
  8158                          ; sta filters1+4 ;; @@4b5c 114
  8159                           ;; @@4b5c 114
  8160                          ; jsr put_io_in_map ;; @@4b5c 114
  8161                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@4b5c 114
  8162  4b5c 8d18d4                              sta sid1+24                               ;; @@4b5c 114
  8163                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@4b5f 114
  8164  4b5f 208522                              jsr chrgot                                ;; @@4b5f 114
  8165  4b62 f0e1                                beq volrts                                ;; @@4b62 114
  8166                           ;; @@4b64 114
  8167  4b64 202679             _local_1113_10   jsr optbyt                               ; get optional left parameter   [910612] ;; @@4b64 114
  8168  4b67 93e0e2                              +lbcc snerr                              ; comma but no value not given?? ;; @@4b67 114
  8169  4b6a 2010b5                              jsr chknyb                               ; [910930] ;; @@4b6a 114
  8170                          ; cpx #16 ;; @@4b6d 114
  8171                          ; bcs fcerr  ;too large ;; @@4b6d 114
  8172  4b6d 8676                                stx z_p_temp_1                           ; a temp (sorry fred) ;; @@4b6d 114
  8173                           ;; @@4b6f 114
  8174  4b6f ad7f12                              lda filters2+3                            ;; @@4b6f 114
  8175  4b72 29f0                                and #$f0                                  ;; @@4b72 114
  8176  4b74 0576                                ora z_p_temp_1                            ;; @@4b74 114
  8177  4b76 8d7f12                              sta filters2+3                            ;; @@4b76 114
  8178                           ;; @@4b79 114
  8179                          ; lda filters2+4  ;???? why     [910612] ;; @@4b79 114
  8180                          ; and #$f0 ;; @@4b79 114
  8181                          ; ora z_p_temp_1 ;; @@4b79 114
  8182                          ; sta filters2+4 ;; @@4b79 114
  8183                           ;; @@4b79 114
  8184                          ; jsr put_io_in_map ;; @@4b79 114
  8185                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@4b79 114
  8186  4b79 8d38d4                              sta sid2+24                               ;; @@4b79 114
  8187                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@4b7c 114
  8188  4b7c 60                                  rts                                       ;; @@4b7c 114
  8189                           ;; @@4b7d 114
  8190                          ;.end ;; @@4b7d 114
  8191                          ; .page ;; @@4b7d 114
  8192                          ; .subttl  SOUND ;; @@4b7d 114
  8193                           ;; @@4b7d 114
  8194                          ;***************************************************************************** ;; @@4b7d 114
  8195                          ;* ;; @@4b7d 114
  8196                          ;*  SOUND - Produce sound effects ;; @@4b7d 114
  8197                          ;* ;; @@4b7d 114
  8198                          ;* Syntax : SOUND v, f, d [,[dir] [,[m] [,[s] [,[w] [,p] ]]]] ;; @@4b7d 114
  8199                          ;* ;; @@4b7d 114
  8200                          ;* Where : v   = voice    (1..6) ;; @@4b7d 114
  8201                          ;*  f   = frequency    (0..65535) ;; @@4b7d 114
  8202                          ;*  d   = duration    (0..32767 jiffys) ;; @@4b7d 114
  8203                          ;*  dir = step direction  (0(up) ,1(down) or 2(oscillate)) default=0 ;; @@4b7d 114
  8204                          ;*  m   = minimum frequency  (if sweep is used) (0..65535) default=0 ;; @@4b7d 114
  8205                          ;*  s   = step value for effects  (0..32767) default=0 ;; @@4b7d 114
  8206                          ;*  w   = waveform  (0=triangle,1=saw,2=square,3=noise) default=2 ;; @@4b7d 114
  8207                          ;*  p   = pulse width  (0..4095) default=2048 (50% duty cycle) ;; @@4b7d 114
  8208                          ;* ;; @@4b7d 114
  8209                          ;***************************************************************************** ;; @@4b7d 114
  8210                           ;; @@4b7d 114
  8211  4b7d c99c               sound            cmp #clr_token                           ; SOUND CLR: init sound/music environment [910717] ;; @@4b7d 115
  8212  4b7f f3d372                              +lbeq Sound_CLR                          ; yes ;; @@4b7f 115
  8213                           ;; @@4b82 115
  8214  4b82 206c5d                              jsr getbyt                               ; get voice number in .X ;; @@4b82 115
  8215  4b85 ca                                  dex                                      ; adjust 1..3 to 0..2 ;; @@4b85 115
  8216  4b86 e006                                cpx #6                                   ; [910612] ;; @@4b86 115
  8217  4b88 b37306             _local_1114_98   +lbcs fcerr                              ; illegal value ;; @@4b88 115
  8218                           ;; @@4b8b 115
  8219  4b8b 8ebd12             _local_1114_10   stx sound_voice                           ;; @@4b8b 115
  8220                           ;; @@4b8e 115
  8221                          ; Get frequency ;; @@4b8e 115
  8222                           ;; @@4b8e 115
  8223  4b8e 20875d                              jsr comwrd                               ; eat comma, get frequency in y,a ;; @@4b8e 115
  8224  4b91 8c6211                              sty temp_max_lo                          ; save our copy of max, also set up as current ;; @@4b91 115
  8225  4b94 8d6311                              sta temp_max_hi                           ;; @@4b94 115
  8226  4b97 8c6911                              sty temp_freq_lo                          ;; @@4b97 115
  8227  4b9a 8d6a11                              sta temp_freq_hi                          ;; @@4b9a 115
  8228                           ;; @@4b9d 115
  8229                          ; Get duration ;; @@4b9d 115
  8230                           ;; @@4b9d 115
  8231  4b9d 20875d                              jsr comwrd                               ; eat comma, get number of jiffys to play ;; @@4b9d 115
  8232  4ba0 c980                                cmp #$80                                  ;; @@4ba0 115
  8233  4ba2 b0e4                                bcs _local_1114_98                        ;; @@4ba2 115
  8234  4ba4 8c6011                              sty temp_time_lo                          ;; @@4ba4 115
  8235  4ba7 8d6111                              sta temp_time_hi                          ;; @@4ba7 115
  8236                           ;; @@4baa 115
  8237                          ; Get sweep direction ;; @@4baa 115
  8238                           ;; @@4baa 115
  8239  4baa 202479                              jsr optzer                               ; get optional sweep (default = 0, up) ;; @@4baa 115
  8240  4bad e003                                cpx #3                                    ;; @@4bad 115
  8241  4baf b0d7                                bcs _local_1114_98                        ;; @@4baf 115
  8242  4bb1 8a                                  txa                                       ;; @@4bb1 115
  8243  4bb2 8d6611                              sta temp_direction                        ;; @@4bb2 115
  8244  4bb5 2901                                and #1                                   ; set .Z if sweep up or oscillate ;; @@4bb5 115
  8245  4bb7 08                                  php                                      ; save .Z for step (below) ;; @@4bb7 115
  8246                           ;; @@4bb8 115
  8247                          ; Get minimum frequency value (sweep lo) ;; @@4bb8 115
  8248                           ;; @@4bb8 115
  8249  4bb8 20f278                              jsr optwrd                                ;; @@4bb8 115
  8250  4bbb 8c6411                              sty temp_min_lo                           ;; @@4bbb 115
  8251  4bbe 8d6511                              sta temp_min_hi                           ;; @@4bbe 115
  8252                           ;; @@4bc1 115
  8253                          ; Get step value for sweep ;; @@4bc1 115
  8254                           ;; @@4bc1 115
  8255  4bc1 20f278                              jsr optwrd                               ; get optional step, default is zero ;; @@4bc1 115
  8256  4bc4 28                                  plp                                      ; get flags from direction ;; @@4bc4 115
  8257  4bc5 f00d                                beq _local_1114_75                       ; branch if 'up' or oscillate ;; @@4bc5 115
  8258  4bc7 48                                  pha                                      ; if 'down', make step 2's complement ;; @@4bc7 115
  8259  4bc8 98                                  tya                                       ;; @@4bc8 115
  8260  4bc9 49ff                                eor #$ff                                  ;; @@4bc9 115
  8261  4bcb 18                                  clc                                       ;; @@4bcb 115
  8262  4bcc 6901                                adc #1                                    ;; @@4bcc 115
  8263  4bce a8                                  tay                                       ;; @@4bce 115
  8264  4bcf 68                                  pla                                       ;; @@4bcf 115
  8265  4bd0 49ff                                eor #$ff                                  ;; @@4bd0 115
  8266  4bd2 6900                                adc #0                                    ;; @@4bd2 115
  8267  4bd4 8d6811             _local_1114_75   sta temp_step_hi                          ;; @@4bd4 115
  8268  4bd7 98                                  tya                                       ;; @@4bd7 115
  8269  4bd8 8d6711                              sta temp_step_lo                          ;; @@4bd8 115
  8270                           ;; @@4bdb 115
  8271                          ; Get waveform ;; @@4bdb 115
  8272                           ;; @@4bdb 115
  8273  4bdb a202                                ldx #2                                   ; get waveform. default is square (2) ;; @@4bdb 115
  8274  4bdd 202679                              jsr optbyt                                ;; @@4bdd 115
  8275  4be0 e004                                cpx #4                                    ;; @@4be0 115
  8276  4be2 b0a4                                bcs _local_1114_98                       ; illegal value ;; @@4be2 115
  8277  4be4 bd6979                              lda sbits+4,x                            ; get bit pattern for selected waveform ;; @@4be4 115
  8278  4be7 0901                                ora #1                                   ; add in the gate bit ;; @@4be7 115
  8279  4be9 8d6d11                              sta temp_waveform                         ;; @@4be9 115
  8280                           ;; @@4bec 115
  8281                          ; Get pulse width ;; @@4bec 115
  8282                           ;; @@4bec 115
  8283  4bec 20f278                              jsr optwrd                               ; get optional pulse width in y,a ;; @@4bec 115
  8284  4bef b004                                bcs _local_1114_80                        ;; @@4bef 115
  8285  4bf1 a908                                lda #8                                   ; no arg's given, use default pulse width ;; @@4bf1 115
  8286  4bf3 a000                                ldy #0                                    ;; @@4bf3 115
  8287  4bf5 c910               _local_1114_80   cmp #16                                   ;; @@4bf5 115
  8288  4bf7 b08f                                bcs _local_1114_98                        ;; @@4bf7 115
  8289  4bf9 8c6b11                              sty temp_pulse_lo                         ;; @@4bf9 115
  8290  4bfc 8d6c11                              sta temp_pulse_hi                         ;; @@4bfc 115
  8291                           ;; @@4bff 115
  8292                          ; All arg's in, time to get to work ;; @@4bff 115
  8293                           ;; @@4bff 115
  8294  4bff ad6011                              lda temp_time_lo                          ;; @@4bff 115
  8295  4c02 0d6111                              ora temp_time_hi                          ;; @@4c02 115
  8296  4c05 f046                                beq _local_1114_100                      ; special case: time=0 means 'kill it NOW' ;; @@4c05 115
  8297                           ;; @@4c07 115
  8298                          ; Wait for all current uses of this voice to time out ;; @@4c07 115
  8299                           ;; @@4c07 115
  8300  4c07 aebd12                              ldx sound_voice                          ; first test 'PLAY' ;; @@4c07 115
  8301  4c0a 8a                                  txa                                      ; make an index into PLAY's tables ;; @@4c0a 115
  8302  4c0b 0a                                  asl                                       ;; @@4c0b 115
  8303  4c0c a8                                  tay                                       ;; @@4c0c 115
  8304  4c0d b95e12             _local_1114_60   lda voices+1,y                            ;; @@4c0d 115
  8305  4c10 10fb                                bpl _local_1114_60                        ;; @@4c10 115
  8306                           ;; @@4c12 115
  8307  4c12 bdc412             _local_1114_70   lda sound_time_hi,x                      ; now test 'SOUND' ;; @@4c12 115
  8308  4c15 10fb                                bpl _local_1114_70                        ;; @@4c15 115
  8309                           ;; @@4c17 115
  8310                          ; All clear, now set up for current effect ;; @@4c17 115
  8311                           ;; @@4c17 115
  8312  4c17 a000                                ldy #0                                   ; download max freq l&h, min freq l&h, ;; @@4c17 115
  8313  4c19 b96211             _local_1114_90   lda temp_max_lo,y                        ; ..sweep direction, step value l&h, & freq l&h ;; @@4c19 115
  8314  4c1c 9dca12                              sta sound_max_lo,x                        ;; @@4c1c 115
  8315  4c1f e8                                  inx                                       ;; @@4c1f 115
  8316  4c20 e8                                  inx                                       ;; @@4c20 115
  8317  4c21 e8                                  inx                                       ;; @@4c21 115
  8318  4c22 e8                                  inx                                      ; [910612] stereo ;; @@4c22 115
  8319  4c23 e8                                  inx                                       ;; @@4c23 115
  8320  4c24 e8                                  inx                                       ;; @@4c24 115
  8321  4c25 c8                                  iny                                       ;; @@4c25 115
  8322  4c26 c009                                cpy #9                                    ;; @@4c26 115
  8323  4c28 90ef                                bcc _local_1114_90                        ;; @@4c28 115
  8324                           ;; @@4c2a 115
  8325                          ; Now set up SID ;; @@4c2a 115
  8326                           ;; @@4c2a 115
  8327  4c2a aebd12                              ldx sound_voice                           ;; @@4c2a 115
  8328  4c2d bc004a                              ldy SID_offset,x                         ; get index to SID voices ;; @@4c2d 115
  8329                          ; jsr put_io_in_map ;; @@4c30 115
  8330                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@4c30 115
  8331                           ;; @@4c30 115
  8332  4c30 a908                                lda #$08                                 ; turn off SID gate ;; @@4c30 115
  8333  4c32 9904d4                              sta sid1+4,y                              ;; @@4c32 115
  8334                           ;; @@4c35 115
  8335  4c35 a900                                lda #0                                   ; set up attack & decay, ;; @@4c35 115
  8336  4c37 9905d4                              sta sid1+5,y                              ;; @@4c37 115
  8337  4c3a a9f0                                lda #$f0                                 ; ..and sustain & release ;; @@4c3a 115
  8338  4c3c 9906d4                              sta sid1+6,y                              ;; @@4c3c 115
  8339                           ;; @@4c3f 115
  8340  4c3f a200                                ldx #0                                   ; set up freq (l&h), pulse width (l&h), & waveform ;; @@4c3f 115
  8341  4c41 bd6911             _local_1114_95   lda temp_freq_lo,x                        ;; @@4c41 115
  8342  4c44 9900d4                              sta sid1,y                                ;; @@4c44 115
  8343  4c47 c8                                  iny                                       ;; @@4c47 115
  8344  4c48 e8                                  inx                                       ;; @@4c48 115
  8345  4c49 e005                                cpx #5                                    ;; @@4c49 115
  8346  4c4b d0f4                                bne _local_1114_95                        ;; @@4c4b 115
  8347                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@4c4d 115
  8348                           ;; @@4c4d 115
  8349                          ; Now set up time to play ;; @@4c4d 115
  8350                           ;; @@4c4d 115
  8351  4c4d aebd12             _local_1114_100  ldx sound_voice                           ;; @@4c4d 115
  8352  4c50 ac6011                              ldy temp_time_lo                          ;; @@4c50 115
  8353  4c53 ad6111                              lda temp_time_hi                          ;; @@4c53 115
  8354                           ;; @@4c56 115
  8355  4c56 78                                  sei                                       ;; @@4c56 115
  8356  4c57 9dc412                              sta sound_time_hi,x                       ;; @@4c57 115
  8357  4c5a 98                                  tya                                       ;; @@4c5a 115
  8358  4c5b 9dbe12                              sta sound_time_lo,x                       ;; @@4c5b 115
  8359  4c5e 58                                  cli                                       ;; @@4c5e 115
  8360                           ;; @@4c5f 115
  8361  4c5f 60                                  rts                                       ;; @@4c5f 115
  8362                           ;; @@4c60 115
  8363                          ;.end ;; @@4c60 115
  8364                          ; .page ;; @@4c60 115
  8365                          ; .subttl  WINDOW ;; @@4c60 115
  8366                           ;; @@4c60 115
  8367                          ;**************************************************************** ;; @@4c60 115
  8368                          ;* ;; @@4c60 115
  8369                          ;*  WINDOW Command ;; @@4c60 115
  8370                          ;* ;; @@4c60 115
  8371                          ;*  Syntax : WINDOW upper-left col, upper-left row, ;; @@4c60 115
  8372                          ;*      lower-left col, lower-right row [,clear] ;; @@4c60 115
  8373                          ;* ;; @@4c60 115
  8374                          ;*  Where  :  0 <= row <= 24 ;; @@4c60 115
  8375                          ;*       0 <= column <= (80/40) ;; @@4c60 115
  8376                          ;*       clear : 0 (no) or 1 (yes) ;; @@4c60 115
  8377                          ;* ;; @@4c60 115
  8378                          ;**************************************************************** ;; @@4c60 115
  8379                           ;; @@4c60 115
  8380  4c60 206c5d             window           jsr getbyt                               ; get u.l. col ;; @@4c60 116
  8381  4c63 e050                                cpx #80                                   ;; @@4c63 116
  8382  4c65 7fd702                              bbr7 _mode,_local_1115_10                 ;; @@4c65 116
  8383  4c68 e028                                cpx #40                                   ;; @@4c68 116
  8384  4c6a b057               _local_1115_10   bcs _local_1115_98                        ;; @@4c6a 116
  8385  4c6c 8e7911                              stx window_temp                           ;; @@4c6c 116
  8386                           ;; @@4c6f 116
  8387  4c6f 20825d                              jsr combyt                               ; get u.l. row ;; @@4c6f 116
  8388  4c72 e019                                cpx #25                                   ;; @@4c72 116
  8389  4c74 b04d                                bcs _local_1115_98                        ;; @@4c74 116
  8390  4c76 8e7a11                              stx window_temp+1                         ;; @@4c76 116
  8391                           ;; @@4c79 116
  8392  4c79 20825d                              jsr combyt                               ; get l.r. column ;; @@4c79 116
  8393  4c7c e050                                cpx #80                                   ;; @@4c7c 116
  8394  4c7e 7fd702                              bbr7 _mode,_local_1115_20                 ;; @@4c7e 116
  8395  4c81 e028                                cpx #40                                   ;; @@4c81 116
  8396  4c83 b03e               _local_1115_20   bcs _local_1115_98                        ;; @@4c83 116
  8397  4c85 8e7b11                              stx window_temp+2                         ;; @@4c85 116
  8398  4c88 ec7911                              cpx window_temp                          ; can't be less than u.l. column ;; @@4c88 116
  8399  4c8b 9036                                bcc _local_1115_98                        ;; @@4c8b 116
  8400                           ;; @@4c8d 116
  8401  4c8d 20825d                              jsr combyt                               ; get l.r. row ;; @@4c8d 116
  8402  4c90 e019                                cpx #25                                   ;; @@4c90 116
  8403  4c92 b02f                                bcs _local_1115_98                        ;; @@4c92 116
  8404  4c94 8e7c11                              stx window_temp+3                         ;; @@4c94 116
  8405  4c97 ec7a11                              cpx window_temp+1                        ; can't be less than u.l. row ;; @@4c97 116
  8406  4c9a 9027                                bcc _local_1115_98                        ;; @@4c9a 116
  8407                           ;; @@4c9c 116
  8408  4c9c 202479                              jsr optzer                               ; get optional clear flag ;; @@4c9c 116
  8409  4c9f e002                                cpx #2                                    ;; @@4c9f 116
  8410  4ca1 b020                                bcs _local_1115_98                        ;; @@4ca1 116
  8411  4ca3 da                                  phx                                       ;; @@4ca3 116
  8412                           ;; @@4ca4 116
  8413  4ca4 ae7911                              ldx window_temp                           ;; @@4ca4 116
  8414  4ca7 ad7a11                              lda window_temp+1                         ;; @@4ca7 116
  8415  4caa 18                                  clc                                       ;; @@4caa 116
  8416  4cab 202de0                              jsr _set_window                           ;; @@4cab 116
  8417                           ;; @@4cae 116
  8418  4cae ae7b11                              ldx window_temp+2                         ;; @@4cae 116
  8419  4cb1 ad7c11                              lda window_temp+3                         ;; @@4cb1 116
  8420  4cb4 38                                  sec                                       ;; @@4cb4 116
  8421  4cb5 202de0                              jsr _set_window                           ;; @@4cb5 116
  8422                           ;; @@4cb8 116
  8423  4cb8 a213                                ldx #19                                  ; assume 'home', not 'cls' ;; @@4cb8 116
  8424  4cba 68                                  pla                                       ;; @@4cba 116
  8425  4cbb f002                                beq _local_1115_30                        ;; @@4cbb 116
  8426  4cbd a293                                ldx #147                                  ;; @@4cbd 116
  8427  4cbf 8a                 _local_1115_30   txa                                       ;; @@4cbf 116
  8428  4cc0 4cd2ff                              jmp _bsout                                ;; @@4cc0 116
  8429                           ;; @@4cc3 116
  8430  4cc3 833805             _local_1115_98   +lbra fcerr                              ; illegal value error ;; @@4cc3 116
  8431                           ;; @@4cc6 116
  8432                          ;.end ;; @@4cc6 116
  8433                          ; .page ;; @@4cc6 116
  8434                          ; .subttl  FAST  SLOW ;; @@4cc6 116
  8435                           ;; @@4cc6 116
  8436                          ;*********************************************************************** ;; @@4cc6 116
  8437                          ; ;; @@4cc6 116
  8438                          ;    FAST - put the system in FAST (4 MHz?) mode. ;; @@4cc6 116
  8439                          ; ;; @@4cc6 116
  8440                          ;*********************************************************************** ;; @@4cc6 116
  8441                           ;; @@4cc6 116
  8442                          fast                                                       ;; @@4cc6 117
  8443  4cc6 d381e1                              +lbne snerr                              ; no args      [910410] ;; @@4cc6 117
  8444                          ; jsr put_io_in_map ;; @@4cc9 117
  8445  4cc9 a940                                lda #%01000000                            ;; @@4cc9 117
  8446  4ccb 0c31d0                              tsb vic+49                               ; set FAST (4MHz?) mode ;; @@4ccb 117
  8447  4cce 60                                  rts                                       ;; @@4cce 117
  8448                           ;; @@4ccf 117
  8449                           ;; @@4ccf 117
  8450                           ;; @@4ccf 117
  8451                          ;*********************************************************************** ;; @@4ccf 117
  8452                          ; ;; @@4ccf 117
  8453                          ;    SLOW - put the system in SLOW (1 MHz) mode. ;; @@4ccf 117
  8454                          ; ;; @@4ccf 117
  8455                          ;*********************************************************************** ;; @@4ccf 117
  8456                           ;; @@4ccf 117
  8457                          slow                                                       ;; @@4ccf 117
  8458  4ccf d378e1                              +lbne snerr                              ; no args      [910410] ;; @@4ccf 117
  8459                          ; jsr put_io_in_map ;; @@4cd2 117
  8460  4cd2 a940                                lda #%01000000                            ;; @@4cd2 117
  8461  4cd4 1c31d0                              trb vic+49                                ;; @@4cd4 117
  8462  4cd7 60                                  rts                                       ;; @@4cd7 117
  8463                           ;; @@4cd8 117
  8464                          ;.end ;; @@4cd8 117
  8465                          ; .page ;; @@4cd8 117
  8466                          ; .subttl Check Value Types ;; @@4cd8 117
  8467                           ;; @@4cd8 117
  8468                          ; These routines check for certain VALTYP.   (c) is not preserved. ;; @@4cd8 117
  8469                           ;; @@4cd8 117
  8470                           ;; @@4cd8 117
  8471                           ;; @@4cd8 117
  8472  4cd8 20ef4c             frmnum           jsr frmevl                                ;; @@4cd8 117
  8473                           ;; @@4cdb 117
  8474  4cdb 18                 chknum           clc                                       ;; @@4cdb 117
  8475  4cdc 89                                  !text $89                                 ;; @@4cdc 117
  8476                           ;; @@4cdd 117
  8477  4cdd 38                 chkstr           sec                                       ;; @@4cdd 117
  8478                           ;; @@4cde 117
  8479                          chkval                                                     ;; @@4cde 117
  8480                          ; bbs7 valtyp,docstr ;cannot do this- return status +/-/= needed! ;; @@4cde 117
  8481  4cde 240f                                bit valtyp                                ;; @@4cde 117
  8482  4ce0 3003                                bmi docstr                                ;; @@4ce0 117
  8483  4ce2 b003                                bcs chkerr                                ;; @@4ce2 117
  8484  4ce4 60                 chkok            rts                                       ;; @@4ce4 117
  8485                           ;; @@4ce5 117
  8486  4ce5 b0fd               docstr           bcs chkok                                 ;; @@4ce5 117
  8487                           ;; @@4ce7 117
  8488  4ce7 a216               chkerr           ldx #errtm                                ;; @@4ce7 117
  8489  4ce9 2c                                  !text $2c                                 ;; @@4ce9 117
  8490                           ;; @@4cea 117
  8491  4cea a219               sterr            ldx #errst                                ;; @@4cea 117
  8492  4cec 8360e1                              +lbra error                               ;; @@4cec 117
  8493                           ;; @@4cef 117
  8494                          ;.end ;; @@4cef 117
  8495                          ; .page ;; @@4cef 117
  8496                          ; .subttl Formula Evaluator ;; @@4cef 117
  8497                           ;; @@4cef 117
  8498                          ; Formula Evaluator Routine ;; @@4cef 117
  8499                          ; ;; @@4cef 117
  8500                          ; The formula evaluator starts with (txtptr) pointing to the first character ;; @@4cef 117
  8501                          ; in the formula.  At the end (txtptr) points to the terminator. ;; @@4cef 117
  8502                          ; The result is left in the FAC.  On return (a) does not reflect the terminator. ;; @@4cef 117
  8503                          ; ;; @@4cef 117
  8504                          ; The formula evaluator uses the operator (optab) to determine precedence and ;; @@4cef 117
  8505                          ; dispatch addresses for each operator. ;; @@4cef 117
  8506                          ; A temporary result on the stack has the following format: ;; @@4cef 117
  8507                          ; ;; @@4cef 117
  8508                          ;     * The address of the operator routine. ;; @@4cef 117
  8509                          ;     * The floating point temporary result. ;; @@4cef 117
  8510                          ;     * The precedence of the operator. ;; @@4cef 117
  8511                           ;; @@4cef 117
  8512                           ;; @@4cef 117
  8513  4cef c33d               frmevl           dew txtptr                               ; txtptr points to 1st char. in formula ;; @@4cef 117
  8514  4cf1 a200                                ldx #0                                   ; dummy precedence = 0 ;; @@4cf1 117
  8515  4cf3 89                                  !text $89                                 ;; @@4cf3 117
  8516                           ;; @@4cf4 117
  8517  4cf4 48                 lpoper           pha                                      ; save precedence ;; @@4cf4 117
  8518  4cf5 da                                  phx                                       ;; @@4cf5 117
  8519  4cf6 ba                                  tsx                                      ; confirm enough system stack available (recursive calls) ;; @@4cf6 117
  8520  4cf7 e089                                cpx #<sysstk+44                          ; bottom of stack + room for error handling ;; @@4cf7 117
  8521  4cf9 90ef                                bcc sterr                                ; formula too complex ;; @@4cf9 117
  8522  4cfb 20e24d                              jsr eval                                  ;; @@4cfb 117
  8523  4cfe a900                                lda #0                                    ;; @@4cfe 117
  8524  4d00 854f                                sta opmask                                ;; @@4d00 117
  8525                           ;; @@4d02 117
  8526  4d02 208522             tstop            jsr chrgot                               ; last char ;; @@4d02 117
  8527  4d05 38                 loprel           sec                                      ; prepare to subtract ;; @@4d05 117
  8528  4d06 e9b1                                sbc #greater_token                       ; is current character a relation? ;; @@4d06 117
  8529  4d08 9017                                bcc endrel                               ; no, relations all through ;; @@4d08 117
  8530  4d0a c903                                cmp #less_token-greater_token+1           ;; @@4d0a 117
  8531  4d0c b013                                bcs endrel                               ; really relational?  no, just big ;; @@4d0c 117
  8532  4d0e c901                                cmp #1                                   ; reset carry for zero only ;; @@4d0e 117
  8533  4d10 2a                                  rol                                      ; 0 to 1, 1 to 2, 2 to 4 ;; @@4d10 117
  8534  4d11 4901                                eor #1                                    ;; @@4d11 117
  8535  4d13 454f                                eor opmask                               ; bring in the old bits ;; @@4d13 117
  8536  4d15 c54f                                cmp opmask                               ; make sure that the new mask is bigger ;; @@4d15 117
  8537  4d17 9330e1                              +lbcc snerr                              ; syntax error, because two of the same ;; @@4d17 117
  8538  4d1a 854f                                sta opmask                               ; save mask ;; @@4d1a 117
  8539  4d1c 208322                              jsr chrget                                ;; @@4d1c 117
  8540  4d1f 80e4                                bra loprel                               ; get the next candidate ;; @@4d1f 117
  8541                           ;; @@4d21 117
  8542                          ; .page ;; @@4d21 117
  8543  4d21 a64f               endrel           ldx opmask                               ; were there any? ;; @@4d21 117
  8544  4d23 d02c                                bne finrel                               ; yes, handle as special op ;; @@4d23 117
  8545  4d25 b38f00                              +lbcs qop                                ; not an operator ;; @@4d25 117
  8546  4d28 6907                                adc #greater_token-plus_token             ;; @@4d28 117
  8547  4d2a 938a00                              +lbcc qop                                ; not an operator ;; @@4d2a 117
  8548  4d2d 650f                                adc valtyp                               ; (c)=1 ;; @@4d2d 117
  8549  4d2f f3c40d                              +lbeq cat                                ; only if (a)=0 and VALTYP=$FF (a string) ;; @@4d2f 117
  8550                           ;; @@4d32 117
  8551  4d32 69ff                                adc #$ff                                 ; get back original (a) ;; @@4d32 117
  8552  4d34 8524                                sta index1                                ;; @@4d34 117
  8553  4d36 0a                                  asl                                      ; multiply by two ;; @@4d36 117
  8554  4d37 6524                                adc index1                               ; by three ;; @@4d37 117
  8555  4d39 a8                                  tay                                      ; set up for later ;; @@4d39 117
  8556                           ;; @@4d3a 117
  8557  4d3a 68                 qprec            pla                                      ; get previous precedence ;; @@4d3a 117
  8558  4d3b d94c29                              cmp optab,y                              ; is old precedence greater or equal? ;; @@4d3b 117
  8559  4d3e b07c                                bcs qchnum                               ; yes, go operate ;; @@4d3e 117
  8560  4d40 20db4c                              jsr chknum                               ; can't be string here ;; @@4d40 117
  8561                           ;; @@4d43 117
  8562  4d43 48                 doprec           pha                                      ; save old precedence ;; @@4d43 117
  8563                           ;; @@4d44 117
  8564  4d44 20644d             negprc           jsr dopre1                               ; save a return for op ;; @@4d44 117
  8565  4d47 68                                  pla                                      ; pull off previous precedence ;; @@4d47 117
  8566  4d48 a44d                                ldy opptr                                ; get pointer to op ;; @@4d48 117
  8567  4d4a 1011                                bpl qprec1                               ; that's a real operator ;; @@4d4a 117
  8568  4d4c aa                                  tax                                      ; done? ;; @@4d4c 117
  8569  4d4d f06b                                beq qopgo                                ; done! ;; @@4d4d 117
  8570  4d4f 8074                                bra pulstk                                ;; @@4d4f 117
  8571                           ;; @@4d51 117
  8572                          ; .page ;; @@4d51 117
  8573  4d51 460f               finrel           lsr valtyp                               ; get value type into (c) ;; @@4d51 117
  8574  4d53 8a                                  txa                                       ;; @@4d53 117
  8575  4d54 2a                                  rol                                      ; put VALTYP into low order bit of mask ;; @@4d54 117
  8576  4d55 c33d                                dew txtptr                               ; decrement text pointer ;; @@4d55 117
  8577  4d57 a01b                                ldy #ptdorl-optab                        ; make (y) point at operator entry ;; @@4d57 117
  8578  4d59 854f                                sta opmask                               ; save the operation mask ;; @@4d59 117
  8579  4d5b 80dd                                bra qprec                                ; branch always ;; @@4d5b 117
  8580                           ;; @@4d5d 117
  8581                           ;; @@4d5d 117
  8582                          qprec1                                                    ; note b7(VALTYP)=0 so CHKNUM call is ok ;; @@4d5d 117
  8583  4d5d d94c29                              cmp optab,y                              ; last precedence is greater? ;; @@4d5d 117
  8584  4d60 b063                                bcs pulstk                               ; yes, go operate ;; @@4d60 117
  8585  4d62 90df                                bcc doprec                               ; no, save argument and get other operand ;; @@4d62 117
  8586                           ;; @@4d64 117
  8587                           ;; @@4d64 117
  8588  4d64 b94e29             dopre1           lda optab+2,y                             ;; @@4d64 117
  8589  4d67 48                                  pha                                      ; disp addr goes on stack ;; @@4d67 117
  8590  4d68 b94d29                              lda optab+1,y                             ;; @@4d68 117
  8591  4d6b 48                                  pha                                       ;; @@4d6b 117
  8592  4d6c 20734d                              jsr pushf1                               ; save FAC on stack unpacked, precedence in (x) ;; @@4d6c 117
  8593  4d6f a54f                                lda opmask                               ; (a) may be mask for rel ;; @@4d6f 117
  8594  4d71 8081                                bra lpoper                                ;; @@4d71 117
  8595                           ;; @@4d73 117
  8596                          ; .page ;; @@4d73 117
  8597                          pushf1                                                    ; save FAC on stack unpacked ;; @@4d73 117
  8598  4d73 68                                  pla                                      ; first grab return address off stack ;; @@4d73 117
  8599  4d74 8524                                sta index1                                ;; @@4d74 117
  8600  4d76 68                                  pla                                       ;; @@4d76 117
  8601  4d77 8525                                sta index1+1                              ;; @@4d77 117
  8602  4d79 e324                                inw index1                                ;; @@4d79 117
  8603                           ;; @@4d7b 117
  8604  4d7b be4c29                              ldx optab,y                              ; precedence ;; @@4d7b 117
  8605  4d7e a468                                ldy facsgn                                ;; @@4d7e 117
  8606  4d80 5a                                  phy                                       ;; @@4d80 117
  8607  4d81 20b262                              jsr round                                ; put rounded FAC on stack ;; @@4d81 117
  8608  4d84 a567                                lda faclo                                 ;; @@4d84 117
  8609  4d86 48                                  pha                                       ;; @@4d86 117
  8610  4d87 a566                                lda facmo                                 ;; @@4d87 117
  8611  4d89 48                                  pha                                       ;; @@4d89 117
  8612  4d8a a565                                lda facmoh                                ;; @@4d8a 117
  8613  4d8c 48                                  pha                                       ;; @@4d8c 117
  8614  4d8d a564                                lda facho                                 ;; @@4d8d 117
  8615  4d8f 48                                  pha                                       ;; @@4d8f 117
  8616  4d90 a563                                lda facexp                                ;; @@4d90 117
  8617  4d92 48                                  pha                                       ;; @@4d92 117
  8618  4d93 6c2400                              jmp (index1)                             ; return ;; @@4d93 117
  8619                           ;; @@4d96 117
  8620                           ;; @@4d96 117
  8621                          pullf1                                                    ; retrieve FAC from stack unpacked  [910402] ;; @@4d96 117
  8622  4d96 68                                  pla                                      ; first grab return address off stack ;; @@4d96 117
  8623  4d97 8524                                sta index1                                ;; @@4d97 117
  8624  4d99 68                                  pla                                       ;; @@4d99 117
  8625  4d9a 8525                                sta index1+1                              ;; @@4d9a 117
  8626  4d9c e324                                inw index1                                ;; @@4d9c 117
  8627                           ;; @@4d9e 117
  8628  4d9e a900                                lda #0                                   ; it's been rounded ;; @@4d9e 117
  8629  4da0 8571                                sta facov                                 ;; @@4da0 117
  8630  4da2 68                                  pla                                       ;; @@4da2 117
  8631  4da3 8563                                sta facexp                                ;; @@4da3 117
  8632  4da5 68                                  pla                                       ;; @@4da5 117
  8633  4da6 8564                                sta facho                                 ;; @@4da6 117
  8634  4da8 68                                  pla                                       ;; @@4da8 117
  8635  4da9 8565                                sta facmoh                                ;; @@4da9 117
  8636  4dab 68                                  pla                                       ;; @@4dab 117
  8637  4dac 8566                                sta facmo                                 ;; @@4dac 117
  8638  4dae 68                                  pla                                       ;; @@4dae 117
  8639  4daf 8567                                sta faclo                                 ;; @@4daf 117
  8640  4db1 68                                  pla                                       ;; @@4db1 117
  8641  4db2 8568                                sta facsgn                                ;; @@4db2 117
  8642  4db4 6c2400                              jmp (index1)                             ; return ;; @@4db4 117
  8643                           ;; @@4db7 117
  8644                          ; .page ;; @@4db7 117
  8645  4db7 a0ff               qop              ldy #255                                  ;; @@4db7 117
  8646  4db9 68                                  pla                                      ; get high precedence of last op ;; @@4db9 117
  8647  4dba f023               qopgo            beq qoprts                               ; done! ;; @@4dba 117
  8648                           ;; @@4dbc 117
  8649  4dbc c964               qchnum           cmp #100                                 ; relational operator? ;; @@4dbc 117
  8650  4dbe f003                                beq unpstk                               ; yes, don't check operand ;; @@4dbe 117
  8651  4dc0 20db4c                              jsr chknum                               ; must be number ;; @@4dc0 117
  8652                           ;; @@4dc3 117
  8653  4dc3 844d               unpstk           sty opptr                                ; save operator's pointer for next time ;; @@4dc3 117
  8654  4dc5 68                 pulstk           pla                                      ; get mask for rel op if it is one ;; @@4dc5 117
  8655  4dc6 4a                                  lsr                                      ; setup .c for dorel's chkval ;; @@4dc6 117
  8656  4dc7 8514                                sta domask                               ; save for "docmp" ;; @@4dc7 117
  8657  4dc9 68                                  pla                                      ; unpack stack into arg ;; @@4dc9 117
  8658  4dca 856a                                sta argexp                                ;; @@4dca 117
  8659  4dcc 68                                  pla                                       ;; @@4dcc 117
  8660  4dcd 856b                                sta argho                                 ;; @@4dcd 117
  8661  4dcf 68                                  pla                                       ;; @@4dcf 117
  8662  4dd0 856c                                sta argmoh                                ;; @@4dd0 117
  8663  4dd2 68                                  pla                                       ;; @@4dd2 117
  8664  4dd3 856d                                sta argmo                                 ;; @@4dd3 117
  8665  4dd5 68                                  pla                                       ;; @@4dd5 117
  8666  4dd6 856e                                sta arglo                                 ;; @@4dd6 117
  8667  4dd8 68                                  pla                                       ;; @@4dd8 117
  8668  4dd9 856f                                sta argsgn                                ;; @@4dd9 117
  8669  4ddb 4568                                eor facsgn                               ; get probable result sign ;; @@4ddb 117
  8670  4ddd 8570                                sta arisgn                               ; sign used by add, sub, mul, div ;; @@4ddd 117
  8671                           ;; @@4ddf 117
  8672  4ddf a563               qoprts           lda facexp                               ; get it and set codes ;; @@4ddf 117
  8673  4de1 60                                  rts                                      ; return ;; @@4de1 117
  8674                          ; .page ;; @@4de2 117
  8675  4de2 6c0a03             eval             jmp (ieval)                               ;; @@4de2 117
  8676                           ;; @@4de5 117
  8677  4de5 a900               neval            lda #0                                   ; assume numeric ;; @@4de5 117
  8678  4de7 850f                                sta valtyp                                ;; @@4de7 117
  8679                           ;; @@4de9 117
  8680  4de9 208322             eval0            jsr chrget                               ; get a character ;; @@4de9 117
  8681  4dec b005                                bcs eval2                                 ;; @@4dec 117
  8682  4dee a200               eval1            ldx #0                                   ; flag 'bank 0' (text bank) ;; @@4dee 117
  8683  4df0 839a15                              +lbra fin                                ; it is a number ;; @@4df0 117
  8684                           ;; @@4df3 117
  8685  4df3 200250             eval2            jsr isletc                               ; variable name? ;; @@4df3 117
  8686  4df6 b07b                                bcs is_variable                          ; yes. ;; @@4df6 117
  8687  4df8 c9ff                                cmp #pi                                  ; pi? ;; @@4df8 117
  8688  4dfa d00a                                bne qdot                                  ;; @@4dfa 117
  8689  4dfc a91e                                lda #<pival                               ;; @@4dfc 117
  8690  4dfe a05f                                ldy #>pival                               ;; @@4dfe 117
  8691  4e00 200e62                              jsr movfm                                ; put value in for p1. ;; @@4e00 117
  8692  4e03 4c8322                              jmp chrget                                ;; @@4e03 117
  8693                           ;; @@4e06 117
  8694                           ;; @@4e06 117
  8695  4e06 c92e               qdot             cmp #'.'                                 ; constant? ;; @@4e06 117
  8696  4e08 f0e4                                beq eval1                                 ;; @@4e08 117
  8697  4e0a c9ab                                cmp #minus_token                         ; negation? ;; @@4e0a 117
  8698  4e0c f05e                                beq domin                                ; yes. ;; @@4e0c 117
  8699  4e0e c9aa                                cmp #plus_token                           ;; @@4e0e 117
  8700  4e10 f0d7                                beq eval0                                 ;; @@4e10 117
  8701  4e12 c922                                cmp #'"'                                 ; string? ;; @@4e12 117
  8702  4e14 d015                                bne eval3                                 ;; @@4e14 117
  8703                           ;; @@4e16 117
  8704  4e16 a53d               strtxt           lda txtptr                                ;; @@4e16 117
  8705  4e18 a43e                                ldy txtptr+1                              ;; @@4e18 117
  8706  4e1a 6900                                adc #0                                   ; c=1 ;; @@4e1a 117
  8707  4e1c 9001                                bcc strtx2                                ;; @@4e1c 117
  8708  4e1e c8                                  iny                                       ;; @@4e1e 117
  8709  4e1f 20855a             strtx2           jsr strlit                               ; process string ;; @@4e1f 117
  8710                           ;; @@4e22 117
  8711  4e22 a672               st2txt           ldx strng2                                ;; @@4e22 117
  8712  4e24 a473                                ldy strng2+1                              ;; @@4e24 117
  8713  4e26 863d                                stx txtptr                                ;; @@4e26 117
  8714  4e28 843e                                sty txtptr+1                              ;; @@4e28 117
  8715  4e2a 60                                  rts                                       ;; @@4e2a 117
  8716                           ;; @@4e2b 117
  8717                          ; .page ;; @@4e2b 117
  8718  4e2b c9a8               eval3            cmp #not_token                           ; not? ;; @@4e2b 117
  8719  4e2d d016                                bne eval4                                 ;; @@4e2d 117
  8720  4e2f a018                                ldy #24                                   ;; @@4e2f 117
  8721  4e31 d03b                                bne gonprc                               ; branch always ;; @@4e31 117
  8722                           ;; @@4e33 117
  8723                           ;; @@4e33 117
  8724  4e33 20b458             notop            jsr ayint                                ; integerize ;; @@4e33 117
  8725  4e36 a567                                lda faclo                                ; get argument ;; @@4e36 117
  8726  4e38 49ff                                eor #$ff                                  ;; @@4e38 117
  8727  4e3a a8                                  tay                                       ;; @@4e3a 117
  8728  4e3b a566                                lda facmo                                 ;; @@4e3b 117
  8729  4e3d 49ff                                eor #$ff                                  ;; @@4e3d 117
  8730                           ;; @@4e3f 117
  8731  4e3f 20d758             givayf           jsr stoint                               ; integer to float routine ;; @@4e3f 117
  8732  4e42 839514                              +lbra floats                              ;; @@4e42 117
  8733                           ;; @@4e45 117
  8734                           ;; @@4e45 117
  8735  4e45 c9a5               eval4            cmp #fn_token                            ; user defined function? ;; @@4e45 117
  8736  4e47 f3eb0a                              +lbeq fndoer                             ; yes ;; @@4e47 117
  8737  4e4a c9b4                                cmp #first_function_token                ; function name? ;; @@4e4a 117
  8738  4e4c b3bede                              +lbcs isfun                              ; yes ;; @@4e4c 117
  8739                          ; (functions are the highest numbered ;; @@4e4f 117
  8740                          ; tokens so no need to check further) ;; @@4e4f 117
  8741                          ; .page ;; @@4e4f 117
  8742  4e4f 20584e             parchk           jsr chkopn                               ; only thing left is formula in parens ;; @@4e4f 117
  8743  4e52 20ef4c                              jsr frmevl                               ; a formula in parens ;; @@4e52 117
  8744                           ;; @@4e55 117
  8745  4e55 a929               chkcls           lda #')'                                 ; close paren? ;; @@4e55 117
  8746  4e57 2c                                  !text $2c                                 ;; @@4e57 117
  8747                           ;; @@4e58 117
  8748  4e58 a928               chkopn           lda #'('                                 ; open paren? ;; @@4e58 117
  8749  4e5a 2c                                  !text $2c                                 ;; @@4e5a 117
  8750                           ;; @@4e5b 117
  8751  4e5b a92c               chkcom           lda #','                                 ; comma? ;; @@4e5b 117
  8752                           ;; @@4e5d 117
  8753                           ;; @@4e5d 117
  8754                          ; SYNCHR looks at the current character to make sure it is the specific ;; @@4e5d 117
  8755                          ; thing loaded into (a) just before the call to SYNCHR.  If not, it calls ;; @@4e5d 117
  8756                          ; the "syntax error" routine.  Otherwise it gobbles the next char and returns. ;; @@4e5d 117
  8757                          ; ;; @@4e5d 117
  8758                          ; (a)=new char and TXTPTR is advanced by CHRGET. ;; @@4e5d 117
  8759                           ;; @@4e5d 117
  8760                           ;; @@4e5d 117
  8761  4e5d a000               synchr           ldy #0                                    ;; @@4e5d 117
  8762  4e5f 8578                                sta syntmp                                ;; @@4e5f 117
  8763  4e61 20c522                              jsr indtxt                                ;; @@4e61 117
  8764  4e64 c578                                cmp syntmp                                ;; @@4e64 117
  8765  4e66 d3e1df                              +lbne snerr                               ;; @@4e66 117
  8766  4e69 4c8322                              jmp chrget                               ; ok ;; @@4e69 117
  8767                           ;; @@4e6c 117
  8768                           ;; @@4e6c 117
  8769                           ;; @@4e6c 117
  8770                          domin                                                      ;; @@4e6c 117
  8771                          _local_1116_10   =negtab-optab                            ; negoff ;; @@4e6c 117
  8772  4e6c a015                                ldy #_local_1116_10                      ; precedence below '-' ;; @@4e6c 117
  8773                           ;; @@4e6e 117
  8774  4e6e 68                 gonprc           pla                                      ; get rid of rts addr. ;; @@4e6e 118
  8775  4e6f 68                                  pla                                       ;; @@4e6f 118
  8776  4e70 83d1fe                              +lbra negprc                             ; do negation ;; @@4e70 118
  8777                           ;; @@4e73 118
  8778                          ;.end ;; @@4e73 118
  8779                          ; .page ;; @@4e73 118
  8780                          ; .subttl Variable Assignment ;; @@4e73 118
  8781                           ;; @@4e73 118
  8782                          is_variable                                                ;; @@4e73 118
  8783  4e73 207c4f                              jsr ptrget                               ; parse variable name, put name in varnam ;; @@4e73 118
  8784                           ;; @@4e76 118
  8785  4e76 8566               isvret           sta facmo                                ; save pointer to variable ;; @@4e76 118
  8786  4e78 8467                                sty facmo+1                               ;; @@4e78 118
  8787  4e7a a647                                ldx varnam                                ;; @@4e7a 118
  8788  4e7c a448                                ldy varnam+1                              ;; @@4e7c 118
  8789  4e7e a50f                                lda valtyp                                ;; @@4e7e 118
  8790  4e80 f050                                beq is_numeric                           ; branch if numeric ;; @@4e80 118
  8791                           ;; @@4e82 118
  8792  4e82 a900                                lda #0                                    ;; @@4e82 118
  8793  4e84 8571                                sta facov                                 ;; @@4e84 118
  8794  4e86 e054                                cpx #'T'                                 ; TI$ is a special case. look for it ;; @@4e86 118
  8795  4e88 d013                                bne isvds                                ; no- go test for DS$ ;; @@4e88 118
  8796  4e8a c0c9                                cpy #'I'+$80                             ; shifted I? ;; @@4e8a 118
  8797  4e8c d043                                bne ds_rts                               ; no- and it's not DS$ either ;; @@4e8c 118
  8798                           ;; @@4e8e 118
  8799                          ; Variable name is TI$.  To see if this is 'the' TI$ and not an ;; @@4e8e 118
  8800                          ; array TI$(), test to see if it has a pointer to the zero in "ROM". ;; @@4e8e 118
  8801                          ; If it is an array item, its pointer will be to a real value, or ;; @@4e8e 118
  8802                          ; a real zero.  If it isn't an array item, its pointer will point ;; @@4e8e 118
  8803                          ; to a dummy zero in "ROM". ;; @@4e8e 118
  8804                           ;; @@4e8e 118
  8805  4e8e a567                                lda facmo+1                               ;; @@4e8e 118
  8806  4e90 c902                                cmp #>zero                                ;; @@4e90 118
  8807  4e92 d03d                                bne ds_rts                               ; not TI$, not DS$ ;; @@4e92 118
  8808  4e94 a566                                lda facmo                                 ;; @@4e94 118
  8809  4e96 c9c4                                cmp #<zero                                ;; @@4e96 118
  8810  4e98 d037                                bne ds_rts                                ;; @@4e98 118
  8811  4e9a 835805                              +lbra Get_TI_String                      ; the one and only TI$ ;; @@4e9a 118
  8812                           ;; @@4e9d 118
  8813                          ; .page ;; @@4e9d 118
  8814  4e9d e044               isvds            cpx #'D'                                 ; is this DS$? ;; @@4e9d 118
  8815  4e9f d030                                bne ds_rts                               ; no ;; @@4e9f 118
  8816  4ea1 c0d3                                cpy #'S'+$80                             ; shifted S? ;; @@4ea1 118
  8817  4ea3 d02c                                bne ds_rts                               ; no ;; @@4ea3 118
  8818                           ;; @@4ea5 118
  8819  4ea5 200e78                              jsr Check_DS                             ; yes- check DS$ allocation, ;; @@4ea5 118
  8820                          ;  and get it if not in memory ;; @@4ea8 118
  8821  4ea8 a0ff                                ldy #$ff                                  ;; @@4ea8 118
  8822  4eaa c8                 _local_1117_10   iny                                      ; copy DS$ to a temp. ;; @@4eaa 118
  8823  4eab a97a                                lda #dsdesc+1                            ; must first determine how big it is ;; @@4eab 118
  8824  4ead 20d722                              jsr lda_far_ram1                         ; lda (dsdesc+1),y ;; @@4ead 118
  8825  4eb0 d0f8                                bne _local_1117_10                       ; loop until terminating null found ;; @@4eb0 118
  8826                           ;; @@4eb2 118
  8827  4eb2 98                                  tya                                      ; length of string required ;; @@4eb2 118
  8828  4eb3 20735a                              jsr strini                               ; get temp. string space & descriptor ;; @@4eb3 118
  8829  4eb6 a8                                  tay                                       ;; @@4eb6 118
  8830  4eb7 f015                                beq _local_1117_30                       ; (don't bother copying if length is 0) ;; @@4eb7 118
  8831                           ;; @@4eb9 118
  8832  4eb9 da                                  phx                                       ;; @@4eb9 118
  8833                           ;; @@4eba 118
  8834  4eba a264                                ldx #dsctmp+1                            ; ???? was ldx #frespc ;; @@4eba 118
  8835  4ebc a97a               _local_1117_20   lda #dsdesc+1                            ; copy DS$ into temp ;; @@4ebc 118
  8836  4ebe 88                                  dey                                       ;; @@4ebe 118
  8837  4ebf 20d722                              jsr lda_far_ram1                         ; lda (dsdesc+1),y ;; @@4ebf 118
  8838  4ec2 20f022                              jsr sta_far_ram1                         ; sta (dsctmp+1),y ;; @@4ec2 118
  8839  4ec5 98                                  tya                                       ;; @@4ec5 118
  8840  4ec6 d0f4                                bne _local_1117_20                        ;; @@4ec6 118
  8841  4ec8 fa                                  plx                                       ;; @@4ec8 118
  8842  4ec9 a579                                lda dsdesc                               ; a=length     [901014] FAB ;; @@4ec9 118
  8843  4ecb 205d5b                              jsr mvdone                               ; ???? (does nothing on C128 - bug or oversight?) ;; @@4ecb 118
  8844                           ;; @@4ece 118
  8845  4ece 83ff0b             _local_1117_30   +lbra putnew                              ;; @@4ece 118
  8846                           ;; @@4ed1 118
  8847  4ed1 60                 ds_rts           rts                                       ;; @@4ed1 119
  8848                           ;; @@4ed2 119
  8849                          ; .page ;; @@4ed2 119
  8850                          is_numeric                                                 ;; @@4ed2 119
  8851  4ed2 7f100f                              bbr7 intflg,is_floating                  ; branch if not an integer ;; @@4ed2 119
  8852  4ed5 a000                                ldy #0                                    ;; @@4ed5 119
  8853  4ed7 20a922                              jsr indfmo                               ; fetch high ;; @@4ed7 119
  8854  4eda aa                                  tax                                       ;; @@4eda 119
  8855  4edb c8                                  iny                                       ;; @@4edb 119
  8856  4edc 20a922                              jsr indfmo                               ; fetch low ;; @@4edc 119
  8857  4edf a8                                  tay                                      ; put low in y ;; @@4edf 119
  8858  4ee0 8a                                  txa                                      ; get high in a ;; @@4ee0 119
  8859  4ee1 835bff                              +lbra givayf                             ; float and return ;; @@4ee1 119
  8860                           ;; @@4ee4 119
  8861                           ;; @@4ee4 119
  8862                          ; Screen out TI, ST, ER, and EL, and assign values to them.  First test ;; @@4ee4 119
  8863                          ; if the pointer points to "ROM" zero.  If not, it can't be any of the above. ;; @@4ee4 119
  8864                           ;; @@4ee4 119
  8865                          is_floating                                                ;; @@4ee4 119
  8866  4ee4 a567                                lda facmo+1                               ;; @@4ee4 119
  8867  4ee6 c902                                cmp #>zero                                ;; @@4ee6 119
  8868  4ee8 d064                                bne gomovf                               ; not TI, etc. ;; @@4ee8 119
  8869  4eea a566                                lda facmo                                 ;; @@4eea 119
  8870  4eec c9c4                                cmp #<zero                                ;; @@4eec 119
  8871  4eee d05e                                bne gomovf                               ; not TI, etc. ;; @@4eee 119
  8872                           ;; @@4ef0 119
  8873                          ; .page ;; @@4ef0 119
  8874                          ; The pointer does point to the ROM zero.  Now it is necessary to ;; @@4ef0 119
  8875                          ; examine the actual variable name case by case. ;; @@4ef0 119
  8876                           ;; @@4ef0 119
  8877  4ef0 e054                                cpx #'T'                                 ; TI? ;; @@4ef0 119
  8878  4ef2 d007                                bne qstatv                               ; no ;; @@4ef2 119
  8879  4ef4 c049                                cpy #'I'                                  ;; @@4ef4 119
  8880  4ef6 d056                                bne gomovf                               ; no, and it can't be ST either ;; @@4ef6 119
  8881  4ef8 f34705                              +lbeq Get_TI                              ;; @@4ef8 119
  8882                           ;; @@4efb 119
  8883                           ;; @@4efb 119
  8884  4efb e053               qstatv           cpx #'S'                                 ; ST? ;; @@4efb 119
  8885  4efd d00a                                bne qdsav                                ; no, go test DS ;; @@4efd 119
  8886  4eff c054                                cpy #'T'                                  ;; @@4eff 119
  8887  4f01 d04b                                bne gomovf                                ;; @@4f01 119
  8888  4f03 20b7ff                              jsr _readst                              ; (???? system bank for rs232 st) ;; @@4f03 119
  8889  4f06 83c913                              +lbra float                               ;; @@4f06 119
  8890                           ;; @@4f09 119
  8891                           ;; @@4f09 119
  8892  4f09 e044               qdsav            cpx #'D'                                 ; DS? ;; @@4f09 119
  8893  4f0b d026                                bne qerlin                               ; no, go test ER & EL ;; @@4f0b 119
  8894  4f0d c053                                cpy #'S'                                  ;; @@4f0d 119
  8895  4f0f d03d                                bne gomovf                                ;; @@4f0f 119
  8896                           ;; @@4f11 119
  8897                          ; Get disk status - make the first two characters of DS$ string into a number. ;; @@4f11 119
  8898                           ;; @@4f11 119
  8899  4f11 200e78                              jsr Check_DS                             ; get a DS$ string if one doesn't exist already ;; @@4f11 119
  8900  4f14 a000                                ldy #0                                    ;; @@4f14 119
  8901  4f16 a97a                                lda #dsdesc+1                             ;; @@4f16 119
  8902  4f18 20d722                              jsr lda_far_ram1                         ; lda (dsdesc+1),y ;; @@4f18 119
  8903  4f1b 290f                                and #$0f                                  ;; @@4f1b 119
  8904  4f1d 0a                                  asl                                       ;; @@4f1d 119
  8905  4f1e 8511                                sta garbfl                                ;; @@4f1e 119
  8906  4f20 0a                                  asl                                       ;; @@4f20 119
  8907  4f21 0a                                  asl                                       ;; @@4f21 119
  8908  4f22 6511                                adc garbfl                                ;; @@4f22 119
  8909  4f24 8511                                sta garbfl                                ;; @@4f24 119
  8910  4f26 c8                                  iny                                       ;; @@4f26 119
  8911  4f27 a97a                                lda #dsdesc+1                             ;; @@4f27 119
  8912  4f29 20d722                              jsr lda_far_ram1                         ; lda (dsdesc+1),y ;; @@4f29 119
  8913  4f2c 290f                                and #$0f                                  ;; @@4f2c 119
  8914  4f2e 6511                                adc garbfl                                ;; @@4f2e 119
  8915  4f30 839f13                              +lbra float                               ;; @@4f30 119
  8916                           ;; @@4f33 119
  8917                           ;; @@4f33 119
  8918  4f33 e045               qerlin           cpx #'E'                                 ; ER or EL? ;; @@4f33 119
  8919  4f35 d017                                bne gomovf                                ;; @@4f35 119
  8920  4f37 c052                                cpy #'R'                                  ;; @@4f37 119
  8921  4f39 f00d                                beq qnumer                                ;; @@4f39 119
  8922  4f3b c04c                                cpy #'L'                                  ;; @@4f3b 119
  8923  4f3d d00f                                bne gomovf                                ;; @@4f3d 119
  8924                           ;; @@4f3f 119
  8925  4f3f adc902                              lda errlin+1                             ; want EL (last error line #) ;; @@4f3f 119
  8926  4f42 acc802                              ldy errlin                                ;; @@4f42 119
  8927  4f45 837f09                              +lbra nosflt                              ;; @@4f45 119
  8928                           ;; @@4f48 119
  8929  4f48 adc702             qnumer           lda errnum                               ; want ER (number of last error) ;; @@4f48 119
  8930  4f4b 838413                              +lbra float                               ;; @@4f4b 119
  8931                           ;; @@4f4e 119
  8932                          ; .page ;; @@4f4e 119
  8933  4f4e a566               gomovf           lda facmo                                 ;; @@4f4e 119
  8934  4f50 a467                                ldy facmo+1                               ;; @@4f50 119
  8935                           ;; @@4f52 119
  8936  4f52 8524               movfrm           sta index1                               ; move value from RAM ;; @@4f52 119
  8937  4f54 8425                                sty index1+1                              ;; @@4f54 119
  8938                           ;; @@4f56 119
  8939  4f56 a000                                ldy #0                                    ;; @@4f56 119
  8940  4f58 20d522                              jsr indin1_ram1                           ;; @@4f58 119
  8941  4f5b 8563                                sta facexp                                ;; @@4f5b 119
  8942  4f5d 8471                                sty facov                                 ;; @@4f5d 119
  8943                           ;; @@4f5f 119
  8944  4f5f c8                                  iny                                      ; (1) ;; @@4f5f 119
  8945  4f60 20d522                              jsr indin1_ram1                           ;; @@4f60 119
  8946  4f63 8568                                sta facsgn                                ;; @@4f63 119
  8947  4f65 0980                                ora #$80                                  ;; @@4f65 119
  8948  4f67 8564                                sta facho                                 ;; @@4f67 119
  8949                           ;; @@4f69 119
  8950  4f69 c8                                  iny                                      ; (2) ;; @@4f69 119
  8951  4f6a 20d522                              jsr indin1_ram1                           ;; @@4f6a 119
  8952  4f6d 8565                                sta facmoh                                ;; @@4f6d 119
  8953                           ;; @@4f6f 119
  8954  4f6f c8                                  iny                                      ; (3) ;; @@4f6f 119
  8955  4f70 20d522                              jsr indin1_ram1                           ;; @@4f70 119
  8956  4f73 8566                                sta facmo                                 ;; @@4f73 119
  8957                           ;; @@4f75 119
  8958  4f75 c8                                  iny                                      ; (4) ;; @@4f75 119
  8959  4f76 20d522                              jsr indin1_ram1                           ;; @@4f76 119
  8960  4f79 8567                                sta faclo                                 ;; @@4f79 119
  8961  4f7b 60                                  rts                                       ;; @@4f7b 119
  8962                           ;; @@4f7c 119
  8963                          ;.end ;; @@4f7c 119
  8964                          ; .page ;; @@4f7c 119
  8965                          ; .subttl Variable Search ;; @@4f7c 119
  8966                           ;; @@4f7c 119
  8967                          ;  Read the variable name at the current text position and put a pointer ;; @@4f7c 119
  8968                          ;  to its value in VARPNT.   TXTPTR points to the terminating character. ;; @@4f7c 119
  8969                          ;  Note that evaluating subscripts in a variable name can cause recursive ;; @@4f7c 119
  8970                          ;  calls to PTRGET, so all values must be stored on the stack. ;; @@4f7c 119
  8971                           ;; @@4f7c 119
  8972  4f7c a200               ptrget           ldx #0                                    ;; @@4f7c 119
  8973  4f7e 208522                              jsr chrgot                                ;; @@4f7e 119
  8974  4f81 860e               ptrgt1           stx dimflg                               ; store flag away ;; @@4f81 119
  8975  4f83 8547               ptrgt2           sta varnam                                ;; @@4f83 119
  8976  4f85 208522                              jsr chrgot                               ; get current character ;; @@4f85 119
  8977  4f88 200250                              jsr isletc                               ; check for a letter ;; @@4f88 119
  8978  4f8b 93bcde                              +lbcc snerr                              ; not a letter ;; @@4f8b 119
  8979                           ;; @@4f8e 119
  8980  4f8e a200                                ldx #0                                   ; assume no second character ;; @@4f8e 119
  8981  4f90 860f                                stx valtyp                               ; default is numeric ;; @@4f90 119
  8982  4f92 8610                                stx intflg                               ; assume floating ;; @@4f92 119
  8983  4f94 208322                              jsr chrget                               ; get following character ;; @@4f94 119
  8984  4f97 9005                                bcc _local_1118_10                       ; branch if numeric ;; @@4f97 119
  8985  4f99 200250                              jsr isletc                               ; is it alpha? ;; @@4f99 119
  8986  4f9c 900b                                bcc _local_1118_30                       ; no, no second character. branch ;; @@4f9c 119
  8987  4f9e aa                 _local_1118_10   tax                                      ; issec. save second character of name ;; @@4f9e 119
  8988                           ;; @@4f9f 119
  8989  4f9f 208322             _local_1118_20   jsr chrget                               ; skip over remainder of name. we only care about 2 chars. ;; @@4f9f 119
  8990  4fa2 90fb                                bcc _local_1118_20                       ; ..eat numbers, ;; @@4fa2 119
  8991  4fa4 200250                              jsr isletc                                ;; @@4fa4 119
  8992  4fa7 b0f6                                bcs _local_1118_20                       ; ..and alphas, too! ;; @@4fa7 119
  8993                           ;; @@4fa9 119
  8994  4fa9 c924               _local_1118_30   cmp #'$'                                 ; nosec. is this a string? ;; @@4fa9 119
  8995  4fab d006                                bne _local_1118_40                       ; if not, VALTYP = 0 ;; @@4fab 119
  8996  4fad a9ff                                lda #$ff                                  ;; @@4fad 119
  8997  4faf 850f                                sta valtyp                               ; ..else, flag 'string' ;; @@4faf 119
  8998  4fb1 800f                                bra _local_1118_50                        ;; @@4fb1 119
  8999                           ;; @@4fb3 119
  9000  4fb3 c925               _local_1118_40   cmp #'%'                                 ; notstr. isn't string. is it integer? ;; @@4fb3 119
  9001  4fb5 d012                                bne _local_1118_60                       ; branch if not ;; @@4fb5 119
  9002  4fb7 a512                                lda subflg                                ;; @@4fb7 119
  9003                          ; bne snerr ; syntax error if integers disabled ;; @@4fb9 119
  9004  4fb9 d32bfd                              +lbne chkerr                             ; integers disallowed- type mismatch error  [910114] ;; @@4fb9 119
  9005  4fbc a980                                lda #$80                                 ; flag integer by turning on both high bits ;; @@4fbc 119
  9006  4fbe 8510                                sta intflg                                ;; @@4fbe 119
  9007  4fc0 0447                                tsb varnam                                ;; @@4fc0 119
  9008                           ;; @@4fc2 119
  9009  4fc2 8a                 _local_1118_50   txa                                      ; turnon. turn on msb of second character ;; @@4fc2 119
  9010  4fc3 0980                                ora #$80                                  ;; @@4fc3 119
  9011  4fc5 aa                                  tax                                       ;; @@4fc5 119
  9012  4fc6 208322                              jsr chrget                               ; get character after $ or % ;; @@4fc6 119
  9013                           ;; @@4fc9 119
  9014  4fc9 8648               _local_1118_60   stx varnam+1                             ; strnam. store away second character ;; @@4fc9 119
  9015  4fcb 38                                  sec                                       ;; @@4fcb 119
  9016  4fcc 0512                                ora subflg                               ; add flag whether to allow arrays ;; @@4fcc 119
  9017  4fce e928                                sbc #'('                                  ;; @@4fce 119
  9018  4fd0 f3b001                              +lbeq is_array                           ; note: won't match if SUBFLG set ;; @@4fd0 119
  9019                           ;; @@4fd3 119
  9020  4fd3 a000                                ldy #0                                    ;; @@4fd3 119
  9021  4fd5 8412                                sty subflg                               ; allow subscripts again ;; @@4fd5 119
  9022  4fd7 a52f                                lda vartab                               ; place to start search ;; @@4fd7 119
  9023  4fd9 a630                                ldx vartab+1                              ;; @@4fd9 119
  9024                           ;; @@4fdb 119
  9025  4fdb 8662               _local_1118_70   stx lowtr+1                              ; stxfnd. ;; @@4fdb 119
  9026  4fdd 8561               _local_1118_80   sta lowtr                                 ;; @@4fdd 119
  9027  4fdf e432                                cpx arytab+1                             ; at end of table yet? ;; @@4fdf 119
  9028  4fe1 d004                                bne _local_1118_90                        ;; @@4fe1 119
  9029  4fe3 c531                                cmp arytab                                ;; @@4fe3 119
  9030  4fe5 f025                                beq notfns                               ; yes, we couldn't find it ;; @@4fe5 119
  9031                           ;; @@4fe7 119
  9032  4fe7 20bd22             _local_1118_90   jsr indlow_ram1                          ; lda (lowtr),y ;; @@4fe7 119
  9033  4fea c547                                cmp varnam                               ; compare high orders ;; @@4fea 119
  9034  4fec d00a                                bne _local_1118_100                       ;; @@4fec 119
  9035  4fee c8                                  iny                                       ;; @@4fee 119
  9036  4fef 20bd22                              jsr indlow_ram1                           ;; @@4fef 119
  9037  4ff2 c548                                cmp varnam+1                             ; and the low part? ;; @@4ff2 119
  9038  4ff4 f32e01                              +lbeq finptr                             ; !!that's it!! ;; @@4ff4 119
  9039                           ;; @@4ff7 119
  9040  4ff7 88                                  dey                                       ;; @@4ff7 119
  9041  4ff8 18                 _local_1118_100  clc                                       ;; @@4ff8 119
  9042  4ff9 a561                                lda lowtr                                 ;; @@4ff9 119
  9043  4ffb 6907                                adc #7                                   ; makes no difference among types ;; @@4ffb 119
  9044  4ffd 90de                                bcc _local_1118_80                        ;; @@4ffd 119
  9045  4fff e8                                  inx                                       ;; @@4fff 119
  9046  5000 80d9                                bra _local_1118_70                       ; branch always ;; @@5000 119
  9047                           ;; @@5002 119
  9048                           ;; @@5002 119
  9049                           ;; @@5002 119
  9050                           ;; @@5002 119
  9051                          ; Test for a letter: (c)=0 not a letter ;; @@5002 119
  9052                          ;   (c)=1 a letter ;; @@5002 119
  9053                           ;; @@5002 119
  9054  5002 c941               isletc           cmp #'A'                                  ;; @@5002 120
  9055  5004 9005                                bcc _local_1119_1                        ; if less than "a", return ;; @@5004 120
  9056  5006 e95b                                sbc #'Z'+1                               ; $5a + 1 ;; @@5006 120
  9057  5008 38                                  sec                                       ;; @@5008 120
  9058  5009 e9a5                                sbc #$a5                                 ; reset carry if (a) .gt. "z". ;; @@5009 120
  9059  500b 60                 _local_1119_1    rts                                       ;; @@500b 120
  9060                           ;; @@500c 120
  9061                           ;; @@500c 120
  9062  500c ba                 notfns           tsx                                      ; check who's calling???? ;; @@500c 121
  9063  500d bd0201                              lda $102,x                               ; sniff processor stack ;; @@500d 121
  9064  5010 c957                                cmp #>pointer_ret                         ;; @@5010 121
  9065  5012 f004                                beq ldzr                                 ; special case if called by pointer function ;; @@5012 121
  9066                           ;; @@5014 121
  9067                          _local_1120_20   = isvret-1                                ;; @@5014 121
  9068  5014 c94e                                cmp #>_local_1120_20                     ; is eval calling???? ;; @@5014 121
  9069  5016 d02a                                bne notevl                               ; no, carry on ;; @@5016 121
  9070                           ;; @@5018 121
  9071  5018 a9c4               ldzr             lda #<zero                               ; set up pointer to simulated zero ;; @@5018 122
  9072  501a a002                                ldy #>zero                                ;; @@501a 122
  9073  501c 60                                  rts                                      ; for strings or numeric ;; @@501c 122
  9074                           ;; @@501d 122
  9075                           ;; @@501d 122
  9076  501d c0c9               qst001           cpy #'I'+$80                             ; we know first is T, is second <shift>I (TI$)? ;; @@501d 122
  9077  501f f0f7                                beq ldzr                                  ;; @@501f 122
  9078  5021 c049                                cpy #'I'                                 ; or I (TI)? ;; @@5021 122
  9079  5023 d031                                bne varok                                 ;; @@5023 122
  9080  5025 f018                                beq gobadv                                ;; @@5025 122
  9081                           ;; @@5027 122
  9082                           ;; @@5027 122
  9083  5027 c0d3               qst004           cpy #'S'+$80                             ; check for DS$ ;; @@5027 122
  9084  5029 f014                                beq gobadv                                ;; @@5029 122
  9085  502b c053                                cpy #'S'                                 ; check for DS ;; @@502b 122
  9086  502d d027                                bne varok                                 ;; @@502d 122
  9087  502f f00e                                beq gobadv                                ;; @@502f 122
  9088                           ;; @@5031 122
  9089                           ;; @@5031 122
  9090  5031 c054               qst002           cpy #'T'                                 ; check for ST ;; @@5031 122
  9091  5033 d021                                bne varok                                 ;; @@5033 122
  9092  5035 f008                                beq gobadv                                ;; @@5035 122
  9093                           ;; @@5037 122
  9094                           ;; @@5037 122
  9095  5037 c052               qst003           cpy #'R'                                 ; check for ER ;; @@5037 122
  9096  5039 f004                                beq gobadv                                ;; @@5039 122
  9097  503b c04c                                cpy #'L'                                 ; check for EL ;; @@503b 122
  9098  503d d017                                bne varok                                 ;; @@503d 122
  9099                           ;; @@503f 122
  9100                           ;; @@503f 122
  9101  503f 8308de             gobadv           +lbra snerr                               ;; @@503f 122
  9102                           ;; @@5042 122
  9103                           ;; @@5042 122
  9104                           ;; @@5042 122
  9105  5042 a547               notevl           lda varnam                                ;; @@5042 122
  9106  5044 a448                                ldy varnam+1                              ;; @@5044 122
  9107  5046 c954                                cmp #'T'                                 ; screen out TI ;; @@5046 122
  9108  5048 f0d3                                beq qst001                                ;; @@5048 122
  9109  504a c953                                cmp #'S'                                 ; ...and ST ;; @@504a 122
  9110  504c f0e3                                beq qst002                                ;; @@504c 122
  9111  504e c945                                cmp #'E'                                 ; ...and ER and EL ;; @@504e 122
  9112  5050 f0e5                                beq qst003                                ;; @@5050 122
  9113  5052 c944                                cmp #'D'                                 ; ...and DS ;; @@5052 122
  9114  5054 f0d1                                beq qst004                                ;; @@5054 122
  9115                           ;; @@5056 122
  9116                           ;; @@5056 122
  9117  5056 a531               varok            lda arytab                                ;; @@5056 122
  9118  5058 a432                                ldy arytab+1                              ;; @@5058 122
  9119  505a 8561                                sta lowtr                                 ;; @@505a 122
  9120  505c 8462                                sty lowtr+1                               ;; @@505c 122
  9121  505e a533                                lda strend                                ;; @@505e 122
  9122  5060 a434                                ldy strend+1                              ;; @@5060 122
  9123  5062 855c                                sta hightr                                ;; @@5062 122
  9124  5064 845d                                sty hightr+1                              ;; @@5064 122
  9125  5066 18                                  clc                                       ;; @@5066 122
  9126  5067 6907                                adc #7                                    ;; @@5067 122
  9127  5069 9001                                bcc _local_1121_10                       ; not even ;; @@5069 122
  9128  506b c8                                  iny                                       ;; @@506b 122
  9129                           ;; @@506c 122
  9130  506c 855a               _local_1121_10   sta highds                                ;; @@506c 122
  9131  506e 845b                                sty highds+1                              ;; @@506e 122
  9132  5070 203451                              jsr bltu                                  ;; @@5070 122
  9133  5073 a55a                                lda highds                                ;; @@5073 122
  9134  5075 a45b                                ldy highds+1                              ;; @@5075 122
  9135  5077 c8                                  iny                                       ;; @@5077 122
  9136  5078 8531                                sta arytab                                ;; @@5078 122
  9137  507a 8432                                sty arytab+1                              ;; @@507a 122
  9138                           ;; @@507c 122
  9139                           ;; @@507c 122
  9140                          ; Scan thru array entries for string arrays.  If any are found it will be ;; @@507c 122
  9141                          ; necessary to adjust the back-links of the strings in that array, since ;; @@507c 122
  9142                          ; the array descriptor block itself was moved. ;; @@507c 122
  9143                           ;; @@507c 122
  9144  507c 855a                                sta arypnt                               ; set pointer to arrays ;; @@507c 122
  9145  507e 845b                                sty arypnt+1                              ;; @@507e 122
  9146                           ;; @@5080 122
  9147  5080 a55a               aryva2           lda arypnt                                ;; @@5080 123
  9148  5082 a65b                                ldx arypnt+1                              ;; @@5082 123
  9149                           ;; @@5084 123
  9150  5084 e434               aryva3           cpx strend+1                             ; end of arrays? ;; @@5084 123
  9151  5086 d004                                bne aryvgo                                ;; @@5086 123
  9152  5088 c533                                cmp strend                                ;; @@5088 123
  9153  508a f07e                                beq arydon                               ; ...finished ;; @@508a 123
  9154                           ;; @@508c 123
  9155                           ;; @@508c 123
  9156  508c 8524               aryvgo           sta index1                                ;; @@508c 123
  9157  508e 8625                                stx index1+1                              ;; @@508e 123
  9158  5090 a000                                ldy #0                                    ;; @@5090 123
  9159  5092 20d522                              jsr indin1_ram1                          ; look at array name ;; @@5092 123
  9160  5095 aa                                  tax                                       ;; @@5095 123
  9161  5096 c8                                  iny                                       ;; @@5096 123
  9162  5097 20d522                              jsr indin1_ram1                          ; name 2nd char ;; @@5097 123
  9163  509a 08                                  php                                      ; save status reg ;; @@509a 123
  9164  509b c8                                  iny                                       ;; @@509b 123
  9165  509c 20d522                              jsr indin1_ram1                          ; point to offset to next array ;; @@509c 123
  9166  509f 655a                                adc arypnt                                ;; @@509f 123
  9167  50a1 855a                                sta arypnt                               ; save start of next array in arypnt ;; @@50a1 123
  9168  50a3 c8                                  iny                                       ;; @@50a3 123
  9169  50a4 20d522                              jsr indin1_ram1                           ;; @@50a4 123
  9170  50a7 655b                                adc arypnt+1                              ;; @@50a7 123
  9171  50a9 855b                                sta arypnt+1                              ;; @@50a9 123
  9172  50ab 28                                  plp                                      ; restore status ;; @@50ab 123
  9173  50ac 10d2                                bpl aryva2                               ; not a string type ;; @@50ac 123
  9174  50ae 8a                                  txa                                       ;; @@50ae 123
  9175  50af 30cf                                bmi aryva2                               ; not a string array ;; @@50af 123
  9176  50b1 c8                                  iny                                      ; ok we have a string array ;; @@50b1 123
  9177  50b2 20d522                              jsr indin1_ram1                          ; get number of dimensions ;; @@50b2 123
  9178  50b5 a000                                ldy #0                                    ;; @@50b5 123
  9179  50b7 0a                                  asl                                      ; move index to ptr to 1st string (add 2*number of dims + 5) ;; @@50b7 123
  9180  50b8 6905                                adc #5                                    ;; @@50b8 123
  9181  50ba 6524                                adc index1                                ;; @@50ba 123
  9182  50bc 8524                                sta index1                                ;; @@50bc 123
  9183  50be 9002                                bcc aryget                                ;; @@50be 123
  9184  50c0 e625                                inc index1+1                              ;; @@50c0 123
  9185                           ;; @@50c2 123
  9186  50c2 a625               aryget           ldx index1+1                              ;; @@50c2 123
  9187  50c4 e45b                                cpx arypnt+1                             ; done with this array? ;; @@50c4 123
  9188  50c6 d004                                bne _local_1122_10                        ;; @@50c6 123
  9189  50c8 c55a                                cmp arypnt                                ;; @@50c8 123
  9190  50ca f0b8                                beq aryva3                               ; yes ;; @@50ca 123
  9191                           ;; @@50cc 123
  9192  50cc a000               _local_1122_10   ldy #0                                   ; process string pointer ;; @@50cc 123
  9193  50ce 20d522                              jsr indin1_ram1                          ; get length of string ;; @@50ce 123
  9194  50d1 f02a                                beq dvarts                               ; skip if null string ;; @@50d1 123
  9195  50d3 8578                                sta syntmp                                ;; @@50d3 123
  9196  50d5 c8                                  iny                                       ;; @@50d5 123
  9197  50d6 20d522                              jsr indin1_ram1                          ; get lo byte of string ptr ;; @@50d6 123
  9198  50d9 18                                  clc                                       ;; @@50d9 123
  9199  50da 6578                                adc syntmp                               ; and add string length ;; @@50da 123
  9200  50dc 855c                                sta hightr                                ;; @@50dc 123
  9201  50de c8                                  iny                                       ;; @@50de 123
  9202  50df 20d522                              jsr indin1_ram1                          ; get hi byte of string ptr ;; @@50df 123
  9203  50e2 6900                                adc #0                                   ; adjust high byte ;; @@50e2 123
  9204  50e4 855d                                sta hightr+1                              ;; @@50e4 123
  9205                           ;; @@50e6 123
  9206                          ; Fix backwards pointer by adding move length to it. ;; @@50e6 123
  9207                           ;; @@50e6 123
  9208  50e6 da                                  phx                                       ;; @@50e6 123
  9209  50e7 a25c                                ldx #hightr                               ;; @@50e7 123
  9210  50e9 a000                                ldy #0                                    ;; @@50e9 123
  9211  50eb 20a522                              jsr indhtr_ram1                          ; lda (hightr),y ;; @@50eb 123
  9212  50ee 6907                                adc #7                                   ; carry clear (careful!) ;; @@50ee 123
  9213  50f0 20f022                              jsr sta_far_ram1                         ; sta (hightr),y ;; @@50f0 123
  9214  50f3 c8                                  iny                                       ;; @@50f3 123
  9215  50f4 20a522                              jsr indhtr_ram1                          ; lda (hightr),y ;; @@50f4 123
  9216  50f7 6900                                adc #0                                    ;; @@50f7 123
  9217  50f9 20f022                              jsr sta_far_ram1                         ; sta (hightr),y ;; @@50f9 123
  9218  50fc fa                                  plx                                      ; done with this string ;; @@50fc 123
  9219                           ;; @@50fd 123
  9220                          ; Fix the next string in the array ;; @@50fd 123
  9221                           ;; @@50fd 123
  9222  50fd a903               dvarts           lda #strsiz                               ;; @@50fd 124
  9223  50ff 18                                  clc                                       ;; @@50ff 124
  9224  5100 6524                                adc index1                                ;; @@5100 124
  9225  5102 8524                                sta index1                                ;; @@5102 124
  9226  5104 90bc                                bcc aryget                                ;; @@5104 124
  9227  5106 e625                                inc index1+1                              ;; @@5106 124
  9228  5108 80b8                                bra aryget                               ; branch always ;; @@5108 124
  9229                           ;; @@510a 124
  9230                           ;; @@510a 124
  9231  510a da                 arydon           phx                                       ;; @@510a 124
  9232  510b a261                                ldx #lowtr                                ;; @@510b 124
  9233  510d a000                                ldy #0                                    ;; @@510d 124
  9234  510f a547                                lda varnam                                ;; @@510f 124
  9235  5111 20f022                              jsr sta_far_ram1                         ; sta (lowtr),y ;; @@5111 124
  9236  5114 c8                                  iny                                      ; .y=1 ;; @@5114 124
  9237  5115 a548                                lda varnam+1                              ;; @@5115 124
  9238  5117 20f022                              jsr sta_far_ram1                         ; sta (lowtr),y ;; @@5117 124
  9239  511a a900                                lda #0                                    ;; @@511a 124
  9240  511c c8                 _local_1123_10   iny                                       ;; @@511c 124
  9241  511d 20f022                              jsr sta_far_ram1                         ; sta (lowtr),y ;; @@511d 124
  9242  5120 c006                                cpy #6                                    ;; @@5120 124
  9243  5122 d0f8                                bne _local_1123_10                        ;; @@5122 124
  9244  5124 fa                                  plx                                       ;; @@5124 124
  9245                           ;; @@5125 124
  9246  5125 a561               finptr           lda lowtr                                 ;; @@5125 125
  9247  5127 18                                  clc                                       ;; @@5127 125
  9248  5128 6902                                adc #2                                    ;; @@5128 125
  9249  512a a462                                ldy lowtr+1                               ;; @@512a 125
  9250  512c 9001                                bcc _local_1124_10                        ;; @@512c 125
  9251  512e c8                                  iny                                       ;; @@512e 125
  9252  512f 8549               _local_1124_10   sta varpnt                                ;; @@512f 125
  9253  5131 844a                                sty varpnt+1                              ;; @@5131 125
  9254  5133 60                                  rts                                       ;; @@5133 125
  9255                           ;; @@5134 125
  9256                           ;; @@5134 125
  9257                           ;; @@5134 125
  9258                           ;; @@5134 125
  9259  5134 20af31             bltu             jsr reason                                ;; @@5134 126
  9260  5137 8533                                sta strend                                ;; @@5137 126
  9261  5139 8434                                sty strend+1                              ;; @@5139 126
  9262  513b 38                                  sec                                       ;; @@513b 126
  9263  513c a55c                                lda hightr                                ;; @@513c 126
  9264  513e e561                                sbc lowtr                                 ;; @@513e 126
  9265  5140 8524                                sta index                                 ;; @@5140 126
  9266  5142 a8                                  tay                                       ;; @@5142 126
  9267  5143 a55d                                lda hightr+1                              ;; @@5143 126
  9268  5145 e562                                sbc lowtr+1                               ;; @@5145 126
  9269  5147 aa                                  tax                                       ;; @@5147 126
  9270  5148 e8                                  inx                                       ;; @@5148 126
  9271  5149 98                                  tya                                       ;; @@5149 126
  9272  514a f02f                                beq decblt                                ;; @@514a 126
  9273  514c a55c                                lda hightr                                ;; @@514c 126
  9274  514e 38                                  sec                                       ;; @@514e 126
  9275  514f e524                                sbc index                                 ;; @@514f 126
  9276  5151 855c                                sta hightr                                ;; @@5151 126
  9277  5153 b003                                bcs _local_1125_10                        ;; @@5153 126
  9278  5155 c65d                                dec hightr+1                              ;; @@5155 126
  9279  5157 38                                  sec                                       ;; @@5157 126
  9280  5158 a55a               _local_1125_10   lda highds                                ;; @@5158 126
  9281  515a e524                                sbc index                                 ;; @@515a 126
  9282  515c 855a                                sta highds                                ;; @@515c 126
  9283  515e b00e                                bcs moren1                                ;; @@515e 126
  9284  5160 c65b                                dec highds+1                              ;; @@5160 126
  9285  5162 900a                                bcc moren1                                ;; @@5162 126
  9286                           ;; @@5164 126
  9287  5164 20a522             bltlp            jsr indhtr_ram1                          ; lda (hightr),y ;; @@5164 127
  9288  5167 da                                  phx                                       ;; @@5167 127
  9289  5168 a25a                                ldx #highds                               ;; @@5168 127
  9290  516a 20f022                              jsr sta_far_ram1                         ; sta (highds),y ;; @@516a 127
  9291  516d fa                                  plx                                       ;; @@516d 127
  9292                           ;; @@516e 127
  9293  516e 88                 moren1           dey                                       ;; @@516e 127
  9294  516f d0f3                                bne bltlp                                 ;; @@516f 127
  9295  5171 20a522                              jsr indhtr_ram1                          ; lda (hightr),y ;; @@5171 127
  9296  5174 da                                  phx                                       ;; @@5174 127
  9297  5175 a25a                                ldx #highds                               ;; @@5175 127
  9298  5177 20f022                              jsr sta_far_ram1                         ; sta (highds),y ;; @@5177 127
  9299  517a fa                                  plx                                       ;; @@517a 127
  9300                           ;; @@517b 127
  9301  517b c65d               decblt           dec hightr+1                              ;; @@517b 127
  9302  517d c65b                                dec highds+1                              ;; @@517d 127
  9303  517f ca                                  dex                                       ;; @@517f 127
  9304  5180 d0ec                                bne moren1                                ;; @@5180 127
  9305  5182 60                                  rts                                       ;; @@5182 127
  9306                           ;; @@5183 127
  9307                          ;.end ;; @@5183 127
  9308                          ; .page ;; @@5183 127
  9309                          ; .subttl Array Routines ;; @@5183 127
  9310                           ;; @@5183 127
  9311                          ; The format of arrays in core: ;; @@5183 127
  9312                          ; ;; @@5183 127
  9313                          ; Descriptor: low  byte = first character ;; @@5183 127
  9314                          ;   high byte = second character (msb is string flag) ;; @@5183 127
  9315                          ; Length of array in memory in bytes (includes everything). ;; @@5183 127
  9316                          ; Number of dimensions. ;; @@5183 127
  9317                          ; For each dimension starting with the first a list (2 bytes each) ;; @@5183 127
  9318                          ; of the max indice+1. ;; @@5183 127
  9319                          ; The values. ;; @@5183 127
  9320                           ;; @@5183 127
  9321                           ;; @@5183 127
  9322                          is_array                                                   ;; @@5183 127
  9323  5183 a50e                                lda dimflg                                ;; @@5183 127
  9324  5185 0510                                ora intflg                                ;; @@5185 127
  9325  5187 48                                  pha                                      ; save DIMFLG for recursion ;; @@5187 127
  9326  5188 a50f                                lda valtyp                                ;; @@5188 127
  9327  518a 48                                  pha                                      ; save VALTYP for recursion ;; @@518a 127
  9328  518b a000                                ldy #0                                   ; set number of dimensions to zero ;; @@518b 127
  9329                           ;; @@518d 127
  9330  518d 5a                 _local_1126_10   phy                                      ; save number of dims ;; @@518d 127
  9331  518e a548                                lda varnam+1                              ;; @@518e 127
  9332  5190 48                                  pha                                       ;; @@5190 127
  9333  5191 a547                                lda varnam                                ;; @@5191 127
  9334  5193 48                                  pha                                      ; save looks ;; @@5193 127
  9335  5194 20a758                              jsr intidx                               ; evaluate indice into facmo&lo ;; @@5194 127
  9336  5197 68                                  pla                                       ;; @@5197 127
  9337  5198 8547                                sta varnam                                ;; @@5198 127
  9338  519a 68                                  pla                                       ;; @@519a 127
  9339  519b 8548                                sta varnam+1                             ; get back all...we're home ;; @@519b 127
  9340  519d 7a                                  ply                                      ; (# of units) ;; @@519d 127
  9341  519e ba                                  tsx                                       ;; @@519e 127
  9342  519f bd0201                              lda 258,x                                 ;; @@519f 127
  9343  51a2 48                                  pha                                      ; push DIMFLG and VALTYP further ;; @@51a2 127
  9344  51a3 bd0101                              lda 257,x                                 ;; @@51a3 127
  9345  51a6 48                                  pha                                       ;; @@51a6 127
  9346  51a7 a566                                lda indice                               ; put indice onto stack ;; @@51a7 127
  9347  51a9 9d0201                              sta 258,x                                ; under DIMFLG and VALTYP ;; @@51a9 127
  9348  51ac a567                                lda indice+1                              ;; @@51ac 127
  9349  51ae 9d0101                              sta 257,x                                 ;; @@51ae 127
  9350  51b1 c8                                  iny                                      ; y counts # of subscripts ;; @@51b1 127
  9351  51b2 840d                                sty count                                ; protect y from chrget ;; @@51b2 127
  9352  51b4 208522                              jsr chrgot                               ; get terminating character ;; @@51b4 127
  9353  51b7 a40d                                ldy count                                 ;; @@51b7 127
  9354  51b9 c92c                                cmp #','                                 ; more subscripts? ;; @@51b9 127
  9355  51bb f0d0                                beq _local_1126_10                       ; yes ;; @@51bb 127
  9356                           ;; @@51bd 127
  9357                           ;; @@51bd 127
  9358  51bd 20554e                              jsr chkcls                               ; must be closed paren ;; @@51bd 127
  9359  51c0 68                                  pla                                       ;; @@51c0 127
  9360  51c1 850f                                sta valtyp                               ; get VALTYP and ;; @@51c1 127
  9361  51c3 68                                  pla                                       ;; @@51c3 127
  9362  51c4 8510                                sta intflg                                ;; @@51c4 127
  9363  51c6 297f                                and #$7f                                  ;; @@51c6 127
  9364  51c8 850e                                sta dimflg                               ; DIMFLG off stack ;; @@51c8 127
  9365  51ca a631                                ldx arytab                               ; place to start search ;; @@51ca 127
  9366  51cc a532                                lda arytab+1                              ;; @@51cc 127
  9367                           ;; @@51ce 127
  9368                           ;; @@51ce 127
  9369  51ce 8661               _local_1126_20   stx lowtr                                 ;; @@51ce 127
  9370  51d0 8562                                sta lowtr+1                               ;; @@51d0 127
  9371  51d2 c534                                cmp strend+1                             ; end of arrays? ;; @@51d2 127
  9372  51d4 d004                                bne _local_1126_30                        ;; @@51d4 127
  9373  51d6 e433                                cpx strend                                ;; @@51d6 127
  9374  51d8 f043                                beq notfdd                               ; a fine thing! no array! ;; @@51d8 127
  9375                           ;; @@51da 127
  9376  51da a000               _local_1126_30   ldy #0                                    ;; @@51da 127
  9377  51dc 20bd22                              jsr indlow_ram1                          ; get high of name from array bank (ram1) ;; @@51dc 127
  9378  51df c8                                  iny                                       ;; @@51df 127
  9379  51e0 c547                                cmp varnam                               ; compare high orders. ;; @@51e0 127
  9380  51e2 d007                                bne _local_1126_40                       ; no way is it this. get the bite outta here ;; @@51e2 127
  9381  51e4 20bd22                              jsr indlow_ram1                           ;; @@51e4 127
  9382  51e7 c548                                cmp varnam+1                             ; low orders? ;; @@51e7 127
  9383  51e9 f018                                beq gotary                               ; well here it is ;; @@51e9 127
  9384                           ;; @@51eb 127
  9385  51eb c8                 _local_1126_40   iny                                       ;; @@51eb 127
  9386  51ec 20bd22                              jsr indlow_ram1                          ; get length ;; @@51ec 127
  9387  51ef 18                                  clc                                       ;; @@51ef 127
  9388  51f0 6561                                adc lowtr                                 ;; @@51f0 127
  9389  51f2 aa                                  tax                                       ;; @@51f2 127
  9390  51f3 c8                                  iny                                       ;; @@51f3 127
  9391  51f4 20bd22                              jsr indlow_ram1                           ;; @@51f4 127
  9392  51f7 6562                                adc lowtr+1                               ;; @@51f7 127
  9393  51f9 90d3                                bcc _local_1126_20                       ; always branches ;; @@51f9 127
  9394                           ;; @@51fb 127
  9395                           ;; @@51fb 127
  9396  51fb a212               bserr            ldx #errbs                               ; get bad sub error number ;; @@51fb 128
  9397  51fd 2c                                  !text $2c                                 ;; @@51fd 128
  9398                           ;; @@51fe 128
  9399  51fe a20e               fcerr            ldx #errfc                               ; too big. Illegal Quantity error ;; @@51fe 128
  9400  5200 834cdc                              +lbra error                               ;; @@5200 128
  9401                           ;; @@5203 128
  9402                           ;; @@5203 128
  9403                           ;; @@5203 128
  9404  5203 a213               gotary           ldx #errdd                               ; perhaps a "re-dimension" error ;; @@5203 128
  9405  5205 a50e                                lda dimflg                               ; test the DIMFLG ;; @@5205 128
  9406  5207 d345dc                              +lbne error                               ;; @@5207 128
  9407  520a 206c53                              jsr fmaptr                                ;; @@520a 128
  9408  520d a004                                ldy #4                                    ;; @@520d 128
  9409  520f 20bd22                              jsr indlow_ram1                           ;; @@520f 128
  9410  5212 8578                                sta syntmp                                ;; @@5212 128
  9411  5214 a50d                                lda count                                ; get number of dims input. ;; @@5214 128
  9412  5216 c578                                cmp syntmp                               ; # of dims the same? ;; @@5216 128
  9413  5218 d0e1                                bne bserr                                ; same so get definition. ;; @@5218 128
  9414  521a 83b200                              +lbra getdef                              ;; @@521a 128
  9415                           ;; @@521d 128
  9416                          ; .page ;; @@521d 128
  9417                          ; Come here when variable is not found in the array table to build an entry. ;; @@521d 128
  9418                          ; ;; @@521d 128
  9419                          ; Put down the descriptor. ;; @@521d 128
  9420                          ; Setup number of dimensions. ;; @@521d 128
  9421                          ; Make sure there is room for the new entry. ;; @@521d 128
  9422                          ; Remember VARPNT. ;; @@521d 128
  9423                          ; Tally=4. ;; @@521d 128
  9424                          ; Skip two locs for later fill in of size. ;; @@521d 128
  9425                          ; LOOP: Get an indice. ;; @@521d 128
  9426                          ;  Put down number+1 and increment VARPTR. ;; @@521d 128
  9427                          ;  Tally=tally*number+1 ;; @@521d 128
  9428                          ;  Decrement number of dims. ;; @@521d 128
  9429                          ;  Bne LOOP ;; @@521d 128
  9430                          ; Call REASON with (a,b) reflecting last loc of variable. ;; @@521d 128
  9431                          ; Update STREND ;; @@521d 128
  9432                          ; Zero all. ;; @@521d 128
  9433                          ; Make tally include maxdims and descriptor. ;; @@521d 128
  9434                          ; Put down tally ;; @@521d 128
  9435                          ; If called by dimension, return. ;; @@521d 128
  9436                          ;  Else index into the variable as if it were found on the initial search. ;; @@521d 128
  9437                           ;; @@521d 128
  9438                          notfdd                                                     ;; @@521d 128
  9439  521d 206c53                              jsr fmaptr                               ; form ARYPNT ;; @@521d 128
  9440  5220 20af31                              jsr reason                                ;; @@5220 128
  9441  5223 a000                                ldy #0                                    ;; @@5223 128
  9442  5225 8473                                sty curtol+1                              ;; @@5225 128
  9443  5227 a205                                ldx #5                                    ;; @@5227 128
  9444  5229 a547                                lda varnam                                ;; @@5229 128
  9445  522b 08                                  php                                       ;; @@522b 128
  9446  522c da                                  phx                                       ;; @@522c 128
  9447  522d a261                                ldx #lowtr                               ; point to string/array bank ;; @@522d 128
  9448  522f 20f022                              jsr sta_far_ram1                         ; sta (lowtr),y ;; @@522f 128
  9449  5232 fa                                  plx                                       ;; @@5232 128
  9450  5233 28                                  plp                                       ;; @@5233 128
  9451  5234 1001                                bpl _local_1127_10                        ;; @@5234 128
  9452  5236 ca                                  dex                                       ;; @@5236 128
  9453                           ;; @@5237 128
  9454  5237 c8                 _local_1127_10   iny                                      ; notflt. ;; @@5237 128
  9455  5238 a548                                lda varnam+1                              ;; @@5238 128
  9456  523a 08                                  php                                       ;; @@523a 128
  9457  523b da                                  phx                                       ;; @@523b 128
  9458  523c a261                                ldx #lowtr                               ; point to string/array bank ;; @@523c 128
  9459  523e 20f022                              jsr sta_far_ram1                         ; sta (lowtr),y ;; @@523e 128
  9460  5241 fa                                  plx                                       ;; @@5241 128
  9461  5242 28                                  plp                                       ;; @@5242 128
  9462  5243 1002                                bpl _local_1127_20                        ;; @@5243 128
  9463  5245 ca                                  dex                                       ;; @@5245 128
  9464  5246 ca                                  dex                                       ;; @@5246 128
  9465                           ;; @@5247 128
  9466  5247 8672               _local_1127_20   stx curtol                                ;; @@5247 128
  9467  5249 a50d                                lda count                                ; save number of dimensions ;; @@5249 128
  9468  524b c8                                  iny                                       ;; @@524b 128
  9469  524c c8                                  iny                                       ;; @@524c 128
  9470  524d c8                                  iny                                       ;; @@524d 128
  9471  524e a261                                ldx #lowtr                               ; point to string/array bank ;; @@524e 128
  9472  5250 20f022                              jsr sta_far_ram1                         ; sta (lowtr),y ;; @@5250 128
  9473                           ;; @@5253 128
  9474  5253 a20b               _local_1127_30   ldx #11                                  ; loppta. default size ;; @@5253 128
  9475  5255 a900                                lda #0                                    ;; @@5255 128
  9476  5257 6f0e08                              bbr6 dimflg,_local_1127_40               ; not in a dim statement ;; @@5257 128
  9477  525a 68                                  pla                                      ; get low order of indice ;; @@525a 128
  9478  525b 18                                  clc                                       ;; @@525b 128
  9479  525c 6901                                adc #1                                    ;; @@525c 128
  9480  525e aa                                  tax                                       ;; @@525e 128
  9481  525f 68                                  pla                                      ; get high order of indice ;; @@525f 128
  9482  5260 6900                                adc #0                                    ;; @@5260 128
  9483                           ;; @@5262 128
  9484  5262 c8                 _local_1127_40   iny                                      ; notdim. ;; @@5262 128
  9485  5263 da                                  phx                                       ;; @@5263 128
  9486  5264 a261                                ldx #lowtr                                ;; @@5264 128
  9487  5266 20f022                              jsr sta_far_ram1 ;sta (lowtr),y          ; store high part of indice ;; @@5266 128
  9488  5269 fa                                  plx                                       ;; @@5269 128
  9489  526a c8                                  iny                                       ;; @@526a 128
  9490  526b 8a                                  txa                                       ;; @@526b 128
  9491  526c da                                  phx                                       ;; @@526c 128
  9492  526d a261                                ldx #lowtr                                ;; @@526d 128
  9493  526f 20f022                              jsr sta_far_ram1 ;sta (lowtr),y          ; store low part of indice ;; @@526f 128
  9494  5272 fa                                  plx                                       ;; @@5272 128
  9495  5273 203753                              jsr umult                                ; (a,x)+(curtol)*(lowtr,y) ;; @@5273 128
  9496  5276 8672                                stx curtol                               ; save new tally ;; @@5276 128
  9497  5278 8573                                sta curtol+1                              ;; @@5278 128
  9498  527a a424                                ldy index                                 ;; @@527a 128
  9499  527c c60d                                dec count                                ; any more indices left? ;; @@527c 128
  9500  527e d0d3                                bne _local_1127_30                       ; yes ;; @@527e 128
  9501  5280 655b                                adc arypnt+1                              ;; @@5280 128
  9502  5282 b3bcdb                              +lbcs omerr                              ; overflow ;; @@5282 128
  9503  5285 855b                                sta arypnt+1                             ; compute where to zero ;; @@5285 128
  9504  5287 a8                                  tay                                       ;; @@5287 128
  9505  5288 8a                                  txa                                       ;; @@5288 128
  9506  5289 655a                                adc arypnt                                ;; @@5289 128
  9507  528b 9004                                bcc _local_1127_50                        ;; @@528b 128
  9508  528d c8                                  iny                                       ;; @@528d 128
  9509  528e f3b0db                              +lbeq omerr                               ;; @@528e 128
  9510                           ;; @@5291 128
  9511  5291 20af31             _local_1127_50   jsr reason                               ; grease.  get room ;; @@5291 128
  9512  5294 8533                                sta strend                                ;; @@5294 128
  9513  5296 8434                                sty strend+1                             ; new end of storage ;; @@5296 128
  9514  5298 a900                                lda #0                                   ; storing (a) is faster than clear ;; @@5298 128
  9515  529a e673                                inc curtol+1                              ;; @@529a 128
  9516  529c a472                                ldy curtol                                ;; @@529c 128
  9517  529e f00c                                beq _local_1127_70                        ;; @@529e 128
  9518                           ;; @@52a0 128
  9519  52a0 88                 _local_1127_60   dey                                      ; zero out new entry ;; @@52a0 128
  9520  52a1 08                                  php                                       ;; @@52a1 128
  9521  52a2 da                                  phx                                       ;; @@52a2 128
  9522  52a3 a25a                                ldx #arypnt                               ;; @@52a3 128
  9523  52a5 20f022                              jsr sta_far_ram1                         ; sta (arypnt),y ;; @@52a5 128
  9524  52a8 fa                                  plx                                       ;; @@52a8 128
  9525  52a9 28                                  plp                                       ;; @@52a9 128
  9526  52aa d0f4                                bne _local_1127_60                       ; no. continue ;; @@52aa 128
  9527                           ;; @@52ac 128
  9528  52ac c65b               _local_1127_70   dec arypnt+1                             ; deccur. ;; @@52ac 128
  9529  52ae c673                                dec curtol+1                              ;; @@52ae 128
  9530  52b0 d0ee                                bne _local_1127_60                       ; do another block ;; @@52b0 128
  9531  52b2 e65b                                inc arypnt+1                             ; bump back up. will use later ;; @@52b2 128
  9532  52b4 38                                  sec                                       ;; @@52b4 128
  9533  52b5 a533                                lda strend                               ; restore (a) ;; @@52b5 128
  9534  52b7 e561                                sbc lowtr                                ; determine length ;; @@52b7 128
  9535  52b9 a002                                ldy #2                                    ;; @@52b9 128
  9536  52bb da                                  phx                                       ;; @@52bb 128
  9537  52bc a261                                ldx #lowtr                                ;; @@52bc 128
  9538  52be 20f022                              jsr sta_far_ram1 ;sta (lowtr),y          ; low ;; @@52be 128
  9539  52c1 a534                                lda strend+1                              ;; @@52c1 128
  9540  52c3 c8                                  iny                                       ;; @@52c3 128
  9541  52c4 e562                                sbc lowtr+1                               ;; @@52c4 128
  9542  52c6 20f022                              jsr sta_far_ram1 ;sta (lowtr),y          ; high ;; @@52c6 128
  9543  52c9 fa                                  plx                                       ;; @@52c9 128
  9544  52ca a50e                                lda dimflg                               ; quit here if this is a DIM statement ;; @@52ca 128
  9545  52cc d068                                bne dimrts                               ; bye! ;; @@52cc 128
  9546  52ce c8                                  iny                                       ;; @@52ce 128
  9547                           ;; @@52cf 128
  9548                           ;; @@52cf 128
  9549                          ; At this point (LOWTR,y) points beyond the size to the number of dimensions. ;; @@52cf 128
  9550                          ; Strategy: ;; @@52cf 128
  9551                          ;  NUMDIM = number of dimensions ;; @@52cf 128
  9552                          ;  curtol = 0 ;; @@52cf 128
  9553                          ;  INLPNM: Get a new indice ;; @@52cf 128
  9554                          ;   Make sure indice is not too big ;; @@52cf 128
  9555                          ;   Multiply CURTOL by CURMAX ;; @@52cf 128
  9556                          ;   Add indice to CURTOL ;; @@52cf 128
  9557                          ;   NUMDIM=NUMDIM-1 ;; @@52cf 128
  9558                          ;   bne INLPNM ;; @@52cf 128
  9559                          ;  Use (CURTOL)*4 as offset ;; @@52cf 128
  9560                           ;; @@52cf 128
  9561                           ;; @@52cf 128
  9562  52cf 20bd22             getdef           jsr indlow_ram1                          ; get # of dim's from string bank ;; @@52cf 129
  9563  52d2 850d                                sta count                                ; save a counter ;; @@52d2 129
  9564  52d4 a900                                lda #0                                   ; zero (curtol) ;; @@52d4 129
  9565  52d6 8572                                sta curtol                                ;; @@52d6 129
  9566                           ;; @@52d8 129
  9567  52d8 8573               inlpnm           sta curtol+1                              ;; @@52d8 129
  9568  52da fa                                  plx                                      ; get low indice ;; @@52da 129
  9569  52db 8666                                stx indice                                ;; @@52db 129
  9570  52dd c8                                  iny                                       ;; @@52dd 129
  9571  52de 20bd22                              jsr indlow_ram1                           ;; @@52de 129
  9572  52e1 8578                                sta syntmp                                ;; @@52e1 129
  9573  52e3 68                                  pla                                      ; and the high part ;; @@52e3 129
  9574  52e4 8567                                sta indice+1                              ;; @@52e4 129
  9575  52e6 c578                                cmp syntmp                               ; compare with max indice ;; @@52e6 129
  9576  52e8 900f                                bcc inlpn2                                ;; @@52e8 129
  9577  52ea d00a                                bne bserr7                               ; if greater, "bad subscript" error ;; @@52ea 129
  9578  52ec c8                                  iny                                       ;; @@52ec 129
  9579  52ed 20bd22                              jsr indlow_ram1                           ;; @@52ed 129
  9580  52f0 8578                                sta syntmp                                ;; @@52f0 129
  9581  52f2 e478                                cpx syntmp                                ;; @@52f2 129
  9582  52f4 9004                                bcc inlpn1                                ;; @@52f4 129
  9583                           ;; @@52f6 129
  9584  52f6 8302ff             bserr7           +lbra bserr                               ;; @@52f6 129
  9585                           ;; @@52f9 129
  9586                           ;; @@52f9 129
  9587  52f9 c8                 inlpn2           iny                                       ;; @@52f9 129
  9588  52fa a573               inlpn1           lda curtol+1                             ; don't multiply if curtol=0 ;; @@52fa 129
  9589  52fc 0572                                ora curtol                                ;; @@52fc 129
  9590  52fe 18                                  clc                                      ; prepare to get indice back ;; @@52fe 129
  9591  52ff f00a                                beq _local_1128_10                       ; get high part of indice back ;; @@52ff 129
  9592  5301 203753                              jsr umult                                ; multiply (curtol) by (5&6,lowtr) ;; @@5301 129
  9593  5304 8a                                  txa                                       ;; @@5304 129
  9594  5305 6566                                adc indice                               ; add in (indice) ;; @@5305 129
  9595  5307 aa                                  tax                                       ;; @@5307 129
  9596  5308 98                                  tya                                       ;; @@5308 129
  9597  5309 a424                                ldy index1                                ;; @@5309 129
  9598                           ;; @@530b 129
  9599  530b 6567               _local_1128_10   adc indice+1                              ;; @@530b 129
  9600  530d 8672                                stx curtol                                ;; @@530d 129
  9601  530f c60d                                dec count                                ; any more? ;; @@530f 129
  9602  5311 d0c5                                bne inlpnm                               ; yes ;; @@5311 129
  9603  5313 8573                                sta curtol+1                              ;; @@5313 129
  9604  5315 a205                                ldx #5                                    ;; @@5315 129
  9605  5317 a547                                lda varnam                                ;; @@5317 129
  9606  5319 1001                                bpl _local_1128_20                        ;; @@5319 129
  9607  531b ca                                  dex                                       ;; @@531b 129
  9608  531c a548               _local_1128_20   lda varnam+1                              ;; @@531c 129
  9609  531e 1002                                bpl _local_1128_30                        ;; @@531e 129
  9610  5320 ca                                  dex                                       ;; @@5320 129
  9611  5321 ca                                  dex                                       ;; @@5321 129
  9612  5322 862a               _local_1128_30   stx addend                                ;; @@5322 129
  9613  5324 a900                                lda #0                                    ;; @@5324 129
  9614  5326 204253                              jsr umultd                               ; on rts, a & y = hi. x = lo. ;; @@5326 129
  9615  5329 8a                                  txa                                       ;; @@5329 129
  9616  532a 655a                                adc arypnt                                ;; @@532a 129
  9617  532c 8549                                sta varpnt                                ;; @@532c 129
  9618  532e 98                                  tya                                       ;; @@532e 129
  9619  532f 655b                                adc arypnt+1                              ;; @@532f 129
  9620  5331 854a                                sta varpnt+1                              ;; @@5331 129
  9621  5333 a8                                  tay                                       ;; @@5333 129
  9622  5334 a549                                lda varpnt                                ;; @@5334 129
  9623  5336 60                 dimrts           rts                                       ;; @@5336 130
  9624                           ;; @@5337 130
  9625                          ; .page ;; @@5337 130
  9626                          ; Integer arithmetic routines. ;; @@5337 130
  9627                          ; ;; @@5337 130
  9628                          ; Two byte unsigned integer multiply. ;; @@5337 130
  9629                          ; This is for multiply dimensioned arrays. ;; @@5337 130
  9630                          ; (a,b)=(curtol)*(5&6,x). ;; @@5337 130
  9631                           ;; @@5337 130
  9632                          umult                                                      ;; @@5337 130
  9633  5337 8424                                sty index                                 ;; @@5337 130
  9634  5339 20bd22                              jsr indlow_ram1                           ;; @@5339 130
  9635  533c 852a                                sta addend                               ; low, then high ;; @@533c 130
  9636  533e 88                                  dey                                       ;; @@533e 130
  9637  533f 20bd22                              jsr indlow_ram1                          ; put (5&6,lowtr) in faster memory ;; @@533f 130
  9638                           ;; @@5342 130
  9639  5342 852b               umultd           sta addend+1                              ;; @@5342 130
  9640  5344 a910                                lda #16                                   ;; @@5344 130
  9641  5346 855f                                sta deccnt                                ;; @@5346 130
  9642  5348 a200                                ldx #0                                   ; clear the accs ;; @@5348 130
  9643  534a a000                                ldy #0                                   ; result initially zero ;; @@534a 130
  9644                           ;; @@534c 130
  9645  534c 8a                 umultc           txa                                       ;; @@534c 130
  9646  534d 0a                                  asl                                      ; multiply by two ;; @@534d 130
  9647  534e aa                                  tax                                       ;; @@534e 130
  9648  534f 98                                  tya                                       ;; @@534f 130
  9649  5350 2a                                  rol                                       ;; @@5350 130
  9650  5351 a8                                  tay                                       ;; @@5351 130
  9651  5352 b3ecda                              +lbcs omerr                              ; to much! ;; @@5352 130
  9652  5355 0672                                asl curtol                                ;; @@5355 130
  9653  5357 2673                                rol curtol+1                              ;; @@5357 130
  9654  5359 900c                                bcc umlcnt                               ; nothing in this position to multiply ;; @@5359 130
  9655  535b 18                                  clc                                       ;; @@535b 130
  9656  535c 8a                                  txa                                       ;; @@535c 130
  9657  535d 652a                                adc addend                                ;; @@535d 130
  9658  535f aa                                  tax                                       ;; @@535f 130
  9659  5360 98                                  tya                                       ;; @@5360 130
  9660  5361 652b                                adc addend+1                              ;; @@5361 130
  9661  5363 a8                                  tay                                       ;; @@5363 130
  9662  5364 b3dada                              +lbcs omerr                              ; man, just too much! ;; @@5364 130
  9663                           ;; @@5367 130
  9664  5367 c65f               umlcnt           dec deccnt                               ; done? ;; @@5367 130
  9665  5369 d0e1                                bne umultc                               ; keep it up ;; @@5369 130
  9666  536b 60                                  rts                                      ; yes, all done ;; @@536b 130
  9667                           ;; @@536c 130
  9668                           ;; @@536c 130
  9669  536c a50d               fmaptr           lda count                                 ;; @@536c 130
  9670  536e 0a                                  asl                                       ;; @@536e 130
  9671  536f 6905                                adc #5                                   ; point to entries. ((c) cleared by asl) ;; @@536f 130
  9672  5371 6561                                adc lowtr                                 ;; @@5371 130
  9673  5373 a462                                ldy lowtr+1                               ;; @@5373 130
  9674  5375 9001                                bcc _local_1129_1                         ;; @@5375 130
  9675  5377 c8                                  iny                                       ;; @@5377 130
  9676  5378 855a               _local_1129_1    sta arypnt                                ;; @@5378 130
  9677  537a 845b                                sty arypnt+1                              ;; @@537a 130
  9678  537c 60                                  rts                                       ;; @@537c 130
  9679                           ;; @@537d 130
  9680                          ;.end ;; @@537d 130
  9681                          ; .page ;; @@537d 130
  9682                          ; .subttl  TIME functions ;; @@537d 130
  9683                           ;; @@537d 130
  9684                          ; TI$="hh:mm:ss.t" Allows optional colons to delimit parameters and ;; @@537d 130
  9685                          ;   allows input to be abbrieviated (eg., TI$="h:mm" or ;; @@537d 130
  9686                          ;   even TI$=""), defaulting to "00" for unspecified ;; @@537d 130
  9687                          ;   parameters.  24-hour clock (00:00:00.0 to 23:59:59.9). ;; @@537d 130
  9688                          ;   901010 F.Bowen ;; @@537d 130
  9689                           ;; @@537d 130
  9690                          Set_TI_String                                              ;; @@537d 131
  9691  537d 206d5b                              jsr frefac                               ; we won't need it ;; @@537d 131
  9692  5380 850d                                sta count                                ; save length ;; @@5380 131
  9693                           ;; @@5382 131
  9694  5382 a000                                ldy #0                                   ; our pointer into TI$ assignment ;; @@5382 131
  9695  5384 8487                                sty time                                 ; default time to zero, in case it's not fully specified ;; @@5384 131
  9696  5386 8488                                sty time+1                                ;; @@5386 131
  9697  5388 8489                                sty time+2                                ;; @@5388 131
  9698  538a 848a                                sty time+3                                ;; @@538a 131
  9699                           ;; @@538c 131
  9700  538c a203                                ldx #3                                   ; parameter pointer (3=hr,2=min,1=sec,0=tenths) ;; @@538c 131
  9701  538e 20d453             _local_1130_10   jsr GetTimeDigit                         ; get first digit, convert to BCD ;; @@538e 131
  9702  5391 b013                                bcs _local_1130_20                       ; colon or eos ;; @@5391 131
  9703  5393 9587                                sta time,x                                ;; @@5393 131
  9704  5395 20d453                              jsr GetTimeDigit                         ; get second digit, convert to BCD ;; @@5395 131
  9705  5398 b00c                                bcs _local_1130_20                       ; colon or eos ;; @@5398 131
  9706                           ;; @@539a 131
  9707  539a 1687                                asl time,x                               ; move first digit to msd ;; @@539a 131
  9708  539c 1687                                asl time,x                                ;; @@539c 131
  9709  539e 1687                                asl time,x                                ;; @@539e 131
  9710  53a0 1687                                asl time,x                                ;; @@53a0 131
  9711  53a2 1587                                ora time,x                               ; combine with second digit ;; @@53a2 131
  9712  53a4 9587                                sta time,x                               ; now we have a time element of packed BCD ;; @@53a4 131
  9713                           ;; @@53a6 131
  9714  53a6 b587               _local_1130_20   lda time,x                                ;; @@53a6 131
  9715  53a8 ddf153                              cmp MaxTimeValues,x                      ; check for parameter too big ;; @@53a8 131
  9716  53ab b350fe                              +lbcs fcerr                              ; hr>23, min>59, sec>59, tenths>9 ;; @@53ab 131
  9717                           ;; @@53ae 131
  9718  53ae ca                                  dex                                      ; check if done ;; @@53ae 131
  9719  53af 3012                                bmi _local_1130_30                       ; yes- all parameters accounted for ;; @@53af 131
  9720  53b1 c40d                                cpy count                                 ;; @@53b1 131
  9721  53b3 b013                                bcs _local_1130_40                       ; yes- end of string ;; @@53b3 131
  9722                           ;; @@53b5 131
  9723  53b5 20d522                              jsr indin1_ram1                          ; check for optional colon (or period)   [910103] ;; @@53b5 131
  9724  53b8 c93a                                cmp #':'                                  ;; @@53b8 131
  9725  53ba f004                                beq _local_1130_25                        ;; @@53ba 131
  9726  53bc c92e                                cmp #'.'                                  ;; @@53bc 131
  9727  53be d0ce                                bne _local_1130_10                       ; not there ;; @@53be 131
  9728  53c0 c8                 _local_1130_25   iny                                      ; it's there- skip over it ;; @@53c0 131
  9729                           ;; @@53c1 131
  9730  53c1 80cb                                bra _local_1130_10                       ; loop until done ;; @@53c1 131
  9731                           ;; @@53c3 131
  9732                           ;; @@53c3 131
  9733  53c3 c40d               _local_1130_30   cpy count                                ; done ;; @@53c3 131
  9734  53c5 93a822                              +lbcc errlen                             ; error if string too long ;; @@53c5 131
  9735                           ;; @@53c8 131
  9736  53c8 ab8700             _local_1130_40   ldz time                                 ; tenths  0-9 ;; @@53c8 131
  9737  53cb a588                                lda time+1                               ; seconds 0-59 ;; @@53cb 131
  9738  53cd a689                                ldx time+2                               ; minutes 0-59 ;; @@53cd 131
  9739  53cf a48a                                ldy time+3                               ; hours  0-23 ;; @@53cf 131
  9740  53d1 4cdbff                              jmp _SetTime                             ; Go set time & exit ;; @@53d1 131
  9741                           ;; @@53d4 131
  9742                          ; .page ;; @@53d4 131
  9743                          ; Get an ASCII digit, make sure it's in range 0-9 or a colon. ;; @@53d4 131
  9744                          ; if no digit to get, default to '0' ;; @@53d4 131
  9745                          ; ;; @@53d4 131
  9746                          ; exit with .c=0 if okay  (.A contains BCD) ;; @@53d4 131
  9747                          ;    .c=1 if colon or eos (.A invalid) ;; @@53d4 131
  9748                           ;; @@53d4 131
  9749                          GetTimeDigit                                               ;; @@53d4 132
  9750  53d4 a900                                lda #0                                   ; default to '0' ;; @@53d4 132
  9751  53d6 c40d                                cpy count                                 ;; @@53d6 132
  9752  53d8 b014                                bcs _local_1131_10                       ; exit if at end of string (carry set) ;; @@53d8 132
  9753                           ;; @@53da 132
  9754  53da 20d522                              jsr indin1_ram1                          ; else get a character from string ;; @@53da 132
  9755  53dd c8                                  iny                                      ; point to next character ;; @@53dd 132
  9756  53de c92e                                cmp #'.'                                 ; [910103] ;; @@53de 132
  9757  53e0 f00c                                beq _local_1131_10                       ; terminator (period) (carry set) ;; @@53e0 132
  9758  53e2 c930                                cmp #'0'                                 ; check character, only 0-9 allowed ;; @@53e2 132
  9759  53e4 9317fe                              +lbcc fcerr                              ; too small ;; @@53e4 132
  9760  53e7 c93a                                cmp #':'                                  ;; @@53e7 132
  9761  53e9 9003                                bcc _local_1131_10                       ; just right  (carry clear) ;; @@53e9 132
  9762  53eb d310fe                              +lbne fcerr                              ; too big ;; @@53eb 132
  9763                          ; falls through if colon (carry set) ;; @@53ee 132
  9764                           ;; @@53ee 132
  9765  53ee 290f               _local_1131_10   and #$0f                                 ; make BCD ;; @@53ee 132
  9766  53f0 60                                  rts                                       ;; @@53f0 132
  9767                           ;; @@53f1 132
  9768                           ;; @@53f1 132
  9769                           ;; @@53f1 132
  9770                          MaxTimeValues                                              ;; @@53f1 133
  9771  53f1 10606024                            !text $10,$60,$60,$24                    ; t,s,m,h in packed BCD ;; @@53f1 133
  9772                           ;; @@53f5 133
  9773                          ; .page ;; @@53f5 133
  9774                          ; x$=TI$  Return a string of the form "hh:mm:ss.t", including colons. ;; @@53f5 133
  9775                           ;; @@53f5 133
  9776                          Get_TI_String                                              ;; @@53f5 133
  9777  53f5 207054                              jsr ReadSystemClock                      ; get time as packed BCD ;; @@53f5 133
  9778                           ;; @@53f8 133
  9779  53f8 a90a                                lda #10                                  ; get string space for 10 characters ;; @@53f8 133
  9780  53fa 207b5a                              jsr strspa                                ;; @@53fa 133
  9781  53fd a8                                  tay                                      ; length ;; @@53fd 133
  9782  53fe 88                                  dey                                      ; index ;; @@53fe 133
  9783                           ;; @@53ff 133
  9784  53ff a587                                lda time                                 ; build TI$ string in 'fbuffr' ;; @@53ff 133
  9785  5401 0930                                ora #'0'                                 ; (build string backwards, from last chr to first) ;; @@5401 133
  9786  5403 a264                                ldx #dsctmp+1                             ;; @@5403 133
  9787  5405 20f022                              jsr sta_far_ram1                         ; put tenths (special case- only 1 digit) ;; @@5405 133
  9788  5408 88                                  dey                                       ;; @@5408 133
  9789  5409 a92e                                lda #'.'                                  ;; @@5409 133
  9790  540b 20f022                              jsr sta_far_ram1                         ; put period (special case)   [910103] ;; @@540b 133
  9791  540e 88                                  dey                                       ;; @@540e 133
  9792  540f a201                                ldx #1                                    ;; @@540f 133
  9793  5411 800a                                bra _local_1132_20                        ;; @@5411 133
  9794                           ;; @@5413 133
  9795  5413 da                 _local_1132_10   phx                                      ; element pointer (1=secs, 2=mins, 3=hrs) ;; @@5413 133
  9796  5414 a264                                ldx #dsctmp+1                             ;; @@5414 133
  9797  5416 a93a                                lda #':'                                  ;; @@5416 133
  9798  5418 20f022                              jsr sta_far_ram1                         ; put colon ;; @@5418 133
  9799  541b 88                                  dey                                       ;; @@541b 133
  9800  541c fa                                  plx                                       ;; @@541c 133
  9801                           ;; @@541d 133
  9802  541d b587               _local_1132_20   lda time,x                                ;; @@541d 133
  9803  541f 4b                                  taz                                       ;; @@541f 133
  9804  5420 290f                                and #$0f                                 ; do lsd first, since we're working backwards ;; @@5420 133
  9805  5422 0930                                ora #'0'                                  ;; @@5422 133
  9806  5424 da                                  phx                                       ;; @@5424 133
  9807  5425 a264                                ldx #dsctmp+1                             ;; @@5425 133
  9808  5427 20f022                              jsr sta_far_ram1                         ; put lsd ;; @@5427 133
  9809  542a 88                                  dey                                       ;; @@542a 133
  9810  542b 6b                                  tza                                      ; then do msd ;; @@542b 133
  9811  542c 4a                                  lsr                                       ;; @@542c 133
  9812  542d 4a                                  lsr                                       ;; @@542d 133
  9813  542e 4a                                  lsr                                       ;; @@542e 133
  9814  542f 4a                                  lsr                                       ;; @@542f 133
  9815  5430 0930                                ora #'0'                                  ;; @@5430 133
  9816  5432 20f022                              jsr sta_far_ram1                         ; put msd ;; @@5432 133
  9817  5435 fa                                  plx                                       ;; @@5435 133
  9818  5436 e8                                  inx                                      ; next packed element ;; @@5436 133
  9819  5437 88                                  dey                                       ;; @@5437 133
  9820  5438 10d9                                bpl _local_1132_10                       ; loop until done ;; @@5438 133
  9821                           ;; @@543a 133
  9822  543a a90a                                lda #10                                  ; length ;; @@543a 133
  9823  543c 205d5b                              jsr mvdone                               ; update frespc ???? ;; @@543c 133
  9824  543f 838e06                              +lbra putnew                             ; make descriptor in dsctmp real ;; @@543f 133
  9825                           ;; @@5442 133
  9826                          ; .page ;; @@5442 133
  9827                          ; TI. Convert 24-hour TOD into tenths of seconds.  901010 F.Bowen ;; @@5442 133
  9828                           ;; @@5442 133
  9829                          Get_TI                                                     ;; @@5442 134
  9830  5442 207054                              jsr ReadSystemClock                      ; glance at the clock, get time as h:m:s:t ;; @@5442 134
  9831  5445 6467                                stz faclo                                ; init accumulator with tenths (0-9, so nothing to convert) ;; @@5445 134
  9832  5447 a300                                ldz #0                                    ;; @@5447 134
  9833  5449 6466                                stz facmo                                 ;; @@5449 134
  9834  544b 6465                                stz facmoh                                ;; @@544b 134
  9835                           ;; @@544d 134
  9836  544d a203                                ldx #3                                   ; convert time (BCD) to tenths of seconds (binary) since midnight ;; @@544d 134
  9837  544f 207c54             _local_1133_10   jsr TimeMultiply                          ;; @@544f 134
  9838  5452 18                                  clc                                       ;; @@5452 134
  9839  5453 6567                                adc faclo                                 ;; @@5453 134
  9840  5455 8567                                sta faclo                                 ;; @@5455 134
  9841  5457 a52b                                lda product+1                             ;; @@5457 134
  9842  5459 6566                                adc facmo                                 ;; @@5459 134
  9843  545b 8566                                sta facmo                                 ;; @@545b 134
  9844  545d a52c                                lda product+2                             ;; @@545d 134
  9845  545f 6565                                adc facmoh                                ;; @@545f 134
  9846  5461 8565                                sta facmoh                               ; (can't overflow since 23:59:59:9 -> 863999 ($0D2EFF) ;; @@5461 134
  9847  5463 ca                                  dex                                       ;; @@5463 134
  9848  5464 d0e9                                bne _local_1133_10                       ; next factor ;; @@5464 134
  9849                           ;; @@5466 134
  9850  5466 a900                                lda #0                                   ; float value in FAC ;; @@5466 134
  9851  5468 8564                                sta facho                                ; zero msb, facov, facsgn ;; @@5468 134
  9852  546a a2a0                                ldx #160                                 ; set facov for time ;; @@546a 134
  9853  546c 38                                  sec                                      ; normal fac ;; @@546c 134
  9854  546d 83750e                              +lbra floatb                             ; do it ;; @@546d 134
  9855                           ;; @@5470 134
  9856                           ;; @@5470 134
  9857                           ;; @@5470 134
  9858                          ReadSystemClock                                            ;; @@5470 135
  9859  5470 20deff                              jsr _ReadTime                            ; get packed BCD, y=hrs, x=min, a=sec, z=tenths ;; @@5470 135
  9860                          ; (assumes system clock was set properly!) ;; @@5473 135
  9861  5473 6487                                stz time                                 ; tenths  0-9 ;; @@5473 135
  9862  5475 8588                                sta time+1                               ; seconds  0-59 ;; @@5475 135
  9863  5477 8689                                stx time+2                               ; minutes  0-59 ;; @@5477 135
  9864  5479 848a                                sty time+3                               ; hours  0-59 ;; @@5479 135
  9865  547b 60                                  rts                                       ;; @@547b 135
  9866                           ;; @@547c 135
  9867                          ; .page ;; @@547c 135
  9868                          ; Unsigned Integer Multiply: Time * Factor  -> Tenths_of_Seconds ;; @@547c 135
  9869                          ;     A   *  (B,C)  ->      (D,E,F) ;; @@547c 135
  9870                           ;; @@547c 135
  9871                          TimeMultiply                                               ;; @@547c 135
  9872  547c b587                                lda time,x                               ; convert packed BCD to binary ;; @@547c 135
  9873  547e 290f                                and #$0f                                  ;; @@547e 135
  9874  5480 8564                                sta facho                                 ;; @@5480 135
  9875  5482 b587                                lda time,x                               ; 10x = 8x + 2x ;; @@5482 135
  9876  5484 29f0                                and #$f0                                  ;; @@5484 135
  9877  5486 4a                                  lsr                                      ; msd x 8 ;; @@5486 135
  9878  5487 9587                                sta time,x                                ;; @@5487 135
  9879  5489 4a                                  lsr                                       ;; @@5489 135
  9880  548a 4a                                  lsr                                      ; msd x 2 ;; @@548a 135
  9881  548b 18                                  clc                                       ;; @@548b 135
  9882  548c 6564                                adc facho                                ; lsd ;; @@548c 135
  9883  548e 7587                                adc time,x                                ;; @@548e 135
  9884  5490 9587                                sta time,x                               ; can't overflow ($99->153) ;; @@5490 135
  9885                           ;; @@5492 135
  9886  5492 8a                                  txa                                      ; make a word pointer from byte pointer ;; @@5492 135
  9887  5493 0a                                  asl                                       ;; @@5493 135
  9888  5494 a8                                  tay                                       ;; @@5494 135
  9889  5495 b9b954                              lda TimeFactor-2,y                       ; multiplicand = TimeFactor,y  (2 bytes) ;; @@5495 135
  9890  5498 8528                                sta multiplicand                         ; multiplier = Time,x x (1 byte) ;; @@5498 135
  9891  549a b9ba54                              lda TimeFactor-1,y                       ; ----------- ;; @@549a 135
  9892  549d 8529                                sta multiplicand+1                        ;; @@549d 135
  9893  549f a900                                lda #0                                   ; product lo   (3 bytes) ;; @@549f 135
  9894  54a1 852b                                sta product+1                            ; mid ;; @@54a1 135
  9895  54a3 852c                                sta product+2                            ; hi ;; @@54a3 135
  9896                           ;; @@54a5 135
  9897  54a5 a010                                ldy #16                                  ; 16-bit multiplicand ;; @@54a5 135
  9898  54a7 0a                 _local_1134_10   asl                                       ;; @@54a7 135
  9899  54a8 eb2b00                              row product+1                             ;; @@54a8 135
  9900  54ab eb2800                              row multiplicand                         ; multiplier * multiplicand -> product ;; @@54ab 135
  9901  54ae 9007                                bcc _local_1134_20                        ;; @@54ae 135
  9902  54b0 18                                  clc                                       ;; @@54b0 135
  9903  54b1 7587                                adc time,x                                ;; @@54b1 135
  9904  54b3 9002                                bcc _local_1134_20                        ;; @@54b3 135
  9905  54b5 e32b                                inw product+1                            ; (does no error check, since using time factors ;; @@54b5 135
  9906  54b7 88                 _local_1134_20   dey                                      ; in ROM and maximum time multiplier of 59 there ;; @@54b7 135
  9907  54b8 d0ed                                bne _local_1134_10                       ; is no danger of overflow) ;; @@54b8 135
  9908                           ;; @@54ba 135
  9909                          ; sta product ;; @@54ba 135
  9910  54ba 60                                  rts                                      ; (.X is preserved) ;; @@54ba 135
  9911                           ;; @@54bb 135
  9912                           ;; @@54bb 135
  9913                          TimeFactor                                                 ;; @@54bb 136
  9914  54bb 0a00                                !word 10                                 ; tenths per second  (max    59*10 =    590 ($0024E) ;; @@54bb 136
  9915  54bd 5802                                !word 600                                ; per minute  (max   59*600 =  35400 ($08A48) ;; @@54bd 136
  9916  54bf a08c                                !word 36000                              ; per hour    (max 23*36000 = 828000 ($CA260) ;; @@54bf 136
  9917                           ;; @@54c1 136
  9918                          ; .page ;; @@54c1 136
  9919                          ; .subttl  SLEEP ;; @@54c1 136
  9920                           ;; @@54c1 136
  9921                          ;******************************************************************************* ;; @@54c1 136
  9922                          ;* ;; @@54c1 136
  9923                          ;* SLEEP Command - Postpone all activity for a specified number of seconds ;; @@54c1 136
  9924                          ;* ;; @@54c1 136
  9925                          ;* Syntax:  SLEEP n ;; @@54c1 136
  9926                          ;* ;; @@54c1 136
  9927                          ;* Where n is the number of seconds to remain inactive, ;; @@54c1 136
  9928                          ;* expressed as a positive value < 65536. ;; @@54c1 136
  9929                          ;* ;; @@54c1 136
  9930                          ;******************************************************************************* ;; @@54c1 136
  9931                           ;; @@54c1 136
  9932  54c1 208a5d             sleep            jsr getwrd                               ; get argument in (y,a) ;; @@54c1 136
  9933                           ;; @@54c4 136
  9934                          ; Multiply # of seconds to sleep by 60.  This will be the number of 'jiffies' ;; @@54c4 136
  9935                          ; to hibernate.  Store this value in 3 consecutive locations the kernel will ;; @@54c4 136
  9936                          ; decrement as a 24-bit binary value, and wait for an underflow. ;; @@54c4 136
  9937                          ; ;; @@54c4 136
  9938                          ; ldx #0   ;THIS CODE REPLACED    [910730] ;; @@54c4 136
  9939                          ; php ;; @@54c4 136
  9940                          ; sei   ;silence, please! ;; @@54c4 136
  9941                          ; sty _sleep_counter ;; @@54c4 136
  9942                          ; sta _sleep_counter+1 ;; @@54c4 136
  9943                          ; stx _sleep_counter+2 ;sleep_counter = n ;; @@54c4 136
  9944                          ; ;; @@54c4 136
  9945                          ; jsr sleep_times_2 ;sleep_counter = 2n ;; @@54c4 136
  9946                          ; jsr add_xay_to_sleep ;sleep_counter = 3n ;; @@54c4 136
  9947                          ; jsr sleep_times_4 ;sleep_counter = 12n ;; @@54c4 136
  9948                          ; ;; @@54c4 136
  9949                          ; ldy _sleep_counter ;; @@54c4 136
  9950                          ; lda _sleep_counter+1 ;; @@54c4 136
  9951                          ; ldx _sleep_counter+2 ;(xay) = 12n ;; @@54c4 136
  9952                          ; ;; @@54c4 136
  9953                          ; jsr sleep_times_4 ;sleep_counter = 48n ;; @@54c4 136
  9954                          ; jsr add_xay_to_sleep ;sleep_counter = 60n !!!!! ;; @@54c4 136
  9955                          ; ;; @@54c4 136
  9956                          ; plp ;; @@54c4 136
  9957                          ; ;; @@54c4 136
  9958                          ;1$ jsr is_stop_key_down ;; @@54c4 136
  9959                          ; ldx _sleep_counter+2 ;; @@54c4 136
  9960                          ; inx   ;underflow? ;; @@54c4 136
  9961                          ; bne 1$   ;no, loop ;; @@54c4 136
  9962                          ; rts ;; @@54c4 136
  9963                          ; ;; @@54c4 136
  9964                          ; ;; @@54c4 136
  9965                          ;sleep_times_4 ;; @@54c4 136
  9966                          ; jsr sleep_times_2 ;; @@54c4 136
  9967                          ;sleep_times_2 ;; @@54c4 136
  9968                          ; asl _sleep_counter ;; @@54c4 136
  9969                          ; rol _sleep_counter+1 ;; @@54c4 136
  9970                          ; rol _sleep_counter+2 ;; @@54c4 136
  9971                          ; rts ;; @@54c4 136
  9972                          ; ;; @@54c4 136
  9973                          ;add_xay_to_sleep ;; @@54c4 136
  9974                          ; pha ;; @@54c4 136
  9975                          ; tya ;; @@54c4 136
  9976                          ; adc _sleep_counter ;; @@54c4 136
  9977                          ; sta _sleep_counter ;; @@54c4 136
  9978                          ; pla ;; @@54c4 136
  9979                          ; adc _sleep_counter+1 ;; @@54c4 136
  9980                          ; sta _sleep_counter+1 ;; @@54c4 136
  9981                          ; txa ;; @@54c4 136
  9982                          ; adc _sleep_counter+2 ;; @@54c4 136
  9983                          ; sta _sleep_counter+2 ;; @@54c4 136
  9984                          ; rts ;; @@54c4 136
  9985                           ;; @@54c4 136
  9986                          ; .page ;; @@54c4 136
  9987                          ; SLEEP is now based upon the system hardware TOD clock (same one used by TI$).  This ;; @@54c4 136
  9988                          ; makes it accurate, something it was not when it was based upon the frame rate. ;; @@54c4 136
  9989                           ;; @@54c4 136
  9990  54c4 8487                                sty time                                 ; Number of seconds to "sleep"   [910730] new ;; @@54c4 136
  9991  54c6 8588                                sta time+1                                ;; @@54c6 136
  9992                           ;; @@54c8 136
  9993  54c8 20deff             _local_1135_10   jsr _ReadTime                            ; Get current time ;; @@54c8 136
  9994  54cb 6489                                stz time+2                               ; tenths ;; @@54cb 136
  9995  54cd 858a                                sta time+3                               ; seconds ;; @@54cd 136
  9996                           ;; @@54cf 136
  9997  54cf 20cc2c             _local_1135_20   jsr is_stop_key_down                     ; Allow user to abort ;; @@54cf 136
  9998  54d2 20deff                              jsr _ReadTime                            ; Wait for seconds to increment ;; @@54d2 136
  9999  54d5 c58a                                cmp time+3                                ;; @@54d5 136
 10000  54d7 f0f6                                beq _local_1135_20                        ;; @@54d7 136
 10001  54d9 858a                                sta time+3                                ;; @@54d9 136
 10002                           ;; @@54db 136
 10003  54db 20deff             _local_1135_30   jsr _ReadTime                            ; Wait for tenths to increment ;; @@54db 136
 10004  54de d489                                cpz time+2                                ;; @@54de 136
 10005  54e0 d0f9                                bne _local_1135_30                        ;; @@54e0 136
 10006                           ;; @@54e2 136
 10007  54e2 c387                                dew time                                 ; Decrement sleep period 1 second ;; @@54e2 136
 10008  54e4 d0e9                                bne _local_1135_20                       ; Loop until sleep period over ;; @@54e4 136
 10009                           ;; @@54e6 136
 10010  54e6 60                                  rts                                       ;; @@54e6 136
 10011                           ;; @@54e7 136
 10012                          ;.end ;; @@54e7 136
 10013                          ; .page ;; @@54e7 136
 10014                          ; .subttl  WAIT ;; @@54e7 136
 10015                           ;; @@54e7 136
 10016                          ; WAIT<location>,<mask1>[,<mask2>] statement waits until the contents of ;; @@54e7 136
 10017                          ; <location> is nonzero when XORed with mask2 and then ANDed with mask1. ;; @@54e7 136
 10018                          ; If mask2 is not present, it is assumed to be zero. ;; @@54e7 136
 10019                           ;; @@54e7 136
 10020  54e7 207c5d             wait             jsr getnum                               ; get required mask1 ;; @@54e7 137
 10021  54ea 864b                                stx andmsk                                ;; @@54ea 137
 10022  54ec a200                                ldx #0                                    ;; @@54ec 137
 10023  54ee 208522                              jsr chrgot                                ;; @@54ee 137
 10024  54f1 f003                                beq _local_1136_10                        ;; @@54f1 137
 10025  54f3 20825d                              jsr combyt                               ; get optional mask2 ;; @@54f3 137
 10026  54f6 864c               _local_1136_10   stx eormsk                                ;; @@54f6 137
 10027                           ;; @@54f8 137
 10028  54f8 db                                  phz                                       ;; @@54f8 137
 10029  54f9 abd102                              ldz current_bank                         ; set up bank number for fetch ;; @@54f9 137
 10030  54fc a216                                ldx #poker                               ; ..and address ;; @@54fc 137
 10031  54fe a000                                ldy #0                                   ; ..and index ;; @@54fe 137
 10032                           ;; @@5500 137
 10033  5500 2cd102             _local_1136_15   bit current_bank                          ;; @@5500 137
 10034  5503 3004                                bmi _local_1136_20                       ; NOMAP? ;; @@5503 137
 10035  5505 2074ff                              jsr _lda_far                             ; lda (poker),y ;; @@5505 137
 10036  5508 2c                                  !text $2c                                 ;; @@5508 137
 10037                           ;; @@5509 137
 10038  5509 b116               _local_1136_20   lda (poker),y                             ;; @@5509 137
 10039  550b 454c                                eor eormsk                                ;; @@550b 137
 10040  550d 254b                                and andmsk                                ;; @@550d 137
 10041  550f f0ef                                beq _local_1136_15                        ;; @@550f 137
 10042  5511 fb                                  plz                                       ;; @@5511 137
 10043  5512 60                                  rts                                      ; got a nonzero ;; @@5512 137
 10044                           ;; @@5513 137
 10045                          ;.end ;; @@5513 137
 10046                          ; .page ;; @@5513 137
 10047                          ; .subttl  FRE ;; @@5513 137
 10048                           ;; @@5513 137
 10049                          ;***************************************************************************** ;; @@5513 137
 10050                          ; FRE(n) Function ;; @@5513 137
 10051                          ; ;; @@5513 137
 10052                          ; Where: n=0 returns amount of free RAM in bank 0. This is the area ;; @@5513 137
 10053                          ;  between top of text (TEXT_TOP) and top of RAM (MAX_MEM_0). ;; @@5513 137
 10054                          ; ;; @@5513 137
 10055                          ;  n=1 returns amount of free ram in bank 1. This is the area ;; @@5513 137
 10056                          ;  between top of arrays (STREND) and bottom of strings (FRETOP). ;; @@5513 137
 10057                          ; ;; @@5513 137
 10058                          ;  n=2 returns the amount (???? presence) of expansion RAM. ;; @@5513 137
 10059                          ; ;; @@5513 137
 10060                          ;***************************************************************************** ;; @@5513 137
 10061                           ;; @@5513 137
 10062  5513 206f5d             fre              jsr conint                               ; get integer argument in .x ;; @@5513 138
 10063  5516 e001                                cpx #1                                   ; which bank? ;; @@5516 138
 10064  5518 f015                                beq _local_1137_20                       ; go do bank one ;; @@5518 138
 10065  551a e002                                cpx #2                                   ; go do expansion banks   [910107] ;; @@551a 138
 10066  551c f020                                beq _local_1137_30                       ; else it must be bank zero ;; @@551c 138
 10067  551e b3ddfc                              +lbcs fcerr                              ; any other is unpleasant to talk about ;; @@551e 138
 10068                           ;; @@5521 138
 10069  5521 38                                  sec                                      ; FRE(text_bank) ;; @@5521 138
 10070  5522 adcf02                              lda max_mem_0                             ;; @@5522 138
 10071  5525 e582                                sbc text_top                              ;; @@5525 138
 10072  5527 a8                                  tay                                      ; set up result for nosflt ;; @@5527 138
 10073  5528 add002                              lda max_mem_0+1                           ;; @@5528 138
 10074  552b e583                                sbc text_top+1                            ;; @@552b 138
 10075  552d 8014                                bra _local_1137_40                       ; assumes text_top < max_mem ;; @@552d 138
 10076                           ;; @@552f 138
 10077                           ;; @@552f 138
 10078  552f 20335c             _local_1137_20   jsr garba2                               ; FRE(var_bank) do garbage collect first ;; @@552f 138
 10079  5532 38                                  sec                                       ;; @@5532 138
 10080  5533 a535                                lda fretop                                ;; @@5533 138
 10081  5535 e533                                sbc strend                                ;; @@5535 138
 10082  5537 a8                                  tay                                       ;; @@5537 138
 10083  5538 a536                                lda fretop+1                              ;; @@5538 138
 10084  553a e534                                sbc strend+1                              ;; @@553a 138
 10085  553c 8005                                bra _local_1137_40                        ;; @@553c 138
 10086                           ;; @@553e 138
 10087  553e ac0711             _local_1137_30   ldy _expansion                           ; FRE(expansion banks)    [910107] ;; @@553e 138
 10088  5541 a900                                lda #0                                    ;; @@5541 138
 10089                           ;; @@5543 138
 10090  5543 838103             _local_1137_40   +lbra nosflt                             ; go float the number (y,a)=(lo,hi) ;; @@5543 138
 10091                           ;; @@5546 138
 10092                          ;.end ;; @@5546 138
 10093                          ; .page ;; @@5546 138
 10094                          ; .subttl  VAL ;; @@5546 138
 10095                           ;; @@5546 138
 10096                          ; The VAL function takes a string and turns it into a number by interpreting ;; @@5546 138
 10097                          ; the PETSCII digits etc.  Except for the problem that a terminator must be ;; @@5546 138
 10098                          ; supplied by replacing the character beyond the string, VAL is merely a call ;; @@5546 138
 10099                          ; to floating point input (FIN). ;; @@5546 138
 10100                           ;; @@5546 138
 10101  5546 205c5a             val              jsr len1                                 ; get length ;; @@5546 139
 10102  5549 f3fd08                              +lbeq zerofc                             ; return 0 if len=0 ;; @@5549 139
 10103                           ;; @@554c 139
 10104                          ; Use text to fp number code by faking a new text poiner ;; @@554c 139
 10105                           ;; @@554c 139
 10106  554c 18                 val_1            clc                                      ; ///jump table entry.  convert PETSCII to floating point ;; @@554c 139
 10107  554d 6524                                adc index1                                ;; @@554d 139
 10108  554f 8572                                sta strng2                               ; add length to index1 and put in strng2 ;; @@554f 139
 10109  5551 a525                                lda index1+1                              ;; @@5551 139
 10110  5553 6900                                adc #0                                    ;; @@5553 139
 10111  5555 8573                                sta strng2+1                              ;; @@5555 139
 10112                           ;; @@5557 139
 10113  5557 a000                                ldy #0                                    ;; @@5557 139
 10114  5559 a972                                lda #strng2                               ;; @@5559 139
 10115  555b 20d722                              jsr lda_far_ram1                         ; replace character after string with $00 (fake EOL) ;; @@555b 139
 10116  555e 48                                  pha                                      ; save old character ;; @@555e 139
 10117  555f 98                                  tya                                      ; (.A=0) ;; @@555f 139
 10118  5560 a272                                ldx #strng2                               ;; @@5560 139
 10119  5562 20f022                              jsr sta_far_ram1 ;sta (strng2),y         ; ..and put in null ;; @@5562 139
 10120  5565 205f64                              jsr fin_chrget_2                         ; get character pointed to and set flags.(sorta like chrgot) ;; @@5565 139
 10121  5568 a201                                ldx #1                                   ; flag 'bank 1' ;; @@5568 139
 10122  556a 208d63                              jsr fin                                  ; go do evaluation ;; @@556a 139
 10123  556d 68                                  pla                                      ; get saved character ;; @@556d 139
 10124  556e da                                  phx                                       ;; @@556e 139
 10125  556f a272                                ldx #strng2                               ;; @@556f 139
 10126  5571 a000                                ldy #0                                    ;; @@5571 139
 10127  5573 20f022                              jsr sta_far_ram1 ;sta (strng2),y         ; restore zeroed-out character ;; @@5573 139
 10128  5576 fa                                  plx                                       ;; @@5576 139
 10129  5577 60                                  rts                                       ;; @@5577 139
 10130                           ;; @@5578 139
 10131                          ;.end ;; @@5578 139
 10132                          ; .page ;; @@5578 139
 10133                          ; .subttl  DEC ;; @@5578 139
 10134                           ;; @@5578 139
 10135                          ; DEC convert a hex string representing a 2-byte integer into decimal. ;; @@5578 139
 10136                           ;; @@5578 139
 10137  5578 205c5a             dcml             jsr len1                                 ; find length of string ;; @@5578 139
 10138  557b 8526                                sta index2                               ; len ret. in a ;; @@557b 139
 10139  557d a000                                ldy #0                                    ;; @@557d 139
 10140  557f 8427                                sty index2+1                             ; zero char counter ;; @@557f 139
 10141  5581 8473                                sty strng2+1                             ; zero out value ;; @@5581 139
 10142  5583 8472                                sty strng2                                ;; @@5583 139
 10143                           ;; @@5585 139
 10144  5585 c426               _local_1138_10   cpy index2                               ; evaluated all characters? ;; @@5585 139
 10145  5587 f034                                beq _local_1138_50                       ; branch if so ;; @@5587 139
 10146  5589 20d522                              jsr indin1_ram1                          ; get next character from string ;; @@5589 139
 10147  558c c8                                  iny                                       ;; @@558c 139
 10148  558d c920                                cmp #' '                                 ; ignore spaces ;; @@558d 139
 10149  558f f0f4                                beq _local_1138_10                        ;; @@558f 139
 10150  5591 e627                                inc index2+1                              ;; @@5591 139
 10151  5593 a627                                ldx index2+1                              ;; @@5593 139
 10152  5595 e005                                cpx #5                                    ;; @@5595 139
 10153  5597 b02b                                bcs decbad                               ; can't have more than 4 characters ;; @@5597 139
 10154                           ;; @@5599 139
 10155  5599 c930                                cmp #'0'                                  ;; @@5599 139
 10156  559b 9027                                bcc decbad                               ; bad if < 0 ;; @@559b 139
 10157  559d c93a                                cmp #':'                                 ; '9'+1 ;; @@559d 139
 10158  559f 900a                                bcc _local_1138_30                       ; ok if  = 0-9 ;; @@559f 139
 10159  55a1 c941                                cmp #'A'                                  ;; @@55a1 139
 10160  55a3 901f                                bcc decbad                               ; bad if > 9  and < A ;; @@55a3 139
 10161  55a5 c947                                cmp #'G'                                  ;; @@55a5 139
 10162  55a7 b01b                                bcs decbad                               ; bad if > F ;; @@55a7 139
 10163                           ;; @@55a9 139
 10164  55a9 e907                                sbc #7                                   ; adjust if A-F  (.c is clr) ;; @@55a9 139
 10165  55ab e92f               _local_1138_30   sbc #$2f                                 ; adjust to $00..$0f (.c is set) ;; @@55ab 139
 10166  55ad 0a                                  asl                                      ; shift low nibble to high ;; @@55ad 139
 10167  55ae 0a                                  asl                                       ;; @@55ae 139
 10168  55af 0a                                  asl                                       ;; @@55af 139
 10169  55b0 0a                                  asl                                       ;; @@55b0 139
 10170                           ;; @@55b1 139
 10171  55b1 a204                                ldx #4                                   ; mult. old val. by 16, add new ;; @@55b1 139
 10172  55b3 0a                 _local_1138_40   asl                                       ;; @@55b3 139
 10173  55b4 2672                                rol strng2                                ;; @@55b4 139
 10174  55b6 2673                                rol strng2+1                              ;; @@55b6 139
 10175  55b8 ca                                  dex                                       ;; @@55b8 139
 10176  55b9 d0f8                                bne _local_1138_40                        ;; @@55b9 139
 10177  55bb 80c8                                bra _local_1138_10                        ;; @@55bb 139
 10178                           ;; @@55bd 139
 10179  55bd a472               _local_1138_50   ldy strng2                               ; get lsb of value, ;; @@55bd 139
 10180  55bf a573                                lda strng2+1                             ; & msb, ;; @@55bf 139
 10181  55c1 830303                              +lbra nosflt                             ; go float 2 byte unsigned integer ;; @@55c1 139
 10182                           ;; @@55c4 139
 10183                           ;; @@55c4 139
 10184                          decbad                                                     ;; @@55c4 140
 10185  55c4 8337fc                              +lbra fcerr                              ; illegal qty error ;; @@55c4 140
 10186                           ;; @@55c7 140
 10187                          ;.end ;; @@55c7 140
 10188                          ; .page ;; @@55c7 140
 10189                          ; .subttl  PEEK  POKE ;; @@55c7 140
 10190                           ;; @@55c7 140
 10191                           ;; @@55c7 140
 10192  55c7 fc1600             peek             phw poker                                ; ..also happens to be LINNUM!   [910911] ;; @@55c7 140
 10193  55ca 20db4c                              jsr chknum                                ;; @@55ca 140
 10194  55cd 208d5d                              jsr getadr                                ;; @@55cd 140
 10195  55d0 a000                                ldy #0                                   ; index ;; @@55d0 140
 10196  55d2 2cd102                              bit current_bank                          ;; @@55d2 140
 10197  55d5 300b                                bmi _local_1139_10                       ; NOMAP? ;; @@55d5 140
 10198                           ;; @@55d7 140
 10199  55d7 db                                  phz                                       ;; @@55d7 140
 10200  55d8 abd102                              ldz current_bank                         ; set up bank number for Kernel's fetch ;; @@55d8 140
 10201  55db a216                                ldx #poker                               ; ..and address ;; @@55db 140
 10202  55dd 2074ff                              jsr _lda_far                             ; lda (poker),y ;; @@55dd 140
 10203  55e0 fb                                  plz                                       ;; @@55e0 140
 10204  55e1 2c                                  !text $2c                                 ;; @@55e1 140
 10205                           ;; @@55e2 140
 10206  55e2 b116               _local_1139_10   lda (poker),y                             ;; @@55e2 140
 10207  55e4 a8                                  tay                                      ; get byte into .y ;; @@55e4 140
 10208  55e5 68                                  pla                                       ;; @@55e5 140
 10209  55e6 8517                                sta poker+1                              ; restore linnum ;; @@55e6 140
 10210  55e8 68                                  pla                                       ;; @@55e8 140
 10211  55e9 8516                                sta poker                                 ;; @@55e9 140
 10212  55eb 83e402                              +lbra sngflt                             ; float it ;; @@55eb 140
 10213                           ;; @@55ee 140
 10214                          ; .page ;; @@55ee 140
 10215  55ee 207c5d             poke             jsr getnum                                ;; @@55ee 141
 10216  55f1 8a                 _local_1140_1    txa                                      ; set up value to store for Kernel 'stash' routine ;; @@55f1 141
 10217  55f2 a000                                ldy #0                                   ; ..and index ;; @@55f2 141
 10218  55f4 78                                  sei                                      ; to allow poking IRQ vector, etc.  [910612] ;; @@55f4 141
 10219  55f5 2cd102                              bit current_bank                          ;; @@55f5 141
 10220  55f8 300b                                bmi _local_1140_10                       ; (anything >1Meg means NOMAP) ;; @@55f8 141
 10221                           ;; @@55fa 141
 10222  55fa db                                  phz                                       ;; @@55fa 141
 10223  55fb a216                                ldx #poker                               ; ..and address ;; @@55fb 141
 10224  55fd abd102                              ldz current_bank                         ; ..finally, get the bank number ;; @@55fd 141
 10225  5600 2077ff                              jsr _sta_far                             ; sta (poker),y ;; @@5600 141
 10226  5603 fb                                  plz                                       ;; @@5603 141
 10227  5604 2c                                  !text $2c                                 ;; @@5604 141
 10228                           ;; @@5605 141
 10229  5605 9116               _local_1140_10   sta (poker),y                            ; NoMap ;; @@5605 141
 10230                           ;; @@5607 141
 10231  5607 208522             _local_1140_20   jsr chrgot                               ; eol? ;; @@5607 141
 10232  560a f00a                                beq _local_1140_30                       ; yes ;; @@560a 141
 10233  560c e316                                inw poker                                ; no- increment address ;; @@560c 141
 10234                          ; lda poker  ; check for segment wrap (FFFF->0000) [910911] ;; @@560e 141
 10235                          ; ora poker+1 ;; @@560e 141
 10236  560e f330d8                              +lbeq omerr                              ; [910916] ;; @@560e 141
 10237  5611 202679                              jsr optbyt                               ; & get next [,byte] ;; @@5611 141
 10238  5614 b0db                                bcs _local_1140_1                         ;; @@5614 141
 10239                           ;; @@5616 141
 10240  5616 58                 _local_1140_30   cli                                      ; [910612] ;; @@5616 141
 10241  5617 60                                  rts                                       ;; @@5617 141
 10242                           ;; @@5618 141
 10243                           ;; @@5618 141
 10244                          ;.end ;; @@5618 141
 10245                          ; .page ;; @@5618 141
 10246                          ; .subttl  ERR$ ;; @@5618 141
 10247                           ;; @@5618 141
 10248  5618 20c162             errd             jsr sign                                 ; get sign ;; @@5618 142
 10249  561b 300c                                bmi _local_1141_1                        ; (allow err$(er) when er=-1) ;; @@561b 142
 10250  561d 206f5d                              jsr conint                               ; get integer arg in x ;; @@561d 142
 10251  5620 ca                                  dex                                       ;; @@5620 142
 10252  5621 8a                                  txa                                      ; error # (0 to max-1) ;; @@5621 142
 10253  5622 c92a                                cmp #last_error_message                  ; check range ;; @@5622 142
 10254  5624 900f                                bcc _local_1141_2                        ; ok ;; @@5624 142
 10255  5626 a200                                ldx #0                                   ; too high, return null ;; @@5626 142
 10256  5628 2c                                  !text $2c                                 ;; @@5628 142
 10257                           ;; @@5629 142
 10258  5629 a202               _local_1141_1    ldx #2                                   ; no error, return "ok"    [910911] ;; @@5629 142
 10259  562b a96a                                lda #<ok_error_message                    ;; @@562b 142
 10260  562d a029                                ldy #>ok_error_message                    ;; @@562d 142
 10261  562f 8526                                sta index2                                ;; @@562f 142
 10262  5631 8427                                sty index2+1                              ;; @@5631 142
 10263  5633 8013                                bra _local_1141_30                       ; pass it ;; @@5633 142
 10264                           ;; @@5635 142
 10265  5635 20a92b             _local_1141_2    jsr erstup                               ; look up the error, set up a pointer to it ;; @@5635 142
 10266  5638 a0ff                                ldy #$ff                                 ; determine how long it is ;; @@5638 142
 10267  563a a200                                ldx #0                                    ;; @@563a 142
 10268  563c e8                 _local_1141_10   inx                                      ; count printing characters ;; @@563c 142
 10269  563d c8                 _local_1141_20   iny                                       ;; @@563d 142
 10270  563e b126                                lda (index2),y                           ; (rom: ind.ok) ;; @@563e 142
 10271  5640 3006                                bmi _local_1141_30                       ; msb set means last ;; @@5640 142
 10272  5642 c920                                cmp #' '                                  ;; @@5642 142
 10273  5644 90f7                                bcc _local_1141_20                       ; don't count non-printers ;; @@5644 142
 10274  5646 80f4                                bra _local_1141_10                       ; count all others ;; @@5646 142
 10275                           ;; @@5648 142
 10276  5648 8a                 _local_1141_30   txa                                      ; message length ;; @@5648 142
 10277  5649 207b5a                              jsr strspa                               ; get space ;; @@5649 142
 10278  564c aa                                  tax                                       ;; @@564c 142
 10279  564d f01d                                beq _local_1141_50                       ; null ;; @@564d 142
 10280                           ;; @@564f 142
 10281                          ; sta sw_rom_ram1  ;set up string bank???? ;; @@564f 142
 10282  564f a200                                ldx #0                                    ;; @@564f 142
 10283  5651 a0ff                                ldy #$ff                                  ;; @@5651 142
 10284  5653 c8                 _local_1141_40   iny                                      ; copy message into memory ;; @@5653 142
 10285  5654 b126                                lda (index2),y                           ; (rom: ind.ok) ;; @@5654 142
 10286  5656 c920                                cmp #' '                                  ;; @@5656 142
 10287  5658 90f9                                bcc _local_1141_40                       ; skip non-printers ;; @@5658 142
 10288                           ;; @@565a 142
 10289  565a 48                                  pha                                       ;; @@565a 142
 10290  565b 297f                                and #$7f                                  ;; @@565b 142
 10291  565d 5a                                  phy                                      ; swap x&y ;; @@565d 142
 10292  565e da                                  phx                                       ;; @@565e 142
 10293  565f 7a                                  ply                                       ;; @@565f 142
 10294  5660 a264                                ldx #dsctmp+1                             ;; @@5660 142
 10295  5662 20f022                              jsr sta_far_ram1                         ; sta (dsctmp+1),y to RAM1 ;; @@5662 142
 10296  5665 5a                                  phy                                      ; swap x&y ;; @@5665 142
 10297  5666 fa                                  plx                                       ;; @@5666 142
 10298  5667 7a                                  ply                                       ;; @@5667 142
 10299  5668 e8                                  inx                                       ;; @@5668 142
 10300  5669 68                                  pla                                      ; test if msb was set ;; @@5669 142
 10301  566a 10e7                                bpl _local_1141_40                        ;; @@566a 142
 10302                           ;; @@566c 142
 10303  566c 835803             _local_1141_50   +lbra chrd1                              ; pla,pla,jmp putnew ;; @@566c 142
 10304                           ;; @@566f 142
 10305                           ;; @@566f 142
 10306                          ;.end ;; @@566f 142
 10307                          ; .page ;; @@566f 142
 10308                          ; .subttl  HEX$ ;; @@566f 142
 10309                           ;; @@566f 142
 10310  566f 20db4c             hexd             jsr chknum                                ;; @@566f 143
 10311  5672 fc1600                              phw poker                                ; save linnum    [910911] ;; @@5672 143
 10312  5675 208d5d                              jsr getadr                               ; 2 byte val in (poker) ;; @@5675 143
 10313  5678 a904                                lda #4                                    ;; @@5678 143
 10314  567a 207b5a                              jsr strspa                                ;; @@567a 143
 10315  567d a000                                ldy #0                                    ;; @@567d 143
 10316  567f a517                                lda poker+1                               ;; @@567f 143
 10317  5681 209256                              jsr hexit                                 ;; @@5681 143
 10318  5684 a516                                lda poker                                 ;; @@5684 143
 10319  5686 209256                              jsr hexit                                 ;; @@5686 143
 10320  5689 68                                  pla                                      ; restore linnum ;; @@5689 143
 10321  568a 8517                                sta poker+1                               ;; @@568a 143
 10322  568c 68                                  pla                                       ;; @@568c 143
 10323  568d 8516                                sta poker                                 ;; @@568d 143
 10324  568f 833503                              +lbra chrd1                              ; pla,pla,jmp putnew ;; @@568f 143
 10325                           ;; @@5692 143
 10326  5692 48                 hexit            pha                                       ;; @@5692 143
 10327  5693 4a                                  lsr                                       ;; @@5693 143
 10328  5694 4a                                  lsr                                       ;; @@5694 143
 10329  5695 4a                                  lsr                                       ;; @@5695 143
 10330  5696 4a                                  lsr                                       ;; @@5696 143
 10331  5697 209b56                              jsr dohex                                 ;; @@5697 143
 10332  569a 68                                  pla                                       ;; @@569a 143
 10333                           ;; @@569b 143
 10334  569b 290f               dohex            and #$0f                                  ;; @@569b 143
 10335  569d c90a                                cmp #$0a                                  ;; @@569d 143
 10336  569f 9002                                bcc _local_1142_1                         ;; @@569f 143
 10337  56a1 6906                                adc #6                                    ;; @@56a1 143
 10338  56a3 6930               _local_1142_1    adc #'0'                                  ;; @@56a3 143
 10339  56a5 da                                  phx                                       ;; @@56a5 143
 10340  56a6 a264                                ldx #dsctmp+1                             ;; @@56a6 143
 10341  56a8 20f022                              jsr sta_far_ram1                         ; sta (dsctmp+1),y ;; @@56a8 143
 10342  56ab fa                                  plx                                       ;; @@56ab 143
 10343  56ac c8                                  iny                                       ;; @@56ac 143
 10344  56ad 60                                  rts                                       ;; @@56ad 143
 10345                           ;; @@56ae 143
 10346                          ;.end ;; @@56ae 143
 10347                          ; .page ;; @@56ae 143
 10348                          ; .subttl  JOY ;; @@56ae 143
 10349                           ;; @@56ae 143
 10350                          ;************************************************************* ;; @@56ae 143
 10351                          ; JOY (n)  -- Return joystick status ;; @@56ae 143
 10352                          ; ;; @@56ae 143
 10353                          ; where: n =  1  return position of joystick-1 ;; @@56ae 143
 10354                          ;       2  return position of joystick-2 ;; @@56ae 143
 10355                          ; ;; @@56ae 143
 10356                          ; result:      0  no direction, no button ;; @@56ae 143
 10357                          ;       1-8    direction (see below), no button ;; @@56ae 143
 10358                          ;       128 no direction, button ;; @@56ae 143
 10359                          ;       129-136 direction & button  128 + [1...8] ;; @@56ae 143
 10360                          ; ;; @@56ae 143
 10361                          ; button--->  128        1 ;; @@56ae 143
 10362                          ;       8     2 ;; @@56ae 143
 10363                          ; stick--->  7           3 ;; @@56ae 143
 10364                          ;       6     4 ;; @@56ae 143
 10365                          ;          5 ;; @@56ae 143
 10366                          ; ;; @@56ae 143
 10367                          ;************************************************************* ;; @@56ae 143
 10368                           ;; @@56ae 143
 10369  56ae 206f5d             joy              jsr conint                               ; get 1 byte arg in x ;; @@56ae 144
 10370  56b1 ca                                  dex                                       ;; @@56b1 144
 10371  56b2 e002                                cpx #2                                   ; make sure arg. is valid ;; @@56b2 144
 10372  56b4 b347fb                              +lbcs fcerr                              ; >1, error ;; @@56b4 144
 10373                           ;; @@56b7 144
 10374  56b7 8a                                  txa                                       ;; @@56b7 144
 10375  56b8 4901                                eor #1                                   ; invert to match legends on case ;; @@56b8 144
 10376  56ba aa                                  tax                                       ;; @@56ba 144
 10377  56bb 08                                  php                                      ; save status ;; @@56bb 144
 10378                           ;; @@56bc 144
 10379                          ; jsr put_io_in_map ;; @@56bc 144
 10380  56bc 78                                  sei                                      ; disable IRQ to inhibit kybd ;; @@56bc 144
 10381  56bd ad00dc                              lda d1pra                                 ;; @@56bd 144
 10382  56c0 48                                  pha                                      ; save kybd output lines ;; @@56c0 144
 10383  56c1 a0ff                                ldy #$ff                                  ;; @@56c1 144
 10384  56c3 8c00dc                              sty d1pra                                ; set to not read any kybd inputs ;; @@56c3 144
 10385                           ;; @@56c6 144
 10386  56c6 bd00dc             _local_1143_10   lda d1pra,x                              ; read joystick values ;; @@56c6 144
 10387  56c9 dd00dc                              cmp d1pra,x                              ; debounce ;; @@56c9 144
 10388  56cc d0f8                                bne _local_1143_10                        ;; @@56cc 144
 10389                           ;; @@56ce 144
 10390  56ce aa                                  tax                                      ; save joystick values ;; @@56ce 144
 10391  56cf 68                                  pla                                       ;; @@56cf 144
 10392  56d0 8d00dc                              sta d1pra                                ; reset kybd output lines ;; @@56d0 144
 10393  56d3 8a                                  txa                                      ; restore joystick values ;; @@56d3 144
 10394  56d4 28                                  plp                                      ; restore status ;; @@56d4 144
 10395  56d5 290f                                and #$0f                                 ; test which direction ;; @@56d5 144
 10396  56d7 a8                                  tay                                       ;; @@56d7 144
 10397  56d8 b9e356                              lda joytab-5,y                           ; get direction indicator ;; @@56d8 144
 10398  56db a8                                  tay                                      ; save direction : 0-8 ;; @@56db 144
 10399  56dc 8a                                  txa                                      ; restore joystick value ;; @@56dc 144
 10400  56dd 2910                                and #$10                                 ; test if button triggered ;; @@56dd 144
 10401  56df d004                                bne _local_1143_20                       ; skip if not ;; @@56df 144
 10402  56e1 98                                  tya                                       ;; @@56e1 144
 10403  56e2 0980                                ora #$80                                 ; show trigger depressed ;; @@56e2 144
 10404  56e4 a8                                  tay                                       ;; @@56e4 144
 10405  56e5 83ea01             _local_1143_20   +lbra sngflt                             ; float 1 byte arg in y. ;; @@56e5 144
 10406                           ;; @@56e8 144
 10407  56e8 0402030006080700...joytab           !text 4,2,3,0,6,8,7,0,5,1,0               ;; @@56e8 145
 10408                           ;; @@56f3 145
 10409                          ;.end ;; @@56f3 145
 10410                          ; .page ;; @@56f3 145
 10411                          ; .subttl  POT  LPEN ;; @@56f3 145
 10412                           ;; @@56f3 145
 10413                          ;*********************************************************** ;; @@56f3 145
 10414                          ; POT(n)  --  Read paddles ;; @@56f3 145
 10415                          ; ;; @@56f3 145
 10416                          ;    n = 1 : paddle-1 - X-position ;; @@56f3 145
 10417                          ;  2 : paddle-1 - Y-position ;; @@56f3 145
 10418                          ;  3 : paddle-2 - X-position ;; @@56f3 145
 10419                          ;  4 : paddle-2 - Y-position ;; @@56f3 145
 10420                          ; ;; @@56f3 145
 10421                          ;     result >= 256 --  trigger set ;; @@56f3 145
 10422                          ;*********************************************************** ;; @@56f3 145
 10423                           ;; @@56f3 145
 10424  56f3 20554e             pot              jsr chkcls                               ; look for closing paren ;; @@56f3 145
 10425  56f6 206f5d                              jsr conint                               ; get 1-byte arg in .x ;; @@56f6 145
 10426  56f9 ca                                  dex                                       ;; @@56f9 145
 10427  56fa e004                                cpx #4                                    ;; @@56fa 145
 10428  56fc b3fffa                              +lbcs fcerr                              ; value error ;; @@56fc 145
 10429                           ;; @@56ff 145
 10430                          ; jsr put_io_in_map ;; @@56ff 145
 10431  56ff 8a                                  txa                                      ; convert arg (0-3) into paddle enables ;; @@56ff 145
 10432  5700 4a                                  lsr                                      ; .c= X/Y   .a= port 1/2 ;; @@5700 145
 10433  5701 aa                                  tax                                       ;; @@5701 145
 10434  5702 bd6b79                              lda sbits+6,x                             ;; @@5702 145
 10435  5705 aa                                  tax                                      ; (CIA paddle port, $40/$80) ;; @@5705 145
 10436  5706 a900                                lda #0                                    ;; @@5706 145
 10437  5708 2a                                  rol                                       ;; @@5708 145
 10438  5709 a8                                  tay                                      ; (SID x/y offset,  $00/$01) ;; @@5709 145
 10439                           ;; @@570a 145
 10440  570a 8e6e11                              stx pot_temp_1                           ; save which port ;; @@570a 145
 10441  570d 08                                  php                                      ; save IRQ enable while we ;; @@570d 145
 10442  570e 78                                  sei                                      ; disable IRQ to inhibit keyboard scan ;; @@570e 145
 10443  570f ad00dc                              lda d1pra                                 ;; @@570f 145
 10444  5712 48                                  pha                                      ; save kybd output lines ;; @@5712 145
 10445  5713 8e00dc                              stx d1pra                                ; turn on correct paddle ;; @@5713 145
 10446                           ;; @@5716 145
 10447  5716 205d48                              jsr go_slow                               ;; @@5716 145
 10448  5719 a200                                ldx #0                                    ;; @@5719 145
 10449  571b e8                 _local_1144_30   inx                                      ; delay to let pot be read by SID ;; @@571b 145
 10450  571c d0fd                                bne _local_1144_30                        ;; @@571c 145
 10451                           ;; @@571e 145
 10452  571e b919d4             _local_1144_40   lda sid1+25,y                            ; read pot ;; @@571e 145
 10453  5721 d919d4                              cmp sid1+25,y                            ; debounce ;; @@5721 145
 10454  5724 d0f8                                bne _local_1144_40                        ;; @@5724 145
 10455  5726 8d6f11                              sta pot_temp_2                           ; save pot value ;; @@5726 145
 10456  5729 205748                              jsr go_fast                               ;; @@5729 145
 10457                           ;; @@572c 145
 10458  572c a200                                ldx #0                                   ; set index to d1pra ;; @@572c 145
 10459  572e 2c6e11                              bit pot_temp_1                           ; test if pot-0,1 or pot-2,3 ;; @@572e 145
 10460  5731 3001                                bmi _local_1144_50                       ; skip if pot 2,3 ;; @@5731 145
 10461  5733 e8                                  inx                                      ; index to d1prb ;; @@5733 145
 10462  5734 a904               _local_1144_50   lda #04                                  ; use joy line-2 ;; @@5734 145
 10463  5736 88                                  dey                                      ; test if pot-x or pot-y ;; @@5736 145
 10464  5737 3001                                bmi _local_1144_60                       ; skip if pot-x ;; @@5737 145
 10465  5739 0a                                  asl                                      ; use joy line-3 ;; @@5739 145
 10466  573a a0ff               _local_1144_60   ldy #$ff                                  ;; @@573a 145
 10467  573c 8c00dc                              sty d1pra                                ; disable keybd inputs ;; @@573c 145
 10468  573f c8                                  iny                                      ; set to zero for no trigger ;; @@573f 145
 10469  5740 3d00dc                              and d1pra,x                              ; test if trigger set ;; @@5740 145
 10470  5743 d001                                bne _local_1144_70                       ; skip if not trigger ;; @@5743 145
 10471  5745 c8                                  iny                                      ; return value >255 for trigger ;; @@5745 145
 10472  5746 68                 _local_1144_70   pla                                       ;; @@5746 145
 10473  5747 8d00dc                              sta d1pra                                ; restore keybd lines ;; @@5747 145
 10474  574a 98                                  tya                                       ;; @@574a 145
 10475  574b ac6f11                              ldy pot_temp_2                           ; restore pot value ;; @@574b 145
 10476  574e 28                                  plp                                      ; restore status ;; @@574e 145
 10477  574f 837501                              +lbra nosflt                             ; output 2-byte result ;; @@574f 145
 10478                           ;; @@5752 145
 10479                          ; .page ;; @@5752 145
 10480                          ;************************************************************* ;; @@5752 145
 10481                          ;  LPEN(n)  --  Read light pen ;; @@5752 145
 10482                          ; ;; @@5752 145
 10483                          ; n = 0 x position ;; @@5752 145
 10484                          ;     1 y position ;; @@5752 145
 10485                          ;************************************************************* ;; @@5752 145
 10486                           ;; @@5752 145
 10487  5752 20554e             lpen             jsr chkcls                               ; look for closing parens ;; @@5752 146
 10488  5755 206f5d                              jsr conint                               ; get 1 byte arg in .X ;; @@5755 146
 10489                          ; dex   ;convert [1-2] to [0-1] ;; @@5758 146
 10490  5758 e002                                cpx #2                                    ;; @@5758 146
 10491  575a b3a1fa                              +lbcs fcerr                              ; bad value ;; @@575a 146
 10492                           ;; @@575d 146
 10493  575d a900                                lda #0                                    ;; @@575d 146
 10494  575f 78                                  sei                                       ;; @@575f 146
 10495  5760 bce802                              ldy lightpen_xpos,x                      ; get latched light pen value (a=msb, y=lsb) ;; @@5760 146
 10496  5763 9de802                              sta lightpen_xpos,x                      ; reset to zero (????preserve last latched position) ;; @@5763 146
 10497  5766 58                                  cli                                       ;; @@5766 146
 10498  5767 e000                                cpx #0                                    ;; @@5767 146
 10499  5769 d006                                bne _local_1145_10                       ; done if y position ;; @@5769 146
 10500  576b 98                                  tya                                       ;; @@576b 146
 10501  576c 0a                                  asl                                      ; else multiply *2 to get correct x position ;; @@576c 146
 10502  576d a8                                  tay                                      ; lsb ;; @@576d 146
 10503  576e a900                                lda #0                                    ;; @@576e 146
 10504  5770 2a                                  rol                                      ; msb ;; @@5770 146
 10505  5771 835301             _local_1145_10   +lbra nosflt                             ; float it (y,a) ;; @@5771 146
 10506                           ;; @@5774 146
 10507                           ;; @@5774 146
 10508                          ;.end ;; @@5774 146
 10509                          ; .page ;; @@5774 146
 10510                          ; .subttl  POINTER ;; @@5774 146
 10511                           ;; @@5774 146
 10512                          ;****************************************************************** ;; @@5774 146
 10513                          ; ;; @@5774 146
 10514                          ; POINTER(var_name) - Return address of descriptor for var_name ;; @@5774 146
 10515                          ; ;; @@5774 146
 10516                          ;****************************************************************** ;; @@5774 146
 10517                           ;; @@5774 146
 10518  5774 208322             pointer          jsr chrget                               ; skip over escape token ;; @@5774 147
 10519  5777 20584e                              jsr chkopn                               ; test for open paren ;; @@5777 147
 10520  577a 200250                              jsr isletc                               ; test if character follows parens ;; @@577a 147
 10521  577d 93cad6                              +lbcc snerr                              ; ...syntax error if not. ;; @@577d 147
 10522  5780 207c4f                              jsr ptrget                               ; look for this varname in table ;; @@5780 147
 10523                           ;; @@5783 147
 10524                          pointer_ret      =*-1                                      ;; @@5783 147
 10525  5783 aa                                  tax                                       ;; @@5783 147
 10526  5784 5a                                  phy                                       ;; @@5784 147
 10527  5785 20554e                              jsr chkcls                               ; look for closing paren ;; @@5785 147
 10528  5788 8a                                  txa                                       ;; @@5788 147
 10529  5789 a8                                  tay                                       ;; @@5789 147
 10530  578a 68                                  pla                                       ;; @@578a 147
 10531  578b c902                                cmp #>zero                               ; is this a dummy pointer? ;; @@578b 147
 10532  578d d003                                bne _local_1146_10                        ;; @@578d 147
 10533  578f a900                                lda #0                                   ; if so, return 0 ;; @@578f 147
 10534  5791 a8                                  tay                                       ;; @@5791 147
 10535  5792 833201             _local_1146_10   +lbra nosflt                              ;; @@5792 147
 10536                           ;; @@5795 147
 10537                          ;.end ;; @@5795 147
 10538                          ; .page ;; @@5795 147
 10539                          ; .subttl  XOR ;; @@5795 147
 10540                           ;; @@5795 147
 10541                          ;************************************************************** ;; @@5795 147
 10542                          ;* ;; @@5795 147
 10543                          ;*   XOR - Exclusive-or two 16 bit arguments ;; @@5795 147
 10544                          ;* ;; @@5795 147
 10545                          ;* Syntax : XOR (arg1, arg2) ;; @@5795 147
 10546                          ;* ;; @@5795 147
 10547                          ;************************************************************** ;; @@5795 147
 10548                           ;; @@5795 147
 10549  5795 fc1600             xor              phw poker                                ; protect the poker value (could be in use)  [910911] ;; @@5795 148
 10550  5798 20db4c                              jsr chknum                                ;; @@5798 148
 10551  579b 208d5d                              jsr getadr                               ; get first arg ;; @@579b 148
 10552  579e 48                                  pha                                      ; save MSB ;; @@579e 148
 10553  579f 5a                                  phy                                      ; save LSB ;; @@579f 148
 10554                           ;; @@57a0 148
 10555  57a0 20875d                              jsr comwrd                               ; check for comma, get word ;; @@57a0 148
 10556  57a3 20554e                              jsr chkcls                               ; check for closing parens ;; @@57a3 148
 10557                           ;; @@57a6 148
 10558  57a6 68                                  pla                                       ;; @@57a6 148
 10559  57a7 4516                                eor poker                                ; xor LSB (comwrd left a copy of its arg in POKER) ;; @@57a7 148
 10560  57a9 a8                                  tay                                       ;; @@57a9 148
 10561  57aa 68                                  pla                                       ;; @@57aa 148
 10562  57ab 4517                                eor poker+1                              ; ..and MSB ;; @@57ab 148
 10563  57ad 20c758                              jsr nosflt                               ; ..and go float 'em ;; @@57ad 148
 10564                           ;; @@57b0 148
 10565  57b0 68                                  pla                                       ;; @@57b0 148
 10566  57b1 8517                                sta poker+1                               ;; @@57b1 148
 10567  57b3 68                                  pla                                       ;; @@57b3 148
 10568  57b4 8516                                sta poker                                 ;; @@57b4 148
 10569  57b6 60                                  rts                                       ;; @@57b6 148
 10570                           ;; @@57b7 148
 10571                          ;.end ;; @@57b7 148
 10572                          ; .page ;; @@57b7 148
 10573                          ; .subttl  MOD ;; @@57b7 148
 10574                           ;; @@57b7 148
 10575                          ;************************************************************** ;; @@57b7 148
 10576                          ;* ;; @@57b7 148
 10577                          ;* MOD  -  Modulus of a number ;; @@57b7 148
 10578                          ;* ;; @@57b7 148
 10579                          ;* Syntax : MOD (number, range) ;; @@57b7 148
 10580                          ;*      910402 FAB ;; @@57b7 148
 10581                          ;************************************************************** ;; @@57b7 148
 10582                           ;; @@57b7 148
 10583                          ; Calculate   MOD = NUMBER-RANGE*INT(NUMBER/RANGE) ;; @@57b7 148
 10584                           ;; @@57b7 148
 10585  57b7 20db4c             mod              jsr chknum                               ; 1st arg in FAC1 (number) ;; @@57b7 148
 10586  57ba 20734d                              jsr pushf1                               ; save two copies of it for later ;; @@57ba 148
 10587  57bd 20734d                              jsr pushf1                                ;; @@57bd 148
 10588  57c0 205b4e                              jsr chkcom                               ; check for comma ;; @@57c0 148
 10589  57c3 20d84c                              jsr frmnum                               ; 2nd arg in FAC1 (range) ;; @@57c3 148
 10590  57c6 20554e                              jsr chkcls                               ; check for closing paren ;; @@57c6 148
 10591                           ;; @@57c9 148
 10592  57c9 20a362                              jsr movaf                                ; save range in FAC2 ;; @@57c9 148
 10593  57cc 20964d                              jsr pullf1                               ; get back number in FAC1 ;; @@57cc 148
 10594  57cf a205                                ldx #5                                   ; swap FAC1 and FAC2 ;; @@57cf 148
 10595  57d1 b563               _local_1147_10   lda facexp,x                              ;; @@57d1 148
 10596  57d3 b46a                                ldy argexp,x                              ;; @@57d3 148
 10597  57d5 956a                                sta argexp,x                              ;; @@57d5 148
 10598  57d7 9463                                sty facexp,x                              ;; @@57d7 148
 10599  57d9 ca                                  dex                                       ;; @@57d9 148
 10600  57da 10f5                                bpl _local_1147_10                        ;; @@57da 148
 10601  57dc 20734d                              jsr pushf1                               ; save one copy of range for later ;; @@57dc 148
 10602                           ;; @@57df 148
 10603  57df 207861                              jsr fdivt_c65                            ; number/range ;; @@57df 148
 10604  57e2 206363                              jsr int                                  ; INT(number/range) ;; @@57e2 148
 10605  57e5 20a362                              jsr movaf                                ; round & move to FAC2 ;; @@57e5 148
 10606  57e8 20964d                              jsr pullf1                               ; retrieve arg2 (range) ;; @@57e8 148
 10607  57eb 206360                              jsr fmultt_c65                           ; range*INT(number/range) ;; @@57eb 148
 10608  57ee 20fc65                              jsr negop                                ; -range*INT(number/range) ;; @@57ee 148
 10609  57f1 20a362                              jsr movaf                                ; move to FAC2 ;; @@57f1 148
 10610  57f4 20964d                              jsr pullf1                               ; retrieve arg1 (number) ;; @@57f4 148
 10611  57f7 83220c                              +lbra faddt_c65                          ; number-range*INT(number/range) ;; @@57f7 148
 10612                           ;; @@57fa 148
 10613                           ;; @@57fa 148
 10614                          ;.end ;; @@57fa 148
 10615                          ; .page ;; @@57fa 148
 10616                          ; .subttl  RWINDOW ;; @@57fa 148
 10617                           ;; @@57fa 148
 10618                          ;****************************************************************************** ;; @@57fa 148
 10619                          ; ;; @@57fa 148
 10620                          ; RWINDOW  - Returns information about the current console display environment. ;; @@57fa 148
 10621                          ; ;; @@57fa 148
 10622                          ;   Syntax : RWINDOW (n) ;; @@57fa 148
 10623                          ; ;; @@57fa 148
 10624                          ;   Where: n=0 : number of lines in the current window ;; @@57fa 148
 10625                          ;   =1 : number of rows in the current window ;; @@57fa 148
 10626                          ;   =2 : returns either 40 or 80, depending on the ;; @@57fa 148
 10627                          ;   current console device ;; @@57fa 148
 10628                          ; ;; @@57fa 148
 10629                          ;****************************************************************************** ;; @@57fa 148
 10630                           ;; @@57fa 148
 10631  57fa 20554e             rwindow          jsr chkcls                                ;; @@57fa 149
 10632  57fd 206f5d                              jsr conint                                ;; @@57fd 149
 10633  5800 e002                                cpx #2                                    ;; @@5800 149
 10634  5802 f015                                beq _local_1148_50                       ; return current console ;; @@5802 149
 10635  5804 b3f7f9                              +lbcs fcerr                               ;; @@5804 149
 10636                           ;; @@5807 149
 10637  5807 e000                                cpx #0                                    ;; @@5807 149
 10638  5809 d007                                bne _local_1148_10                        ;; @@5809 149
 10639                           ;; @@580b 149
 10640  580b a5e4                                lda _screen_bottom                        ;; @@580b 149
 10641  580d 38                                  sec                                       ;; @@580d 149
 10642  580e e5e5                                sbc _screen_top                           ;; @@580e 149
 10643  5810 800d                                bra _local_1148_60                       ; always ;; @@5810 149
 10644                           ;; @@5812 149
 10645  5812 a5e7               _local_1148_10   lda _screen_right                         ;; @@5812 149
 10646  5814 38                                  sec                                       ;; @@5814 149
 10647  5815 e5e6                                sbc _screen_left                          ;; @@5815 149
 10648  5817 8006                                bra _local_1148_60                       ; always ;; @@5817 149
 10649                           ;; @@5819 149
 10650                           ;; @@5819 149
 10651  5819 a950               _local_1148_50   lda #80                                  ; assume 80 col ;; @@5819 149
 10652  581b 7fd701                              bbr7 _mode,_local_1148_60                 ;; @@581b 149
 10653  581e 4a                                  lsr                                       ;; @@581e 149
 10654  581f a8                 _local_1148_60   tay                                       ;; @@581f 149
 10655  5820 83af00                              +lbra sngflt                             ; float 1 byte arg in .Y ;; @@5820 149
 10656                           ;; @@5823 149
 10657                          ;.end ;; @@5823 149
 10658                          ; .page ;; @@5823 149
 10659                          ; .subttl  RND ;; @@5823 149
 10660                           ;; @@5823 149
 10661                          ;    Random Number Function  RND(x) ;; @@5823 149
 10662                          ; ;; @@5823 149
 10663                          ;  x=0 ==> generate a random number based on hardware clock & noisy POT lines ;; @@5823 149
 10664                          ;  x<0 ==> seed a reproducable, pseudo-random number generator ;; @@5823 149
 10665                          ;  x>0 ==> generate a reproducable pseudo-random # based upon seed value above ;; @@5823 149
 10666                           ;; @@5823 149
 10667                           ;; @@5823 149
 10668  5823 20c162             rnd              jsr sign                                 ; get sign into .a ;; @@5823 150
 10669                           ;; @@5826 150
 10670  5826 3042               rnd_0            bmi _local_1149_20                       ; /// entry from jump table ;; @@5826 150
 10671  5828 d02b                                bne _local_1149_10                        ;; @@5828 150
 10672                           ;; @@582a 150
 10673                           ;; @@582a 150
 10674                          ; Get value from hardware ;; @@582a 150
 10675                           ;; @@582a 150
 10676  582a 205d48                              jsr go_slow                              ; Use CIA#1 timer B & SID#2 pot X & Y for seeds  [910314] ;; @@582a 150
 10677  582d ad39d4                              lda sid2+25                              ; go slow to read POT-X ;; @@582d 150
 10678  5830 0a                                  asl                                       ;; @@5830 150
 10679  5831 0a                                  asl                                       ;; @@5831 150
 10680  5832 0a                                  asl                                       ;; @@5832 150
 10681  5833 0a                                  asl                                       ;; @@5833 150
 10682  5834 0d3ad4                              ora sid2+26                              ; and POT-Y ;; @@5834 150
 10683  5837 4d12d0                              eor vic+18                               ; ???? should be okay- we're in Slow mode ;; @@5837 150
 10684  583a 8565                                sta facmoh                                ;; @@583a 150
 10685  583c 205748                              jsr go_fast                              ; restore speed ;; @@583c 150
 10686  583f ad06dc                              lda d1pra+6                              ; timer B is free-running ;; @@583f 150
 10687  5842 8566                                sta facmo                                 ;; @@5842 150
 10688  5844 ad07dc                              lda d1pra+7                               ;; @@5844 150
 10689  5847 8567                                sta faclo                                 ;; @@5847 150
 10690  5849 4564                                eor facho                                 ;; @@5849 150
 10691  584b 6565                                adc facmoh                                ;; @@584b 150
 10692  584d 4566                                eor facmo                                 ;; @@584d 150
 10693  584f 6567                                adc faclo                                 ;; @@584f 150
 10694  5851 8564                                sta facho                                 ;; @@5851 150
 10695  5853 8025                                bra _local_1149_30                        ;; @@5853 150
 10696                           ;; @@5855 150
 10697                          ; .page ;; @@5855 150
 10698  5855 a974               _local_1149_10   lda #<rndx                               ; get last one into FAC ;; @@5855 150
 10699  5857 a011                                ldy #>rndx                                ;; @@5857 150
 10700  5859 200e62                              jsr movfm                                 ;; @@5859 150
 10701  585c a990                                lda #<rmulc                               ;; @@585c 150
 10702  585e a058                                ldy #>rmulc                              ; FAC was zero.  restore last one ;; @@585e 150
 10703  5860 204860                              jsr rommlt                               ; multiply by random constant ;; @@5860 150
 10704  5863 a995                                lda #<raddc                               ;; @@5863 150
 10705  5865 a058                                ldy #>raddc                               ;; @@5865 150
 10706  5867 205160                              jsr romadd                               ; add random constant ;; @@5867 150
 10707                           ;; @@586a 150
 10708  586a a667               _local_1149_20   ldx faclo                                 ;; @@586a 150
 10709  586c a564                                lda facho                                 ;; @@586c 150
 10710  586e 8567                                sta faclo                                 ;; @@586e 150
 10711  5870 8664                                stx facho                                ; reverse hi and lo ;; @@5870 150
 10712  5872 a665                                ldx facmoh                                ;; @@5872 150
 10713  5874 a566                                lda facmo                                 ;; @@5874 150
 10714  5876 8565                                sta facmoh                                ;; @@5876 150
 10715  5878 8666                                stx facmo                                 ;; @@5878 150
 10716                           ;; @@587a 150
 10717  587a a900               _local_1149_30   lda #0                                   ; strnex.  make number positive ;; @@587a 150
 10718  587c 8568                                sta facsgn                                ;; @@587c 150
 10719  587e a563                                lda facexp                               ; put exp where it will ;; @@587e 150
 10720  5880 8571                                sta facov                                ; be shifted in by normal ;; @@5880 150
 10721  5882 a980                                lda #$80                                  ;; @@5882 150
 10722  5884 8563                                sta facexp                               ; make result between 0 and 1 ;; @@5884 150
 10723  5886 20295e                              jsr normal                               ; normalize ;; @@5886 150
 10724  5889 a274                                ldx #<rndx                                ;; @@5889 150
 10725  588b a011                                ldy #>rndx                                ;; @@588b 150
 10726  588d 83aa09                              +lbra movmf                              ; put new one into memory ;; @@588d 150
 10727                           ;; @@5890 150
 10728  5890 9835447a00         rmulc            !text 152,53,68,122,0                     ;; @@5890 151
 10729  5895 6828b14600         raddc            !text 104,40,177,70,0                     ;; @@5895 151
 10730                           ;; @@589a 151
 10731                          ;.end ;; @@589a 151
 10732                          ; .page ;; @@589a 151
 10733                          ; .subttl Math Package (CODE12) ;; @@589a 151
 10734                           ;; @@589a 151
 10735  589a 9080000000         n32768           !text $90,$80,0,0,0                       ;; @@589a 151
 10736                           ;; @@589f 151
 10737                           ;; @@589f 151
 10738  589f 20b458             flpint           jsr ayint                                 ;; @@589f 151
 10739  58a2 a566                                lda facmo                                 ;; @@58a2 151
 10740  58a4 a467                                ldy  faclo                                ;; @@58a4 151
 10741  58a6 60                                  rts                                       ;; @@58a6 151
 10742                           ;; @@58a7 151
 10743                           ;; @@58a7 151
 10744  58a7 208322             intidx           jsr chrget                                ;; @@58a7 151
 10745  58aa 20ef4c                              jsr frmevl                               ; get a number ;; @@58aa 151
 10746                           ;; @@58ad 151
 10747                           ;; @@58ad 151
 10748  58ad 20db4c             posint           jsr chknum                                ;; @@58ad 151
 10749  58b0 a568                                lda facsgn                                ;; @@58b0 151
 10750  58b2 300d                                bmi nonono                               ; if negative, blow him out ;; @@58b2 151
 10751                           ;; @@58b4 151
 10752                           ;; @@58b4 151
 10753  58b4 a563               ayint            lda facexp                                ;; @@58b4 151
 10754  58b6 c990                                cmp #$90                                 ; FAC > 32767? ;; @@58b6 151
 10755  58b8 900a                                bcc qintgo                                ;; @@58b8 151
 10756  58ba a99a                                lda #<n32768                             ; get address of -32768 ;; @@58ba 151
 10757  58bc a058                                ldy #>n32768                              ;; @@58bc 151
 10758  58be 20f162                              jsr fcomp                                ; see if FAC=((x)) ;; @@58be 151
 10759                           ;; @@58c1 151
 10760  58c1 d33af9             nonono           +lbne fcerr                              ; no, FAC is too big ;; @@58c1 151
 10761  58c4 83690a             qintgo           +lbra qint                               ; go shove it ;; @@58c4 151
 10762                          ; .page ;; @@58c7 151
 10763                           ;; @@58c7 151
 10764                          ; Float an unsigned double byte integer ;; @@58c7 151
 10765                          ; Entry:  MSB in (a), LSB in (y) ;; @@58c7 151
 10766                           ;; @@58c7 151
 10767  58c7 20d758             nosflt           jsr stoint                                ;; @@58c7 151
 10768  58ca 38                                  sec                                      ; sign is positive ;; @@58ca 151
 10769  58cb 83110a                              +lbra floatc                              ;; @@58cb 151
 10770                           ;; @@58ce 151
 10771                           ;; @@58ce 151
 10772                           ;; @@58ce 151
 10773  58ce 38                 pos              sec                                       ;; @@58ce 151
 10774  58cf 20f0ff                              jsr _plot                                ; get tab pos in .y ;; @@58cf 151
 10775                           ;; @@58d2 151
 10776  58d2 a900               sngflt           lda #0                                    ;; @@58d2 151
 10777  58d4 8368f5                              +lbra givayf                             ; float it ;; @@58d4 151
 10778                           ;; @@58d7 151
 10779                           ;; @@58d7 151
 10780                           ;; @@58d7 151
 10781  58d7 a200               stoint           ldx #0                                   ; move int to fac & compute proper exponents ;; @@58d7 151
 10782  58d9 860f                                stx valtyp                                ;; @@58d9 151
 10783  58db 8564                                sta facho                                 ;; @@58db 151
 10784  58dd 8465                                sty facho+1                               ;; @@58dd 151
 10785  58df a290                                ldx #$90                                  ;; @@58df 151
 10786  58e1 60                 storts           rts                                       ;; @@58e1 151
 10787                           ;; @@58e2 151
 10788                           ;; @@58e2 151
 10789                           ;; @@58e2 151
 10790                          ; See if we are in direct mode, and complain if so. ;; @@58e2 151
 10791                           ;; @@58e2 151
 10792  58e2 ff7efc             errdir           bbs7 runmod,storts                       ; goto error if not in run mode ;; @@58e2 151
 10793                           ;; @@58e5 151
 10794  58e5 a215                                ldx #errid                               ; input direct error code ;; @@58e5 151
 10795  58e7 2c                                  !text $2c                                 ;; @@58e7 151
 10796                           ;; @@58e8 151
 10797  58e8 a21b               errguf           ldx #erruf                                ;; @@58e8 151
 10798  58ea 8362d5                              +lbra error                               ;; @@58ea 151
 10799                           ;; @@58ed 151
 10800                           ;; @@58ed 151
 10801  58ed 7f7ef1             errind           bbr7 runmod,storts                       ; goto error if not in direct mode ;; @@58ed 151
 10802  58f0 a222                                ldx #erroid                               ;; @@58f0 151
 10803  58f2 835ad5                              +lbra error                               ;; @@58f2 151
 10804                           ;; @@58f5 151
 10805                          ;.end ;; @@58f5 151
 10806                          ; .page ;; @@58f5 151
 10807                          ; .subttl User Defined Function ;; @@58f5 151
 10808                           ;; @@58f5 151
 10809                          ; User Defined Function Code ;; @@58f5 151
 10810                          ; ;; @@58f5 151
 10811                          ; Note only single arguments are allowed to functions, and functions must ;; @@58f5 151
 10812                          ; be of the single line form: ;; @@58f5 151
 10813                          ; ;; @@58f5 151
 10814                          ;  DEF FNA(x)=x~2 + x-2 ;; @@58f5 151
 10815                          ; ;; @@58f5 151
 10816                          ; No strings may be involved with these functions. ;; @@58f5 151
 10817                          ; ;; @@58f5 151
 10818                          ; Idea: create a simple variable entry whose first character has the MSB set. ;; @@58f5 151
 10819                          ; The value will be: ;; @@58f5 151
 10820                          ; ;; @@58f5 151
 10821                          ;  A text pointer to the formula ;; @@58f5 151
 10822                          ;  A pointer to the argument variable ;; @@58f5 151
 10823                           ;; @@58f5 151
 10824  58f5 202259             def              jsr getfnm                               ; get a pointer to the function ;; @@58f5 151
 10825  58f8 20e258                              jsr errdir                                ;; @@58f8 151
 10826  58fb 20584e                              jsr chkopn                               ; must have a ( ;; @@58fb 151
 10827  58fe a980                                lda #$80                                  ;; @@58fe 151
 10828  5900 8512                                sta subflg                               ; prohibit subscripted & integer variables ;; @@5900 151
 10829  5902 207c4f                              jsr ptrget                               ; get pointer to argument ;; @@5902 151
 10830  5905 20db4c                              jsr chknum                               ; is it a number? ;; @@5905 151
 10831  5908 20554e                              jsr chkcls                               ; must have ) ;; @@5908 151
 10832  590b a9b2                                lda #equal_token                         ; followed by = ;; @@590b 151
 10833  590d 205d4e                              jsr synchr                                ;; @@590d 151
 10834  5910 48                                  pha                                       ;; @@5910 151
 10835  5911 a54a                                lda varpnt+1                              ;; @@5911 151
 10836  5913 48                                  pha                                       ;; @@5913 151
 10837  5914 a549                                lda varpnt                                ;; @@5914 151
 10838  5916 48                                  pha                                       ;; @@5916 151
 10839  5917 a53e                                lda txtptr+1                              ;; @@5917 151
 10840  5919 48                                  pha                                       ;; @@5919 151
 10841  591a a53d                                lda txtptr                                ;; @@591a 151
 10842  591c 48                                  pha                                       ;; @@591c 151
 10843  591d 204835                              jsr data                                  ;; @@591d 151
 10844  5920 8073                                bra deffin                                ;; @@5920 151
 10845                           ;; @@5922 151
 10846                          ; .page ;; @@5922 151
 10847                          ; Subroutine to get a pointer to a function name ;; @@5922 151
 10848                           ;; @@5922 151
 10849  5922 a9a5               getfnm           lda #fn_token                            ; must start with fn ;; @@5922 151
 10850  5924 205d4e                              jsr synchr                                ;; @@5924 151
 10851  5927 0980                                ora #$80                                 ; put function bit on ;; @@5927 151
 10852  5929 8512                                sta subflg                               ; (disallows array & integer variables) ;; @@5929 151
 10853  592b 20834f                              jsr ptrgt2                               ; get pointer to function or create anew ;; @@592b 151
 10854  592e 8550                                sta defpnt                                ;; @@592e 151
 10855  5930 8451                                sty defpnt+1                              ;; @@5930 151
 10856  5932 83a6f3                              +lbra chknum                             ; make sure it's not a string, and return ;; @@5932 151
 10857                           ;; @@5935 151
 10858                           ;; @@5935 151
 10859  5935 202259             fndoer           jsr getfnm                               ; get the function's name ;; @@5935 151
 10860  5938 a551                                lda defpnt+1                              ;; @@5938 151
 10861  593a 48                                  pha                                       ;; @@593a 151
 10862  593b a550                                lda defpnt                                ;; @@593b 151
 10863  593d 48                                  pha                                       ;; @@593d 151
 10864  593e 204f4e                              jsr parchk                               ; evaluate parameter ;; @@593e 151
 10865  5941 20db4c                              jsr chknum                                ;; @@5941 151
 10866  5944 68                                  pla                                       ;; @@5944 151
 10867  5945 8550                                sta defpnt                                ;; @@5945 151
 10868  5947 68                                  pla                                       ;; @@5947 151
 10869  5948 8551                                sta defpnt+1                              ;; @@5948 151
 10870  594a a002                                ldy #2                                    ;; @@594a 151
 10871  594c 209922                              jsr inddef                               ; get pointer to the variable ;; @@594c 151
 10872  594f 8549                                sta varpnt                               ; save variable pointer ;; @@594f 151
 10873  5951 aa                                  tax                                       ;; @@5951 151
 10874  5952 c8                                  iny                                       ;; @@5952 151
 10875  5953 209922                              jsr inddef                                ;; @@5953 151
 10876  5956 f090                                beq errguf                                ;; @@5956 151
 10877  5958 854a                                sta varpnt+1                              ;; @@5958 151
 10878  595a c8                                  iny                                      ; since def uses only 4 ;; @@595a 151
 10879                           ;; @@595b 151
 10880                          ; .page ;; @@595b 151
 10881  595b a949               defstf           lda #varpnt                               ;; @@595b 151
 10882  595d 20d722                              jsr lda_far_ram1                          ;; @@595d 151
 10883  5960 48                                  pha                                      ; push it all on the stack, since we might be recursing ;; @@5960 151
 10884  5961 88                                  dey                                       ;; @@5961 151
 10885  5962 10f7                                bpl defstf                                ;; @@5962 151
 10886  5964 a44a                                ldy varpnt+1                              ;; @@5964 151
 10887                           ;; @@5966 151
 10888  5966 206262                              jsr movmf_ram1                           ; put current FAC into our argument variable ;; @@5966 151
 10889  5969 a53e                                lda txtptr+1                             ; save variable pointer ;; @@5969 151
 10890  596b 48                                  pha                                       ;; @@596b 151
 10891  596c a53d                                lda txtptr                                ;; @@596c 151
 10892  596e 48                                  pha                                       ;; @@596e 151
 10893  596f 209922                              jsr inddef                               ; get pointer to function ;; @@596f 151
 10894  5972 853d                                sta txtptr                                ;; @@5972 151
 10895  5974 c8                                  iny                                       ;; @@5974 151
 10896  5975 209922                              jsr inddef                                ;; @@5975 151
 10897  5978 853e                                sta txtptr+1                              ;; @@5978 151
 10898  597a a54a                                lda varpnt+1                             ; save variable pointer ;; @@597a 151
 10899  597c 48                                  pha                                       ;; @@597c 151
 10900  597d a549                                lda varpnt                                ;; @@597d 151
 10901  597f 48                                  pha                                       ;; @@597f 151
 10902  5980 20d84c                              jsr frmnum                               ; evaluate variable, and check numeric ;; @@5980 151
 10903  5983 68                                  pla                                       ;; @@5983 151
 10904  5984 8550                                sta defpnt                                ;; @@5984 151
 10905  5986 68                                  pla                                       ;; @@5986 151
 10906  5987 8551                                sta defpnt+1                              ;; @@5987 151
 10907  5989 208522                              jsr chrgot                                ;; @@5989 151
 10908  598c d3bbd4                              +lbne snerr                              ; it didn't terminate, syntax error ;; @@598c 151
 10909                           ;; @@598f 151
 10910  598f 68                                  pla                                      ; restore text pointer ;; @@598f 151
 10911  5990 853d                                sta txtptr                                ;; @@5990 151
 10912  5992 68                                  pla                                       ;; @@5992 151
 10913  5993 853e                                sta txtptr+1                              ;; @@5993 151
 10914                           ;; @@5995 151
 10915  5995 a000               deffin           ldy #0                                    ;; @@5995 151
 10916  5997 68                 _local_1150_1    pla                                      ; get old arg value off stack, ;; @@5997 151
 10917  5998 da                                  phx                                       ;; @@5998 151
 10918  5999 a250                                ldx #defpnt                               ;; @@5999 151
 10919  599b 20f022                              jsr sta_far_ram1 ;sta (defpnt),y         ; and put it back in variable ;; @@599b 151
 10920  599e fa                                  plx                                       ;; @@599e 151
 10921  599f c8                                  iny                                       ;; @@599f 151
 10922  59a0 c005                                cpy #5                                    ;; @@59a0 151
 10923  59a2 d0f3                                bne _local_1150_1                         ;; @@59a2 151
 10924  59a4 60                                  rts                                       ;; @@59a4 151
 10925                           ;; @@59a5 151
 10926                          ;.end ;; @@59a5 151
 10927                          ; .page ;; @@59a5 151
 10928                          ; .subttl MID$  LEFT$  RIGHT$  ASC  STR$  LEN ;; @@59a5 151
 10929                           ;; @@59a5 151
 10930                          ; The STR$() function takes a number and gives a string with ;; @@59a5 151
 10931                          ; the characters the output of the number would have given. ;; @@59a5 151
 10932                           ;; @@59a5 151
 10933  59a5 20db4c             strd             jsr chknum                               ; arg has to be numeric ;; @@59a5 152
 10934  59a8 a000                                ldy #0                                    ;; @@59a8 152
 10935  59aa 209164                              jsr foutc                                ; do its output ;; @@59aa 152
 10936  59ad 68                                  pla                                       ;; @@59ad 152
 10937  59ae 68                                  pla                                       ;; @@59ae 152
 10938                           ;; @@59af 152
 10939  59af a9ff               timstr           lda #<lofbuf                              ;; @@59af 152
 10940  59b1 a000                                ldy #>lofbuf                              ;; @@59b1 152
 10941  59b3 83cf00                              +lbra strlit                              ;; @@59b3 152
 10942                           ;; @@59b6 152
 10943                           ;; @@59b6 152
 10944                          ; CHR$() creates a string which contains as its only character the PETSCII ;; @@59b6 152
 10945                          ; equivalent of the integer argument (#) which must be < 256. ;; @@59b6 152
 10946                           ;; @@59b6 152
 10947  59b6 206f5d             chrd             jsr conint                               ; get integer in range ;; @@59b6 152
 10948  59b9 da                                  phx                                       ;; @@59b9 152
 10949  59ba a901                                lda #1                                   ; one-character string ;; @@59ba 152
 10950  59bc 207b5a                              jsr strspa                               ; get space for string ;; @@59bc 152
 10951  59bf a000                                ldy #0                                    ;; @@59bf 152
 10952  59c1 68                                  pla                                       ;; @@59c1 152
 10953                          ; phx   ;set up string bank ;; @@59c2 152
 10954  59c2 a264                                ldx #dsctmp+1                             ;; @@59c2 152
 10955  59c4 20f022                              jsr sta_far_ram1                         ; sta (dsctmp+1),y ;; @@59c4 152
 10956                          ; plx ;; @@59c7 152
 10957                           ;; @@59c7 152
 10958  59c7 68                 chrd1            pla                                      ; get rid of "chknum" return address ;; @@59c7 152
 10959  59c8 68                                  pla                                       ;; @@59c8 152
 10960  59c9 830401                              +lbra putnew                             ; setup FAC to point to desc ;; @@59c9 152
 10961                          ; .page ;; @@59cc 152
 10962                           ;; @@59cc 152
 10963                          ; The following is the LEFT$($,#) function.  It takes the leftmost # characters ;; @@59cc 152
 10964                          ; of the string.  If # > len of the string, it returns the whole string. ;; @@59cc 152
 10965                           ;; @@59cc 152
 10966  59cc 203e5a             leftd            jsr pream                                ; test parameters ;; @@59cc 152
 10967  59cf 48                                  pha                                      ; # arg ;; @@59cf 152
 10968  59d0 20a122                              jsr inddpt                               ; string len ;; @@59d0 152
 10969  59d3 8578                                sta syntmp                                ;; @@59d3 152
 10970  59d5 68                                  pla                                       ;; @@59d5 152
 10971  59d6 c578                                cmp syntmp                                ;; @@59d6 152
 10972  59d8 98                                  tya                                      ; that's all there is to LEFT$ ;; @@59d8 152
 10973                           ;; @@59d9 152
 10974  59d9 9005               rleft            bcc _local_1151_1                         ;; @@59d9 152
 10975  59db 20a122                              jsr inddpt                                ;; @@59db 152
 10976  59de aa                                  tax                                      ; put length into x ;; @@59de 152
 10977  59df 98                                  tya                                      ; zero (a), the offset ;; @@59df 152
 10978  59e0 48                 _local_1151_1    pha                                      ; save offset ;; @@59e0 152
 10979  59e1 8a                 rleft2           txa                                       ;; @@59e1 153
 10980  59e2 48                 rleft3           pha                                      ; save length ;; @@59e2 153
 10981  59e3 207b5a                              jsr strspa                               ; get space ;; @@59e3 153
 10982  59e6 a552                                lda dscpnt                                ;; @@59e6 153
 10983  59e8 a453                                ldy dscpnt+1                              ;; @@59e8 153
 10984  59ea 20715b                              jsr fretmp                                ;; @@59ea 153
 10985  59ed 7a                                  ply                                       ;; @@59ed 153
 10986  59ee 68                                  pla                                       ;; @@59ee 153
 10987  59ef 18                                  clc                                       ;; @@59ef 153
 10988  59f0 6524                                adc index                                ; compute where to copy ;; @@59f0 153
 10989  59f2 8524                                sta index                                 ;; @@59f2 153
 10990  59f4 9002                                bcc _local_1152_1                         ;; @@59f4 153
 10991  59f6 e625                                inc index+1                               ;; @@59f6 153
 10992  59f8 98                 _local_1152_1    tya                                       ;; @@59f8 153
 10993  59f9 204a5b                              jsr movdo                                ; go move it ;; @@59f9 153
 10994  59fc 83d100                              +lbra putnew                              ;; @@59fc 153
 10995                           ;; @@59ff 153
 10996                           ;; @@59ff 153
 10997                           ;; @@59ff 153
 10998  59ff 203e5a             rightd           jsr pream                                 ;; @@59ff 154
 10999  5a02 48                                  pha                                       ;; @@5a02 154
 11000  5a03 20a122                              jsr inddpt                                ;; @@5a03 154
 11001  5a06 8578                                sta syntmp                                ;; @@5a06 154
 11002  5a08 68                                  pla                                       ;; @@5a08 154
 11003  5a09 18                                  clc                                      ; (length des'd)-(length)-1 ;; @@5a09 154
 11004  5a0a e578                                sbc syntmp                                ;; @@5a0a 154
 11005  5a0c 49ff                                eor #$ff                                 ; negate ;; @@5a0c 154
 11006  5a0e 80c9                                bra rleft                                 ;; @@5a0e 154
 11007                           ;; @@5a10 154
 11008                           ;; @@5a10 154
 11009                          ; MID$($,#) returns string with chars from # position onward. If # > LEN($) ;; @@5a10 154
 11010                          ; then return null string.  MID($,#,#) returns string with characters from ;; @@5a10 154
 11011                          ; # position for #2 characters.  If #2 goes past end of string return as much ;; @@5a10 154
 11012                          ; as possible. ;; @@5a10 154
 11013                           ;; @@5a10 154
 11014  5a10 a9ff               midd             lda #255                                 ; default ;; @@5a10 154
 11015  5a12 8567                                sta faclo                                ; save for later compare ;; @@5a12 154
 11016  5a14 208522                              jsr chrgot                               ; get current character ;; @@5a14 154
 11017  5a17 c929                                cmp #')'                                 ; is it a right paren )? ;; @@5a17 154
 11018  5a19 f003                                beq _local_1153_1                        ; no third paren. ;; @@5a19 154
 11019                          ; jsr chkcom  ;must have comma ;; @@5a1b 154
 11020                          ; jsr getbyt  ;get the length into "faclo" ;; @@5a1b 154
 11021  5a1b 20825d                              jsr combyt                               ; [910820] ;; @@5a1b 154
 11022                           ;; @@5a1e 154
 11023  5a1e 203e5a             _local_1153_1    jsr pream                                ; check it out ;; @@5a1e 154
 11024  5a21 f3daf7                              +lbeq fcerr                              ; illegal qty error ;; @@5a21 154
 11025  5a24 ca                                  dex                                      ; compute offset ;; @@5a24 154
 11026  5a25 da                                  phx                                       ;; @@5a25 154
 11027  5a26 da                                  phx                                      ; preserve a while (2 copies) ;; @@5a26 154
 11028  5a27 a200                                ldx #0                                    ;; @@5a27 154
 11029  5a29 20a122                              jsr inddpt                               ; get length of what's left ;; @@5a29 154
 11030  5a2c 8578                                sta syntmp                                ;; @@5a2c 154
 11031  5a2e 68                                  pla                                       ;; @@5a2e 154
 11032  5a2f 18                                  clc                                       ;; @@5a2f 154
 11033  5a30 e578                                sbc syntmp                                ;; @@5a30 154
 11034  5a32 b0ad                                bcs rleft2                               ; give null string ;; @@5a32 154
 11035  5a34 49ff                                eor #$ff                                 ; in sub c was 0 so just complement ;; @@5a34 154
 11036  5a36 c567                                cmp faclo                                ; greater than what's desired ;; @@5a36 154
 11037  5a38 90a8                                bcc rleft3                               ; no, just copy that much ;; @@5a38 154
 11038  5a3a a567                                lda faclo                                ; get length of what's desired ;; @@5a3a 154
 11039  5a3c b0a4                                bcs rleft3                               ; copy it ;; @@5a3c 154
 11040                           ;; @@5a3e 154
 11041                           ;; @@5a3e 154
 11042                           ;; @@5a3e 154
 11043                           ;; @@5a3e 154
 11044                          ; Common routine used by RIGHT$, LEFT$, MID$, for parameter chk and setup. ;; @@5a3e 154
 11045                           ;; @@5a3e 154
 11046  5a3e 20554e             pream            jsr chkcls                               ; param list should end ;; @@5a3e 155
 11047  5a41 7a                                  ply                                       ;; @@5a41 155
 11048  5a42 68                                  pla                                       ;; @@5a42 155
 11049  5a43 8557                                sta jmper+1                              ; get return address ;; @@5a43 155
 11050  5a45 68                                  pla                                      ; get rid of fingo's jsr ret addr ;; @@5a45 155
 11051  5a46 68                                  pla                                       ;; @@5a46 155
 11052  5a47 fa                                  plx                                      ; get length ;; @@5a47 155
 11053  5a48 68                                  pla                                       ;; @@5a48 155
 11054  5a49 8552                                sta dscpnt                                ;; @@5a49 155
 11055  5a4b 68                                  pla                                       ;; @@5a4b 155
 11056  5a4c 8553                                sta dscpnt+1                              ;; @@5a4c 155
 11057  5a4e a557                                lda jmper+1                               ;; @@5a4e 155
 11058  5a50 48                                  pha                                       ;; @@5a50 155
 11059  5a51 5a                                  phy                                       ;; @@5a51 155
 11060  5a52 a000                                ldy #0                                    ;; @@5a52 155
 11061  5a54 8a                                  txa                                       ;; @@5a54 155
 11062  5a55 60                                  rts                                       ;; @@5a55 155
 11063                           ;; @@5a56 155
 11064                           ;; @@5a56 155
 11065                           ;; @@5a56 155
 11066                          ; The function LEN$() returns the length of the string passed as an argument. ;; @@5a56 155
 11067                           ;; @@5a56 155
 11068  5a56 630400             len              bsr len1                                  ;; @@5a56 155
 11069  5a59 8376fe                              +lbra sngflt                              ;; @@5a59 155
 11070                           ;; @@5a5c 155
 11071  5a5c 206a5b             len1             jsr frestr                               ; free up string ;; @@5a5c 155
 11072  5a5f a200                                ldx #0                                    ;; @@5a5f 155
 11073  5a61 860f                                stx valtyp                               ; force numeric ;; @@5a61 155
 11074  5a63 a8                                  tay                                      ; set condition codes ;; @@5a63 155
 11075  5a64 60                                  rts                                      ; done ;; @@5a64 155
 11076                           ;; @@5a65 155
 11077                           ;; @@5a65 155
 11078                           ;; @@5a65 155
 11079                           ;; @@5a65 155
 11080                           ;; @@5a65 155
 11081                          ; The following is the ASC$() function.  It returns an integer which is the ;; @@5a65 155
 11082                          ; decimal equivalent of the PETSCII string argument. ;; @@5a65 155
 11083                           ;; @@5a65 155
 11084  5a65 205c5a             asc              jsr len1                                  ;; @@5a65 155
 11085  5a68 f006                                beq _local_1154_1                        ; it was null (zero length) ;; @@5a68 155
 11086  5a6a a000                                ldy #0                                    ;; @@5a6a 155
 11087  5a6c 20d522                              jsr indin1_ram1                          ; get 1st character ;; @@5a6c 155
 11088  5a6f a8                                  tay                                       ;; @@5a6f 155
 11089  5a70 835ffe             _local_1154_1    +lbra sngflt                              ;; @@5a70 155
 11090                           ;; @@5a73 155
 11091                          ;.end ;; @@5a73 155
 11092                          ; .page ;; @@5a73 155
 11093                          ; .subttl String Routines ;; @@5a73 155
 11094                           ;; @@5a73 155
 11095                           ;; @@5a73 155
 11096                           ;; @@5a73 155
 11097                          ; STRINI gets string space for the creation of a string and creates ;; @@5a73 155
 11098                          ; a descriptor for it in DSCTMP. ;; @@5a73 155
 11099                           ;; @@5a73 155
 11100                          strini                                                     ;; @@5a73 156
 11101  5a73 a666                                ldx facmo                                ; get facmo to store in dscpnt ;; @@5a73 156
 11102  5a75 a467                                ldy facmo+1                               ;; @@5a75 156
 11103  5a77 8652                                stx dscpnt                               ; retain the descriptor pointer ;; @@5a77 156
 11104  5a79 8453                                sty dscpnt+1                              ;; @@5a79 156
 11105                           ;; @@5a7b 156
 11106  5a7b 20dd5b             strspa           jsr getspa                               ; get string space ;; @@5a7b 156
 11107  5a7e 8664                                stx dsctmp+1                             ; save location ;; @@5a7e 156
 11108  5a80 8465                                sty dsctmp+2                              ;; @@5a80 156
 11109  5a82 8563                                sta dsctmp                               ; save length ;; @@5a82 156
 11110  5a84 60                                  rts                                      ; done ;; @@5a84 156
 11111                           ;; @@5a85 156
 11112                          ; .page ;; @@5a85 156
 11113                          ; STRLT2 takes the string literal whose first character is pointed to by ;; @@5a85 156
 11114                          ; (xreg)+1 and builds a descriptor for it.  The descriptor is initially ;; @@5a85 156
 11115                          ; built in DSCTMP, but PUTNEW transfers it into a temporary and leaves a ;; @@5a85 156
 11116                          ; pointer to the temporary in FACMO & FACLO.  The characters other than the ;; @@5a85 156
 11117                          ; zero that terminates the string should be set up in CHARAC and ENDCHR. ;; @@5a85 156
 11118                          ; If the terminator is a quote, the quote is skipped over.  Leading quotes ;; @@5a85 156
 11119                          ; should be skipped before call.  On return, the character after the string ;; @@5a85 156
 11120                          ; literal is pointed to by (strng2). ;; @@5a85 156
 11121                           ;; @@5a85 156
 11122                           ;; @@5a85 156
 11123  5a85 a222               strlit           ldx #'"'                                 ; assume string ends on quote ;; @@5a85 156
 11124  5a87 860a                                stx charac                                ;; @@5a87 156
 11125  5a89 860b                                stx endchr                                ;; @@5a89 156
 11126                           ;; @@5a8b 156
 11127  5a8b 8570               strlt2           sta strng1                               ; save pointer to string ;; @@5a8b 156
 11128  5a8d 8471                                sty strng1+1                              ;; @@5a8d 156
 11129  5a8f 8564                                sta dsctmp+1                             ; in case no strcpy ;; @@5a8f 156
 11130  5a91 8465                                sty dsctmp+2                              ;; @@5a91 156
 11131                           ;; @@5a93 156
 11132  5a93 a0ff                                ldy #255                                 ; initialize character count ;; @@5a93 156
 11133  5a95 c8                 strget           iny                                       ;; @@5a95 156
 11134  5a96 20b122                              jsr indst1                               ; get character ;; @@5a96 156
 11135  5a99 f00c                                beq _local_1155_20                       ; if zero ;; @@5a99 156
 11136  5a9b c50a                                cmp charac                               ; this terminator? ;; @@5a9b 156
 11137  5a9d f004                                beq _local_1155_10                       ; yes ;; @@5a9d 156
 11138  5a9f c50b                                cmp endchr                                ;; @@5a9f 156
 11139  5aa1 d0f2                                bne strget                               ; look further ;; @@5aa1 156
 11140                           ;; @@5aa3 156
 11141  5aa3 c922               _local_1155_10   cmp #'"'                                 ; strfin.  quote? ;; @@5aa3 156
 11142  5aa5 f001                                beq _local_1155_30                        ;; @@5aa5 156
 11143                           ;; @@5aa7 156
 11144  5aa7 18                 _local_1155_20   clc                                       ;; @@5aa7 156
 11145  5aa8 8463               _local_1155_30   sty dsctmp                               ; no, back up. retain count ;; @@5aa8 156
 11146  5aaa 98                                  tya                                       ;; @@5aaa 156
 11147  5aab 6570                                adc strng1                               ; wishing to set (txtptr) ;; @@5aab 156
 11148  5aad 8572                                sta strng2                                ;; @@5aad 156
 11149  5aaf a671                                ldx strng1+1                              ;; @@5aaf 156
 11150  5ab1 9001                                bcc _local_1155_40                        ;; @@5ab1 156
 11151  5ab3 e8                                  inx                                       ;; @@5ab3 156
 11152  5ab4 8673               _local_1155_40   stx strng2+1                              ;; @@5ab4 156
 11153  5ab6 98                                  tya                                       ;; @@5ab6 156
 11154                           ;; @@5ab7 156
 11155                          ; .page ;; @@5ab7 156
 11156                          strlit_1                                                  ; //// entry from SPRSAV ;; @@5ab7 157
 11157  5ab7 20735a                              jsr strini                                ;; @@5ab7 157
 11158  5aba a8                                  tay                                       ;; @@5aba 157
 11159  5abb f013                                beq putnew                               ; length=0, don't bother copying ;; @@5abb 157
 11160  5abd 48                                  pha                                      ; save length ;; @@5abd 157
 11161  5abe da                                  phx                                       ;; @@5abe 157
 11162  5abf a237                                ldx #frespc                               ;; @@5abf 157
 11163  5ac1 88                 _local_1156_10   dey                                       ;; @@5ac1 157
 11164  5ac2 20b122                              jsr indst1                               ; lda (strng1),y in bank 0 ;; @@5ac2 157
 11165  5ac5 20f022                              jsr sta_far_ram1                         ; sta (frespc),y in bank 1 ;; @@5ac5 157
 11166  5ac8 98                                  tya                                       ;; @@5ac8 157
 11167  5ac9 d0f6                                bne _local_1156_10                        ;; @@5ac9 157
 11168  5acb fa                                  plx                                       ;; @@5acb 157
 11169  5acc 68                                  pla                                      ; restore length ;; @@5acc 157
 11170  5acd 205d5b                              jsr mvdone                               ; finish up by updating frespc ;; @@5acd 157
 11171                           ;; @@5ad0 157
 11172                          ; .page ;; @@5ad0 157
 11173                          ; Some string function is returning a result in DSCTMP.  Set up a temp ;; @@5ad0 157
 11174                          ; descriptor with DSCTMP in it.  Put a pointer to the descriptor in FACMO&LO ;; @@5ad0 157
 11175                          ; and flag the result as a string type. ;; @@5ad0 157
 11176                           ;; @@5ad0 157
 11177  5ad0 a618               putnew           ldx temppt                               ; pointer to first free temp ;; @@5ad0 158
 11178  5ad2 e024                                cpx #tempst+strsiz+strsiz+strsiz          ;; @@5ad2 158
 11179  5ad4 f313f2                              +lbeq sterr                              ; string temporary error ;; @@5ad4 158
 11180                           ;; @@5ad7 158
 11181  5ad7 a563                                lda dsctmp                               ; length ;; @@5ad7 158
 11182  5ad9 9500                                sta 0,x                                   ;; @@5ad9 158
 11183  5adb a564                                lda dsctmp+1                             ; pointer to string lo ;; @@5adb 158
 11184  5add 9501                                sta 1,x                                   ;; @@5add 158
 11185  5adf a565                                lda dsctmp+2                             ; hi ;; @@5adf 158
 11186  5ae1 9502                                sta 2,x                                   ;; @@5ae1 158
 11187                           ;; @@5ae3 158
 11188  5ae3 a000                                ldy #0                                   ; pointer to temp. descriptor ;; @@5ae3 158
 11189  5ae5 8666                                stx facmo                                ; lo ;; @@5ae5 158
 11190  5ae7 8467                                sty facmo+1                              ; hi ;; @@5ae7 158
 11191  5ae9 8471                                sty facov                                 ;; @@5ae9 158
 11192  5aeb 88                                  dey                                      ; ($ff) ;; @@5aeb 158
 11193  5aec 840f                                sty valtyp                               ; type is string ;; @@5aec 158
 11194  5aee 8619                                stx lastpt                               ; set pointer to last-used temp ;; @@5aee 158
 11195                           ;; @@5af0 158
 11196  5af0 e8                                  inx                                       ;; @@5af0 158
 11197  5af1 e8                                  inx                                       ;; @@5af1 158
 11198  5af2 e8                                  inx                                      ; point further ;; @@5af2 158
 11199  5af3 8618                                stx temppt                               ; save pointer to next temp, if any ;; @@5af3 158
 11200  5af5 60                                  rts                                      ; all done ;; @@5af5 158
 11201                           ;; @@5af6 158
 11202                          ; .page ;; @@5af6 158
 11203                          ; The following routine concatenates two strings.  At this point, the FAC ;; @@5af6 158
 11204                          ; contains the first one and (txtptr) points to the + sign. ;; @@5af6 158
 11205                           ;; @@5af6 158
 11206  5af6 a567               cat              lda faclo                                ; push high order onto stack ;; @@5af6 158
 11207  5af8 48                                  pha                                       ;; @@5af8 158
 11208  5af9 a566                                lda facmo                                ; and the low ;; @@5af9 158
 11209  5afb 48                                  pha                                       ;; @@5afb 158
 11210  5afc 20e24d                              jsr eval                                 ; can come back here since operator is known ;; @@5afc 158
 11211  5aff 20dd4c                              jsr chkstr                               ; must be string ;; @@5aff 158
 11212  5b02 68                                  pla                                       ;; @@5b02 158
 11213  5b03 8570                                sta strng1                               ; get high order of old descriptor ;; @@5b03 158
 11214  5b05 68                                  pla                                       ;; @@5b05 158
 11215  5b06 8571                                sta strng1+1                              ;; @@5b06 158
 11216  5b08 a000                                ldy #0                                    ;; @@5b08 158
 11217  5b0a 20b522                              jsr indst1_ram1                          ; get length of old string ;; @@5b0a 158
 11218  5b0d 8578                                sta syntmp                                ;; @@5b0d 158
 11219  5b0f 20a922                              jsr indfmo                                ;; @@5b0f 158
 11220  5b12 18                                  clc                                       ;; @@5b12 158
 11221  5b13 6578                                adc syntmp                                ;; @@5b13 158
 11222  5b15 b3581b                              +lbcs errlen                             ; result >255, error "long string" ;; @@5b15 158
 11223                           ;; @@5b18 158
 11224  5b18 20735a                              jsr strini                               ; sizeok.  initialize string ;; @@5b18 158
 11225  5b1b 20355b                              jsr movins                               ; move it ;; @@5b1b 158
 11226  5b1e a552                                lda dscpnt                               ; get pointer to second ;; @@5b1e 158
 11227  5b20 a453                                ldy dscpnt+1                              ;; @@5b20 158
 11228  5b22 20715b                              jsr fretmp                               ; free it ;; @@5b22 158
 11229  5b25 204a5b                              jsr movdo                                ; move second string ;; @@5b25 158
 11230  5b28 a570                                lda strng1                                ;; @@5b28 158
 11231  5b2a a471                                ldy strng1+1                              ;; @@5b2a 158
 11232  5b2c 20715b                              jsr fretmp                                ;; @@5b2c 158
 11233  5b2f 20d05a                              jsr putnew                                ;; @@5b2f 158
 11234  5b32 83cdf1                              +lbra tstop                              ; "cat" reenters frmevl from tstop ;; @@5b32 158
 11235                           ;; @@5b35 158
 11236                          ; .page ;; @@5b35 158
 11237  5b35 a000               movins           ldy #0                                   ; get address of string ;; @@5b35 158
 11238  5b37 20b522                              jsr indst1_ram1                           ;; @@5b37 158
 11239  5b3a 48                                  pha                                       ;; @@5b3a 158
 11240  5b3b c8                                  iny                                       ;; @@5b3b 158
 11241  5b3c 20b522                              jsr indst1_ram1                           ;; @@5b3c 158
 11242  5b3f aa                                  tax                                       ;; @@5b3f 158
 11243  5b40 c8                                  iny                                       ;; @@5b40 158
 11244  5b41 20b522                              jsr indst1_ram1                           ;; @@5b41 158
 11245  5b44 a8                                  tay                                       ;; @@5b44 158
 11246  5b45 68                                  pla                                       ;; @@5b45 158
 11247                           ;; @@5b46 158
 11248  5b46 8624               movstr           stx index                                ; adr in (x,y), len in a ;; @@5b46 158
 11249  5b48 8425                                sty index+1                               ;; @@5b48 158
 11250                           ;; @@5b4a 158
 11251  5b4a a8                 movdo            tay                                       ;; @@5b4a 158
 11252  5b4b f010                                beq mvdone                                ;; @@5b4b 158
 11253                           ;; @@5b4d 158
 11254  5b4d 48                                  pha                                       ;; @@5b4d 158
 11255  5b4e da                                  phx                                       ;; @@5b4e 158
 11256  5b4f a237                                ldx #frespc                               ;; @@5b4f 158
 11257  5b51 88                 _local_1157_10   dey                                       ;; @@5b51 158
 11258  5b52 20d522                              jsr indin1_ram1                           ;; @@5b52 158
 11259  5b55 20f022                              jsr sta_far_ram1                         ; sta (frespc),y ;; @@5b55 158
 11260  5b58 98                                  tya                                       ;; @@5b58 158
 11261  5b59 d0f6                                bne _local_1157_10                        ;; @@5b59 158
 11262  5b5b fa                                  plx                                       ;; @@5b5b 158
 11263  5b5c 68                                  pla                                       ;; @@5b5c 158
 11264                           ;; @@5b5d 158
 11265  5b5d 18                 mvdone           clc                                      ; update frespc pointer ;; @@5b5d 159
 11266  5b5e 6537                                adc frespc                                ;; @@5b5e 159
 11267  5b60 8537                                sta frespc                                ;; @@5b60 159
 11268  5b62 9002                                bcc _local_1158_10                        ;; @@5b62 159
 11269  5b64 e638                                inc frespc+1                              ;; @@5b64 159
 11270  5b66 60                 _local_1158_10   rts                                       ;; @@5b66 159
 11271                           ;; @@5b67 159
 11272                          ; .page ;; @@5b67 159
 11273                          ; FRETMP is passed a string descriptor pntr in (a,y).  A check is made to see ;; @@5b67 159
 11274                          ; if the string descriptor points to the last temporary descriptor allocated by ;; @@5b67 159
 11275                          ; putnew.  If so, the temporary is freed up by the updating of (temppt).  If a ;; @@5b67 159
 11276                          ; string is freed up, a further check sees if it was the last one created and if ;; @@5b67 159
 11277                          ; so, (fretop) is updated to reflect the fact that the space is no longer in use. ;; @@5b67 159
 11278                          ; The address of the actual string is returned in (x,y) and its length in (a). ;; @@5b67 159
 11279                           ;; @@5b67 159
 11280  5b67 20ef4c             frmstr           jsr frmevl                                ;; @@5b67 160
 11281                           ;; @@5b6a 160
 11282  5b6a 20dd4c             frestr           jsr chkstr                               ; make sure it's a string ;; @@5b6a 160
 11283  5b6d a566               frefac           lda facmo                                ; free up string pointed to by FAC ;; @@5b6d 160
 11284  5b6f a467                                ldy facmo+1                               ;; @@5b6f 160
 11285  5b71 8524               fretmp           sta index                                ; get length for later ;; @@5b71 160
 11286  5b73 8425                                sty index+1                               ;; @@5b73 160
 11287  5b75 20cc5b                              jsr fretms                               ; check desc. if last ;; @@5b75 160
 11288  5b78 d03c                                bne _local_1159_30                       ; one then scratch it ;; @@5b78 160
 11289  5b7a 206737                              jsr stradj                               ; index points to link ;; @@5b7a 160
 11290  5b7d 9037                                bcc _local_1159_30                       ; literal no fix ;; @@5b7d 160
 11291                           ;; @@5b7f 160
 11292  5b7f da                                  phx                                      ; .x=length ;; @@5b7f 160
 11293  5b80 88                                  dey                                      ; .y=1 ;; @@5b80 160
 11294  5b81 a224                                ldx #index                                ;; @@5b81 160
 11295  5b83 a9ff                                lda #$ff                                 ; flag string as garbage ;; @@5b83 160
 11296  5b85 20f022                              jsr sta_far_ram1                         ; sta (index),y ;; @@5b85 160
 11297  5b88 68                                  pla                                       ;; @@5b88 160
 11298  5b89 48                                  pha                                      ; get length, but leave copy on stack ;; @@5b89 160
 11299  5b8a 88                                  dey                                       ;; @@5b8a 160
 11300  5b8b a224                                ldx #index                                ;; @@5b8b 160
 11301  5b8d 20f022                              jsr sta_far_ram1 ;sta (index),y          ; put in length ;; @@5b8d 160
 11302                           ;; @@5b90 160
 11303  5b90 49ff                                eor #$ff                                 ; put index back ;; @@5b90 160
 11304  5b92 38                                  sec                                      ; to first byte ;; @@5b92 160
 11305  5b93 6524                                adc index                                 ;; @@5b93 160
 11306  5b95 a425                                ldy index+1                               ;; @@5b95 160
 11307  5b97 b001                                bcs _local_1159_10                        ;; @@5b97 160
 11308  5b99 88                                  dey                                       ;; @@5b99 160
 11309  5b9a 8524               _local_1159_10   sta index                                 ;; @@5b9a 160
 11310  5b9c 8425                                sty index+1                               ;; @@5b9c 160
 11311                           ;; @@5b9e 160
 11312  5b9e aa                                  tax                                      ; lo into x ;; @@5b9e 160
 11313  5b9f 68                                  pla                                      ; pull length from stack ;; @@5b9f 160
 11314  5ba0 c436                                cpy fretop+1                             ; = to fretop? ;; @@5ba0 160
 11315  5ba2 d038                                bne frerts                                ;; @@5ba2 160
 11316  5ba4 e435                                cpx fretop                                ;; @@5ba4 160
 11317  5ba6 d034                                bne frerts                                ;; @@5ba6 160
 11318                           ;; @@5ba8 160
 11319                          ; .page ;; @@5ba8 160
 11320                          ; The string was the last one put into string space.  Save garbage ;; @@5ba8 160
 11321                          ; collection some time by freeing up. (length + 2) ;; @@5ba8 160
 11322                           ;; @@5ba8 160
 11323  5ba8 48                                  pha                                      ; save length on stack ;; @@5ba8 160
 11324  5ba9 38                                  sec                                      ; plus one ;; @@5ba9 160
 11325  5baa 6535                                adc fretop                                ;; @@5baa 160
 11326  5bac 8535                                sta fretop                                ;; @@5bac 160
 11327  5bae 9002                                bcc _local_1159_20                        ;; @@5bae 160
 11328  5bb0 e636                                inc fretop+1                              ;; @@5bb0 160
 11329  5bb2 e335               _local_1159_20   inw fretop                               ; + one more ;; @@5bb2 160
 11330  5bb4 68                                  pla                                      ; pull length off stack ;; @@5bb4 160
 11331  5bb5 60                                  rts                                       ;; @@5bb5 160
 11332                           ;; @@5bb6 160
 11333                           ;; @@5bb6 160
 11334  5bb6 a000               _local_1159_30   ldy #0                                   ; set up x,y,a and index ;; @@5bb6 160
 11335  5bb8 20d522                              jsr indin1_ram1                          ; length ;; @@5bb8 160
 11336  5bbb 48                                  pha                                      ; on stack ;; @@5bbb 160
 11337  5bbc c8                                  iny                                       ;; @@5bbc 160
 11338  5bbd 20d522                              jsr indin1_ram1                          ; pointer lo ;; @@5bbd 160
 11339  5bc0 aa                                  tax                                       ;; @@5bc0 160
 11340  5bc1 c8                                  iny                                       ;; @@5bc1 160
 11341  5bc2 20d522                              jsr indin1_ram1                          ; pointer hi ;; @@5bc2 160
 11342  5bc5 a8                                  tay                                       ;; @@5bc5 160
 11343  5bc6 8624                                stx index                                 ;; @@5bc6 160
 11344  5bc8 8425                                sty index+1                               ;; @@5bc8 160
 11345  5bca 68                                  pla                                      ; get back length ;; @@5bca 160
 11346  5bcb 60                                  rts                                       ;; @@5bcb 160
 11347                           ;; @@5bcc 160
 11348                           ;; @@5bcc 160
 11349                           ;; @@5bcc 160
 11350  5bcc c41a               fretms           cpy lastpt+1                             ; last entry to temp? ;; @@5bcc 161
 11351  5bce d00c                                bne frerts                                ;; @@5bce 161
 11352  5bd0 c519                                cmp lastpt                                ;; @@5bd0 161
 11353  5bd2 d008                                bne frerts                                ;; @@5bd2 161
 11354  5bd4 8518                                sta temppt                                ;; @@5bd4 161
 11355  5bd6 e903                                sbc #strsiz                              ; point to lst one ;; @@5bd6 161
 11356  5bd8 8519                                sta lastpt                               ; update temp pointer ;; @@5bd8 161
 11357  5bda a000                                ldy #0                                   ; also clears zflg so we do rest of fretmp ;; @@5bda 161
 11358  5bdc 60                 frerts           rts                                      ; all done ;; @@5bdc 161
 11359                           ;; @@5bdd 161
 11360                          ;.end ;; @@5bdd 161
 11361                          ; .page ;; @@5bdd 161
 11362                          ; .subttl Garbage Collection ;; @@5bdd 161
 11363                           ;; @@5bdd 161
 11364                          ;  Get space for a string, perhaps forcing garbage collection. ;; @@5bdd 161
 11365                          ; ;; @@5bdd 161
 11366                          ;  Entry:  a = # of chars ;; @@5bdd 161
 11367                          ;  Exit:   (x,y) pointer to space, otherwise ;; @@5bdd 161
 11368                          ;          blows off to 'out of string space' error ;; @@5bdd 161
 11369                          ;          (also preserves .a and sets frespc= y,x = -> at space.) ;; @@5bdd 161
 11370                           ;; @@5bdd 161
 11371                           ;; @@5bdd 161
 11372  5bdd 4611               getspa           lsr garbfl                               ; signal no garbage collection yet ;; @@5bdd 161
 11373                           ;; @@5bdf 161
 11374  5bdf aa                 tryag2           tax                                      ; save in x also ;; @@5bdf 161
 11375  5be0 f042                                beq getrts                               ; length of 0 no go... ;; @@5be0 161
 11376  5be2 48                                  pha                                      ; save a (length) on stack ;; @@5be2 161
 11377  5be3 a535                                lda fretop                               ; lo byte ;; @@5be3 161
 11378  5be5 38                                  sec                                      ; for subtract ;; @@5be5 161
 11379  5be6 e902                                sbc #2                                   ; minus 2 (link bytes) ;; @@5be6 161
 11380  5be8 a436                                ldy fretop+1                              ;; @@5be8 161
 11381  5bea b001                                bcs _local_1160_10                        ;; @@5bea 161
 11382  5bec 88                                  dey                                       ;; @@5bec 161
 11383  5bed 8524               _local_1160_10   sta index1                               ; save for later ;; @@5bed 161
 11384  5bef 8425                                sty index1+1                              ;; @@5bef 161
 11385  5bf1 8a                                  txa                                       ;; @@5bf1 161
 11386  5bf2 49ff                                eor #$ff                                  ;; @@5bf2 161
 11387  5bf4 38                                  sec                                       ;; @@5bf4 161
 11388  5bf5 6524                                adc index1                                ;; @@5bf5 161
 11389  5bf7 b001                                bcs _local_1160_20                        ;; @@5bf7 161
 11390  5bf9 88                                  dey                                       ;; @@5bf9 161
 11391  5bfa c434               _local_1160_20   cpy strend+1                              ;; @@5bfa 161
 11392  5bfc 9027                                bcc garbag                                ;; @@5bfc 161
 11393  5bfe d004                                bne strfre                                ;; @@5bfe 161
 11394  5c00 c533                                cmp strend                                ;; @@5c00 161
 11395  5c02 9021                                bcc garbag                               ; clean up ;; @@5c02 161
 11396                           ;; @@5c04 161
 11397                          ; .page ;; @@5c04 161
 11398  5c04 8537               strfre           sta frespc                                ;; @@5c04 162
 11399  5c06 8438                                sty frespc+1                              ;; @@5c06 162
 11400  5c08 a001                                ldy #1                                   ; flag string as garbage ;; @@5c08 162
 11401  5c0a a9ff                                lda #$ff                                  ;; @@5c0a 162
 11402  5c0c da                                  phx                                      ; set up string bank ;; @@5c0c 162
 11403  5c0d a224                                ldx #index1                               ;; @@5c0d 162
 11404  5c0f 20f022                              jsr sta_far_ram1 ;sta (index1),y         ; flag ;; @@5c0f 162
 11405  5c12 fa                                  plx                                       ;; @@5c12 162
 11406  5c13 88                                  dey                                       ;; @@5c13 162
 11407  5c14 68                                  pla                                      ; length ;; @@5c14 162
 11408  5c15 da                                  phx                                      ; set up string bank ;; @@5c15 162
 11409  5c16 a224                                ldx #index1                               ;; @@5c16 162
 11410  5c18 20f022                              jsr sta_far_ram1 ;sta (index1),y         ; length ;; @@5c18 162
 11411  5c1b fa                                  plx                                       ;; @@5c1b 162
 11412  5c1c a637                                ldx frespc                                ;; @@5c1c 162
 11413  5c1e a438                                ldy frespc+1                              ;; @@5c1e 162
 11414  5c20 8635                                stx fretop                                ;; @@5c20 162
 11415  5c22 8436                                sty fretop+1                             ; save new (fretop) ;; @@5c22 162
 11416  5c24 60                 getrts           rts                                       ;; @@5c24 162
 11417                           ;; @@5c25 162
 11418                           ;; @@5c25 162
 11419  5c25 a511               garbag           lda garbfl                                ;; @@5c25 162
 11420  5c27 3317d2                              +lbmi omerr                              ; if out of memory ;; @@5c27 162
 11421  5c2a 20335c                              jsr garba2                                ;; @@5c2a 162
 11422  5c2d 38                                  sec                                       ;; @@5c2d 162
 11423  5c2e 6611                                ror garbfl                                ;; @@5c2e 162
 11424  5c30 68                                  pla                                      ; get back string length ;; @@5c30 162
 11425  5c31 80ac                                bra tryag2                               ; always branches ;; @@5c31 162
 11426                           ;; @@5c33 162
 11427                           ;; @@5c33 162
 11428                          ; .page ;; @@5c33 162
 11429                          ; Routine looks for and squashes out any unused string space it finds, thus ;; @@5c33 162
 11430                          ; returning the space for future use by the string routines.  GARBA2 is called ;; @@5c33 162
 11431                          ; only when BASIC needs space or the FRE() function is used. ;; @@5c33 162
 11432                           ;; @@5c33 162
 11433                           ;; @@5c33 162
 11434  5c33 a618               garba2           ldx temppt                               ; ptr to temp. strings ;; @@5c33 162
 11435  5c35 e01b               _local_1161_10   cpx #tempst                              ; any out there? ;; @@5c35 162
 11436  5c37 f016                                beq _local_1161_20                       ; none ;; @@5c37 162
 11437  5c39 20505d                              jsr slr1                                 ; setup ptr (tempf2) to temp. string's bkptr ;; @@5c39 162
 11438  5c3c f0f7                                beq _local_1161_10                       ; (skip if null string!) ;; @@5c3c 162
 11439  5c3e 8a                                  txa                                      ; .x = lsb of ptr to descriptor ;; @@5c3e 162
 11440  5c3f da                                  phx                                      ; set up string bank ;; @@5c3f 162
 11441  5c40 a25e                                ldx #tempf2                               ;; @@5c40 162
 11442  5c42 a000                                ldy #0                                    ;; @@5c42 162
 11443  5c44 20f022                              jsr sta_far_ram1 ;(tempf2),y             ; place backpointer on string to temp. descr ;; @@5c44 162
 11444  5c47 98                                  tya                                      ; .a = msb of ptr (0) ;; @@5c47 162
 11445  5c48 c8                                  iny                                       ;; @@5c48 162
 11446  5c49 20f022                              jsr sta_far_ram1                         ; (tempf2),y ;; @@5c49 162
 11447  5c4c fa                                  plx                                       ;; @@5c4c 162
 11448  5c4d 80e6                                bra _local_1161_10                       ; always ;; @@5c4d 162
 11449                           ;; @@5c4f 162
 11450                           ;; @@5c4f 162
 11451  5c4f a000               _local_1161_20   ldy #0                                   ; set up flag ;; @@5c4f 162
 11452  5c51 845a                                sty highds                                ;; @@5c51 162
 11453  5c53 a639                                ldx max_mem_1                             ;; @@5c53 162
 11454  5c55 a43a                                ldy max_mem_1+1                           ;; @@5c55 162
 11455  5c57 8661                                stx grbtop                               ; set both pointers ;; @@5c57 162
 11456  5c59 8650                                stx grbpnt                                ;; @@5c59 162
 11457  5c5b 8637                                stx frespc                                ;; @@5c5b 162
 11458  5c5d 8462                                sty grbtop+1                              ;; @@5c5d 162
 11459  5c5f 8451                                sty grbpnt+1                              ;; @@5c5f 162
 11460  5c61 8438                                sty frespc+1                              ;; @@5c61 162
 11461  5c63 8a                                  txa                                       ;; @@5c63 162
 11462                           ;; @@5c64 162
 11463                          ; .page ;; @@5c64 162
 11464                          ; do while (grbpnt <= fretop) ;; @@5c64 162
 11465                           ;; @@5c64 162
 11466  5c64 20de5c             gloop            jsr chkgrb                               ; check garbage string ;; @@5c64 163
 11467  5c67 d00c                                bne _local_1162_2                        ; if not garbage ;; @@5c67 163
 11468                           ;; @@5c69 163
 11469  5c69 88                 _local_1162_1    dey                                      ; back up to length ;; @@5c69 163
 11470  5c6a 20b922                              jsr indgrb                                ;; @@5c6a 163
 11471  5c6d 20325d                              jsr movpnt                               ; move grbpnt to next ;; @@5c6d 163
 11472  5c70 38                                  sec                                       ;; @@5c70 163
 11473  5c71 665a                                ror highds                               ; indicate garbage string found ;; @@5c71 163
 11474  5c73 80ef                                bra gloop                                ; always ;; @@5c73 163
 11475                           ;; @@5c75 163
 11476  5c75 245a               _local_1162_2    bit highds                                ;; @@5c75 163
 11477  5c77 1052                                bpl _local_1162_30                       ; if garbage string not found ;; @@5c77 163
 11478  5c79 a200                                ldx #0                                    ;; @@5c79 163
 11479  5c7b 865a                                stx highds                               ; clear indicator ;; @@5c7b 163
 11480                           ;; @@5c7d 163
 11481  5c7d a902                                lda #2                                   ; skip pointers past ;; @@5c7d 163
 11482                           ;; @@5c7f 163
 11483                          ; Move a string over garbage ;; @@5c7f 163
 11484                           ;; @@5c7f 163
 11485  5c7f da                 _local_1162_5    phx                                       ;; @@5c7f 163
 11486  5c80 a261                                ldx #grbtop                               ;; @@5c80 163
 11487  5c82 a001                                ldy #1                                   ; move the link bytes ;; @@5c82 163
 11488  5c84 20b922                              jsr indgrb                                ;; @@5c84 163
 11489  5c87 20f022                              jsr sta_far_ram1                         ; sta (grbtop),y ;; @@5c87 163
 11490  5c8a 88                                  dey                                       ;; @@5c8a 163
 11491  5c8b 20b922                              jsr indgrb                                ;; @@5c8b 163
 11492  5c8e 20f022                              jsr sta_far_ram1                         ; sta (grbtop),y ;; @@5c8e 163
 11493  5c91 fa                                  plx                                       ;; @@5c91 163
 11494                           ;; @@5c92 163
 11495  5c92 20d522                              jsr indin1_ram1                           ;; @@5c92 163
 11496  5c95 aa                                  tax                                       ;; @@5c95 163
 11497  5c96 20415d                              jsr movtop                               ; move top pointer ;; @@5c96 163
 11498  5c99 8537                                sta frespc                               ; save in frespc ;; @@5c99 163
 11499  5c9b 8438                                sty frespc+1                              ;; @@5c9b 163
 11500  5c9d 8a                                  txa                                       ;; @@5c9d 163
 11501  5c9e 20325d                              jsr movpnt                               ; move grbpnt ;; @@5c9e 163
 11502  5ca1 8a                                  txa                                      ; put length-1 in .y ;; @@5ca1 163
 11503  5ca2 a8                                  tay                                       ;; @@5ca2 163
 11504                           ;; @@5ca3 163
 11505  5ca3 88                 _local_1162_10   dey                                       ;; @@5ca3 163
 11506  5ca4 20b922                              jsr indgrb                                ;; @@5ca4 163
 11507  5ca7 da                                  phx                                       ;; @@5ca7 163
 11508  5ca8 a261                                ldx #grbtop                               ;; @@5ca8 163
 11509  5caa 20f022                              jsr sta_far_ram1                         ; sta (grbtop),y ;; @@5caa 163
 11510  5cad fa                                  plx                                       ;; @@5cad 163
 11511  5cae ca                                  dex                                       ;; @@5cae 163
 11512  5caf d0f2                                bne _local_1162_10                        ;; @@5caf 163
 11513                           ;; @@5cb1 163
 11514  5cb1 a002                                ldy #2                                   ; fix the descriptor ;; @@5cb1 163
 11515  5cb3 da                                  phx                                       ;; @@5cb3 163
 11516  5cb4 a224                                ldx #index1                               ;; @@5cb4 163
 11517  5cb6 b96000             _local_1162_20   lda grbtop-1,y                            ;; @@5cb6 163
 11518  5cb9 20f022                              jsr sta_far_ram1                         ; sta (index1),y ;; @@5cb9 163
 11519  5cbc 88                                  dey                                       ;; @@5cbc 163
 11520  5cbd d0f7                                bne _local_1162_20                        ;; @@5cbd 163
 11521  5cbf fa                                  plx                                       ;; @@5cbf 163
 11522                           ;; @@5cc0 163
 11523  5cc0 a550                                lda grbpnt                               ; check pointer ;; @@5cc0 163
 11524  5cc2 a451                                ldy grbpnt+1                              ;; @@5cc2 163
 11525  5cc4 20de5c                              jsr chkgrb                               ; check garbage string ;; @@5cc4 163
 11526  5cc7 f0a0                                beq _local_1162_1                        ; if garbage found ;; @@5cc7 163
 11527  5cc9 d0b4                                bne _local_1162_5                        ; always ;; @@5cc9 163
 11528                           ;; @@5ccb 163
 11529  5ccb a000               _local_1162_30   ldy #0                                   ; skip over good strings ;; @@5ccb 163
 11530  5ccd 20d522                              jsr indin1_ram1                           ;; @@5ccd 163
 11531  5cd0 aa                                  tax                                       ;; @@5cd0 163
 11532  5cd1 20415d                              jsr movtop                                ;; @@5cd1 163
 11533  5cd4 8537                                sta frespc                                ;; @@5cd4 163
 11534  5cd6 8438                                sty frespc+1                              ;; @@5cd6 163
 11535  5cd8 8a                                  txa                                       ;; @@5cd8 163
 11536  5cd9 20325d                              jsr movpnt                                ;; @@5cd9 163
 11537  5cdc 8086                                bra gloop                                 ;; @@5cdc 163
 11538                           ;; @@5cde 163
 11539                          ; .page ;; @@5cde 163
 11540                          ; Subroutines used for garbage collection. ;; @@5cde 163
 11541                          ; ;; @@5cde 163
 11542                          ;  Compare for (y,a) = fretop. ;; @@5cde 163
 11543                          ; Entry  (y,a) = address of current string descriptor. ;; @@5cde 163
 11544                          ; Exits to caller if (y,a) = fretop, else z flag set if garbage string. ;; @@5cde 163
 11545                          ;      z flag clear if not garbage string. ;; @@5cde 163
 11546                          ; In either case pointers are setup for next loop and string movement. ;; @@5cde 163
 11547                          ; If carry clear (y,a) <= fretop ;; @@5cde 163
 11548                           ;; @@5cde 163
 11549                           ;; @@5cde 163
 11550  5cde c436               chkgrb           cpy fretop+1                             ; end of strings? ;; @@5cde 164
 11551  5ce0 9029                                bcc _local_1163_50                        ;; @@5ce0 164
 11552  5ce2 d006                                bne _local_1163_10                       ; if not equal ;; @@5ce2 164
 11553  5ce4 c535                                cmp fretop                                ;; @@5ce4 164
 11554  5ce6 f023                                beq _local_1163_50                        ;; @@5ce6 164
 11555  5ce8 9021                                bcc _local_1163_50                        ;; @@5ce8 164
 11556                           ;; @@5cea 164
 11557  5cea 245a               _local_1163_10   bit highds                               ; check flag ;; @@5cea 164
 11558  5cec 3005                                bmi _local_1163_20                       ; if empty string found ;; @@5cec 164
 11559  5cee a902                                lda #2                                   ; skip pointers past ;; @@5cee 164
 11560  5cf0 20415d                              jsr movtop                               ; move top pointer ;; @@5cf0 164
 11561                           ;; @@5cf3 164
 11562  5cf3 a902               _local_1163_20   lda #2                                   ; skip pointers past ;; @@5cf3 164
 11563  5cf5 20325d                              jsr movpnt                               ; move pointers ;; @@5cf5 164
 11564  5cf8 a001                                ldy #1                                    ;; @@5cf8 164
 11565  5cfa 20b922                              jsr indgrb                               ; garbage? ;; @@5cfa 164
 11566  5cfd c9ff                                cmp #$ff                                  ;; @@5cfd 164
 11567  5cff f009                                beq _local_1163_40                       ; yes ;; @@5cff 164
 11568                           ;; @@5d01 164
 11569  5d01 20b922             _local_1163_30   jsr indgrb                               ; to link bytes ;; @@5d01 164
 11570  5d04 992400                              sta index1,y                              ;; @@5d04 164
 11571  5d07 88                                  dey                                       ;; @@5d07 164
 11572  5d08 10f7                                bpl _local_1163_30                       ; if two bytes not moved ;; @@5d08 164
 11573  5d0a 60                 _local_1163_40   rts                                       ;; @@5d0a 164
 11574                           ;; @@5d0b 164
 11575                           ;; @@5d0b 164
 11576  5d0b a618               _local_1163_50   ldx temppt                               ; ptr to temp. strings ;; @@5d0b 164
 11577                           ;; @@5d0d 164
 11578  5d0d e01b               _local_1163_60   cpx #tempst                              ; any out there? ;; @@5d0d 164
 11579  5d0f f016                                beq _local_1163_70                       ; no ;; @@5d0f 164
 11580  5d11 20505d                              jsr slr1                                 ; setup ptr (tempf2) to temp. string's bkptr. ;; @@5d11 164
 11581  5d14 f0f7                                beq _local_1163_60                       ; (skip if null string!) ;; @@5d14 164
 11582  5d16 da                                  phx                                       ;; @@5d16 164
 11583  5d17 a25e                                ldx #tempf2                               ;; @@5d17 164
 11584  5d19 a000                                ldy #0                                   ; .a = string length ;; @@5d19 164
 11585  5d1b 20f022                              jsr sta_far_ram1 ;sta (tempf2),y         ; remove backpointer built at garba2 ;; @@5d1b 164
 11586  5d1e c8                                  iny                                       ;; @@5d1e 164
 11587  5d1f a9ff                                lda #$ff                                  ;; @@5d1f 164
 11588  5d21 20f022                              jsr sta_far_ram1 ;sta (tempf2),y         ; and mark as garbage ;; @@5d21 164
 11589  5d24 fa                                  plx                                       ;; @@5d24 164
 11590  5d25 80e6                                bra _local_1163_60                       ; always ;; @@5d25 164
 11591                           ;; @@5d27 164
 11592  5d27 68                 _local_1163_70   pla                                      ; throw away return address ;; @@5d27 164
 11593  5d28 68                                  pla                                       ;; @@5d28 164
 11594  5d29 a537                                lda frespc                               ; fix fretop and frespc ;; @@5d29 164
 11595  5d2b a438                                ldy frespc+1                              ;; @@5d2b 164
 11596  5d2d 8535                                sta fretop                                ;; @@5d2d 164
 11597  5d2f 8436                                sty fretop+1                              ;; @@5d2f 164
 11598  5d31 60                                  rts                                       ;; @@5d31 164
 11599                           ;; @@5d32 164
 11600                          ; .page ;; @@5d32 164
 11601  5d32 49ff               movpnt           eor #$ff                                 ; comp and add ;; @@5d32 165
 11602  5d34 38                                  sec                                       ;; @@5d34 165
 11603  5d35 6550                                adc grbpnt                                ;; @@5d35 165
 11604  5d37 a451                                ldy grbpnt+1                              ;; @@5d37 165
 11605  5d39 b001                                bcs _local_1164_1                         ;; @@5d39 165
 11606  5d3b 88                                  dey                                       ;; @@5d3b 165
 11607  5d3c 8550               _local_1164_1    sta grbpnt                                ;; @@5d3c 165
 11608  5d3e 8451                                sty grbpnt+1                              ;; @@5d3e 165
 11609  5d40 60                                  rts                                       ;; @@5d40 165
 11610                           ;; @@5d41 165
 11611                           ;; @@5d41 165
 11612                           ;; @@5d41 165
 11613  5d41 49ff               movtop           eor #$ff                                 ; comp and add ;; @@5d41 166
 11614  5d43 38                                  sec                                       ;; @@5d43 166
 11615  5d44 6561                                adc grbtop                                ;; @@5d44 166
 11616  5d46 a462                                ldy grbtop+1                              ;; @@5d46 166
 11617  5d48 b001                                bcs _local_1165_1                         ;; @@5d48 166
 11618  5d4a 88                                  dey                                       ;; @@5d4a 166
 11619  5d4b 8561               _local_1165_1    sta grbtop                                ;; @@5d4b 166
 11620  5d4d 8462                                sty grbtop+1                              ;; @@5d4d 166
 11621  5d4f 60                                  rts                                       ;; @@5d4f 166
 11622                           ;; @@5d50 166
 11623                           ;; @@5d50 166
 11624                           ;; @@5d50 166
 11625  5d50 ca                 slr1             dex                                      ; .x = ptr to temp. string descriptor ;; @@5d50 167
 11626  5d51 b500                                lda 0,x                                  ; msb of ptr to string ;; @@5d51 167
 11627  5d53 855f                                sta tempf2+1                              ;; @@5d53 167
 11628  5d55 ca                                  dex                                       ;; @@5d55 167
 11629  5d56 b500                                lda 0,x                                  ; lsb of ptr to string ;; @@5d56 167
 11630  5d58 855e                                sta tempf2                                ;; @@5d58 167
 11631  5d5a ca                                  dex                                       ;; @@5d5a 167
 11632  5d5b b500                                lda 0,x                                  ; string length ;; @@5d5b 167
 11633  5d5d 48                                  pha                                      ; save for later test ;; @@5d5d 167
 11634  5d5e 18                                  clc                                       ;; @@5d5e 167
 11635  5d5f 655e                                adc tempf2                               ; want ptr to string's backpointer ;; @@5d5f 167
 11636  5d61 855e                                sta tempf2                                ;; @@5d61 167
 11637  5d63 9002                                bcc _local_1166_1                         ;; @@5d63 167
 11638  5d65 e65f                                inc tempf2+1                              ;; @@5d65 167
 11639  5d67 68                 _local_1166_1    pla   ;.a=len & set z flag               ; .x=next desc. ptr ;; @@5d67 167
 11640  5d68 60                                  rts                                       ;; @@5d68 167
 11641                           ;; @@5d69 167
 11642                          ;.end ;; @@5d69 167
 11643                          ; .page ;; @@5d69 167
 11644                          ; .subttl  Floating Point Math Package (CODE17) ;; @@5d69 167
 11645                           ;; @@5d69 167
 11646  5d69 208322             gtbytc           jsr chrget                                ;; @@5d69 168
 11647                           ;; @@5d6c 168
 11648  5d6c 20d84c             getbyt           jsr frmnum                               ; read formula into FAC ;; @@5d6c 168
 11649                           ;; @@5d6f 168
 11650  5d6f 20ad58             conint           jsr posint                               ; convert the FAC to a single byte int ;; @@5d6f 168
 11651  5d72 a666                                ldx facmo                                 ;; @@5d72 168
 11652  5d74 d387f4                              +lbne fcerr                              ; result must be <= 255 ;; @@5d74 168
 11653  5d77 a667                                ldx faclo                                 ;; @@5d77 168
 11654  5d79 4c8522                              jmp chrgot                               ; set condition codes on terminator ;; @@5d79 168
 11655                           ;; @@5d7c 168
 11656                           ;; @@5d7c 168
 11657                          getnum                                                    ; get 2-byte value in y,a: check for a comma, get 1 byte val in x ;; @@5d7c 168
 11658  5d7c 20d84c                              jsr frmnum                               ; get address ;; @@5d7c 168
 11659  5d7f 208d5d                              jsr getadr                               ; get that location ;; @@5d7f 168
 11660                           ;; @@5d82 168
 11661                          combyt                                                    ; check for a comma, get a 1 byte value in x ;; @@5d82 168
 11662  5d82 205b4e                              jsr chkcom                               ; check for comma ;; @@5d82 168
 11663  5d85 80e5                                bra getbyt                               ; get something to store and return ;; @@5d85 168
 11664                           ;; @@5d87 168
 11665                           ;; @@5d87 168
 11666  5d87 205b4e             comwrd           jsr chkcom                                ;; @@5d87 168
 11667                           ;; @@5d8a 168
 11668  5d8a 20d84c             getwrd           jsr frmnum                               ; get an unsigned 2-byte value in y,a ;; @@5d8a 168
 11669                           ;; @@5d8d 168
 11670  5d8d a568               getadr           lda facsgn                               ; for this entry, value can't be < 0 ;; @@5d8d 168
 11671  5d8f 336cf4                              +lbmi fcerr                              ; function call error ;; @@5d8f 168
 11672                           ;; @@5d92 168
 11673                          getsad                                                    ; get a signed 2-byte value in (y,a), ///entry from sprcor ;; @@5d92 168
 11674  5d92 a563                                lda facexp                               ; examine exponent ;; @@5d92 168
 11675  5d94 c991                                cmp #145                                  ;; @@5d94 168
 11676  5d96 b365f4                              +lbcs fcerr                              ; function call error ;; @@5d96 168
 11677  5d99 203063                              jsr qint                                 ; integerize it ;; @@5d99 168
 11678  5d9c a566                                lda facmo                                 ;; @@5d9c 168
 11679  5d9e a467                                ldy facmo+1                               ;; @@5d9e 168
 11680  5da0 8416                                sty poker                                 ;; @@5da0 168
 11681  5da2 8517                                sta poker+1                               ;; @@5da2 168
 11682  5da4 60                                  rts                                      ; it's all done ;; @@5da4 168
 11683                           ;; @@5da5 168
 11684                          ;.end ;; @@5da5 168
 11685                          ; .page ;; @@5da5 168
 11686                          ; .subttl Floating Point Math Package (CODE18) ;; @@5da5 168
 11687                           ;; @@5da5 168
 11688                          ; Floating Point Math Package configuration: ;; @@5da5 168
 11689                          ; ;; @@5da5 168
 11690                          ; Throughout the math package the floating point format is as follows: ;; @@5da5 168
 11691                          ; ;; @@5da5 168
 11692                          ; the sign of the first bit of the mantissa. ;; @@5da5 168
 11693                          ; the mantissa is 24 bits long. ;; @@5da5 168
 11694                          ; the binary point is to the left of the msb. ;; @@5da5 168
 11695                          ; number = mantissa * 2 ~ exponent. ;; @@5da5 168
 11696                          ; the mantissa is positive with a 1 assumed to be where the sign bit is. ;; @@5da5 168
 11697                          ; the sign of the exponent is the first bit of the exponent. ;; @@5da5 168
 11698                          ; the exponent is stored in excess $80, i.e., with a bias of +$80. ;; @@5da5 168
 11699                          ; so, the exponent is a signed 8 bit number with $80 added to it. ;; @@5da5 168
 11700                          ; an exponent of zero means the number is zero. ;; @@5da5 168
 11701                          ; the other bytes may not be assumed to be zero. ;; @@5da5 168
 11702                          ; to keep the same number in the fac while shifting, ;; @@5da5 168
 11703                          ; to shift right, exp:=exp+1. ;; @@5da5 168
 11704                          ; to shift left,  exp:=exp-1. ;; @@5da5 168
 11705                          ; ;; @@5da5 168
 11706                          ; In memory the number looks like this: ;; @@5da5 168
 11707                          ; the exponent as a signed number +$80. ;; @@5da5 168
 11708                          ; the sign bit in 7, bits 2-8 of mantissa are bits 6-0. ;; @@5da5 168
 11709                          ;  remember bit 1 of mantissa is always a one. ;; @@5da5 168
 11710                          ; bits 9-16 of the mantissa. ;; @@5da5 168
 11711                          ; bits 17-24 of the mantisa. ;; @@5da5 168
 11712                          ; ;; @@5da5 168
 11713                          ; Arithmetic routine calling conventions: ;; @@5da5 168
 11714                          ; ;; @@5da5 168
 11715                          ;   For one-argument functions: ;; @@5da5 168
 11716                          ; the argument is in the fac. ;; @@5da5 168
 11717                          ; the result is left in the fac. ;; @@5da5 168
 11718                          ;   For two-argument operations: ;; @@5da5 168
 11719                          ; the first argument is in arg (argexp,ho,mo,lo and argsgn). ;; @@5da5 168
 11720                          ;       the second argument is in the fac. ;; @@5da5 168
 11721                          ; the result is left in the fac. ;; @@5da5 168
 11722                          ; ;; @@5da5 168
 11723                          ; The "t" entry points to the two argument operations have both arguments setup ;; @@5da5 168
 11724                          ; in the respective registers. Before calling arg may have been popped off the ;; @@5da5 168
 11725                          ; stack and into arg, for example. The other entry point assumes (xreg) points ;; @@5da5 168
 11726                          ; to the argument somewhere in memory. it is unpacked into arg by "conupk". ;; @@5da5 168
 11727                          ; ;; @@5da5 168
 11728                          ; On the stack, the sgn is pushed on first, the lo,mo,ho, and finally exp. ;; @@5da5 168
 11729                          ; Note all things are kept unpacked in arg, fac and on the stack. ;; @@5da5 168
 11730                          ; ;; @@5da5 168
 11731                          ; It is only when something is stored away that it is packed to four bytes, ;; @@5da5 168
 11732                          ; the unpacked format has a sn byte reflecting the sign of the ho turned on. ;; @@5da5 168
 11733                          ; The exp is the same as stored format. This is done for speed of operation. ;; @@5da5 168
 11734                          ; .page ;; @@5da5 168
 11735                           ;; @@5da5 168
 11736  5da5 20f760             fsub             jsr conupk                                ;; @@5da5 168
 11737                           ;; @@5da8 168
 11738  5da8 a568               fsubt            lda facsgn                                ;; @@5da8 168
 11739  5daa 49ff                                eor #$ff                                 ; complement it ;; @@5daa 168
 11740  5dac 8568                                sta facsgn                                ;; @@5dac 168
 11741  5dae 456f                                eor argsgn                               ; complement arisgn ;; @@5dae 168
 11742  5db0 8570                                sta arisgn                                ;; @@5db0 168
 11743  5db2 a563                                lda facexp                               ; set codes on facexp ;; @@5db2 168
 11744  5db4 8008                                bra faddt                                ; (y)=argexp ;; @@5db4 168
 11745                           ;; @@5db6 168
 11746  5db6 20e75e             fadd5            jsr shiftr                               ; do a long shift ;; @@5db6 168
 11747  5db9 903b                                bcc fadd4                                ; continue with addition ;; @@5db9 168
 11748                           ;; @@5dbb 168
 11749  5dbb 20f760             fadd             jsr conupk                                ;; @@5dbb 168
 11750  5dbe f3d204             faddt            +lbeq movfa                              ; if fac=0, result is in arg ;; @@5dbe 168
 11751  5dc1 a671                                ldx facov                                 ;; @@5dc1 168
 11752  5dc3 8658                                stx oldov                                 ;; @@5dc3 168
 11753  5dc5 a26a                                ldx #argexp                              ; default is shift argument ;; @@5dc5 168
 11754  5dc7 a56a                                lda argexp                               ; if arg=0, fac is result ;; @@5dc7 168
 11755                           ;; @@5dc9 168
 11756  5dc9 a8                 faddc            tay                                      ; also copy (a) into (y) ;; @@5dc9 168
 11757  5dca f38200                              +lbeq zerrts                             ; return ;; @@5dca 168
 11758  5dcd 38                                  sec                                       ;; @@5dcd 168
 11759  5dce e563                                sbc facexp                                ;; @@5dce 168
 11760  5dd0 f024                                beq fadd4                                ; no shifting ;; @@5dd0 168
 11761  5dd2 9012                                bcc fadda                                ; branch if argexp < facexp ;; @@5dd2 168
 11762  5dd4 8463                                sty facexp                               ; resulting exponent ;; @@5dd4 168
 11763  5dd6 a46f                                ldy argsgn                               ; since arg is bigger, its ;; @@5dd6 168
 11764  5dd8 8468                                sty facsgn                               ; sign is sign of result ;; @@5dd8 168
 11765  5dda 49ff                                eor #$ff                                 ; shift a negative number of palces ;; @@5dda 168
 11766  5ddc 6900                                adc #0                                   ; complete negation, w/ c=1 ;; @@5ddc 168
 11767  5dde a000                                ldy #0                                   ; zero oldov ;; @@5dde 168
 11768  5de0 8458                                sty oldov                                 ;; @@5de0 168
 11769  5de2 a263                                ldx #fac                                 ; shift the FAC instead ;; @@5de2 168
 11770  5de4 8004                                bra fadd1                                 ;; @@5de4 168
 11771                           ;; @@5de6 168
 11772  5de6 a000               fadda            ldy #0                                    ;; @@5de6 168
 11773  5de8 8471                                sty facov                                 ;; @@5de8 168
 11774                           ;; @@5dea 168
 11775  5dea c9f9               fadd1            cmp #$f9                                 ; for speed and necessity.  gets most likely case to ;; @@5dea 168
 11776                          ;SHIFTR fastest and allows shifting of neg nums by QUINT ;; @@5dec 168
 11777  5dec 30c8                                bmi fadd5                                ; shift big ;; @@5dec 168
 11778  5dee a8                                  tay                                       ;; @@5dee 168
 11779  5def a571                                lda facov                                ; set facov ;; @@5def 168
 11780  5df1 5601                                lsr 1,x                                  ; gets 0 in the MSB ;; @@5df1 168
 11781  5df3 20fe5e                              jsr rolshf                               ; do the rolling ;; @@5df3 168
 11782                           ;; @@5df6 168
 11783  5df6 7f7057             fadd4            bbr7 arisgn,fadd2                        ; get resulting sign and if positive, add. carry is clear ;; @@5df6 168
 11784  5df9 a063                                ldy #facexp                               ;; @@5df9 168
 11785  5dfb e06a                                cpx #argexp                              ; fac is bigger ;; @@5dfb 168
 11786  5dfd f002                                beq _local_1167_10                        ;; @@5dfd 168
 11787  5dff a06a                                ldy #argexp                              ; arg is bigger ;; @@5dff 168
 11788                           ;; @@5e01 168
 11789  5e01 38                 _local_1167_10   sec                                      ; subit. ;; @@5e01 168
 11790  5e02 49ff                                eor #$ff                                  ;; @@5e02 168
 11791  5e04 6558                                adc oldov                                 ;; @@5e04 168
 11792  5e06 8571                                sta facov                                 ;; @@5e06 168
 11793  5e08 b90400                              lda 4,y                                   ;; @@5e08 168
 11794  5e0b f504                                sbc 4,x                                   ;; @@5e0b 168
 11795  5e0d 8567                                sta faclo                                 ;; @@5e0d 168
 11796  5e0f b90300                              lda 3,y                                   ;; @@5e0f 168
 11797  5e12 f503                                sbc 3,x                                   ;; @@5e12 168
 11798  5e14 8566                                sta facmo                                 ;; @@5e14 168
 11799  5e16 b90200                              lda 2,y                                   ;; @@5e16 168
 11800  5e19 f502                                sbc 2,x                                   ;; @@5e19 168
 11801  5e1b 8565                                sta facmoh                                ;; @@5e1b 168
 11802  5e1d b90100                              lda 1,y                                   ;; @@5e1d 168
 11803  5e20 f501                                sbc 1,x                                   ;; @@5e20 168
 11804  5e22 8564                                sta facho                                 ;; @@5e22 168
 11805                           ;; @@5e24 168
 11806  5e24 b003               fadflt           bcs normal                               ; here if signs differ. if carry, FAC is set ok ;; @@5e24 169
 11807  5e26 20995e                              jsr negfac                               ; negate (FAC) ;; @@5e26 169
 11808                           ;; @@5e29 169
 11809  5e29 a000               normal           ldy #0                                    ;; @@5e29 169
 11810  5e2b 98                                  tya                                       ;; @@5e2b 169
 11811  5e2c 18                                  clc                                       ;; @@5e2c 169
 11812                           ;; @@5e2d 169
 11813  5e2d a664               _local_1168_10   ldx facho                                 ;; @@5e2d 169
 11814  5e2f d049                                bne norm1                                 ;; @@5e2f 169
 11815  5e31 a665                                ldx facho+1                              ; shift 8 bits at a time for speed ;; @@5e31 169
 11816  5e33 8664                                stx facho                                 ;; @@5e33 169
 11817  5e35 a666                                ldx facmoh+1                              ;; @@5e35 169
 11818  5e37 8665                                stx facmoh                                ;; @@5e37 169
 11819  5e39 a667                                ldx facmo+1                               ;; @@5e39 169
 11820  5e3b 8666                                stx facmo                                 ;; @@5e3b 169
 11821  5e3d a671                                ldx facov                                 ;; @@5e3d 169
 11822  5e3f 8667                                stx faclo                                 ;; @@5e3f 169
 11823  5e41 8471                                sty facov                                 ;; @@5e41 169
 11824  5e43 6908                                adc #8                                    ;; @@5e43 169
 11825  5e45 c920                                cmp #32                                   ;; @@5e45 169
 11826  5e47 d0e4                                bne _local_1168_10                        ;; @@5e47 169
 11827                           ;; @@5e49 169
 11828  5e49 a900               zerofc           lda #0                                   ; not needed by NORMAL, but by others ;; @@5e49 170
 11829  5e4b 8563               zerof1           sta facexp                               ; number must be zero ;; @@5e4b 170
 11830  5e4d 8568               zeroml           sta facsgn                               ; make sign positive ;; @@5e4d 170
 11831  5e4f 60                 zerrts           rts                                      ; all done ;; @@5e4f 170
 11832                           ;; @@5e50 170
 11833                           ;; @@5e50 170
 11834  5e50 6558               fadd2            adc oldov                                 ;; @@5e50 170
 11835  5e52 8571                                sta facov                                 ;; @@5e52 170
 11836  5e54 a567                                lda faclo                                 ;; @@5e54 170
 11837  5e56 656e                                adc arglo                                 ;; @@5e56 170
 11838  5e58 8567                                sta faclo                                 ;; @@5e58 170
 11839  5e5a a566                                lda facmo                                 ;; @@5e5a 170
 11840  5e5c 656d                                adc argmo                                 ;; @@5e5c 170
 11841  5e5e 8566                                sta facmo                                 ;; @@5e5e 170
 11842  5e60 a565                                lda facmoh                                ;; @@5e60 170
 11843  5e62 656c                                adc argmoh                                ;; @@5e62 170
 11844  5e64 8565                                sta facmoh                                ;; @@5e64 170
 11845  5e66 a564                                lda facho                                 ;; @@5e66 170
 11846  5e68 656b                                adc argho                                 ;; @@5e68 170
 11847  5e6a 8564                                sta facho                                 ;; @@5e6a 170
 11848  5e6c 8019                                bra squeez                               ; go round if signs same ;; @@5e6c 170
 11849                           ;; @@5e6e 170
 11850                           ;; @@5e6e 170
 11851  5e6e 6901               norm2            adc #1                                   ; decrement shift counter ;; @@5e6e 170
 11852  5e70 0671                                asl facov                                ; shift all left one bit ;; @@5e70 170
 11853  5e72 2667                                rol faclo                                 ;; @@5e72 170
 11854  5e74 2666                                rol facmo                                 ;; @@5e74 170
 11855  5e76 2665                                rol facmoh                                ;; @@5e76 170
 11856  5e78 2664                                rol facho                                 ;; @@5e78 170
 11857                           ;; @@5e7a 170
 11858  5e7a 10f2               norm1            bpl norm2                                ; if msb=0 shift again ;; @@5e7a 170
 11859  5e7c 38                                  sec                                       ;; @@5e7c 170
 11860  5e7d e563                                sbc facexp                                ;; @@5e7d 170
 11861  5e7f b0c8                                bcs zerofc                                ;; @@5e7f 170
 11862  5e81 49ff                                eor #$ff                                  ;; @@5e81 170
 11863  5e83 6901                                adc #1                                   ; complement ;; @@5e83 170
 11864  5e85 8563                                sta facexp                                ;; @@5e85 170
 11865                           ;; @@5e87 170
 11866  5e87 900f               squeez           bcc rndrts                               ; bits to shift? ;; @@5e87 170
 11867  5e89 e663               rndshf           inc facexp                                ;; @@5e89 170
 11868  5e8b f3b9cf                              +lbeq overr                               ;; @@5e8b 170
 11869  5e8e 6664                                ror facho                                 ;; @@5e8e 170
 11870  5e90 6665                                ror facmoh                                ;; @@5e90 170
 11871  5e92 6666                                ror facmo                                 ;; @@5e92 170
 11872  5e94 6667                                ror faclo                                 ;; @@5e94 170
 11873  5e96 6671                                ror facov                                 ;; @@5e96 170
 11874  5e98 60                 rndrts           rts                                      ; all done adding ;; @@5e98 170
 11875                           ;; @@5e99 170
 11876                           ;; @@5e99 170
 11877  5e99 a568               negfac           lda facsgn                                ;; @@5e99 170
 11878  5e9b 49ff                                eor #$ff                                 ; complement FAC entirely ;; @@5e9b 170
 11879  5e9d 8568                                sta facsgn                                ;; @@5e9d 170
 11880                           ;; @@5e9f 170
 11881  5e9f a564               negfch           lda facho                                 ;; @@5e9f 170
 11882  5ea1 49ff                                eor #$ff                                 ; complement just the number ;; @@5ea1 170
 11883  5ea3 8564                                sta facho                                 ;; @@5ea3 170
 11884  5ea5 a565                                lda facmoh                                ;; @@5ea5 170
 11885  5ea7 49ff                                eor #$ff                                  ;; @@5ea7 170
 11886  5ea9 8565                                sta facmoh                                ;; @@5ea9 170
 11887  5eab a566                                lda facmo                                 ;; @@5eab 170
 11888  5ead 49ff                                eor #$ff                                  ;; @@5ead 170
 11889  5eaf 8566                                sta facmo                                 ;; @@5eaf 170
 11890  5eb1 a567                                lda faclo                                 ;; @@5eb1 170
 11891  5eb3 49ff                                eor #$ff                                  ;; @@5eb3 170
 11892  5eb5 8567                                sta faclo                                 ;; @@5eb5 170
 11893  5eb7 a571                                lda facov                                 ;; @@5eb7 170
 11894  5eb9 49ff                                eor #$ff                                  ;; @@5eb9 170
 11895  5ebb 8571                                sta facov                                 ;; @@5ebb 170
 11896  5ebd e671                                inc facov                                 ;; @@5ebd 170
 11897  5ebf d00e                                bne incfrt                                ;; @@5ebf 170
 11898                           ;; @@5ec1 170
 11899  5ec1 e667               incfac           inc faclo                                 ;; @@5ec1 170
 11900  5ec3 d00a                                bne incfrt                                ;; @@5ec3 170
 11901  5ec5 e666                                inc facmo                                 ;; @@5ec5 170
 11902  5ec7 d006                                bne incfrt                               ; if no carry, return ;; @@5ec7 170
 11903  5ec9 e665                                inc facmoh                                ;; @@5ec9 170
 11904  5ecb d002                                bne incfrt                                ;; @@5ecb 170
 11905  5ecd e664                                inc facho                                ; carry complement ;; @@5ecd 170
 11906  5ecf 60                 incfrt           rts                                       ;; @@5ecf 170
 11907                           ;; @@5ed0 170
 11908                           ;; @@5ed0 170
 11909                          ; SHIFTR shifts (x+1:x+3) (-a) bits right.  Shifts bits to start with ;; @@5ed0 170
 11910                          ; if possible. ;; @@5ed0 170
 11911                           ;; @@5ed0 170
 11912  5ed0 a227               mulshf           ldx #resho-1                             ; entry point for multiplier ;; @@5ed0 170
 11913  5ed2 b404               shftr2           ldy 4,x                                  ; shift bits first ;; @@5ed2 170
 11914  5ed4 8471                                sty facov                                 ;; @@5ed4 170
 11915  5ed6 b403                                ldy 3,x                                   ;; @@5ed6 170
 11916  5ed8 9404                                sty 4,x                                   ;; @@5ed8 170
 11917  5eda b402                                ldy 2,x                                  ; get mo ;; @@5eda 170
 11918  5edc 9403                                sty 3,x                                  ; store lo ;; @@5edc 170
 11919  5ede b401                                ldy 1,x                                  ; get ho ;; @@5ede 170
 11920  5ee0 9402                                sty 2,x                                  ; store mo ;; @@5ee0 170
 11921  5ee2 acd702                              ldy bits                                  ;; @@5ee2 170
 11922  5ee5 9401                                sty 1,x                                  ; store ho ;; @@5ee5 170
 11923                           ;; @@5ee7 170
 11924  5ee7 6908               shiftr           adc #8                                    ;; @@5ee7 170
 11925  5ee9 30e7                                bmi shftr2                                ;; @@5ee9 170
 11926  5eeb f0e5                                beq shftr2                                ;; @@5eeb 170
 11927  5eed e908                                sbc #8                                   ; c can be either 1,0 and it works! ;; @@5eed 170
 11928  5eef a8                                  tay                                       ;; @@5eef 170
 11929  5ef0 a571                                lda facov                                 ;; @@5ef0 170
 11930  5ef2 b014                                bcs shftrt                               ; equiv to beq here ;; @@5ef2 170
 11931                           ;; @@5ef4 170
 11932  5ef4 1601               shftr3           asl 1,x                                   ;; @@5ef4 170
 11933  5ef6 9002                                bcc _local_1169_10                        ;; @@5ef6 170
 11934  5ef8 f601                                inc 1,x                                   ;; @@5ef8 170
 11935  5efa 7601               _local_1169_10   ror 1,x                                   ;; @@5efa 170
 11936  5efc 7601                                ror 1,x                                  ; yes, two of them ;; @@5efc 170
 11937                           ;; @@5efe 170
 11938  5efe 7602               rolshf           ror 2,x                                   ;; @@5efe 171
 11939  5f00 7603                                ror 3,x                                   ;; @@5f00 171
 11940  5f02 7604                                ror 4,x                                  ; one more time ;; @@5f02 171
 11941  5f04 6a                                  ror                                       ;; @@5f04 171
 11942  5f05 c8                                  iny                                       ;; @@5f05 171
 11943  5f06 d0ec                                bne shftr3                               ; $$$ (most expensive!!!) ;; @@5f06 171
 11944                           ;; @@5f08 171
 11945  5f08 18                 shftrt           clc                                      ; clear output of FACOV ;; @@5f08 171
 11946  5f09 60                                  rts                                       ;; @@5f09 171
 11947                           ;; @@5f0a 171
 11948                          ;.end ;; @@5f0a 171
 11949                          ; .page ;; @@5f0a 171
 11950                          ; .subttl Floating Point Math Package (CODE19) ;; @@5f0a 171
 11951                           ;; @@5f0a 171
 11952                          ; Constants used by LOG, EXP, TRIG, and others. ;; @@5f0a 171
 11953                           ;; @@5f0a 171
 11954  5f0a 7f00000000         fr4              !text 127,0,0,0,0                        ; 1/4 ;; @@5f0a 171
 11955  5f0f 8080000000         neghlf           !text 128,128,0,0,0                      ; -0.5 ;; @@5f0f 171
 11956  5f14 8000000000         fhalf            !text 128,0,0,0,0                        ; 0.5 ;; @@5f14 171
 11957  5f19 8420000000         tenc             !text 132,32,0,0,0                       ; 10.0 ;; @@5f19 171
 11958  5f1e 82490fdaa1         pival            !text 130,73,15,218,161                  ; pi ;; @@5f1e 171
 11959  5f23 81490fdaa2         pi2              !text 129,73,15,218,162                  ; pi/2 ;; @@5f23 171
 11960  5f28 83490fdaa2         twopi            !text 131,73,15,218,162                  ; pi*2 ;; @@5f28 171
 11961                           ;; @@5f2d 171
 11962  5f2d 9b3ebc1ffd         n0999            !text $9b,$3e,$bc,$1f,$fd                 ;; @@5f2d 171
 11963  5f32 9e6e6b27fd         n9999            !text $9e,$6e,$6b,$27,$fd                 ;; @@5f32 171
 11964  5f37 9e6e6b2800         nmil             !text $9e,$6e,$6b,$28,$00                 ;; @@5f37 171
 11965                           ;; @@5f3c 171
 11966                          foutbl                                                    ; powers of 10 ;; @@5f3c 171
 11967  5f3c fa0a1f00                            !text 250,10,31,0                        ; -100,000,000 ;; @@5f3c 171
 11968  5f40 00989680                            !text 0,152,150,128                      ; 10,000,000 ;; @@5f40 171
 11969  5f44 fff0bdc0                            !text 255,240,189,192                    ; -1,000,000 ;; @@5f44 171
 11970  5f48 000186a0                            !text 0,1,134,160                        ; 100,000 ;; @@5f48 171
 11971  5f4c ffffd8f0                            !text 255,255,216,240                    ; -10,000 ;; @@5f4c 171
 11972  5f50 000003e8                            !text 0,0,3,232                          ; 1,000 ;; @@5f50 171
 11973  5f54 ffffff9c                            !text 255,255,255,156                    ; -100 ;; @@5f54 171
 11974  5f58 0000000a                            !text 0,0,0,10                           ; 10 ;; @@5f58 171
 11975  5f5c ffffffff                            !text 255,255,255,255                    ; -1 ;; @@5f5c 171
 11976                          fdcend                                                     ;; @@5f60 171
 11977                           ;; @@5f60 171
 11978                          ; .byte @377,@337,@012,@200 ;-2,160,000 for time converter removed [901014] ;; @@5f60 171
 11979                          ; .byte @000,@003,@113,@300 ;   216,000 ;; @@5f60 171
 11980                          ; .byte @377,@377,@163,@140 ;   -36,000 ;; @@5f60 171
 11981                          ; .byte @000,@000,@016,@020 ;     3,600 ;; @@5f60 171
 11982                          ; .byte @377,@377,@375,@250 ;      -600 ;; @@5f60 171
 11983                          ; .byte @000,@000,@000,@074 ;        60 ;; @@5f60 171
 11984                          ;timend ;; @@5f60 171
 11985                           ;; @@5f60 171
 11986  5f60 03                 logcn2           !text 3                                  ; degree-1 ;; @@5f60 171
 11987  5f61 7f5e56cb79                          !text 127,94,86,203,121                  ; 0.43425594188 ;; @@5f61 171
 11988  5f66 80139b0b64                          !text 128,19,155,11,100                  ; 0.57658454134 ;; @@5f66 171
 11989  5f6b 8076389316                          !text 128,118,56,147,22                  ; 0.96180075921 ;; @@5f6b 171
 11990  5f70 8238aa3b20                          !text 130,56,170,59,32                   ; 2.8853900728 ;; @@5f70 171
 11991                           ;; @@5f75 171
 11992  5f75 07                 expcon           !text 7                                  ; degree-1 ;; @@5f75 171
 11993  5f76 7134583e56                          !text 113,52,88,62,86                    ; 0.000021498763697 ;; @@5f76 171
 11994  5f7b 74167eb31b                          !text 116,22,126,179,27                  ; 0.00014352314036 ;; @@5f7b 171
 11995  5f80 772feee385                          !text 119,47,238,227,133                 ; 0.0013422634824 ;; @@5f80 171
 11996  5f85 7a1d841c2a                          !text 122,29,132,28,42                   ; 0.0096140170199 ;; @@5f85 171
 11997  5f8a 7c6359580a                          !text 124,99,89,88,10                    ; 0.055505126860 ;; @@5f8a 171
 11998  5f8f 7e75fde7c6                          !text 126,117,253,231,198                ; 0.24022638462 ;; @@5f8f 171
 11999  5f94 8031721810                          !text 128,49,114,24,16                   ; 0.69314718600 ;; @@5f94 171
 12000  5f99 8100000000         fone             !text 129,0,0,0,0                        ; 1.0 ;; @@5f99 171
 12001                           ;; @@5f9e 171
 12002  5f9e 8138aa3b29         logeb2           !text 129,56,170,59,41                   ; log(e) base 2 ;; @@5f9e 171
 12003  5fa3 803504f334         sqr05            !text 128,53,4,243,52                    ; 0.707106781 sqr(0.5) ;; @@5fa3 171
 12004  5fa8 813504f334         sqr20            !text 129,53,4,243,52                    ; 1.41421356 sqr(2.0) ;; @@5fa8 171
 12005  5fad 80317217f8         log2             !text 128,49,114,23,248                  ; 0.693147181 ln(2) ;; @@5fad 171
 12006                           ;; @@5fb2 171
 12007                           ;; @@5fb2 171
 12008  5fb2 05                 sincon           !text 5                                  ; degree-1 trig ;; @@5fb2 171
 12009  5fb3 84e61a2d1b                          !text 132,230,26,45,27                    ;; @@5fb3 171
 12010  5fb8 862807fbf8                          !text 134,40,7,251,248                    ;; @@5fb8 171
 12011  5fbd 8799688901                          !text 135,153,104,137,1                   ;; @@5fbd 171
 12012  5fc2 872335dfe1                          !text 135,35,53,223,225                   ;; @@5fc2 171
 12013  5fc7 86a55de728                          !text 134,165,93,231,40                   ;; @@5fc7 171
 12014  5fcc 83490fdaa2                          !text 131,73,15,218,162                   ;; @@5fcc 171
 12015                           ;; @@5fd1 171
 12016  5fd1 0b                 atncon           !text 11                                 ; degree-1 ;; @@5fd1 171
 12017  5fd2 76b383bdd3                          !text 118,179,131,189,211                 ;; @@5fd2 171
 12018  5fd7 791ef4a6f5                          !text 121,30,244,166,245                  ;; @@5fd7 171
 12019  5fdc 7b83fcb010                          !text 123,131,252,176,16                  ;; @@5fdc 171
 12020  5fe1 7c0c1f67ca                          !text 124,12,31,103,202                   ;; @@5fe1 171
 12021  5fe6 7cde53cbc1                          !text 124,222,83,203,193                  ;; @@5fe6 171
 12022  5feb 7d1464704c                          !text 125,20,100,112,76                   ;; @@5feb 171
 12023  5ff0 7db7ea517a                          !text 125,183,234,81,122                  ;; @@5ff0 171
 12024  5ff5 7d6330887e                          !text 125,99,48,136,126                   ;; @@5ff5 171
 12025  5ffa 7e9244993a                          !text 126,146,68,153,58                   ;; @@5ffa 171
 12026  5fff 7e4ccc91c7                          !text 126,76,204,145,199                  ;; @@5fff 171
 12027  6004 7faaaaaa13                          !text 127,170,170,170,19                  ;; @@6004 171
 12028  6009 8100000000                          !text 129,0,0,0,0                         ;; @@6009 171
 12029                           ;; @@600e 171
 12030                          ; .page ;; @@600e 171
 12031                          ; Natural Log Function ;; @@600e 171
 12032                          ; ;; @@600e 171
 12033                          ; Calculation is by   LN(f*2^n) = (n+LOG2(f))*LN(2) ;; @@600e 171
 12034                          ; An approximation polynomial is used to calculate LOG2(f). ;; @@600e 171
 12035                           ;; @@600e 171
 12036                           ;; @@600e 171
 12037  600e 20c162             log              jsr sign                                 ; is it positive? ;; @@600e 171
 12038  6011 f3eaf1                              +lbeq fcerr                              ; can't tolerate neg or zero ;; @@6011 171
 12039                           ;; @@6014 171
 12040  6014 a563                                lda facexp                               ; get exponent into (a) ;; @@6014 171
 12041  6016 e97f                                sbc #$7f                                 ; remove bias (carry is off) ;; @@6016 171
 12042  6018 48                                  pha                                      ; save exponent a while ;; @@6018 171
 12043  6019 a980                                lda #$80                                  ;; @@6019 171
 12044  601b 8563                                sta facexp                               ; result is FAC in range (0.5,1) ;; @@601b 171
 12045  601d a9a3                                lda #<sqr05                              ; get pointer to sqr(0.5) ;; @@601d 171
 12046  601f a05f                                ldy #>sqr05                               ;; @@601f 171
 12047  6021 205160                              jsr romadd                                ;; @@6021 171
 12048  6024 a9a8                                lda #<sqr20                               ;; @@6024 171
 12049  6026 a05f                                ldy #>sqr20                               ;; @@6026 171
 12050  6028 205d60                              jsr romdiv                                ;; @@6028 171
 12051  602b a999                                lda #<fone                                ;; @@602b 171
 12052  602d a05f                                ldy #>fone                                ;; @@602d 171
 12053  602f 205760                              jsr romsub                                ;; @@602f 171
 12054  6032 a960                                lda #<logcn2                              ;; @@6032 171
 12055  6034 a05f                                ldy #>logcn2                              ;; @@6034 171
 12056  6036 205a66                              jsr polyx                                ; evaluate approximation polynomial ;; @@6036 171
 12057  6039 a90f                                lda #<neghlf                             ; add in last constant ;; @@6039 171
 12058  603b a05f                                ldy #>neghlf                              ;; @@603b 171
 12059  603d 205160                              jsr romadd                                ;; @@603d 171
 12060  6040 68                                  pla                                      ; get exponent back ;; @@6040 171
 12061  6041 201464                              jsr finlog                                ;; @@6041 171
 12062  6044 a9ad                                lda #<log2                               ; multiply result by ln(2) ;; @@6044 171
 12063  6046 a05f                                ldy #>log2                                ;; @@6046 171
 12064                           ;; @@6048 171
 12065                           ;; @@6048 171
 12066  6048 20cc60             rommlt           jsr romupk                                ;; @@6048 171
 12067  604b 8023                                bra fmultt                               ; multiply together ;; @@604b 171
 12068                           ;; @@604d 171
 12069                           ;; @@604d 171
 12070  604d a914               faddh            lda #<fhalf                               ;; @@604d 171
 12071  604f a05f                                ldy #>fhalf                               ;; @@604f 171
 12072                           ;; @@6051 171
 12073  6051 20cc60             romadd           jsr romupk                                ;; @@6051 171
 12074  6054 8367fd                              +lbra faddt                               ;; @@6054 171
 12075                           ;; @@6057 171
 12076                           ;; @@6057 171
 12077  6057 20cc60             romsub           jsr romupk                                ;; @@6057 171
 12078  605a 834bfd                              +lbra fsubt                               ;; @@605a 171
 12079                           ;; @@605d 171
 12080                           ;; @@605d 171
 12081  605d 20cc60             romdiv           jsr romupk                                ;; @@605d 171
 12082  6060 832201                              +lbra fdivt                               ;; @@6060 171
 12083                           ;; @@6063 171
 12084                          ; .page ;; @@6063 171
 12085                          ; Multiplication        FAC = ARG*FAC ;; @@6063 171
 12086                           ;; @@6063 171
 12087                          fmultt_c65                                                ; [910402] ;; @@6063 171
 12088  6063 a56f                                lda argsgn                                ;; @@6063 171
 12089  6065 4568                                eor facsgn                                ;; @@6065 171
 12090  6067 8570                                sta arisgn                               ; resultant sign ;; @@6067 171
 12091  6069 a663                                ldx facexp                               ; set signs on thing to multiply ;; @@6069 171
 12092  606b 8003                                bra fmultt                               ; go multiply ;; @@606b 171
 12093                           ;; @@606d 171
 12094  606d 20f760             fmult            jsr conupk                               ; unpack the constant into arg for use ;; @@606d 171
 12095                           ;; @@6070 171
 12096  6070 f059               fmultt           beq multrt                               ; if FAC=0, return.  FAC is set ;; @@6070 171
 12097  6072 202761                              jsr muldiv                               ; fix up the exponents ;; @@6072 171
 12098  6075 a900                                lda #0                                   ; to clear result ;; @@6075 171
 12099  6077 8528                                sta resho                                 ;; @@6077 171
 12100  6079 8529                                sta resmoh                                ;; @@6079 171
 12101  607b 852a                                sta resmo                                 ;; @@607b 171
 12102  607d 852b                                sta reslo                                 ;; @@607d 171
 12103  607f a571                                lda facov                                 ;; @@607f 171
 12104  6081 209e60                              jsr mltpl1                               ; *** THIS fixes the DBL-0 bug without causing other grief!  C128-04 FAB ;; @@6081 171
 12105  6084 a567                                lda faclo                                ; multiply arg by faclo ;; @@6084 171
 12106  6086 209b60                              jsr mltply                                ;; @@6086 171
 12107  6089 a566                                lda facmo                                ; multiply arg by facmo ;; @@6089 171
 12108  608b 209b60                              jsr mltply                                ;; @@608b 171
 12109  608e a565                                lda facmoh                                ;; @@608e 171
 12110  6090 209e60                              jsr mltpl1                               ; *** THIS fixes the DBL-0 bug without causing other grief!  C128-04 FAB ;; @@6090 171
 12111  6093 a564                                lda facho                                ; multiply arg by facho ;; @@6093 171
 12112  6095 209e60                              jsr mltpl1                                ;; @@6095 171
 12113  6098 836001                              +lbra movfr                              ; move result into FAC ;; @@6098 171
 12114                           ;; @@609b 171
 12115                          ; .page ;; @@609b 171
 12116  609b f332fe             mltply           +lbeq mulshf                             ; normalize result and return. shift result right 1 byte.  exits with .c=0 ;; @@609b 171
 12117  609e 4a                 mltpl1           lsr                                       ;; @@609e 171
 12118  609f 0980                                ora #$80                                 ; will flag end of shifting ;; @@609f 171
 12119                           ;; @@60a1 171
 12120  60a1 a8                 _local_1170_10   tay                                       ;; @@60a1 171
 12121  60a2 9019                                bcc _local_1170_20                       ; if mult bit=0, just shift ;; @@60a2 171
 12122  60a4 18                                  clc                                       ;; @@60a4 171
 12123  60a5 a52b                                lda reslo                                 ;; @@60a5 171
 12124  60a7 656e                                adc arglo                                 ;; @@60a7 171
 12125  60a9 852b                                sta reslo                                 ;; @@60a9 171
 12126  60ab a52a                                lda resmo                                 ;; @@60ab 171
 12127  60ad 656d                                adc argmo                                 ;; @@60ad 171
 12128  60af 852a                                sta resmo                                 ;; @@60af 171
 12129  60b1 a529                                lda resmoh                                ;; @@60b1 171
 12130  60b3 656c                                adc argmoh                                ;; @@60b3 171
 12131  60b5 8529                                sta resmoh                                ;; @@60b5 171
 12132  60b7 a528                                lda resho                                 ;; @@60b7 171
 12133  60b9 656b                                adc argho                                 ;; @@60b9 171
 12134  60bb 8528                                sta resho                                 ;; @@60bb 171
 12135                           ;; @@60bd 171
 12136  60bd 6628               _local_1170_20   ror resho                                 ;; @@60bd 171
 12137  60bf 6629                                ror resmoh                                ;; @@60bf 171
 12138  60c1 662a                                ror resmo                                 ;; @@60c1 171
 12139  60c3 662b                                ror reslo                                 ;; @@60c3 171
 12140  60c5 6671                                ror facov                                ; save for rounding ;; @@60c5 171
 12141  60c7 98                                  tya                                       ;; @@60c7 171
 12142  60c8 4a                                  lsr                                      ; clear msb so we get a closer to 0 ;; @@60c8 171
 12143  60c9 d0d6                                bne _local_1170_10                       ; slow as a turtle ;; @@60c9 171
 12144                           ;; @@60cb 171
 12145  60cb 60                 multrt           rts                                       ;; @@60cb 172
 12146                           ;; @@60cc 172
 12147                          ; .page ;; @@60cc 172
 12148                          ; Unpack a ROM constant into the FAC ;; @@60cc 172
 12149                           ;; @@60cc 172
 12150  60cc 8524               romupk           sta index1                                ;; @@60cc 172
 12151  60ce 8425                                sty index1+1                              ;; @@60ce 172
 12152  60d0 a004                                ldy #4                                    ;; @@60d0 172
 12153  60d2 b124                                lda (index1),y                           ; it's in ROM, so ok to use ind ;; @@60d2 172
 12154  60d4 856e                                sta arglo                                 ;; @@60d4 172
 12155  60d6 88                                  dey                                       ;; @@60d6 172
 12156  60d7 b124                                lda (index1),y                            ;; @@60d7 172
 12157  60d9 856d                                sta argmo                                 ;; @@60d9 172
 12158  60db 88                                  dey                                       ;; @@60db 172
 12159  60dc b124                                lda (index1),y                            ;; @@60dc 172
 12160  60de 856c                                sta argmoh                                ;; @@60de 172
 12161  60e0 88                                  dey                                       ;; @@60e0 172
 12162  60e1 b124                                lda (index1),y                            ;; @@60e1 172
 12163  60e3 856f                                sta argsgn                                ;; @@60e3 172
 12164  60e5 4568                                eor facsgn                                ;; @@60e5 172
 12165  60e7 8570                                sta arisgn                                ;; @@60e7 172
 12166  60e9 a56f                                lda argsgn                                ;; @@60e9 172
 12167  60eb 0980                                ora #$80                                  ;; @@60eb 172
 12168  60ed 856b                                sta argho                                 ;; @@60ed 172
 12169  60ef 88                                  dey                                       ;; @@60ef 172
 12170  60f0 b124                                lda (index1),y                            ;; @@60f0 172
 12171  60f2 856a                                sta argexp                                ;; @@60f2 172
 12172  60f4 a563                                lda facexp                               ; sets code of facexp ;; @@60f4 172
 12173  60f6 60                                  rts                                       ;; @@60f6 172
 12174                           ;; @@60f7 172
 12175                          ; .page ;; @@60f7 172
 12176                          ; Unpack a RAM constant into the FAC ;; @@60f7 172
 12177                           ;; @@60f7 172
 12178  60f7 8524               conupk           sta index1                                ;; @@60f7 172
 12179  60f9 8425                                sty index1+1                              ;; @@60f9 172
 12180                           ;; @@60fb 172
 12181                          ; lda mmu_config_reg ;; @@60fb 172
 12182                          ; pha   ;preserve caller's memory config???? ;; @@60fb 172
 12183                           ;; @@60fb 172
 12184  60fb a004                                ldy #4                                    ;; @@60fb 172
 12185  60fd 20d522                              jsr indin1_ram1                           ;; @@60fd 172
 12186  6100 856e                                sta arglo                                 ;; @@6100 172
 12187  6102 88                                  dey                                       ;; @@6102 172
 12188  6103 20d522                              jsr indin1_ram1                           ;; @@6103 172
 12189  6106 856d                                sta argmo                                 ;; @@6106 172
 12190  6108 88                                  dey                                       ;; @@6108 172
 12191  6109 20d522                              jsr indin1_ram1                           ;; @@6109 172
 12192  610c 856c                                sta argmoh                                ;; @@610c 172
 12193  610e 88                                  dey                                       ;; @@610e 172
 12194  610f 20d522                              jsr indin1_ram1                           ;; @@610f 172
 12195  6112 856f                                sta argsgn                                ;; @@6112 172
 12196  6114 4568                                eor facsgn                                ;; @@6114 172
 12197  6116 8570                                sta arisgn                                ;; @@6116 172
 12198  6118 a56f                                lda argsgn                                ;; @@6118 172
 12199  611a 0980                                ora #$80                                  ;; @@611a 172
 12200  611c 856b                                sta argho                                 ;; @@611c 172
 12201  611e 88                                  dey                                       ;; @@611e 172
 12202  611f 20d522                              jsr indin1_ram1                           ;; @@611f 172
 12203  6122 856a                                sta argexp                                ;; @@6122 172
 12204                           ;; @@6124 172
 12205                          ; pla ;; @@6124 172
 12206                          ; sta mmu_config_reg ;restore caller's memory config???? ;; @@6124 172
 12207                           ;; @@6124 172
 12208  6124 a563                                lda facexp                               ; set codes of facexp ;; @@6124 172
 12209  6126 60                                  rts                                       ;; @@6126 172
 12210                           ;; @@6127 172
 12211                          ; .page ;; @@6127 172
 12212                          ; Check special cases and add exponents for FMULT, FDIV ;; @@6127 172
 12213                           ;; @@6127 172
 12214                          muldiv                                                     ;; @@6127 172
 12215  6127 a56a                                lda argexp                               ; exp of arg=0? ;; @@6127 172
 12216  6129 f01f               mldexp           beq zeremv                               ; so we get zero exponent ;; @@6129 172
 12217  612b 18                                  clc                                       ;; @@612b 172
 12218  612c 6563                                adc facexp                               ; result is in (a) ;; @@612c 172
 12219  612e 9005                                bcc _local_1171_10                       ; find (c) xor (n) ;; @@612e 172
 12220  6130 3314cd                              +lbmi overr                              ; overflow if bits match ;; @@6130 172
 12221  6133 18                                  clc                                       ;; @@6133 172
 12222  6134 2c                                  !text $2c                                 ;; @@6134 172
 12223                           ;; @@6135 172
 12224  6135 1013               _local_1171_10   bpl zeremv                               ; underflow ;; @@6135 172
 12225  6137 6980                                adc #$80                                 ; add bias ;; @@6137 172
 12226  6139 8563                                sta facexp                                ;; @@6139 172
 12227  613b f30ffd                              +lbeq zeroml                             ; zero the rest of it ;; @@613b 172
 12228  613e a570                                lda arisgn                                ;; @@613e 172
 12229  6140 8568                                sta facsgn                               ; arisgn is result's sign ;; @@6140 172
 12230  6142 60                                  rts                                      ; done ;; @@6142 172
 12231                           ;; @@6143 172
 12232                           ;; @@6143 172
 12233  6143 a568               mldvex           lda facsgn                               ; get sign ;; @@6143 173
 12234  6145 49ff                                eor #$ff                                 ; complement it ;; @@6145 173
 12235  6147 33fdcc                              +lbmi overr                               ;; @@6147 173
 12236                           ;; @@614a 173
 12237  614a 68                 zeremv           pla                                      ; get addr off stack ;; @@614a 173
 12238  614b 68                                  pla                                       ;; @@614b 173
 12239  614c 83fafc                              +lbra zerofc                             ; underflow ;; @@614c 173
 12240                           ;; @@614f 173
 12241                          ; .page ;; @@614f 173
 12242                          ; Multiply FAC by 10 ;; @@614f 173
 12243                           ;; @@614f 173
 12244  614f 20a362             mul10            jsr movaf                                ; copy FAC into ARG ;; @@614f 173
 12245  6152 aa                                  tax                                       ;; @@6152 173
 12246  6153 f012                                beq mul10r                               ; if (FAC)=0, got answer ;; @@6153 173
 12247  6155 18                                  clc                                       ;; @@6155 173
 12248  6156 6902                                adc #2                                   ; augment exp by 2 ;; @@6156 173
 12249  6158 b3eccc                              +lbcs overr                              ; overflow ;; @@6158 173
 12250                           ;; @@615b 173
 12251  615b a200               finml6           ldx #0                                    ;; @@615b 173
 12252  615d 8670                                stx arisgn                               ; signs are same ;; @@615d 173
 12253  615f 20c95d                              jsr faddc                                ; add together ;; @@615f 173
 12254  6162 e663                                inc facexp                               ; multiply by two ;; @@6162 173
 12255  6164 f3e0cc                              +lbeq overr                              ; overflow ;; @@6164 173
 12256                           ;; @@6167 173
 12257  6167 60                 mul10r           rts                                       ;; @@6167 173
 12258                           ;; @@6168 173
 12259                          ; .page ;; @@6168 173
 12260  6168 20a362             div10            jsr movaf                                ; move FAC to ARG ;; @@6168 173
 12261  616b a919                                lda #<tenc                                ;; @@616b 173
 12262  616d a05f                                ldy #>tenc                               ; point to constant of 10.0 ;; @@616d 173
 12263  616f a200                                ldx #0                                   ; signs are both positive ;; @@616f 173
 12264                           ;; @@6171 173
 12265  6171 8670               fdivf            stx arisgn                                ;; @@6171 173
 12266  6173 200e62                              jsr movfm                                ; put it into FAC ;; @@6173 173
 12267  6176 800d                                bra fdivt                                 ;; @@6176 173
 12268                           ;; @@6178 173
 12269                          fdivt_c65                                                 ; [910402] ;; @@6178 173
 12270  6178 a56f                                lda argsgn                                ;; @@6178 173
 12271  617a 4568                                eor facsgn                                ;; @@617a 173
 12272  617c 8570                                sta arisgn                               ; resultant sign ;; @@617c 173
 12273  617e a663                                ldx facexp                               ; set signs on thing to divide ;; @@617e 173
 12274  6180 8003                                bra fdivt                                ; go divide ;; @@6180 173
 12275                           ;; @@6182 173
 12276  6182 20f760             fdiv             jsr conupk                               ; unpack constant ;; @@6182 173
 12277  6185 f3bccc             fdivt            +lbeq doverr                             ; can't divide by zero ;; @@6185 173
 12278  6188 20b262                              jsr round                                ; take FACOV into account in FAC ;; @@6188 173
 12279  618b a900                                lda #0                                   ; negate facexp ;; @@618b 173
 12280  618d 38                                  sec                                       ;; @@618d 173
 12281  618e e563                                sbc facexp                                ;; @@618e 173
 12282  6190 8563                                sta facexp                                ;; @@6190 173
 12283  6192 202761                              jsr muldiv                               ; fix up exponents ;; @@6192 173
 12284  6195 e663                                inc facexp                               ; scale it right ;; @@6195 173
 12285  6197 f3adcc                              +lbeq overr                              ; overflow ;; @@6197 173
 12286  619a a2fc                                ldx #$fc                                 ; set up procedure ;; @@619a 173
 12287  619c a901                                lda #1                                    ;; @@619c 173
 12288                           ;; @@619e 173
 12289                          ; .page ;; @@619e 173
 12290                          divide                                                    ; this is the best code in the whole pile ;; @@619e 173
 12291  619e a46b                                ldy argho                                ; see what relation holds ;; @@619e 173
 12292  61a0 c464                                cpy facho                                 ;; @@61a0 173
 12293  61a2 d010                                bne savquo                               ; (c)=0,1. n(c=0)=0. ;; @@61a2 173
 12294  61a4 a46c                                ldy argmoh                                ;; @@61a4 173
 12295  61a6 c465                                cpy facmoh                                ;; @@61a6 173
 12296  61a8 d00a                                bne savquo                                ;; @@61a8 173
 12297  61aa a46d                                ldy argmo                                 ;; @@61aa 173
 12298  61ac c466                                cpy facmo                                 ;; @@61ac 173
 12299  61ae d004                                bne savquo                                ;; @@61ae 173
 12300  61b0 a46e                                ldy arglo                                 ;; @@61b0 173
 12301  61b2 c467                                cpy faclo                                 ;; @@61b2 173
 12302                           ;; @@61b4 173
 12303  61b4 08                 savquo           php                                       ;; @@61b4 173
 12304  61b5 2a                                  rol                                      ; save result ;; @@61b5 173
 12305  61b6 9009                                bcc qshft                                ; if not done, continue ;; @@61b6 173
 12306  61b8 e8                                  inx                                       ;; @@61b8 173
 12307  61b9 952b                                sta reslo,x                               ;; @@61b9 173
 12308  61bb f031                                beq ld100                                 ;; @@61bb 173
 12309  61bd 1033                                bpl divnrm                               ; note this req 1 no ram then access ;; @@61bd 173
 12310  61bf a901                                lda #1                                    ;; @@61bf 173
 12311                           ;; @@61c1 173
 12312  61c1 28                 qshft            plp                                      ; return condition codes ;; @@61c1 173
 12313  61c2 b00e                                bcs divsub                               ; FAC <= ARG ;; @@61c2 173
 12314                           ;; @@61c4 173
 12315  61c4 066e               shfarg           asl arglo                                ; shift ARG one place left ;; @@61c4 173
 12316  61c6 266d                                rol argmo                                 ;; @@61c6 173
 12317  61c8 266c                                rol argmoh                                ;; @@61c8 173
 12318  61ca 266b                                rol argho                                 ;; @@61ca 173
 12319  61cc b0e6                                bcs savquo                               ; save a result of one for this position and divide ;; @@61cc 173
 12320  61ce 30ce                                bmi divide                               ; if msb on, go decide whether to sub ;; @@61ce 173
 12321  61d0 10e2                                bpl savquo                                ;; @@61d0 173
 12322                           ;; @@61d2 173
 12323                          ; .page ;; @@61d2 173
 12324  61d2 a8                 divsub           tay                                      ; notice c must be on here ;; @@61d2 173
 12325  61d3 a56e                                lda arglo                                 ;; @@61d3 173
 12326  61d5 e567                                sbc faclo                                 ;; @@61d5 173
 12327  61d7 856e                                sta arglo                                 ;; @@61d7 173
 12328  61d9 a56d                                lda argmo                                 ;; @@61d9 173
 12329  61db e566                                sbc facmo                                 ;; @@61db 173
 12330  61dd 856d                                sta argmo                                 ;; @@61dd 173
 12331  61df a56c                                lda argmoh                                ;; @@61df 173
 12332  61e1 e565                                sbc facmoh                                ;; @@61e1 173
 12333  61e3 856c                                sta argmoh                                ;; @@61e3 173
 12334  61e5 a56b                                lda argho                                 ;; @@61e5 173
 12335  61e7 e564                                sbc facho                                 ;; @@61e7 173
 12336  61e9 856b                                sta argho                                 ;; @@61e9 173
 12337  61eb 98                                  tya                                       ;; @@61eb 173
 12338  61ec 80d6                                bra shfarg                                ;; @@61ec 173
 12339                           ;; @@61ee 173
 12340                           ;; @@61ee 173
 12341                           ;; @@61ee 173
 12342  61ee a940               ld100            lda #$40                                 ; only want two more bits ;; @@61ee 173
 12343  61f0 80cf                                bra qshft                                ; always branches ;; @@61f0 173
 12344                           ;; @@61f2 173
 12345                           ;; @@61f2 173
 12346                           ;; @@61f2 173
 12347  61f2 0a                 divnrm           asl                                      ; get last two bits into MSB and B6 ;; @@61f2 173
 12348  61f3 0a                                  asl                                       ;; @@61f3 173
 12349  61f4 0a                                  asl                                       ;; @@61f4 173
 12350  61f5 0a                                  asl                                       ;; @@61f5 173
 12351  61f6 0a                                  asl                                       ;; @@61f6 173
 12352  61f7 0a                                  asl                                       ;; @@61f7 173
 12353  61f8 8571                                sta facov                                 ;; @@61f8 173
 12354  61fa 28                                  plp                                       ;; @@61fa 173
 12355                           ;; @@61fb 173
 12356                           ;; @@61fb 173
 12357                          ; .page ;; @@61fb 173
 12358  61fb a528               movfr            lda resho                                ; move result to FAC ;; @@61fb 173
 12359  61fd 8564                                sta facho                                 ;; @@61fd 173
 12360  61ff a529                                lda resmoh                                ;; @@61ff 173
 12361  6201 8565                                sta facmoh                                ;; @@6201 173
 12362  6203 a52a                                lda resmo                                 ;; @@6203 173
 12363  6205 8566                                sta facmo                                 ;; @@6205 173
 12364  6207 a52b                                lda reslo                                ; move lo and sign ;; @@6207 173
 12365  6209 8567                                sta faclo                                 ;; @@6209 173
 12366  620b 831bfc                              +lbra normal                             ; all done ;; @@620b 173
 12367                           ;; @@620e 173
 12368                           ;; @@620e 173
 12369                           ;; @@620e 173
 12370  620e 8524               movfm            sta index1                               ; move memory into FAC from ROM (unpacked) ;; @@620e 173
 12371  6210 8425                                sty index1+1                              ;; @@6210 173
 12372  6212 a004                                ldy #4                                    ;; @@6212 173
 12373  6214 b124                                lda (index1),y                            ;; @@6214 173
 12374  6216 8567                                sta faclo                                 ;; @@6216 173
 12375  6218 88                                  dey                                       ;; @@6218 173
 12376  6219 b124                                lda (index1),y                            ;; @@6219 173
 12377  621b 8566                                sta facmo                                 ;; @@621b 173
 12378  621d 88                                  dey                                       ;; @@621d 173
 12379  621e b124                                lda (index1),y                            ;; @@621e 173
 12380  6220 8565                                sta facmoh                                ;; @@6220 173
 12381  6222 88                                  dey                                       ;; @@6222 173
 12382  6223 b124                                lda (index1),y                            ;; @@6223 173
 12383  6225 8568                                sta facsgn                                ;; @@6225 173
 12384  6227 0980                                ora #$80                                  ;; @@6227 173
 12385  6229 8564                                sta facho                                 ;; @@6229 173
 12386  622b 88                                  dey                                       ;; @@622b 173
 12387  622c b124                                lda (index1),y                            ;; @@622c 173
 12388  622e 8563                                sta facexp                                ;; @@622e 173
 12389  6230 8471                                sty facov                                 ;; @@6230 173
 12390  6232 60                                  rts                                       ;; @@6232 173
 12391                           ;; @@6233 173
 12392                          ; .page ;; @@6233 173
 12393                          ; Move number from FAC to memory ;; @@6233 173
 12394                           ;; @@6233 173
 12395  6233 a25e               mov2f            ldx #tempf2                              ; move from FAC to temp FAC2 ;; @@6233 173
 12396  6235 2c                                  !text $2c                                 ;; @@6235 173
 12397                           ;; @@6236 173
 12398  6236 a259               mov1f            ldx #tempf1                              ; move from FAC to temp FAC1 ;; @@6236 173
 12399                           ;; @@6238 173
 12400  6238 a000                                ldy #0                                    ;; @@6238 173
 12401  623a 20b262             movmf            jsr round                                 ;; @@623a 173
 12402  623d 8624                                stx index1                                ;; @@623d 173
 12403  623f 8425                                sty index1+1                              ;; @@623f 173
 12404  6241 a004                                ldy #4                                    ;; @@6241 173
 12405  6243 a567                                lda faclo                                 ;; @@6243 173
 12406  6245 9124                                sta (index),y                            ; BasePage ;; @@6245 173
 12407  6247 88                                  dey                                       ;; @@6247 173
 12408  6248 a566                                lda facmo                                 ;; @@6248 173
 12409  624a 9124                                sta (index),y                            ; BasePage ;; @@624a 173
 12410  624c 88                                  dey                                       ;; @@624c 173
 12411  624d a565                                lda facmoh                                ;; @@624d 173
 12412  624f 9124                                sta (index),y                            ; BasePage ;; @@624f 173
 12413  6251 88                                  dey                                       ;; @@6251 173
 12414  6252 a568                                lda facsgn                               ; include sign in ho ;; @@6252 173
 12415  6254 097f                                ora #$7f                                  ;; @@6254 173
 12416  6256 2564                                and facho                                 ;; @@6256 173
 12417  6258 9124                                sta (index),y                            ; BasePage ;; @@6258 173
 12418  625a 88                                  dey                                       ;; @@625a 173
 12419  625b a563                                lda facexp                                ;; @@625b 173
 12420  625d 9124                                sta (index),y                            ; BasePage ;; @@625d 173
 12421  625f 8471                                sty facov                                ; zero it since rounded ;; @@625f 173
 12422  6261 60                                  rts                                      ; (y)=0 ;; @@6261 173
 12423                           ;; @@6262 173
 12424                          ; .page ;; @@6262 173
 12425                          movmf_ram1                                                 ;; @@6262 173
 12426  6262 20b262                              jsr round                                 ;; @@6262 173
 12427  6265 8624                                stx index1                                ;; @@6265 173
 12428  6267 8425                                sty index1+1                              ;; @@6267 173
 12429  6269 da                                  phx                                       ;; @@6269 173
 12430  626a a224                                ldx #index                                ;; @@626a 173
 12431  626c a004                                ldy #4                                    ;; @@626c 173
 12432  626e a567                                lda faclo                                 ;; @@626e 173
 12433  6270 20f022                              jsr sta_far_ram1                         ; sta (index),y ;; @@6270 173
 12434  6273 88                                  dey                                       ;; @@6273 173
 12435  6274 a566                                lda facmo                                 ;; @@6274 173
 12436  6276 20f022                              jsr sta_far_ram1                         ; sta (index),y ;; @@6276 173
 12437  6279 88                                  dey                                       ;; @@6279 173
 12438  627a a565                                lda facmoh                                ;; @@627a 173
 12439  627c 20f022                              jsr sta_far_ram1                         ; sta (index),y ;; @@627c 173
 12440  627f 88                                  dey                                       ;; @@627f 173
 12441  6280 a568                                lda facsgn                               ; include sign in ho ;; @@6280 173
 12442  6282 097f                                ora #$7f                                  ;; @@6282 173
 12443  6284 2564                                and facho                                 ;; @@6284 173
 12444  6286 20f022                              jsr sta_far_ram1                         ; sta (index),y ;; @@6286 173
 12445  6289 88                                  dey                                       ;; @@6289 173
 12446  628a a563                                lda facexp                                ;; @@628a 173
 12447  628c 20f022                              jsr sta_far_ram1                         ; sta (index),y ;; @@628c 173
 12448  628f 8471                                sty facov                                ; zero it since rounded ;; @@628f 173
 12449  6291 fa                                  plx                                       ;; @@6291 173
 12450  6292 60                                  rts                                      ; (y)=0 ;; @@6292 173
 12451                           ;; @@6293 173
 12452                          ; .page ;; @@6293 173
 12453  6293 a56f               movfa            lda argsgn                                ;; @@6293 173
 12454                           ;; @@6295 173
 12455  6295 8568               movfa1           sta facsgn                                ;; @@6295 173
 12456                           ;; @@6297 173
 12457  6297 a205                                ldx #5                                    ;; @@6297 173
 12458  6299 b569               _local_1172_1    lda argexp-1,x                            ;; @@6299 173
 12459  629b 9562                                sta facexp-1,x                            ;; @@629b 173
 12460  629d ca                                  dex                                       ;; @@629d 173
 12461  629e d0f9                                bne _local_1172_1                         ;; @@629e 173
 12462  62a0 8671                                stx facov                                 ;; @@62a0 173
 12463  62a2 60                                  rts                                       ;; @@62a2 173
 12464                           ;; @@62a3 173
 12465                           ;; @@62a3 173
 12466  62a3 20b262             movaf            jsr round                                 ;; @@62a3 174
 12467                           ;; @@62a6 174
 12468  62a6 a206               movef            ldx #6                                    ;; @@62a6 174
 12469  62a8 b562               _local_1173_1    lda facexp-1,x                            ;; @@62a8 174
 12470  62aa 9569                                sta argexp-1,x                            ;; @@62aa 174
 12471  62ac ca                                  dex                                       ;; @@62ac 174
 12472  62ad d0f9                                bne _local_1173_1                         ;; @@62ad 174
 12473  62af 8671                                stx facov                                ; zero it since rounded ;; @@62af 174
 12474  62b1 60                 movrts           rts                                       ;; @@62b1 175
 12475                           ;; @@62b2 175
 12476                           ;; @@62b2 175
 12477                          ; .page ;; @@62b2 175
 12478  62b2 a563               round            lda facexp                               ; zero? ;; @@62b2 175
 12479  62b4 f0fb                                beq movrts                               ; yes, done rounding ;; @@62b4 175
 12480  62b6 0671                                asl facov                                ; round? ;; @@62b6 175
 12481  62b8 90f7                                bcc movrts                               ; no, msb off ;; @@62b8 175
 12482                           ;; @@62ba 175
 12483  62ba 20c15e             incrnd           jsr incfac                               ; yes, add one to lsb(FAC) /// entry from EXP ;; @@62ba 175
 12484                          ;note .c=1 since incfac doesn't touch .c ;; @@62bd 175
 12485  62bd f3c9fb                              +lbeq rndshf                             ; carry:   squeeze msb in and rts ;; @@62bd 175
 12486  62c0 60                                  rts                                      ; no carry: rts now ;; @@62c0 175
 12487                           ;; @@62c1 175
 12488                           ;; @@62c1 175
 12489                           ;; @@62c1 175
 12490                          ; Put sign in FAC into (a). ;; @@62c1 175
 12491                           ;; @@62c1 175
 12492  62c1 a563               sign             lda facexp                                ;; @@62c1 175
 12493  62c3 f009                                beq signrt                               ; if number is zero, so is result ;; @@62c3 175
 12494                           ;; @@62c5 175
 12495  62c5 a568               fcsign           lda facsgn                                ;; @@62c5 175
 12496  62c7 2a                 fcomps           rol                                       ;; @@62c7 175
 12497  62c8 a9ff                                lda #$ff                                 ; assume negative ;; @@62c8 175
 12498  62ca b002                                bcs signrt                                ;; @@62ca 175
 12499  62cc a901                                lda #1                                   ; get +1 ;; @@62cc 175
 12500  62ce 60                 signrt           rts                                       ;; @@62ce 175
 12501                           ;; @@62cf 175
 12502                           ;; @@62cf 175
 12503                          ; .page ;; @@62cf 175
 12504                          ; SGN function ;; @@62cf 175
 12505                           ;; @@62cf 175
 12506  62cf 20c162             sgn              jsr sign                                  ;; @@62cf 175
 12507                           ;; @@62d2 175
 12508                          ;float the signed integer in accb ;; @@62d2 175
 12509  62d2 8564               float            sta facho                                ; put (accb) in high order ;; @@62d2 175
 12510  62d4 a900                                lda #0                                    ;; @@62d4 175
 12511  62d6 8565                                sta facho+1                               ;; @@62d6 175
 12512  62d8 a288                                ldx #$88                                 ; get the exponent ;; @@62d8 175
 12513                          ;float the signed number in FAC ;; @@62da 175
 12514                           ;; @@62da 175
 12515                           ;; @@62da 175
 12516  62da a564               floats           lda facho                                 ;; @@62da 175
 12517  62dc 49ff                                eor #$ff                                  ;; @@62dc 175
 12518  62de 2a                                  rol                                      ; get comp of sign in carry ;; @@62de 175
 12519  62df a900               floatc           lda #0                                   ; zero (a) but not carry ;; @@62df 175
 12520  62e1 8567                                sta faclo                                 ;; @@62e1 175
 12521  62e3 8566                                sta facmo                                 ;; @@62e3 175
 12522                           ;; @@62e5 175
 12523  62e5 8663               floatb           stx facexp                                ;; @@62e5 175
 12524  62e7 8571                                sta facov                                 ;; @@62e7 175
 12525  62e9 8568                                sta facsgn                                ;; @@62e9 175
 12526  62eb 8336fb                              +lbra fadflt                              ;; @@62eb 175
 12527                           ;; @@62ee 175
 12528                           ;; @@62ee 175
 12529                           ;; @@62ee 175
 12530                           ;; @@62ee 175
 12531                          ; Absolute value of FAC ;; @@62ee 175
 12532                           ;; @@62ee 175
 12533  62ee 4668               abs              lsr facsgn                                ;; @@62ee 175
 12534  62f0 60                                  rts                                       ;; @@62f0 175
 12535                           ;; @@62f1 175
 12536                           ;; @@62f1 175
 12537                          ; .page ;; @@62f1 175
 12538                          ; Compare two numbers: ;; @@62f1 175
 12539                          ; ;; @@62f1 175
 12540                          ; a=1  if  ARG < FAC ;; @@62f1 175
 12541                          ; a=0  if  ARG = FAC ;; @@62f1 175
 12542                          ; a=-1 if  ARG > FAC ;; @@62f1 175
 12543                           ;; @@62f1 175
 12544  62f1 8526               fcomp            sta index2                                ;; @@62f1 175
 12545  62f3 8427                                sty index2+1                              ;; @@62f3 175
 12546  62f5 a000                                ldy #0                                    ;; @@62f5 175
 12547  62f7 b126                                lda (index2),y                           ; has argexp ;; @@62f7 175
 12548  62f9 c8                                  iny                                      ; bump pointer up ;; @@62f9 175
 12549  62fa aa                                  tax                                      ; save a in x and reset codes ;; @@62fa 175
 12550  62fb f0c4                                beq sign                                  ;; @@62fb 175
 12551  62fd b126                                lda (index2),y                            ;; @@62fd 175
 12552  62ff 4568                                eor facsgn                               ; signs the same ;; @@62ff 175
 12553  6301 30c2                                bmi fcsign                               ; signs differ so result is ;; @@6301 175
 12554  6303 e463                                cpx facexp                               ; sign of FAC again ;; @@6303 175
 12555  6305 d021                                bne _local_1174_10                        ;; @@6305 175
 12556                           ;; @@6307 175
 12557  6307 b126                                lda (index2),y                            ;; @@6307 175
 12558  6309 0980                                ora #$80                                  ;; @@6309 175
 12559  630b c564                                cmp facho                                 ;; @@630b 175
 12560  630d d019                                bne _local_1174_10                        ;; @@630d 175
 12561  630f c8                                  iny                                       ;; @@630f 175
 12562  6310 b126                                lda (index2),y                            ;; @@6310 175
 12563  6312 c565                                cmp facmoh                                ;; @@6312 175
 12564  6314 d012                                bne _local_1174_10                        ;; @@6314 175
 12565  6316 c8                                  iny                                       ;; @@6316 175
 12566  6317 b126                                lda (index2),y                            ;; @@6317 175
 12567  6319 c566                                cmp facmo                                 ;; @@6319 175
 12568  631b d00b                                bne _local_1174_10                        ;; @@631b 175
 12569  631d c8                                  iny                                       ;; @@631d 175
 12570  631e a97f                                lda #$7f                                  ;; @@631e 175
 12571  6320 c571                                cmp facov                                 ;; @@6320 175
 12572  6322 b126                                lda (index2),y                            ;; @@6322 175
 12573  6324 e567                                sbc faclo                                ; get zero if equal ;; @@6324 175
 12574  6326 f028                                beq qintrt                               ; rts ;; @@6326 175
 12575                           ;; @@6328 175
 12576  6328 a568               _local_1174_10   lda facsgn                                ;; @@6328 175
 12577  632a 9002                                bcc _local_1174_20                        ;; @@632a 175
 12578  632c 49ff                                eor #$ff                                  ;; @@632c 175
 12579  632e 8097               _local_1174_20   bra fcomps                               ; a part of sign sets up (a) ;; @@632e 175
 12580                           ;; @@6330 175
 12581                          ;.end ;; @@6330 175
 12582                          ; .page ;; @@6330 175
 12583                          ; .subttl Floating Point Math Package (CODE21) ;; @@6330 175
 12584                           ;; @@6330 175
 12585                          ; Quick Greatest Integer Function ;; @@6330 175
 12586                          ; ;; @@6330 175
 12587                          ; Leaves INT(FAC) in FACHO&MO&LO signed ;; @@6330 175
 12588                          ; Assumes FAC < 2~23 =8388608 ;; @@6330 175
 12589                           ;; @@6330 175
 12590  6330 a563               qint             lda facexp                                ;; @@6330 176
 12591  6332 f04f                                beq clrfac                               ; if zero, got it ;; @@6332 176
 12592  6334 38                                  sec                                       ;; @@6334 176
 12593  6335 e9a0                                sbc #$a0                                 ; get number of places to shift ;; @@6335 176
 12594                           ;; @@6337 176
 12595  6337 7f680a                              bbr7 facsgn,_local_1175_10                ;; @@6337 176
 12596                           ;; @@633a 176
 12597  633a aa                                  tax                                       ;; @@633a 176
 12598  633b a9ff                                lda #$ff                                  ;; @@633b 176
 12599  633d 8dd702                              sta bits                                 ; put $ff in when shftr shifts bytes ;; @@633d 176
 12600  6340 209f5e                              jsr negfch                               ; truly negate quantity in FAC ;; @@6340 176
 12601  6343 8a                                  txa                                       ;; @@6343 176
 12602                           ;; @@6344 176
 12603  6344 a263               _local_1175_10   ldx #fac                                  ;; @@6344 176
 12604  6346 c9f9                                cmp #$f9                                  ;; @@6346 176
 12605  6348 1007                                bpl qint1                                ; if number of places > 7 shift 1 place at a time ;; @@6348 176
 12606  634a 20e75e                              jsr shiftr                               ; start shifting bytes, then bits ;; @@634a 176
 12607  634d 8cd702                              sty bits                                 ; zero bits since adder wants zero ;; @@634d 176
 12608  6350 60                 qintrt           rts                                       ;; @@6350 177
 12609                           ;; @@6351 177
 12610                           ;; @@6351 177
 12611  6351 a8                 qint1            tay                                      ; put count in counter ;; @@6351 177
 12612  6352 a568                                lda facsgn                                ;; @@6352 177
 12613  6354 2980                                and #$80                                 ; get sign bit ;; @@6354 177
 12614  6356 4664                                lsr facho                                ; save first shifted byte ;; @@6356 177
 12615  6358 0564                                ora facho                                 ;; @@6358 177
 12616  635a 8564                                sta facho                                 ;; @@635a 177
 12617  635c 20fe5e                              jsr rolshf                               ; shift the rest ;; @@635c 177
 12618  635f 8cd702                              sty bits                                 ; zero (bits) ;; @@635f 177
 12619  6362 60                                  rts                                       ;; @@6362 177
 12620                           ;; @@6363 177
 12621                           ;; @@6363 177
 12622                          ; .page ;; @@6363 177
 12623                          ; Greatest Integer Function ;; @@6363 177
 12624                           ;; @@6363 177
 12625  6363 a563               int              lda facexp                                ;; @@6363 177
 12626  6365 c9a0                                cmp #$a0                                  ;; @@6365 177
 12627  6367 b023                                bcs intrts                               ; forget it ;; @@6367 177
 12628  6369 20b262                              jsr round                                ; round FAC per FACOV (fixes the  INT(.9+.1) -> 0  Microsoft bug.  FAB) ;; @@6369 177
 12629  636c 203063                              jsr qint                                 ; INT(FAC) ;; @@636c 177
 12630  636f 8471                                sty facov                                ; clr overflow byte ;; @@636f 177
 12631  6371 a568                                lda facsgn                                ;; @@6371 177
 12632  6373 8468                                sty facsgn                               ; make FAC look positive ;; @@6373 177
 12633  6375 4980                                eor #$80                                 ; get complement of sign in carry ;; @@6375 177
 12634  6377 2a                                  rol                                       ;; @@6377 177
 12635  6378 a9a0                                lda #$a0                                 ; @230+8 ;; @@6378 177
 12636  637a 8563                                sta facexp                                ;; @@637a 177
 12637  637c a567                                lda faclo                                 ;; @@637c 177
 12638  637e 850a                                sta integr                                ;; @@637e 177
 12639  6380 83a1fa                              +lbra fadflt                              ;; @@6380 177
 12640                           ;; @@6383 177
 12641                           ;; @@6383 177
 12642  6383 8564               clrfac           sta facho                                ; make it really zero ;; @@6383 177
 12643  6385 8565                                sta facmoh                                ;; @@6385 177
 12644  6387 8566                                sta facmo                                 ;; @@6387 177
 12645  6389 8567                                sta faclo                                 ;; @@6389 177
 12646  638b a8                                  tay                                       ;; @@638b 177
 12647  638c 60                 intrts           rts                                       ;; @@638c 177
 12648                           ;; @@638d 177
 12649                          ; .page ;; @@638d 177
 12650                          ; Floating Point Input Routine. ;; @@638d 177
 12651                          ; ;; @@638d 177
 12652                          ; Number input is left in FAC.  At entry (TXTPTR) points to the first character ;; @@638d 177
 12653                          ; in a text buffer.  The first character is also in (a).  FIN packs the digits ;; @@638d 177
 12654                          ; into the FAC as an integer and keeps track of where the decimal point is. ;; @@638d 177
 12655                          ; (DPTFLG) tells whether a dp has been seen.  (DECCNT) is the number of digits ;; @@638d 177
 12656                          ; after the dp.  At the end (DECCNT) and the exponent are used to determine how ;; @@638d 177
 12657                          ; many times to multiply or divide by ten to get the correct number. ;; @@638d 177
 12658                           ;; @@638d 177
 12659                           ;; @@638d 177
 12660  638d 8ed202             fin              stx fin_bank                             ; save bank number where string is stored ;; @@638d 177
 12661                           ;; @@6390 177
 12662  6390 a000                                ldy #0                                   ; zero facsgn, sgnflg ;; @@6390 177
 12663  6392 a20a                                ldx #$0a                                 ; zero exp and ho (and moh) ;; @@6392 177
 12664  6394 945f               _local_1176_10   sty deccnt,x                             ; zero mo and lo ;; @@6394 177
 12665  6396 ca                                  dex                                      ; zero tenexp and expsgn ;; @@6396 177
 12666  6397 10fb                                bpl _local_1176_10                       ; zero deccnt, dptflg ;; @@6397 177
 12667                           ;; @@6399 177
 12668  6399 900f                                bcc findgq                               ; flags still set from chrget ;; @@6399 177
 12669  639b c92d                                cmp #'-'                                 ; a negative sign? ;; @@639b 177
 12670  639d d004                                bne qplus                                ; no, try plus sign ;; @@639d 177
 12671  639f 8669                                stx sgnflg                               ; it's negative. (x=@377) ;; @@639f 177
 12672  63a1 8004                                bra finc                                 ; always branches ;; @@63a1 177
 12673                           ;; @@63a3 177
 12674                          ; .page ;; @@63a3 177
 12675  63a3 c92b               qplus            cmp #'+'                                 ; plus sign? ;; @@63a3 178
 12676  63a5 d005                                bne fin1                                 ; yes, skip it ;; @@63a5 178
 12677                           ;; @@63a7 178
 12678  63a7 205764             finc             jsr fin_chrget                            ;; @@63a7 178
 12679                           ;; @@63aa 178
 12680  63aa 9056               findgq           bcc findig                                ;; @@63aa 178
 12681                           ;; @@63ac 178
 12682  63ac c92e               fin1             cmp #'.'                                 ; the dp? ;; @@63ac 178
 12683  63ae f02c                                beq findp                                ; no kidding ;; @@63ae 178
 12684  63b0 c945                                cmp #'E'                                 ; exponent follows ;; @@63b0 178
 12685  63b2 d02d                                bne fine                                 ; no ;; @@63b2 178
 12686                           ;; @@63b4 178
 12687  63b4 205764                              jsr fin_chrget                           ; yes, get another, to check sign of exponent ;; @@63b4 178
 12688  63b7 9017                                bcc fnedg1                               ; is it a digit. (easier than backing up pointer) ;; @@63b7 178
 12689  63b9 c9ab                                cmp #minus_token                         ; minus? ;; @@63b9 178
 12690  63bb f00e                                beq finec1                               ; negate ;; @@63bb 178
 12691  63bd c92d                                cmp #'-'                                 ; minus sign? ;; @@63bd 178
 12692  63bf f00a                                beq finec1                                ;; @@63bf 178
 12693  63c1 c9aa                                cmp #plus_token                          ; plus? ;; @@63c1 178
 12694  63c3 f008                                beq finec                                 ;; @@63c3 178
 12695  63c5 c92b                                cmp #'+'                                 ; plus sign? ;; @@63c5 178
 12696  63c7 f004                                beq finec                                 ;; @@63c7 178
 12697  63c9 8007                                bra finec2                                ;; @@63c9 178
 12698                           ;; @@63cb 178
 12699  63cb 6662               finec1           ror expsgn                               ; turn it on ;; @@63cb 178
 12700                           ;; @@63cd 178
 12701  63cd 205764             finec            jsr fin_chrget                           ; get another ;; @@63cd 178
 12702                           ;; @@63d0 178
 12703  63d0 9055               fnedg1           bcc finedg                               ; it is a digit ;; @@63d0 178
 12704  63d2 7f620c             finec2           bbr7 expsgn,fine                          ;; @@63d2 178
 12705  63d5 a900                                lda #0                                    ;; @@63d5 178
 12706  63d7 38                                  sec                                       ;; @@63d7 178
 12707  63d8 e560                                sbc tenexp                                ;; @@63d8 178
 12708  63da 8007                                bra fine1                                 ;; @@63da 178
 12709                           ;; @@63dc 178
 12710  63dc 6661               findp            ror dptflg                                ;; @@63dc 178
 12711  63de 6f61c6                              bbr6 dptflg,finc                          ;; @@63de 178
 12712                           ;; @@63e1 178
 12713  63e1 a560               fine             lda tenexp                                ;; @@63e1 178
 12714  63e3 38                 fine1            sec                                       ;; @@63e3 178
 12715  63e4 e55f                                sbc deccnt                               ; get number of places to shift ;; @@63e4 178
 12716  63e6 8560                                sta tenexp                                ;; @@63e6 178
 12717  63e8 f012                                beq finqng                               ; negate? ;; @@63e8 178
 12718  63ea 1009                                bpl finmul                               ; positive, so multiply ;; @@63ea 178
 12719                           ;; @@63ec 178
 12720  63ec 206861             findiv           jsr div10                                 ;; @@63ec 178
 12721  63ef e660                                inc tenexp                               ; done? ;; @@63ef 178
 12722  63f1 d0f9                                bne findiv                               ; no ;; @@63f1 178
 12723  63f3 8007                                bra finqng                               ; yes ;; @@63f3 178
 12724                           ;; @@63f5 178
 12725                           ;; @@63f5 178
 12726  63f5 204f61             finmul           jsr mul10                                 ;; @@63f5 178
 12727  63f8 c660                                dec tenexp                               ; done? ;; @@63f8 178
 12728  63fa d0f9                                bne finmul                               ; no ;; @@63fa 178
 12729  63fc a569               finqng           lda sgnflg                                ;; @@63fc 178
 12730  63fe 33fb01                              +lbmi negop                              ; if negative, negate and return ;; @@63fe 178
 12731  6401 60                                  rts                                      ; if positive, return ;; @@6401 178
 12732                           ;; @@6402 178
 12733                           ;; @@6402 178
 12734                           ;; @@6402 178
 12735  6402 48                 findig           pha                                       ;; @@6402 178
 12736  6403 7f6102                              bbr7 dptflg,_local_1177_10                ;; @@6403 178
 12737  6406 e65f                                inc deccnt                                ;; @@6406 178
 12738  6408 204f61             _local_1177_10   jsr mul10                                 ;; @@6408 178
 12739  640b 68                                  pla                                      ; get it back ;; @@640b 178
 12740  640c 38                                  sec                                       ;; @@640c 178
 12741  640d e930                                sbc #'0'                                  ;; @@640d 178
 12742  640f 201464                              jsr finlog                               ; add it in ;; @@640f 178
 12743  6412 8093                                bra finc                                  ;; @@6412 178
 12744                           ;; @@6414 178
 12745                           ;; @@6414 178
 12746                           ;; @@6414 178
 12747  6414 48                 finlog           pha                                       ;; @@6414 179
 12748  6415 20a362                              jsr movaf                                ; save it for later ;; @@6415 179
 12749  6418 68                                  pla                                       ;; @@6418 179
 12750  6419 20d262                              jsr float                                ; float the value in (a) ;; @@6419 179
 12751                           ;; @@641c 179
 12752                          faddt_c65                                                 ; [910402] ;; @@641c 179
 12753  641c a56f                                lda argsgn                                ;; @@641c 179
 12754  641e 4568                                eor facsgn                                ;; @@641e 179
 12755  6420 8570                                sta arisgn                               ; resultant sign ;; @@6420 179
 12756  6422 a663                                ldx facexp                               ; set signs on thing to add ;; @@6422 179
 12757  6424 8397f9                              +lbra faddt                              ; add together and return ;; @@6424 179
 12758                           ;; @@6427 179
 12759                          ; .page ;; @@6427 179
 12760                          ; Pack in the next digit of the exponent. ;; @@6427 179
 12761                          ; Multiply the old exp by 10 and add in the next digit. ;; @@6427 179
 12762                          ; (note: does not check for exp overflow) ;; @@6427 179
 12763                           ;; @@6427 179
 12764  6427 a560               finedg           lda tenexp                               ; get exp so far ;; @@6427 179
 12765  6429 c90a                                cmp #10                                  ; will result be >= 100? ;; @@6429 179
 12766  642b 9008                                bcc _local_1178_5                         ;; @@642b 179
 12767  642d a964                                lda #100                                  ;; @@642d 179
 12768  642f ff6220                              bbs7 expsgn,_local_1178_30               ; if neg exp, no chk for overr ;; @@642f 179
 12769  6432 8312ca                              +lbra overr                               ;; @@6432 179
 12770                           ;; @@6435 179
 12771  6435 0a                 _local_1178_5    asl                                      ; max is 120 ;; @@6435 179
 12772  6436 0a                                  asl                                      ; mult by 2 twice ;; @@6436 179
 12773  6437 18                                  clc                                      ; possible shift out of high ;; @@6437 179
 12774  6438 6560                                adc tenexp                               ; like multiplying by five ;; @@6438 179
 12775  643a 0a                                  asl                                      ; and now by ten ;; @@643a 179
 12776  643b 18                                  clc                                       ;; @@643b 179
 12777  643c a000                                ldy #0                                    ;; @@643c 179
 12778  643e 8578                                sta syntmp                                ;; @@643e 179
 12779                           ;; @@6440 179
 12780  6440 add202                              lda fin_bank                             ; text or string bank? ;; @@6440 179
 12781  6443 d005                                bne _local_1178_10                        ;; @@6443 179
 12782  6445 20c522                              jsr indtxt                               ; text ;; @@6445 179
 12783  6448 8003                                bra _local_1178_20                        ;; @@6448 179
 12784  644a 20d522             _local_1178_10   jsr indin1_ram1                          ; string ;; @@644a 179
 12785                           ;; @@644d 179
 12786  644d 6578               _local_1178_20   adc syntmp                                ;; @@644d 179
 12787  644f 38                                  sec                                       ;; @@644f 179
 12788  6450 e930                                sbc #'0'                                  ;; @@6450 179
 12789  6452 8560               _local_1178_30   sta tenexp                               ; save result ;; @@6452 179
 12790  6454 8376ff                              +lbra finec                               ;; @@6454 179
 12791                           ;; @@6457 179
 12792                          ; .page ;; @@6457 179
 12793                          ; Get a character from either text or string area, and set the flags ;; @@6457 179
 12794                          ; in the manner performed by CHRGET. ;; @@6457 179
 12795                           ;; @@6457 179
 12796                          fin_chrget                                                 ;; @@6457 180
 12797  6457 add202                              lda fin_bank                             ; text or string bank? ;; @@6457 180
 12798  645a f326be                              +lbeq chrget                             ; get byte from text bank via normal CHRGET mechanism ;; @@645a 180
 12799                           ;; @@645d 180
 12800                          fin_chrget_1                                              ; get byte from string bank via modified CHRGET mechanism ;; @@645d 180
 12801  645d e324                                inw index1                                ;; @@645d 180
 12802                          fin_chrget_2                                               ;; @@645f 180
 12803  645f a000                                ldy #0                                    ;; @@645f 180
 12804  6461 20d522                              jsr indin1_ram1                           ;; @@6461 180
 12805  6464 c93a                                cmp #':'                                  ;; @@6464 180
 12806  6466 b00a                                bcs _local_1179_10                        ;; @@6466 180
 12807  6468 c920                                cmp #' '                                  ;; @@6468 180
 12808  646a f0f1                                beq fin_chrget_1                         ; skip over spaces ;; @@646a 180
 12809  646c 38                                  sec                                       ;; @@646c 180
 12810  646d e930                                sbc #'0'                                 ; set up .c as CHRGET would ;; @@646d 180
 12811  646f 38                                  sec                                       ;; @@646f 180
 12812  6470 e9d0                                sbc #$d0                                  ;; @@6470 180
 12813  6472 60                 _local_1179_10   rts                                       ;; @@6472 180
 12814                           ;; @@6473 180
 12815                          ;.end ;; @@6473 180
 12816                          ; .page ;; @@6473 180
 12817                          ; .subttl Floating Point Math Package (CODE22,23) ;; @@6473 180
 12818                           ;; @@6473 180
 12819  6473 207dff             inprt            jsr _primm                                ;; @@6473 181
 12820  6476 20494e2000                          !text " IN ",0                            ;; @@6476 181
 12821                           ;; @@647b 181
 12822  647b a53c               curprt           lda curlin+1                              ;; @@647b 181
 12823  647d a63b                                ldx curlin                                ;; @@647d 181
 12824                           ;; @@647f 181
 12825  647f 8564               linprt           sta facho                                 ;; @@647f 181
 12826  6481 8665                                stx facho+1                               ;; @@6481 181
 12827  6483 a290                                ldx #$90                                 ; exponent of 16 ;; @@6483 181
 12828  6485 38                                  sec                                      ; number is positive ;; @@6485 181
 12829  6486 20df62                              jsr floatc                                ;; @@6486 181
 12830  6489 209164                              jsr foutc                                 ;; @@6489 181
 12831  648c 83acd3                              +lbra strout                             ; print and return ;; @@648c 181
 12832                           ;; @@648f 181
 12833                           ;; @@648f 181
 12834  648f a001               fout             ldy #1                                    ;; @@648f 181
 12835  6491 a920               foutc            lda #' '                                 ; if positive, print space ;; @@6491 181
 12836  6493 7f6802                              bbr7 facsgn,_local_1180_10                ;; @@6493 181
 12837  6496 a92d                                lda #'-'                                 ; if neg ;; @@6496 181
 12838  6498 99ff00             _local_1180_10   sta fbuffr-1,y                           ; store the character ;; @@6498 181
 12839  649b 8568                                sta facsgn                               ; make FAC pos for QINT ;; @@649b 181
 12840  649d 8472                                sty fbufpt                               ; save for later ;; @@649d 181
 12841  649f c8                                  iny                                       ;; @@649f 181
 12842  64a0 a930                                lda #'0'                                 ; get zero to type if FAC=0 ;; @@64a0 181
 12843  64a2 a663                                ldx facexp                                ;; @@64a2 181
 12844  64a4 f30801                              +lbeq fout19                              ;; @@64a4 181
 12845                           ;; @@64a7 181
 12846  64a7 a900                                lda #0                                    ;; @@64a7 181
 12847  64a9 e080                                cpx #$80                                 ; is number < 1? ;; @@64a9 181
 12848  64ab f002                                beq _local_1180_20                       ; no ;; @@64ab 181
 12849  64ad b009                                bcs _local_1180_30                        ;; @@64ad 181
 12850                           ;; @@64af 181
 12851  64af a937               _local_1180_20   lda #<nmil                               ; mult by 10~6 ;; @@64af 181
 12852  64b1 a05f                                ldy #>nmil                                ;; @@64b1 181
 12853  64b3 204860                              jsr rommlt                                ;; @@64b3 181
 12854  64b6 a9f7                                lda #$f7                                  ;; @@64b6 181
 12855  64b8 855f               _local_1180_30   sta deccnt                               ; save count or zero it ;; @@64b8 181
 12856                           ;; @@64ba 181
 12857  64ba a932               _local_1180_40   lda #<n9999                               ;; @@64ba 181
 12858  64bc a05f                                ldy #>n9999                               ;; @@64bc 181
 12859  64be 20f162                              jsr fcomp                                ; is number > 999999.499 or 999999999.5? ;; @@64be 181
 12860  64c1 f01e                                beq _local_1180_100                      ; go to biggies ;; @@64c1 181
 12861  64c3 1012                                bpl _local_1180_70                       ; yes, make it smaller ;; @@64c3 181
 12862                           ;; @@64c5 181
 12863  64c5 a92d               _local_1180_50   lda #<n0999                               ;; @@64c5 181
 12864  64c7 a05f                                ldy #>n0999                               ;; @@64c7 181
 12865  64c9 20f162                              jsr fcomp                                ; is number > 99999.9499 or 99999999.90625? ;; @@64c9 181
 12866  64cc f002                                beq _local_1180_60                        ;; @@64cc 181
 12867  64ce 100e                                bpl _local_1180_80                       ; yes. done multiplying ;; @@64ce 181
 12868                           ;; @@64d0 181
 12869  64d0 204f61             _local_1180_60   jsr mul10                                ; make it bigger ;; @@64d0 181
 12870  64d3 c65f                                dec deccnt                                ;; @@64d3 181
 12871  64d5 d0ee                                bne _local_1180_50                       ; see if that does it (this always goes) ;; @@64d5 181
 12872                           ;; @@64d7 181
 12873  64d7 206861             _local_1180_70   jsr div10                                ; make it smaller ;; @@64d7 181
 12874  64da e65f                                inc deccnt                                ;; @@64da 181
 12875  64dc d0dc                                bne _local_1180_40                       ; see if that does it (this always goes) ;; @@64dc 181
 12876                           ;; @@64de 181
 12877  64de 204d60             _local_1180_80   jsr faddh                                ; add a half to round up ;; @@64de 181
 12878                           ;; @@64e1 181
 12879                           ;; @@64e1 181
 12880  64e1 203063             _local_1180_100  jsr qint                                 ; biggies. ;; @@64e1 181
 12881  64e4 a201                                ldx #1                                   ; decimal point count ;; @@64e4 181
 12882  64e6 a55f                                lda deccnt                                ;; @@64e6 181
 12883  64e8 18                                  clc                                       ;; @@64e8 181
 12884  64e9 690a                                adc #$0a                                 ; should number be printed in E notation?  (ie, is number .lt. .01?) ;; @@64e9 181
 12885  64eb 3009                                bmi _local_1180_110                      ; yes ;; @@64eb 181
 12886  64ed c90b                                cmp #$0b                                 ; is it > 999999 or 9999999999? ;; @@64ed 181
 12887  64ef b006                                bcs _local_1180_120                      ; yes, use E notation ;; @@64ef 181
 12888  64f1 69ff                                adc #$ff                                 ; number of places before decimal point ;; @@64f1 181
 12889  64f3 aa                                  tax                                      ; put into accx ;; @@64f3 181
 12890  64f4 a902                                lda #2                                   ; no E notation ;; @@64f4 181
 12891  64f6 38                 _local_1180_110  sec                                       ;; @@64f6 181
 12892                           ;; @@64f7 181
 12893  64f7 e902               _local_1180_120  sbc #2                                   ; effectively add 5 to orig exp ;; @@64f7 181
 12894  64f9 8560                                sta tenexp                               ; that is the exponent to print ;; @@64f9 181
 12895  64fb 865f                                stx deccnt                               ; number of decimal places ;; @@64fb 181
 12896  64fd 8a                                  txa                                       ;; @@64fd 181
 12897  64fe f002                                beq _local_1180_130                       ;; @@64fe 181
 12898  6500 1013                                bpl _local_1180_150                      ; some places before dec pnt ;; @@6500 181
 12899                           ;; @@6502 181
 12900  6502 a472               _local_1180_130  ldy fbufpt                               ; get pointer to output ;; @@6502 181
 12901  6504 a92e                                lda #'.'                                 ; put in "." ;; @@6504 181
 12902  6506 c8                                  iny                                       ;; @@6506 181
 12903  6507 99ff00                              sta fbuffr-1,y                            ;; @@6507 181
 12904  650a 8a                                  txa                                       ;; @@650a 181
 12905  650b f006                                beq _local_1180_140                       ;; @@650b 181
 12906  650d a930                                lda #'0'                                 ; get the ensuing zero ;; @@650d 181
 12907  650f c8                                  iny                                       ;; @@650f 181
 12908  6510 99ff00                              sta fbuffr-1,y                            ;; @@6510 181
 12909                           ;; @@6513 181
 12910  6513 8472               _local_1180_140  sty fbufpt                               ; save it for later ;; @@6513 181
 12911                           ;; @@6515 181
 12912  6515 a000               _local_1180_150  ldy #0                                    ;; @@6515 181
 12913                           ;; @@6517 181
 12914  6517 a280               foutim           ldx #$80                                 ; first pass through, accb has msb set ;; @@6517 182
 12915  6519 a567               fout2            lda faclo                                 ;; @@6519 182
 12916  651b 18                                  clc                                       ;; @@651b 182
 12917  651c 793f5f                              adc foutbl+3,y                            ;; @@651c 182
 12918  651f 8567                                sta faclo                                 ;; @@651f 182
 12919  6521 a566                                lda facmo                                 ;; @@6521 182
 12920  6523 793e5f                              adc foutbl+2,y                            ;; @@6523 182
 12921  6526 8566                                sta facmo                                 ;; @@6526 182
 12922  6528 a565                                lda facmoh                                ;; @@6528 182
 12923  652a 793d5f                              adc foutbl+1,y                            ;; @@652a 182
 12924  652d 8565                                sta facmoh                                ;; @@652d 182
 12925  652f a564                                lda facho                                 ;; @@652f 182
 12926  6531 793c5f                              adc foutbl,y                              ;; @@6531 182
 12927  6534 8564                                sta facho                                 ;; @@6534 182
 12928  6536 e8                                  inx                                      ; it was done yet another time ;; @@6536 182
 12929  6537 b004                                bcs _local_1181_20                        ;; @@6537 182
 12930  6539 10de                                bpl fout2                                 ;; @@6539 182
 12931  653b 3002                                bmi _local_1181_30                        ;; @@653b 182
 12932                           ;; @@653d 182
 12933  653d 30da               _local_1181_20   bmi fout2                                 ;; @@653d 182
 12934  653f 8a                 _local_1181_30   txa                                       ;; @@653f 182
 12935  6540 9004                                bcc _local_1181_40                       ; can use (a) as is ;; @@6540 182
 12936  6542 49ff                                eor #$ff                                 ; find 11.(a) ;; @@6542 182
 12937  6544 690a                                adc #10                                  ; c is still on to complete negation, and will always be on after ;; @@6544 182
 12938                           ;; @@6546 182
 12939  6546 692f               _local_1181_40   adc #'0'-1                               ; get a character to print ;; @@6546 182
 12940  6548 c8                                  iny                                       ;; @@6548 182
 12941  6549 c8                                  iny                                       ;; @@6549 182
 12942  654a c8                                  iny                                       ;; @@654a 182
 12943  654b c8                                  iny                                       ;; @@654b 182
 12944  654c 8449                                sty fdecpt                                ;; @@654c 182
 12945  654e a472                                ldy fbufpt                                ;; @@654e 182
 12946  6550 c8                                  iny                                      ; point to place to store output ;; @@6550 182
 12947  6551 aa                                  tax                                       ;; @@6551 182
 12948  6552 297f                                and #$7f                                 ; get rid of msb ;; @@6552 182
 12949  6554 99ff00                              sta fbuffr-1,y                            ;; @@6554 182
 12950  6557 c65f                                dec deccnt                                ;; @@6557 182
 12951  6559 d006                                bne _local_1181_50                       ; not time for dp yet ;; @@6559 182
 12952  655b a92e                                lda #'.'                                  ;; @@655b 182
 12953  655d c8                                  iny                                       ;; @@655d 182
 12954  655e 99ff00                              sta fbuffr-1,y                           ; store dp ;; @@655e 182
 12955                           ;; @@6561 182
 12956  6561 8472               _local_1181_50   sty fbufpt                               ; store pointer for later ;; @@6561 182
 12957  6563 a449                                ldy fdecpt                                ;; @@6563 182
 12958  6565 8a                                  txa                                      ; complement accb ;; @@6565 182
 12959  6566 49ff                                eor #$ff                                 ; complement acca ;; @@6566 182
 12960  6568 2980                                and #$80                                 ; save only msb ;; @@6568 182
 12961  656a aa                                  tax                                       ;; @@656a 182
 12962  656b c024                                cpy #fdcend-foutbl                        ;; @@656b 182
 12963                          ; beq _local_1181_60  ;for time converter ????   removed [901014] ;; @@656d 182
 12964                          ; cpy #timend-foutbl ;; @@656d 182
 12965  656d d0aa                                bne fout2                                ; continue with output ;; @@656d 182
 12966                           ;; @@656f 182
 12967  656f a472               _local_1181_60   ldy fbufpt                               ; get back output pointer ;; @@656f 182
 12968  6571 b9ff00             _local_1181_70   lda fbuffr-1,y                           ; remove trailing blanks ;; @@6571 182
 12969  6574 88                                  dey                                       ;; @@6574 182
 12970  6575 c930                                cmp #'0'                                  ;; @@6575 182
 12971  6577 f0f8                                beq _local_1181_70                        ;; @@6577 182
 12972  6579 c92e                                cmp #'.'                                  ;; @@6579 182
 12973  657b f001                                beq _local_1181_80                       ; ran into dp,  stop ;; @@657b 182
 12974  657d c8                                  iny                                      ; something else, save it ;; @@657d 182
 12975                           ;; @@657e 182
 12976  657e a92b               _local_1181_80   lda #'+'                                  ;; @@657e 182
 12977  6580 a660                                ldx tenexp                                ;; @@6580 182
 12978  6582 f02e                                beq fout17                               ; no exponent to output ;; @@6582 182
 12979  6584 1008                                bpl _local_1181_90                        ;; @@6584 182
 12980  6586 a900                                lda #0                                    ;; @@6586 182
 12981  6588 38                                  sec                                       ;; @@6588 182
 12982  6589 e560                                sbc tenexp                                ;; @@6589 182
 12983  658b aa                                  tax                                       ;; @@658b 182
 12984  658c a92d                                lda #'-'                                 ; exponent is negative ;; @@658c 182
 12985                           ;; @@658e 182
 12986  658e 990101             _local_1181_90   sta fbuffr+1,y                           ; store sign of exponent ;; @@658e 182
 12987  6591 a945                                lda #'E'                                  ;; @@6591 182
 12988  6593 990001                              sta fbuffr,y                             ; store the 'E' character ;; @@6593 182
 12989  6596 8a                                  txa                                       ;; @@6596 182
 12990                           ;; @@6597 182
 12991  6597 a22f                                ldx #'0'-1                                ;; @@6597 182
 12992  6599 38                                  sec                                       ;; @@6599 182
 12993  659a e8                 _local_1181_100  inx                                      ; move closer to output value ;; @@659a 182
 12994  659b e90a                                sbc #10                                  ; subtract 10 ;; @@659b 182
 12995  659d b0fb                                bcs _local_1181_100                      ; not negative yet ;; @@659d 182
 12996                           ;; @@659f 182
 12997  659f 693a                                adc #'9'+1                               ; get second output character ;; @@659f 182
 12998  65a1 990301                              sta fbuffr+3,y                           ; store high digit ;; @@65a1 182
 12999  65a4 8a                                  txa                                       ;; @@65a4 182
 13000  65a5 990201                              sta fbuffr+2,y                           ; store low digit ;; @@65a5 182
 13001  65a8 a900                                lda #0                                   ; put in terminator ;; @@65a8 182
 13002  65aa 990401                              sta fbuffr+4,y                            ;; @@65aa 182
 13003  65ad 8008                                bra fout20                               ; return ;; @@65ad 182
 13004                           ;; @@65af 182
 13005                           ;; @@65af 182
 13006  65af 99ff00             fout19           sta fbuffr-1,y                           ; store the character ;; @@65af 183
 13007  65b2 a900               fout17           lda #0                                   ; store the terminator ;; @@65b2 183
 13008  65b4 990001                              sta fbuffr,y                              ;; @@65b4 183
 13009                           ;; @@65b7 183
 13010  65b7 a900               fout20           lda #<fbuffr                              ;; @@65b7 183
 13011  65b9 a001                                ldy #>fbuffr                              ;; @@65b9 183
 13012  65bb 60                                  rts                                      ; all done ;; @@65bb 183
 13013                           ;; @@65bc 183
 13014                          ; .page ;; @@65bc 183
 13015                          ; Exponentiation and Square Root Functions. ;; @@65bc 183
 13016                          ; ;; @@65bc 183
 13017                          ; square root function - sqr(a) ;; @@65bc 183
 13018                          ; use sqr(x) = x^.5 ;; @@65bc 183
 13019                           ;; @@65bc 183
 13020  65bc 20a362             sqr              jsr movaf                                ; move FAC into ARG ;; @@65bc 183
 13021  65bf a914                                lda #<fhalf                               ;; @@65bf 183
 13022  65c1 a05f                                ldy #>fhalf                               ;; @@65c1 183
 13023                           ;; @@65c3 183
 13024  65c3 200e62             fpwr             jsr movfm                                ; put memory into FAC    ARG^MEM ;; @@65c3 183
 13025                           ;; @@65c6 183
 13026                           ;; @@65c6 183
 13027                          ; Last thing fetched is facexp into accx. ;; @@65c6 183
 13028                          ; ;; @@65c6 183
 13029                          ; Exponentiation --- x^y. ;; @@65c6 183
 13030                          ; n.b. 0^0=1 ;; @@65c6 183
 13031                          ; First check if y=0, and if so the result is one. ;; @@65c6 183
 13032                          ; Next  check if x=0, and if so the result is zero. ;; @@65c6 183
 13033                          ; Then  check if x>0: ;; @@65c6 183
 13034                          ; if not check that y is an integer. ;; @@65c6 183
 13035                          ; if so negate x, so that lg doesn't give fcerr. ;; @@65c6 183
 13036                          ; If x is negative and y is odd, negate the result returned by exp. ;; @@65c6 183
 13037                          ; To compute the result use x^y = EXP((y*LOG(x)) ;; @@65c6 183
 13038                           ;; @@65c6 183
 13039                           ;; @@65c6 183
 13040  65c6 f03f               fpwrt            beq exp                                  ; if FAC=0, just exponentiate that  ARG^FAC ;; @@65c6 183
 13041  65c8 a56a                                lda argexp                               ; is x=0? ;; @@65c8 183
 13042  65ca f37ef8                              +lbeq zerof1                             ; zero FAC ;; @@65ca 183
 13043                           ;; @@65cd 183
 13044  65cd a250                                ldx #<tempf3                             ; save it for later in a temp ;; @@65cd 183
 13045  65cf a000                                ldy #>tempf3                              ;; @@65cf 183
 13046  65d1 203a62                              jsr movmf                                ; FAC->MEM ;; @@65d1 183
 13047                           ;; @@65d4 183
 13048  65d4 a56f                                lda argsgn                               ; note y=0 already. that's good, in case no one calls int. ;; @@65d4 183
 13049  65d6 100f                                bpl _local_1182_10                       ; no problems if x>0 ;; @@65d6 183
 13050  65d8 206363                              jsr int                                  ; integerize the FAC ;; @@65d8 183
 13051  65db a950                                lda #<tempf3                             ; get addr of comperand ;; @@65db 183
 13052  65dd a000                                ldy #>tempf3                              ;; @@65dd 183
 13053  65df 20f162                              jsr fcomp                                ; equal? ;; @@65df 183
 13054  65e2 d003                                bne _local_1182_10                       ; leave x neg. log will blow him out ;; @@65e2 183
 13055                          ;a=-1 and y is irrelavant ;; @@65e4 183
 13056  65e4 98                                  tya                                      ; negative x. make positive ;; @@65e4 183
 13057  65e5 a40a                                ldy integr                               ; get evenness ;; @@65e5 183
 13058                           ;; @@65e7 183
 13059  65e7 209562             _local_1182_10   jsr movfa1                               ; alternate entry point.    ARG->FAC ;; @@65e7 183
 13060  65ea 5a                                  phy                                      ; save evenness for later ;; @@65ea 183
 13061  65eb 200e60                              jsr log                                  ; find log ;; @@65eb 183
 13062  65ee a950                                lda #<tempf3                             ; multiply FAC times LOG(x) ;; @@65ee 183
 13063  65f0 a000                                ldy #>tempf3                              ;; @@65f0 183
 13064  65f2 206d60                              jsr fmult                                 ;; @@65f2 183
 13065  65f5 200766                              jsr exp                                  ; exponentiate the FAC ;; @@65f5 183
 13066  65f8 68                                  pla                                       ;; @@65f8 183
 13067  65f9 4a                                  lsr                                      ; is it even? ;; @@65f9 183
 13068  65fa 900a                                bcc negrts                               ; yes. or x>0 ;; @@65fa 183
 13069                          ;negate the number in FAC ;; @@65fc 183
 13070                           ;; @@65fc 183
 13071                           ;; @@65fc 183
 13072                          negop                                                     ; /// entry point ;; @@65fc 184
 13073  65fc a563                                lda facexp                                ;; @@65fc 184
 13074  65fe f006                                beq negrts                                ;; @@65fe 184
 13075  6600 a568                                lda facsgn                                ;; @@6600 184
 13076  6602 49ff                                eor #$ff                                  ;; @@6602 184
 13077  6604 8568                                sta facsgn                                ;; @@6604 184
 13078  6606 60                 negrts           rts                                       ;; @@6606 184
 13079                           ;; @@6607 184
 13080                          ;.end ;; @@6607 184
 13081                          ; .page ;; @@6607 184
 13082                          ; .subttl Floating Point Math Package (CODE24) ;; @@6607 184
 13083                           ;; @@6607 184
 13084                          ; Exponentation Function ;; @@6607 184
 13085                          ; ;; @@6607 184
 13086                          ; First save the original argument and multiply the FAC by LOG2(e).  The ;; @@6607 184
 13087                          ; result is used to determine if overflow will occur since ;; @@6607 184
 13088                          ; ;; @@6607 184
 13089                          ;  EXP(x) = 2^(x*LOG2(e)) ;; @@6607 184
 13090                          ; ;; @@6607 184
 13091                          ; where ;; @@6607 184
 13092                          ;  LOG2(e) = LOG(e), base 2 ;; @@6607 184
 13093                          ; ;; @@6607 184
 13094                          ; Then save the integer part of this to scale the answer at the end, since ;; @@6607 184
 13095                          ; 2^y=2^INT(y)*2^(y-INT(y)) and 2^INT(y) are easy to compute.  Now compute ;; @@6607 184
 13096                          ; ;; @@6607 184
 13097                          ;  2^(x*LOG2(e)-INT(x*LOG2(e)) ;; @@6607 184
 13098                          ; by ;; @@6607 184
 13099                          ;  p(LOG(2)*(INT(x*LOG2(e))+1)-x ;; @@6607 184
 13100                          ; ;; @@6607 184
 13101                          ; where p is an approximation polynomial. The result is then scaled by the ;; @@6607 184
 13102                          ; power of two previously saved.  Re: Taylor expansion. ;; @@6607 184
 13103                           ;; @@6607 184
 13104                           ;; @@6607 184
 13105  6607 a99e               exp              lda #<logeb2                             ; multiply by LOG(e) base 2 ;; @@6607 184
 13106  6609 a05f                                ldy #>logeb2                              ;; @@6609 184
 13107  660b 204860                              jsr rommlt                               ; LOGEB2->ARG, FAC=FAC*ARG ;; @@660b 184
 13108  660e a571                                lda facov                                 ;; @@660e 184
 13109  6610 6950                                adc #$50                                 ; ???? ;; @@6610 184
 13110  6612 9003                                bcc _local_1183_10                        ;; @@6612 184
 13111  6614 20ba62                              jsr incrnd                                ;; @@6614 184
 13112                           ;; @@6617 184
 13113  6617 8558               _local_1183_10   sta oldov                                 ;; @@6617 184
 13114  6619 20a662                              jsr movef                                ; to save in ARG without round.  ARG=FAC, facov=0) ;; @@6619 184
 13115  661c a563                                lda facexp                                ;; @@661c 184
 13116  661e c988                                cmp #$88                                 ; if ABS(FAC) >= 128, too big ;; @@661e 184
 13117  6620 9003                                bcc _local_1183_30                        ;; @@6620 184
 13118                           ;; @@6622 184
 13119  6622 204361             _local_1183_20   jsr mldvex                               ; overflow or overflow ;; @@6622 184
 13120  6625 206363             _local_1183_30   jsr int                                  ; FAC=INT(FAC), uses facov ;; @@6625 184
 13121  6628 a50a                                lda integr                               ; get low part ;; @@6628 184
 13122  662a 18                                  clc                                       ;; @@662a 184
 13123  662b 6981                                adc #$81                                  ;; @@662b 184
 13124  662d f0f3                                beq _local_1183_20                       ; overflow or overflow!! ;; @@662d 184
 13125                           ;; @@662f 184
 13126  662f 38                                  sec                                       ;; @@662f 184
 13127  6630 e901                                sbc #1                                   ; subtract it ;; @@6630 184
 13128  6632 48                                  pha                                      ; save a while ;; @@6632 184
 13129                           ;; @@6633 184
 13130  6633 a205                                ldx #5                                   ; swap FAC and ARG ;; @@6633 184
 13131  6635 b56a               _local_1183_40   lda argexp,x                              ;; @@6635 184
 13132  6637 b463                                ldy facexp,x                              ;; @@6637 184
 13133  6639 9563                                sta facexp,x                              ;; @@6639 184
 13134  663b 946a                                sty argexp,x                              ;; @@663b 184
 13135  663d ca                                  dex                                       ;; @@663d 184
 13136  663e 10f5                                bpl _local_1183_40                        ;; @@663e 184
 13137                           ;; @@6640 184
 13138  6640 a558                                lda oldov                                 ;; @@6640 184
 13139  6642 8571                                sta facov                                 ;; @@6642 184
 13140  6644 20a85d                              jsr fsubt                                ; FAC=ARG-FAC ;; @@6644 184
 13141  6647 20fc65                              jsr negop                                ; negate FAC ;; @@6647 184
 13142  664a a975                                lda #<expcon                              ;; @@664a 184
 13143  664c a05f                                ldy #>expcon                              ;; @@664c 184
 13144  664e 207066                              jsr poly                                  ;; @@664e 184
 13145  6651 a900                                lda #0                                    ;; @@6651 184
 13146  6653 8570                                sta arisgn                               ; multiply by positive 1.0 ;; @@6653 184
 13147                           ;; @@6655 184
 13148  6655 68                                  pla                                      ; recall scale factor ;; @@6655 184
 13149  6656 202961                              jsr mldexp                               ; modify facexp and check for overflow ;; @@6656 184
 13150  6659 60                                  rts                                      ; (has to do jsr due to pla's in muldiv) ;; @@6659 184
 13151                           ;; @@665a 184
 13152                          ; .page ;; @@665a 184
 13153                          ; Polynomial Evaluator and the Random Number Generator. ;; @@665a 184
 13154                          ; ;; @@665a 184
 13155                          ; Evaluate  p(x^2)*x ;; @@665a 184
 13156                          ; The pointer to degree is in (a,y) and the constants follow the degree. ;; @@665a 184
 13157                          ; For x=FAC, compute  c0*x + c1*x^3 + c2*x^5 + c3*x^7 +...+ c(n)*x^(2*n+1) ;; @@665a 184
 13158                           ;; @@665a 184
 13159                           ;; @@665a 184
 13160  665a 8572               polyx            sta polypt                               ; retain polynomial pointer for later ;; @@665a 185
 13161  665c 8473                                sty polypt+1                              ;; @@665c 185
 13162  665e 203662                              jsr mov1f                                ; save FAC in factmp (y=0 upon return) ;; @@665e 185
 13163  6661 a959                                lda #tempf1                               ;; @@6661 185
 13164  6663 206d60                              jsr fmult                                ; compute x^2. ;; @@6663 185
 13165  6666 207466                              jsr poly1                                ; compute p(x^2). ;; @@6666 185
 13166  6669 a959                                lda #<tempf1                              ;; @@6669 185
 13167  666b a000                                ldy #>tempf1                              ;; @@666b 185
 13168  666d 83fdf9                              +lbra fmult                              ; multiply by FAC again ;; @@666d 185
 13169                           ;; @@6670 185
 13170                           ;; @@6670 185
 13171                          ; Polynomial Evaluator ;; @@6670 185
 13172                          ; ;; @@6670 185
 13173                          ; Pointer to degree is in (a,y). ;; @@6670 185
 13174                          ; Compute:  c0+c1*x+c2*x^2+c3*x^3+c4*x^4...+c(n-1)*x^(n-1)+c(n)*x^n ;; @@6670 185
 13175                          ;  which is roughly (LOG(2)^n)/LOG(EXP(1))/n! ;; @@6670 185
 13176                           ;; @@6670 185
 13177                           ;; @@6670 185
 13178  6670 8572               poly             sta polypt                                ;; @@6670 185
 13179  6672 8473                                sty polypt+1                              ;; @@6672 185
 13180                           ;; @@6674 185
 13181  6674 203362             poly1            jsr mov2f                                ; save FAC (rounds, .y=0) ;; @@6674 185
 13182  6677 b172                                lda (polypt),y                            ;; @@6677 185
 13183  6679 8569                                sta degree                                ;; @@6679 185
 13184  667b e372                                inw polypt                                ;; @@667b 185
 13185  667d a572                                lda polypt                                ;; @@667d 185
 13186  667f a473                                ldy polypt+1                              ;; @@667f 185
 13187                           ;; @@6681 185
 13188  6681 204860             _local_1184_10   jsr rommlt                                ;; @@6681 185
 13189  6684 a572                                lda polypt                               ; get current pointer ;; @@6684 185
 13190  6686 a473                                ldy polypt+1                              ;; @@6686 185
 13191  6688 18                                  clc                                       ;; @@6688 185
 13192  6689 6905                                adc #5                                    ;; @@6689 185
 13193  668b 9001                                bcc _local_1184_20                        ;; @@668b 185
 13194  668d c8                                  iny                                       ;; @@668d 185
 13195  668e 8572               _local_1184_20   sta polypt                                ;; @@668e 185
 13196  6690 8473                                sty polypt+1                              ;; @@6690 185
 13197  6692 205160                              jsr romadd                               ; add in constant ;; @@6692 185
 13198  6695 a95e                                lda #<tempf2                             ; multiply the original FAC ;; @@6695 185
 13199  6697 a000                                ldy #>tempf2                              ;; @@6697 185
 13200  6699 c669                                dec degree                               ; done? ;; @@6699 185
 13201  669b d0e4                                bne _local_1184_10                        ;; @@669b 185
 13202  669d 60                                  rts                                      ; yes ;; @@669d 185
 13203                           ;; @@669e 185
 13204                          ;.end ;; @@669e 185
 13205                          ; .page ;; @@669e 185
 13206                          ; .subttl Floating Point Math Package (TRIG) ;; @@669e 185
 13207                           ;; @@669e 185
 13208                          ; Sine, Cosine, and Tangent Functions. ;; @@669e 185
 13209                           ;; @@669e 185
 13210                           ;; @@669e 185
 13211                           ;; @@669e 185
 13212                          ; Cosine function cos(x)=sin(x+pi/2) ;; @@669e 185
 13213                           ;; @@669e 185
 13214                           ;; @@669e 185
 13215  669e a923               cos              lda #<pi2                                ; pointer to pi/2 ;; @@669e 186
 13216  66a0 a05f                                ldy #>pi2                                 ;; @@66a0 186
 13217  66a2 205160                              jsr romadd                               ; add it in.  fall into sine ;; @@66a2 186
 13218                           ;; @@66a5 186
 13219                           ;; @@66a5 186
 13220                           ;; @@66a5 186
 13221                          ; Sine function ;; @@66a5 186
 13222                          ; ;; @@66a5 186
 13223                          ; Use identities to get FAC in quadrants I or IV.  The FAC is divided by 2*pi ;; @@66a5 186
 13224                          ; and the integer part is ignored because sin(x+2*pi)=sin(x).  Then the ;; @@66a5 186
 13225                          ; argument can be compared with pi/2 by comparing the result of the division ;; @@66a5 186
 13226                          ; with pi/2(2*pi)=1/4.  Identities are then used to get the result in quadrants ;; @@66a5 186
 13227                          ; I or IV.  An approximation polynomial is then used to compute sin(x). ;; @@66a5 186
 13228                           ;; @@66a5 186
 13229                           ;; @@66a5 186
 13230  66a5 20a362             sin              jsr movaf                                 ;; @@66a5 186
 13231  66a8 a928                                lda #<twopi                              ; get pointer to divisor ;; @@66a8 186
 13232  66aa a05f                                ldy #>twopi                               ;; @@66aa 186
 13233  66ac a66f                                ldx argsgn                               ; get sign of result ;; @@66ac 186
 13234  66ae 207161                              jsr fdivf                                 ;; @@66ae 186
 13235  66b1 20a362                              jsr movaf                                ; get result into ARG ;; @@66b1 186
 13236  66b4 206363                              jsr int                                  ; integerize FAC ;; @@66b4 186
 13237  66b7 a900                                lda #0                                    ;; @@66b7 186
 13238  66b9 8570                                sta arisgn                               ; always have the same sign ;; @@66b9 186
 13239  66bb 20a85d                              jsr fsubt                                ; keep only the fractional part ;; @@66bb 186
 13240  66be a90a                                lda #<fr4                                ; get pointer to 1/4 ;; @@66be 186
 13241  66c0 a05f                                ldy #>fr4                                 ;; @@66c0 186
 13242  66c2 205760                              jsr romsub                                ;; @@66c2 186
 13243  66c5 a568                                lda facsgn                               ; save sign for later ;; @@66c5 186
 13244  66c7 48                                  pha                                       ;; @@66c7 186
 13245  66c8 100d                                bpl sin1                                 ; first quadrant ;; @@66c8 186
 13246  66ca 204d60                              jsr faddh                                ; add 1/2 to FAC ;; @@66ca 186
 13247  66cd a568                                lda facsgn                               ; sign is negative? ;; @@66cd 186
 13248  66cf 3009                                bmi sin2                                  ;; @@66cf 186
 13249  66d1 a514                                lda tansgn                               ; quads II and III come here ;; @@66d1 186
 13250  66d3 49ff                                eor #$ff                                  ;; @@66d3 186
 13251  66d5 8514                                sta tansgn                                ;; @@66d5 186
 13252                           ;; @@66d7 186
 13253  66d7 20fc65             sin1             jsr negop                                ; if positive, negate it ;; @@66d7 186
 13254                           ;; @@66da 186
 13255  66da a90a               sin2             lda #<fr4                                ; pointer to 1/4 ;; @@66da 186
 13256  66dc a05f                                ldy #>fr4                                 ;; @@66dc 186
 13257  66de 205160                              jsr romadd                               ; add it in ;; @@66de 186
 13258  66e1 68                                  pla                                      ; get original quadrant ;; @@66e1 186
 13259  66e2 1003                                bpl _local_1185_10                        ;; @@66e2 186
 13260  66e4 20fc65                              jsr negop                                ; if negative, negate result ;; @@66e4 186
 13261                           ;; @@66e7 186
 13262  66e7 a9b2               _local_1185_10   lda #<sincon                              ;; @@66e7 186
 13263  66e9 a05f                                ldy #>sincon                              ;; @@66e9 186
 13264  66eb 836cff                              +lbra polyx                              ; do approximation polyomial ;; @@66eb 186
 13265                           ;; @@66ee 186
 13266                           ;; @@66ee 186
 13267                           ;; @@66ee 186
 13268                          ; Tangent function ;; @@66ee 186
 13269                           ;; @@66ee 186
 13270                           ;; @@66ee 186
 13271  66ee 203662             tan              jsr mov1f                                ; move FAC into temporary ;; @@66ee 187
 13272  66f1 a900                                lda #0                                    ;; @@66f1 187
 13273  66f3 8514                                sta tansgn                               ; remember whether to negate ;; @@66f3 187
 13274  66f5 20a566                              jsr sin                                  ; compute the sin ;; @@66f5 187
 13275  66f8 a250                                ldx #<tempf3                              ;; @@66f8 187
 13276  66fa a000                                ldy #>tempf3                              ;; @@66fa 187
 13277  66fc 203a62                              jsr movmf                                ; put sign into other temp ;; @@66fc 187
 13278  66ff a959                                lda #<tempf1                              ;; @@66ff 187
 13279  6701 a000                                ldy #>tempf1                              ;; @@6701 187
 13280  6703 200e62                              jsr movfm                                ; put this memory location into FAC ;; @@6703 187
 13281  6706 a900                                lda #0                                    ;; @@6706 187
 13282  6708 8568                                sta facsgn                               ; start off positive ;; @@6708 187
 13283  670a a514                                lda tansgn                                ;; @@670a 187
 13284  670c 201c67                              jsr _local_1186_10                       ; compute cosine ;; @@670c 187
 13285  670f a950                                lda #<tempf3                              ;; @@670f 187
 13286  6711 a000                                ldy #>tempf3                             ; address of sine value ;; @@6711 187
 13287                          ; bra fdiv ;divide sine by cosine and return ;; @@6713 187
 13288  6713 20f760                              jsr conupk                               ; unpack constant    [910226] FAB ;; @@6713 187
 13289  6716 f32ec7                              +lbeq overr                              ; overflow error     " ;; @@6716 187
 13290  6719 8369fa                              +lbra fdivt                              ; " ;; @@6719 187
 13291                           ;; @@671c 187
 13292  671c 48                 _local_1186_10   pha                                      ; cosc. ;; @@671c 187
 13293  671d 80b8                                bra sin1                                  ;; @@671d 187
 13294                           ;; @@671f 187
 13295                           ;; @@671f 187
 13296                          ; Arctangent function ;; @@671f 187
 13297                          ; ;; @@671f 187
 13298                          ; Use identities to get arg between 0 and 1 and then use an approximation ;; @@671f 187
 13299                          ; polynomial to compute arctan(x). ;; @@671f 187
 13300                           ;; @@671f 187
 13301                           ;; @@671f 187
 13302  671f a568               atn              lda facsgn                               ; what is sign? ;; @@671f 188
 13303  6721 48                                  pha                                      ; save for later ;; @@6721 188
 13304  6722 1003                                bpl _local_1187_10                        ;; @@6722 188
 13305  6724 20fc65                              jsr negop                                ; if negative, negate FAC ;; @@6724 188
 13306                          ;use arctan(x)=-arctan(-x) ;; @@6727 188
 13307  6727 a563               _local_1187_10   lda facexp                                ;; @@6727 188
 13308  6729 48                                  pha                                      ; save this too for later ;; @@6729 188
 13309  672a c981                                cmp #$81                                 ; see if FAC >= 1.0 ;; @@672a 188
 13310  672c 9007                                bcc _local_1187_20                       ; it is less than 1 ;; @@672c 188
 13311  672e a999                                lda #<fone                               ; get pntr to 1.0 ;; @@672e 188
 13312  6730 a05f                                ldy #>fone                                ;; @@6730 188
 13313  6732 205d60                              jsr romdiv                               ; compute reciprocal ;; @@6732 188
 13314                          ;use aectan(x)=pi/2-arctan(1/x) ;; @@6735 188
 13315  6735 a9d1               _local_1187_20   lda #<atncon                             ; pointer to arctan constants ;; @@6735 188
 13316  6737 a05f                                ldy #>atncon                              ;; @@6737 188
 13317  6739 205a66                              jsr polyx                                 ;; @@6739 188
 13318  673c 68                                  pla                                       ;; @@673c 188
 13319  673d c981                                cmp #$81                                 ; was original argument < 1? ;; @@673d 188
 13320  673f 9007                                bcc _local_1187_30                       ; yes ;; @@673f 188
 13321  6741 a923                                lda #<pi2                                 ;; @@6741 188
 13322  6743 a05f                                ldy #>pi2                                 ;; @@6743 188
 13323  6745 205760                              jsr romsub                               ; subtract arctan from pi/2 ;; @@6745 188
 13324                           ;; @@6748 188
 13325  6748 68                 _local_1187_30   pla                                      ; was original aurgument positive? ;; @@6748 188
 13326  6749 1003                                bpl _local_1187_40                       ; yes ;; @@6749 188
 13327  674b 83aefe                              +lbra negop                              ; if negative, negate result ;; @@674b 188
 13328                           ;; @@674e 188
 13329  674e 60                 _local_1187_40   rts                                      ; all done ;; @@674e 188
 13330                           ;; @@674f 188
 13331                          ;.end ;; @@674f 188
 13332                          ; .page ;; @@674f 188
 13333                          ; .subttl  BOOT ;; @@674f 188
 13334                           ;; @@674f 188
 13335                          ;**************************************************************************** ;; @@674f 188
 13336                          ; BOOT  Boot has three modes of operation... ;; @@674f 188
 13337                          ; ;; @@674f 188
 13338                          ;   1. *B*LOAD a given binary file and SYS to its load address. ;; @@674f 188
 13339                          ;   2. *D*LOAD a BASIC file named AUTOBOOT.C65* and RUN it. ;; @@674f 188
 13340                          ;   3. BOOT SYS loads the home sector to $0400 and JMPs to it. ;; @@674f 188
 13341                          ; ;; @@674f 188
 13342                          ; For modes 1 & 2, syntax is the same as BLOAD.  Differentiate ;; @@674f 188
 13343                          ; between the two modes via the presence of a filename.  All other ;; @@674f 188
 13344                          ; parameters, such as drive and device numbers, are utilized in the ;; @@674f 188
 13345                          ; normal manner.  For mode 3 there are no options.  It's intended ;; @@674f 188
 13346                          ; to boot a new OS.  BASIC is turned off if it's successful.  If it ;; @@674f 188
 13347                          ; fails, the run time stack & sprites might be corrupted. ;; @@674f 188
 13348                          ;**************************************************************************** ;; @@674f 188
 13349                           ;; @@674f 188
 13350  674f c99e               boot             cmp #sys_token                           ; BOOTSYS?      [910111] ;; @@674f 189
 13351  6751 d00d                                bne _local_1188_1                        ; no ;; @@6751 189
 13352  6753 208322                              jsr chrget                               ; yes- eat token ;; @@6753 189
 13353  6756 2059ff                              jsr _bootsys                             ; attempt to boot a new OS ;; @@6756 189
 13354  6759 902f                                bcc _local_1188_15                       ; returned to us after successful install ;; @@6759 189
 13355  675b a224                                ldx #errbdk                              ; bootsys failed, report 'bad disk'???? ;; @@675b 189
 13356  675d 83efc6                              +lbra error                               ;; @@675d 189
 13357                           ;; @@6760 189
 13358  6760 4f7e03             _local_1188_1    bbr4 runmod,_local_1188_2                ; Error if in Edit mode     [910620] ;; @@6760 189
 13359  6763 83f3d5                              +lbra edit_err                            ;; @@6763 189
 13360                           ;; @@6766 189
 13361  6766 a900               _local_1188_2    lda #0                                   ; BOOT "filename"     [910417] ;; @@6766 189
 13362  6768 850c                                sta verck                                ; want 'load', not 'verify' ;; @@6768 189
 13363  676a a9e6                                lda #$e6                                 ; set up parameters for DOS parser like BLOAD ;; @@676a 189
 13364  676c a2fc                                ldx #$fc                                  ;; @@676c 189
 13365  676e 202274                              jsr dosprx                               ; parse the command ;; @@676e 189
 13366  6771 0f7f17                              bbr0 parsts,_local_1188_20               ; was there a filename?  branch if not ;; @@6771 189
 13367  6774 20ed71                              jsr bload_boot                           ; yes- bload it ;; @@6774 189
 13368  6777 b3bc00                              +lbcs erexit                             ; load error ;; @@6777 189
 13369                           ;; @@677a 189
 13370                          ; ldx current_bank ;assume no B(ank) arg was given    [910114] ;; @@677a 189
 13371                          ; bbr0 parstx,_local_1188_10  ; correct, use current setup ;; @@677a 189
 13372  677a ae8c11                              ldx dosbnk                               ; else use given bank number ;; @@677a 189
 13373  677d 8602               _local_1188_10   stx _bank                                 ;; @@677d 189
 13374  677f a5ac                                lda _starting_addr                       ; set up address BLOAD loaded to ;; @@677f 189
 13375  6781 8504                                sta _pclo                                 ;; @@6781 189
 13376  6783 a5ad                                lda _starting_addr+1                      ;; @@6783 189
 13377  6785 8503                                sta _pchi                                 ;; @@6785 189
 13378  6787 206eff                              jsr _jsr_far                             ; call it ;; @@6787 189
 13379  678a 60                 _local_1188_15   rts                                       ;; @@678a 189
 13380                           ;; @@678b 189
 13381  678b a0ff               _local_1188_20   ldy #$ff                                  ;; @@678b 189
 13382  678d c8                 _local_1188_30   iny                                      ; Copy default filename from ROM into buffer ;; @@678d 189
 13383  678e b92868                              lda autoboot_filename,y                   ;; @@678e 189
 13384  6791 999111                              sta savram,y                              ;; @@6791 189
 13385  6794 d0f7                                bne _local_1188_30                       ; null terminated ;; @@6794 189
 13386                           ;; @@6796 189
 13387  6796 8c8511                              sty dosf1l                               ; length not counting terminator ;; @@6796 189
 13388  6799 e77e                                smb6 runmod                              ; set flag for load not to go to ready ;; @@6799 189
 13389  679b 207b71                              jsr dload_boot                           ; Load it ;; @@679b 189
 13390  679e b39500                              +lbcs erexit                             ; error if problems ;; @@679e 189
 13391  67a1 831fd6                              +lbra run_a_program                      ; else go run it ;; @@67a1 189
 13392                           ;; @@67a4 189
 13393                          ; .page ;; @@67a4 189
 13394                          ; AUTOBOOT_CSG Runs a system diagnostic if PB0 is low after initialization. ;; @@67a4 189
 13395                          ;  Diagnostic is copied to RAM-0 from ROM-2 and jumped to. ;; @@67a4 189
 13396                           ;; @@67a4 189
 13397                          autobootCSG                                               ; Run ROMed diagnostic if PB0 low   [911105] ;; @@67a4 190
 13398  67a4 ad01dd                              lda $dd01                                 ;; @@67a4 190
 13399  67a7 4a                                  lsr                                       ;; @@67a7 190
 13400  67a8 b032                                bcs autoboot                             ; no, try to boot from disk ;; @@67a8 190
 13401                           ;; @@67aa 190
 13402  67aa 78                                  sei                                      ; prevent IRQ from wacking code DL'd to $1xxx  [911106] ;; @@67aa 190
 13403  67ab a20b                                ldx #12-1                                 ;; @@67ab 190
 13404  67ad bdd067             _local_1189_10   lda _local_1189_20,x                     ; prep DMA list ;; @@67ad 190
 13405  67b0 9d4401                              sta dma1_cmd,x                            ;; @@67b0 190
 13406  67b3 ca                                  dex                                       ;; @@67b3 190
 13407  67b4 10f7                                bpl _local_1189_10                        ;; @@67b4 190
 13408                           ;; @@67b6 190
 13409  67b6 a900                                lda #0                                    ;; @@67b6 190
 13410  67b8 a201                                ldx #>dma1_cmd                           ; copy program from ROM to RAM ;; @@67b8 190
 13411  67ba a044                                ldy #<dma1_cmd                            ;; @@67ba 190
 13412  67bc 8d02d7                              sta dma_ctlr+2                           ; dma_list bank ;; @@67bc 190
 13413  67bf 8e01d7                              stx dma_ctlr+1                           ; dma_list hi ;; @@67bf 190
 13414  67c2 8c00d7                              sty dma_ctlr                             ; dma_list lo & trigger ;; @@67c2 190
 13415                           ;; @@67c5 190
 13416                          ; jmp run_a_program ;if 'program' was BASIC ;; @@67c5 190
 13417                          ; lda #0   ;else set up arg's for call to 'long jmp'  [911105] ;; @@67c5 190
 13418  67c5 8502                                sta _bank                                 ;; @@67c5 190
 13419  67c7 8504                                sta _pclo                                 ;; @@67c7 190
 13420  67c9 a910                                lda #$10                                  ;; @@67c9 190
 13421  67cb 8503                                sta _pchi                                 ;; @@67cb 190
 13422  67cd 4c71ff                              jmp _jmp_far                             ; jump to code, no return.  NOTE: this *MAPs* RAM-0 into context! ;; @@67cd 190
 13423                           ;; @@67d0 190
 13424                          ; move from $024001 to $002001, $3FFF bytes  BASIC program ;; @@67d0 190
 13425                          ;_local_1189_20 .byte $00,$ff,$3f,$01,$40,$02,$01,$20,$00,$00,$00,$00 ;; @@67d0 190
 13426                           ;; @@67d0 190
 13427                          ; move from $024000 to $1000, $4000 bytes   Diagnostic  [911105] ;; @@67d0 190
 13428  67d0 0000400040020010..._local_1189_20   !text $00,$00,$40,$00,$40,$02,$00,$10,$00,0,0,0  ;; @@67d0 190
 13429                           ;; @@67dc 190
 13430                          ; .page ;; @@67dc 190
 13431                          ; AUTOBOOT Attempts to RUN a disk program after cold startup.  The ;; @@67dc 190
 13432                          ;  program must be a BASIC program called "AUTOBOOT.C65*" ;; @@67dc 190
 13433                           ;; @@67dc 190
 13434                          autoboot                                                   ;; @@67dc 191
 13435  67dc a900                                lda #0                                   ; Select internal drive ;; @@67dc 191
 13436  67de 8d80d0                              sta fdc                                   ;; @@67de 191
 13437  67e1 2c82d0             _local_1190_10   bit fdc+2                                ; busywait ;; @@67e1 191
 13438  67e4 30fb                                bmi _local_1190_10                        ;; @@67e4 191
 13439  67e6 ad83d0                              lda fdc+3                                ; See if a diskette is present ;; @@67e6 191
 13440  67e9 2908                                and #$08                                  ;; @@67e9 191
 13441  67eb f03a                                beq _local_1190_30                       ; exit with no action taken if not ;; @@67eb 191
 13442                           ;; @@67ed 191
 13443  67ed a9e6                                lda #$e6                                 ; set up parameters for DOS parser like BLOAD ;; @@67ed 191
 13444  67ef a2fc                                ldx #$fc                                  ;; @@67ef 191
 13445  67f1 202274                              jsr dosprx                               ; let the parser init DOS stuff ;; @@67f1 191
 13446                           ;; @@67f4 191
 13447  67f4 a0ff                                ldy #$ff                                  ;; @@67f4 191
 13448  67f6 c8                 _local_1190_20   iny                                      ; Copy filename from ROM into buffer ;; @@67f6 191
 13449  67f7 b92868                              lda autoboot_filename,y                   ;; @@67f7 191
 13450  67fa 999111                              sta savram,y                              ;; @@67fa 191
 13451  67fd d0f7                                bne _local_1190_20                       ; null terminated ;; @@67fd 191
 13452  67ff 8c8511                              sty dosf1l                               ; length not counting terminator ;; @@67ff 191
 13453                           ;; @@6802 191
 13454  6802 a941                                lda #%01000001                           ; set flag for load indicating autoboot ;; @@6802 191
 13455  6804 857e                                sta runmod                               ; set flag for load not to go to ready ;; @@6804 191
 13456  6806 207b71                              jsr dload_boot                           ; skip parser & load it ;; @@6806 191
 13457                           ;; @@6809 191
 13458  6809 a900                                lda #0                                   ; clear autoboot flags ;; @@6809 191
 13459  680b 857e                                sta runmod                                ;; @@680b 191
 13460  680d da                                  phx                                      ; save end address ;; @@680d 191
 13461  680e 5a                                  phy                                       ;; @@680e 191
 13462  680f 20b7ff                              jsr _readst                              ; get status report, but check it later ;; @@680f 191
 13463  6812 48                                  pha                                       ;; @@6812 191
 13464  6813 209a78                              jsr Suck_DS                              ; clear any DOS errors (to kill error LED) ;; @@6813 191
 13465  6816 68                                  pla                                      ; now check I/O status ;; @@6816 191
 13466  6817 7a                                  ply                                       ;; @@6817 191
 13467  6818 fa                                  plx                                       ;; @@6818 191
 13468  6819 29bf                                and #$bf                                 ; EOI is okay ;; @@6819 191
 13469  681b d00a                                bne _local_1190_30                       ; outside problems ;; @@681b 191
 13470  681d b008                                bcs _local_1190_30                       ; inside problems ;; @@681d 191
 13471                           ;; @@681f 191
 13472  681f 8682                                stx text_top                             ; success- set end address & run it ;; @@681f 191
 13473  6821 8483                                sty text_top+1                            ;; @@6821 191
 13474  6823 58                                  cli                                       ;; @@6823 191
 13475  6824 839cd5                              +lbra run_a_program                       ;; @@6824 191
 13476                           ;; @@6827 191
 13477  6827 60                 _local_1190_30   rts                                      ; failure- go_ready ;; @@6827 191
 13478                           ;; @@6828 191
 13479                           ;; @@6828 191
 13480                          autoboot_filename                                           ;; @@6828 192
 13481  6828 4155544f424f4f54...                 !text "AUTOBOOT.C65*",0                   ;; @@6828 192
 13482                           ;; @@6836 192
 13483                          ; .page ;; @@6836 192
 13484                          ; .subttl  SAVE  LOAD  VERIFY  OPEN  CLOSE ;; @@6836 192
 13485                           ;; @@6836 192
 13486  6836 aa                 erexit           tax                                      ; set termination flags ;; @@6836 192
 13487  6837 d315c6                              +lbne error                              ; normal error ;; @@6837 192
 13488  683a 8394c4                              +lbra break_exit                         ; user break ;; @@683a 192
 13489                           ;; @@683d 192
 13490                           ;; @@683d 192
 13491                           ;; @@683d 192
 13492  683d 20d2ff             outch            jsr _bsout                                ;; @@683d 192
 13493  6840 b0f4                                bcs erexit                                ;; @@6840 192
 13494  6842 60                                  rts                                       ;; @@6842 192
 13495                           ;; @@6843 192
 13496                           ;; @@6843 192
 13497                           ;; @@6843 192
 13498  6843 20cfff             inchr            jsr _basin                                ;; @@6843 192
 13499  6846 b0ee                                bcs erexit                                ;; @@6846 192
 13500  6848 60                                  rts                                       ;; @@6848 192
 13501                           ;; @@6849 192
 13502                           ;; @@6849 192
 13503                          coout                                                      ;; @@6849 192
 13504                          ; jsr put_io_in_map ;; @@6849 192
 13505  6849 20c9ff                              jsr _chkout                               ;; @@6849 192
 13506  684c 20c169                              jsr dschk                                ; see if device # >=4, and clear DS if so ;; @@684c 192
 13507  684f b0e5                                bcs erexit                               ; take error exit of there was one ;; @@684f 192
 13508  6851 60                                  rts                                       ;; @@6851 192
 13509                           ;; @@6852 192
 13510                           ;; @@6852 192
 13511                          coin                                                       ;; @@6852 192
 13512                          ; jsr put_io_in_map ;; @@6852 192
 13513  6852 20c6ff                              jsr _chkin                                ;; @@6852 192
 13514  6855 20c169                              jsr dschk                                ; see if device # >=4, and clear DS if so ;; @@6855 192
 13515  6858 b0dc                                bcs erexit                                ;; @@6858 192
 13516  685a 60                                  rts                                       ;; @@685a 192
 13517                           ;; @@685b 192
 13518                          cgetl                                                      ;; @@685b 192
 13519                          ; jsr put_io_in_map ;; @@685b 192
 13520  685b 20e4ff                              jsr _getin                                ;; @@685b 192
 13521  685e b370c4                              +lbcs break_exit                         ; 'stop' key was pressed ;; @@685e 192
 13522  6861 60                                  rts                                       ;; @@6861 192
 13523                           ;; @@6862 192
 13524                          ; .page ;; @@6862 192
 13525  6862 202569             save             jsr plsv                                 ; parse parameters, dschk ;; @@6862 192
 13526                           ;; @@6865 192
 13527                           ;; @@6865 192
 13528                          savenp                                                    ; Save Program (from DSave) ;; @@6865 192
 13529  6865 a682                                ldx text_top                             ; ending address ;; @@6865 192
 13530  6867 a483                                ldy text_top+1                            ;; @@6867 192
 13531  6869 a92d                                lda #<txttab                             ; pointer to start address ;; @@6869 192
 13532                           ;; @@686b 192
 13533                           ;; @@686b 192
 13534                          savenb                                                    ; Save Binary (from BSave & KEY SAVE) ;; @@686b 192
 13535                          ; jsr put_io_in_map ;; @@686b 192
 13536  686b 20d8ff                              jsr _savesp                              ; save it ;; @@686b 192
 13537                           ;; @@686e 192
 13538                          ; Any changes to the following code must be duplicated at: ;; @@686e 192
 13539                          ;  bload ;; @@686e 192
 13540                          ;  load (load_file) ;; @@686e 192
 13541                           ;; @@686e 192
 13542                          exit_disk_op                                               ;; @@686e 192
 13543                          exit_disk_operation                                           ;; @@686e 192
 13544  686e 08                                  php                                      ; preserve kernel error status (.c) ;; @@686e 192
 13545  686f 48                                  pha                                      ; preserve kernel error # (.a) ;; @@686f 192
 13546  6870 206e72                              jsr print_dos_error                      ; print DOS error msg if any only in direct mode ;; @@6870 192
 13547  6873 68                                  pla                                       ;; @@6873 192
 13548  6874 28                                  plp                                       ;; @@6874 192
 13549  6875 900f                                bcc _local_1191_30                       ; branch if no error (rts) ;; @@6875 192
 13550  6877 ff7e0a                              bbs7 runmod,_local_1191_20               ; branch if run mode (erexit) ;; @@6877 192
 13551  687a c904                                cmp #errfnf                              ; is it 'file not found' catch-all? ;; @@687a 192
 13552  687c d005                                bne _local_1191_10                       ; no  (erexit) ;; @@687c 192
 13553  687e 8dc702                              sta errnum                               ; yes- save error # for 'er' ;; @@687e 192
 13554  6881 0980                                ora #$80                                 ; but no errdis ;; @@6881 192
 13555  6883 38                 _local_1191_10   sec                                       ;; @@6883 192
 13556  6884 b0b0               _local_1191_20   bcs erexit                               ; exit if kernel problem (rts) ;; @@6884 192
 13557  6886 60                 _local_1191_30   rts                                       ;; @@6886 192
 13558                           ;; @@6887 192
 13559                          ; .page ;; @@6887 192
 13560  6887 a901               verify           lda #1                                   ; verify flag ;; @@6887 193
 13561  6889 2c                                  !text $2c                                ; skip two bytes ;; @@6889 193
 13562                           ;; @@688a 193
 13563  688a a900               load             lda #0                                   ; load flag ;; @@688a 193
 13564  688c 850c                                sta verck                                 ;; @@688c 193
 13565  688e 4f7e03             _local_1192_1    bbr4 runmod,_local_1192_2                ; Error if in Edit mode     [910620] ;; @@688e 193
 13566  6891 83c5d4                              +lbra edit_err                            ;; @@6891 193
 13567  6894 202569             _local_1192_2    jsr plsv                                 ; parse parameters, dschk ;; @@6894 193
 13568                           ;; @@6897 193
 13569                          cld10                                                     ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< entry from dload ;; @@6897 194
 13570                          ; jsr put_io_in_map ;; @@6897 194
 13571  6897 a50c                                lda verck                                 ;; @@6897 194
 13572  6899 a62d                                ldx txttab                               ; .x and .y have alt... ;; @@6899 194
 13573  689b a42e                                ldy txttab+1                             ; ...load address ;; @@689b 194
 13574                           ;; @@689d 194
 13575                          ; Any changes to the following code must be duplicated at: ;; @@689d 194
 13576                          ;  bload ;; @@689d 194
 13577                          ;  save (exit_disk_op) ;; @@689d 194
 13578                           ;; @@689d 194
 13579                          load_file                                                  ;; @@689d 194
 13580  689d 20d5ff                              jsr _loadsp                              ; load it ;; @@689d 194
 13581  68a0 8f7e36                              bbs0 runmod,cld20                        ; skip error checks if autoboot (rts) ;; @@68a0 194
 13582  68a3 da                                  phx                                      ; save end address ;; @@68a3 194
 13583  68a4 5a                                  phy                                       ;; @@68a4 194
 13584  68a5 08                                  php                                      ; save kernel load status (.c) ;; @@68a5 194
 13585  68a6 48                                  pha                                      ; save kernel error # (.a) ;; @@68a6 194
 13586  68a7 20b7ff                              jsr _readst                              ; save I/O status byte ;; @@68a7 194
 13587  68aa 857f                                sta parsts                                ;; @@68aa 194
 13588  68ac 206e72                              jsr print_dos_error                      ; report error msg if any only in direct mode ;; @@68ac 194
 13589  68af 68                                  pla                                      ; restore error stuff ;; @@68af 194
 13590  68b0 28                                  plp                                       ;; @@68b0 194
 13591  68b1 9010                                bcc _local_1193_30                       ; branch if no error (rts) ;; @@68b1 194
 13592  68b3 ff7e0a                              bbs7 runmod,_local_1193_20               ; branch if run mode (erexit) ;; @@68b3 194
 13593  68b6 c904                                cmp #errfnf                              ; is it 'file not found' catch-all? ;; @@68b6 194
 13594  68b8 d005                                bne _local_1193_10                       ; no  (erexit) ;; @@68b8 194
 13595  68ba 8dc702                              sta errnum                               ; yes- save error # for 'er' ;; @@68ba 194
 13596  68bd 0980                                ora #$80                                 ; but no errdis ;; @@68bd 194
 13597  68bf 38                 _local_1193_10   sec                                       ;; @@68bf 194
 13598  68c0 b373ff             _local_1193_20   +lbcs erexit                             ; exit if kernel problem ;; @@68c0 194
 13599  68c3 7a                 _local_1193_30   ply                                      ; restore end address ;; @@68c3 194
 13600  68c4 fa                                  plx                                       ;; @@68c4 194
 13601  68c5 a50c                                lda verck                                 ;; @@68c5 194
 13602  68c7 f011                                beq cld50                                ; was load ;; @@68c7 194
 13603                           ;; @@68c9 194
 13604                          ; Finish verify ;; @@68c9 194
 13605                           ;; @@68c9 194
 13606                          verify_check                                               ;; @@68c9 195
 13607  68c9 a21c                                ldx #ervfy                               ; assume error ;; @@68c9 195
 13608                          ; jsr _readst  ;read status ;; @@68cb 195
 13609  68cb cf7f14                              bbs4 parsts,cld55                        ; branch if 'verify' error ;; @@68cb 195
 13610  68ce ff7e08                              bbs7 runmod,cld20                        ; branch if not direct mode ;; @@68ce 195
 13611                          verify_ok                                                  ;; @@68d1 195
 13612  68d1 207dff                              jsr _primm                                ;; @@68d1 195
 13613  68d4 0d4f4b0d00                          !text cr,"OK", cr,0                       ;; @@68d4 195
 13614  68d9 60                 cld20            rts                                       ;; @@68d9 195
 13615                           ;; @@68da 195
 13616                           ;; @@68da 195
 13617                           ;; @@68da 195
 13618                          ; Finish load ;; @@68da 195
 13619                           ;; @@68da 195
 13620                          cld50                                                      ;; @@68da 195
 13621                          ; jsr _readst  ;check I/O status ;; @@68da 195
 13622  68da a57f                                lda parsts                                ;; @@68da 195
 13623  68dc 29bf                                and #%10111111                           ; EOI is okay, so mask it ;; @@68dc 195
 13624  68de f005                                beq cld60                                ; good- finish load operation ;; @@68de 195
 13625                           ;; @@68e0 195
 13626                          load_error                                                 ;; @@68e0 195
 13627  68e0 a21d                                ldx #erload                               ;; @@68e0 195
 13628  68e2 836ac5             cld55            +lbra error                               ;; @@68e2 195
 13629                           ;; @@68e5 195
 13630                           ;; @@68e5 195
 13631  68e5 8682               cld60            stx text_top                              ;; @@68e5 195
 13632  68e7 8483                                sty text_top+1                           ; end load address ;; @@68e7 195
 13633                           ;; @@68e9 195
 13634  68e9 ff7e0c                              bbs7 runmod,cld70                        ; branch if not direct mode ;; @@68e9 195
 13635  68ec ef7eea                              bbs6 runmod,cld20                        ; special "RUN file_name" flag...get out here (rts) ;; @@68ec 195
 13636                           ;; @@68ef 195
 13637  68ef 20b930                              jsr link_program                         ; relink ;; @@68ef 195
 13638  68f2 20a134                              jsr runc                                 ; clear vars ;; @@68f2 195
 13639  68f5 83f5c5                              +lbra ready_2                            ; print 'ready' & return to main ;; @@68f5 195
 13640                           ;; @@68f8 195
 13641                           ;; @@68f8 195
 13642                          ; Program load ;; @@68f8 195
 13643                           ;; @@68f8 195
 13644  68f8 201f35             cld70            jsr reset_txtptr                          ;; @@68f8 195
 13645  68fb 20b930                              jsr link_program                          ;; @@68fb 195
 13646  68fe 8305cc                              +lbra fload                               ;; @@68fe 195
 13647                           ;; @@6901 195
 13648                          ; .page ;; @@6901 195
 13649  6901 207469             open             jsr paoc                                 ; parse statement ;; @@6901 195
 13650  6904 20c0ff                              jsr _open                                ; open it ;; @@6904 195
 13651  6907 8009                                bra close_out_1                           ;; @@6907 195
 13652                           ;; @@6909 195
 13653                           ;; @@6909 195
 13654                           ;; @@6909 195
 13655  6909 207469             close            jsr paoc                                 ; parse statement ;; @@6909 195
 13656                          ; jsr put_io_in_map ;; @@690c 195
 13657  690c a54b                                lda andmsk                               ; get la ;; @@690c 195
 13658                           ;; @@690e 195
 13659                           ;; @@690e 195
 13660                          close_out                                                 ; enter with .a=LA   [900725] ;; @@690e 195
 13661  690e 18                                  clc                                      ; flag a real close ;; @@690e 195
 13662  690f 20c3ff                              jsr _close                               ; close it ;; @@690f 195
 13663                           ;; @@6912 195
 13664                          close_out_1                                                ;; @@6912 195
 13665  6912 08                                  php                                       ;; @@6912 195
 13666  6913 48                                  pha                                       ;; @@6913 195
 13667  6914 a5ba                                lda _fa                                  ; special error checking if disk op ;; @@6914 195
 13668  6916 c908                                cmp #8                                    ;; @@6916 195
 13669  6918 9005                                bcc _local_1194_10                        ;; @@6918 195
 13670  691a 68                                  pla                                       ;; @@691a 195
 13671  691b 28                                  plp                                       ;; @@691b 195
 13672  691c 834fff                              +lbra exit_disk_operation                ; disk ;; @@691c 195
 13673                           ;; @@691f 195
 13674  691f 68                 _local_1194_10   pla                                      ; something else ;; @@691f 195
 13675  6920 28                                  plp                                       ;; @@6920 195
 13676  6921 b312ff                              +lbcs erexit                              ;; @@6921 195
 13677  6924 60                                  rts                                       ;; @@6924 195
 13678                           ;; @@6925 195
 13679                          ; .page ;; @@6925 195
 13680                          ; Parse LOAD, SAVE, & VERIFY commands ;; @@6925 195
 13681                           ;; @@6925 195
 13682                          plsv                                                       ;; @@6925 196
 13683  6925 a900                                lda #0                                   ; set default filename (none) ;; @@6925 196
 13684  6927 20bdff                              jsr _setnam                               ;; @@6927 196
 13685  692a ae0611                              ldx _default_drive                       ; set default device # (dosffn) ;; @@692a 196
 13686  692d a000                                ldy #0                                   ; command 0 ;; @@692d 196
 13687  692f 20baff                              jsr _setlfs                               ;; @@692f 196
 13688  6932 a584                                lda text_bank                            ; all loads to   bank 0 ???? set default memory banks ;; @@6932 196
 13689  6934 a685                                ldx var_bank                             ; all names from bank 1 ????   [910620] ;; @@6934 196
 13690  6936 206bff                              jsr _setbank                              ;; @@6936 196
 13691                           ;; @@6939 196
 13692  6939 206169                              jsr paoc20                               ; by-pass junk ;; @@6939 196
 13693  693c 20b869                              jsr paoc15                               ; get/set file name ;; @@693c 196
 13694  693f 206169                              jsr paoc20                               ; by-pass junk ;; @@693f 196
 13695  6942 205b69                              jsr plsv7                                ; get ',fa' ;; @@6942 196
 13696  6945 a000                                ldy #0                                   ; command 0 ;; @@6945 196
 13697  6947 864b                                stx andmsk                                ;; @@6947 196
 13698  6949 20baff                              jsr _setlfs                               ;; @@6949 196
 13699  694c 206169                              jsr paoc20                               ; by-pass junk ;; @@694c 196
 13700  694f 205b69                              jsr plsv7                                ; get ',sa' ;; @@694f 196
 13701  6952 8a                                  txa                                      ; new command ;; @@6952 196
 13702  6953 a8                                  tay                                       ;; @@6953 196
 13703  6954 a64b                                ldx andmsk                               ; device # ;; @@6954 196
 13704  6956 20baff                              jsr _setlfs                               ;; @@6956 196
 13705  6959 8066                                bra dschk                                ; make dosfa current   [900801] ;; @@6959 196
 13706                           ;; @@695b 196
 13707                           ;; @@695b 196
 13708                           ;; @@695b 196
 13709                          ; Look for comma followed by byte ;; @@695b 196
 13710                           ;; @@695b 196
 13711  695b 206969             plsv7            jsr paoc30                                ;; @@695b 196
 13712  695e 830bf4                              +lbra getbyt                              ;; @@695e 196
 13713                           ;; @@6961 196
 13714                           ;; @@6961 196
 13715                           ;; @@6961 196
 13716                          ; Skip return if next char is end ;; @@6961 196
 13717                           ;; @@6961 196
 13718  6961 208522             paoc20           jsr chrgot                                ;; @@6961 196
 13719  6964 d002                                bne paocx                                 ;; @@6964 196
 13720  6966 68                                  pla                                       ;; @@6966 196
 13721  6967 68                                  pla                                       ;; @@6967 196
 13722  6968 60                 paocx            rts                                       ;; @@6968 196
 13723                           ;; @@6969 196
 13724                           ;; @@6969 196
 13725                           ;; @@6969 196
 13726                          ; Check for comma and good stuff ;; @@6969 196
 13727                           ;; @@6969 196
 13728  6969 205b4e             paoc30           jsr chkcom                               ; check comma ;; @@6969 196
 13729                           ;; @@696c 196
 13730  696c 208522             paoc32           jsr chrgot                               ; get current character ;; @@696c 196
 13731  696f d0f7                                bne paocx                                ; is okay ;; @@696f 196
 13732  6971 83d6c4                              +lbra snerr                              ; bad...end of line ;; @@6971 196
 13733                           ;; @@6974 196
 13734                           ;; @@6974 196
 13735                          ; Parse OPEN/CLOSE ;; @@6974 196
 13736                           ;; @@6974 196
 13737  6974 a900               paoc             lda #sys_bank                            ; ????      [910620] ;; @@6974 196
 13738  6976 a685                                ldx var_bank                             ;  ;; @@6976 196
 13739  6978 206bff                              jsr _setbank                             ; filename bank     (string bank)???? ;; @@6978 196
 13740  697b 20bdff                              jsr _setnam                              ; default file name (null) ;; @@697b 196
 13741  697e 206c69                              jsr paoc32                               ; must get something ;; @@697e 196
 13742  6981 206c5d                              jsr getbyt                               ; get la ;; @@6981 196
 13743  6984 864b                                stx andmsk                                ;; @@6984 196
 13744  6986 8a                                  txa                                       ;; @@6986 196
 13745  6987 ae0611                              ldx _default_drive                       ; default device ;; @@6987 196
 13746  698a a000                                ldy #0                                   ; default command ;; @@698a 196
 13747  698c 20baff                              jsr _setlfs                              ; store it ;; @@698c 196
 13748  698f 206169                              jsr paoc20                               ; skip junk ;; @@698f 196
 13749  6992 205b69                              jsr plsv7                                 ;; @@6992 196
 13750  6995 864c                                stx eormsk                                ;; @@6995 196
 13751  6997 a000                                ldy #0                                   ; default sa (command) ;; @@6997 196
 13752  6999 a54b                                lda andmsk                               ; get la ;; @@6999 196
 13753  699b e003                                cpx #3                                    ;; @@699b 196
 13754  699d 9001                                bcc _local_1195_10                        ;; @@699d 196
 13755  699f 88                                  dey                                      ; if sa not given and fa=serial bus, default to $ff ;; @@699f 196
 13756  69a0 20baff             _local_1195_10   jsr _setlfs                              ; store them ;; @@69a0 196
 13757  69a3 206169                              jsr paoc20                               ; skip junk ;; @@69a3 196
 13758  69a6 205b69                              jsr plsv7                                ; get sa ;; @@69a6 196
 13759  69a9 8a                                  txa                                       ;; @@69a9 196
 13760  69aa a8                                  tay                                       ;; @@69aa 196
 13761  69ab a64c                                ldx eormsk                                ;; @@69ab 196
 13762  69ad a54b                                lda andmsk                                ;; @@69ad 196
 13763  69af 20baff                              jsr _setlfs                              ; set up real everything ;; @@69af 196
 13764  69b2 206169                              jsr paoc20                                ;; @@69b2 196
 13765  69b5 206969                              jsr paoc30                                ;; @@69b5 196
 13766                           ;; @@69b8 196
 13767  69b8 20675b             paoc15           jsr frmstr                               ; do frmevl, frestr. return with len in a, index =~string ;; @@69b8 197
 13768  69bb 20dd5b                              jsr getspa                               ; ????fixes old PET bug- load"string",val(chr$(56)) [910917] ;; @@69bb 197
 13769                          ; ldx index1 ;; @@69be 197
 13770                          ; ldy index1+1 ;; @@69be 197
 13771  69be 20bdff                              jsr _setnam                              ; bank always set at plsv ;; @@69be 197
 13772                          ;fall into dschk     [900801] ;; @@69c1 197
 13773                           ;; @@69c1 197
 13774                           ;; @@69c1 197
 13775                           ;; @@69c1 197
 13776  69c1 08                 dschk            php                                      ; check if current device >=8, and clear DS if so ;; @@69c1 197
 13777  69c2 48                                  pha                                       ;; @@69c2 197
 13778  69c3 a5ba                                lda _fa                                   ;; @@69c3 197
 13779  69c5 c901                                cmp #1                                    ;; @@69c5 197
 13780  69c7 d005                                bne _local_1196_10                        ;; @@69c7 197
 13781  69c9 ad0611                              lda _default_drive                        ;; @@69c9 197
 13782  69cc 85ba                                sta _fa                                   ;; @@69cc 197
 13783  69ce c908               _local_1196_10   cmp #8                                   ; ????     [900807] ;; @@69ce 197
 13784  69d0 9006                                bcc _local_1196_20                        ;; @@69d0 197
 13785  69d2 8d8211                              sta dosfa                                ; also make last DOS device = current device ;; @@69d2 197
 13786  69d5 208278                              jsr Clear_DS                              ;; @@69d5 197
 13787  69d8 68                 _local_1196_20   pla                                       ;; @@69d8 197
 13788  69d9 28                                  plp                                       ;; @@69d9 197
 13789  69da 60                                  rts                                       ;; @@69da 197
 13790                           ;; @@69db 197
 13791                          ; .page ;; @@69db 197
 13792                          ;k_readst ;; @@69db 197
 13793                          ; jsr put_io_in_map ;; @@69db 197
 13794                          ; jmp _readst ;; @@69db 197
 13795                           ;; @@69db 197
 13796                           ;; @@69db 197
 13797                           ;; @@69db 197
 13798                          ;k_setlfs ;; @@69db 197
 13799                          ; jsr put_io_in_map ;; @@69db 197
 13800                          ; jmp _setlfs ;; @@69db 197
 13801                           ;; @@69db 197
 13802                           ;; @@69db 197
 13803                           ;; @@69db 197
 13804                          ;k_setnam ;; @@69db 197
 13805                          ; jsr put_io_in_map ;; @@69db 197
 13806                          ; jmp _setnam ;; @@69db 197
 13807                           ;; @@69db 197
 13808                           ;; @@69db 197
 13809                           ;; @@69db 197
 13810                          ;k_basin ;; @@69db 197
 13811                          ; jsr put_io_in_map ;; @@69db 197
 13812                          ; jmp _basin ;; @@69db 197
 13813                           ;; @@69db 197
 13814                           ;; @@69db 197
 13815                          ;k_bsout ;; @@69db 197
 13816                          ; jsr put_io_in_map ;; @@69db 197
 13817                          ; jmp _bsout ;; @@69db 197
 13818                           ;; @@69db 197
 13819                           ;; @@69db 197
 13820                          ;k_clrch ;; @@69db 197
 13821                          ; jsr put_io_in_map ;; @@69db 197
 13822                          ; jmp _clrch ;; @@69db 197
 13823                           ;; @@69db 197
 13824                           ;; @@69db 197
 13825                           ;; @@69db 197
 13826                          ;k_close ;; @@69db 197
 13827                          ; jsr put_io_in_map ;; @@69db 197
 13828                          ; jmp _close ;; @@69db 197
 13829                           ;; @@69db 197
 13830                           ;; @@69db 197
 13831                           ;; @@69db 197
 13832                          ;k_clall ;; @@69db 197
 13833                          ; jsr put_io_in_map ;; @@69db 197
 13834                          ; jmp _clall ;; @@69db 197
 13835                           ;; @@69db 197
 13836                           ;; @@69db 197
 13837                           ;; @@69db 197
 13838                          ;k_primm ;; @@69db 197
 13839                          ; jsr put_io_in_map ;; @@69db 197
 13840                          ; jmp _primm ;; @@69db 197
 13841                           ;; @@69db 197
 13842                           ;; @@69db 197
 13843                          ;k_setbank ;; @@69db 197
 13844                          ; jsr put_io_in_map ;; @@69db 197
 13845                          ; jmp _setbank ;; @@69db 197
 13846                          ; rts ;; @@69db 197
 13847                           ;; @@69db 197
 13848                           ;; @@69db 197
 13849                          ;k_plot ;; @@69db 197
 13850                          ; sta sw_rom_ram0  ;???? ;; @@69db 197
 13851                          ; jmp _plot ;; @@69db 197
 13852                           ;; @@69db 197
 13853                           ;; @@69db 197
 13854                          ;k_stop ;; @@69db 197
 13855                          ; jsr put_io_in_map ;; @@69db 197
 13856                          ; jmp _stop ;; @@69db 197
 13857                           ;; @@69db 197
 13858                          ;.end ;; @@69db 197
 13859                          ; .page ;; @@69db 197
 13860                          ; .subttl  PRINT USING ;; @@69db 197
 13861                          ; Print Using - Formatted print routine ;; @@69db 197
 13862                          ; ;; @@69db 197
 13863                          ; Entered by cmd, print, or print# ;; @@69db 197
 13864                          ; Syntax:  PRINT USING"****";a;b;c ;; @@69db 197
 13865                           ;; @@69db 197
 13866  69db 202c2e24           pudefs           !text " ,.$"                             ; default:  fill, comma, dec pnt, money symbol ;; @@69db 198
 13867                           ;; @@69df 198
 13868  69df a2ff               using            ldx #$ff                                  ;; @@69df 198
 13869  69e1 8eeb11                              stx endfd                                 ;; @@69e1 198
 13870  69e4 208322                              jsr chrget                                ;; @@69e4 198
 13871  69e7 20ef4c                              jsr frmevl                               ; evaluate format string ;; @@69e7 198
 13872  69ea 20dd4c                              jsr chkstr                               ; must be string type... ;; @@69ea 198
 13873                           ;; @@69ed 198
 13874  69ed a566                                lda facmo                                ; save temp descriptor ;; @@69ed 198
 13875  69ef 48                                  pha                                       ;; @@69ef 198
 13876  69f0 a567                                lda facmo+1                               ;; @@69f0 198
 13877  69f2 48                                  pha                                       ;; @@69f2 198
 13878                           ;; @@69f3 198
 13879  69f3 a002                                ldy #2                                   ; move (facmo),1&2 to form,form+1 ;; @@69f3 198
 13880  69f5 20a922             _local_1197_10   jsr indfmo                                ;; @@69f5 198
 13881  69f8 88                                  dey                                       ;; @@69f8 198
 13882  69f9 993f00                              sta form,y                                ;; @@69f9 198
 13883  69fc d0f7                                bne _local_1197_10                        ;; @@69fc 198
 13884                           ;; @@69fe 198
 13885  69fe 20a922                              jsr indfmo                               ; get length ;; @@69fe 198
 13886  6a01 8dea11                              sta lfor                                  ;; @@6a01 198
 13887  6a04 a8                                  tay                                       ;; @@6a04 198
 13888  6a05 f00b                                beq _local_1197_99                       ; syntax error if length is zero ;; @@6a05 198
 13889                           ;; @@6a07 198
 13890  6a07 88                 _local_1197_20   dey                                       ;; @@6a07 198
 13891  6a08 209d22                              jsr indfrm                                ;; @@6a08 198
 13892  6a0b c923                                cmp #'#'                                 ; at least one # in format? ;; @@6a0b 198
 13893  6a0d f006                                beq _local_1197_30                       ; yes... ;; @@6a0d 198
 13894  6a0f 98                                  tya                                      ; no...end of format ;; @@6a0f 198
 13895  6a10 d0f5                                bne _local_1197_20                       ; no... ;; @@6a10 198
 13896  6a12 8335c4             _local_1197_99   +lbra snerr                              ; yes...syntax error ;; @@6a12 198
 13897                           ;; @@6a15 198
 13898                           ;; @@6a15 198
 13899  6a15 a93b               _local_1197_30   lda #';'                                 ; ' ;; @@6a15 198
 13900  6a17 205d4e             eex2             jsr synchr                               ; check character ;; @@6a17 199
 13901  6a1a 8476                                sty z_p_temp_1                           ; clear flag for anaf ;; @@6a1a 199
 13902  6a1c 8cd811                              sty bnr                                  ; set pointer to begin of no ;; @@6a1c 199
 13903  6a1f 20ef4c                              jsr frmevl                               ; evaluate expression ;; @@6a1f 199
 13904  6a22 7f0f39                              bbr7 valtyp,conv                         ; branch if numeric ;; @@6a22 199
 13905                           ;; @@6a25 199
 13906  6a25 20536c                              jsr ini                                  ; init counters and flags ;; @@6a25 199
 13907  6a28 20a16d                              jsr anaf                                 ; analyze format ;; @@6a28 199
 13908  6a2b aee011                              ldx chsn                                 ; > or = in format field ;; @@6a2b 199
 13909  6a2e f015                                beq prcha                                ; branch if not ;; @@6a2e 199
 13910  6a30 a200                                ldx #0                                    ;; @@6a30 199
 13911  6a32 38                                  sec                                       ;; @@6a32 199
 13912  6a33 ade611                              lda cform                                 ;; @@6a33 199
 13913  6a36 e577                                sbc hulp                                 ; .a=room left in field ;; @@6a36 199
 13914  6a38 900b                                bcc prcha                                ; branch if no room left ;; @@6a38 199
 13915  6a3a a23d                                ldx #'='                                  ;; @@6a3a 199
 13916  6a3c ece011                              cpx chsn                                 ; = in field ;; @@6a3c 199
 13917  6a3f d003                                bne _local_1198_50                       ; branch if not ;; @@6a3f 199
 13918  6a41 4a                                  lsr                                      ; .a=.a/2 ;; @@6a41 199
 13919  6a42 6900                                adc #0                                   ; add 1 if odd ;; @@6a42 199
 13920                           ;; @@6a44 199
 13921  6a44 aa                 _local_1198_50   tax                                      ; store no of blanks in x ;; @@6a44 199
 13922  6a45 a000               prcha            ldy #0                                    ;; @@6a45 200
 13923  6a47 8a                 chx              txa                                       ;; @@6a47 200
 13924  6a48 f005                                beq cpef                                 ; branch if no blanks ;; @@6a48 200
 13925  6a4a ca                                  dex                                       ;; @@6a4a 200
 13926                           ;; @@6a4b 200
 13927  6a4b a920               oblk             lda #' '                                 ; output a blank ;; @@6a4b 200
 13928  6a4d 8008                                bra outc                                 ; always ;; @@6a4d 200
 13929                           ;; @@6a4f 200
 13930                           ;; @@6a4f 200
 13931  6a4f c477               cpef             cpy hulp                                 ; end of string reached? ;; @@6a4f 200
 13932  6a51 b0f8                                bcs oblk                                 ; output blank if yes ;; @@6a51 200
 13933  6a53 20d522                              jsr indin1_ram1                          ; lda (index),y ;; @@6a53 200
 13934  6a56 c8                                  iny                                       ;; @@6a56 200
 13935                           ;; @@6a57 200
 13936  6a57 209a6d             outc             jsr cdout                                ; output character ;; @@6a57 200
 13937  6a5a d0eb                                bne chx                                  ; branch if not ready ;; @@6a5a 200
 13938  6a5c 8029                                bra reay                                  ;; @@6a5c 200
 13939                           ;; @@6a5e 200
 13940                           ;; @@6a5e 200
 13941                           ;; @@6a5e 200
 13942  6a5e 208f64             conv             jsr fout                                 ; convert mfp to decimal ;; @@6a5e 200
 13943                           ;; @@6a61 200
 13944  6a61 a0ff                                ldy #$ff                                 ; build descriptor for fout string ;; @@6a61 200
 13945  6a63 c8                 _local_1199_10   iny                                      ; how big IS it? ;; @@6a63 200
 13946  6a64 b90001                              lda fbuffr,y                              ;; @@6a64 200
 13947  6a67 d0fa                                bne _local_1199_10                        ;; @@6a67 200
 13948  6a69 98                                  tya                                       ;; @@6a69 200
 13949  6a6a 207b5a                              jsr strspa                               ; jsr getspa,stx dsctmp+1,sty dsctmp+2,sta dsctmp,rts ;; @@6a6a 200
 13950                           ;; @@6a6d 200
 13951  6a6d da                                  phx                                       ;; @@6a6d 200
 13952  6a6e a000                                ldy #0                                    ;; @@6a6e 200
 13953  6a70 a264                                ldx #dsctmp+1                             ;; @@6a70 200
 13954  6a72 b90001             _local_1199_20   lda fbuffr,y                              ;; @@6a72 200
 13955  6a75 f006                                beq _local_1199_30                        ;; @@6a75 200
 13956  6a77 20f022                              jsr sta_far_ram1                         ; sta (dsctmp+1),y ;; @@6a77 200
 13957  6a7a c8                                  iny                                       ;; @@6a7a 200
 13958  6a7b d0f5                                bne _local_1199_20                        ;; @@6a7b 200
 13959                           ;; @@6a7d 200
 13960  6a7d fa                 _local_1199_30   plx                                       ;; @@6a7d 200
 13961  6a7e 20d05a                              jsr putnew                                ;; @@6a7e 200
 13962  6a81 20536c                              jsr ini                                  ; init counters and flags ;; @@6a81 200
 13963  6a84 20a46a                              jsr fform                                ; output one formatted number ;; @@6a84 200
 13964                           ;; @@6a87 200
 13965  6a87 208522             reay             jsr chrgot                               ; get old character ;; @@6a87 201
 13966  6a8a c92c                                cmp #','                                 ; comma? ;; @@6a8a 201
 13967  6a8c f089                                beq eex2                                 ; continue print use if yes ;; @@6a8c 201
 13968  6a8e 38                                  sec                                       ;; @@6a8e 201
 13969  6a8f 6676                                ror z_p_temp_1                           ; set flag for anaf ;; @@6a8f 201
 13970  6a91 20a16d                              jsr anaf                                 ; print rest of format ;; @@6a91 201
 13971  6a94 7a                                  ply                                      ; restore descriptor ;; @@6a94 201
 13972  6a95 68                                  pla                                       ;; @@6a95 201
 13973  6a96 20715b                              jsr fretmp                                ;; @@6a96 201
 13974  6a99 208522                              jsr chrgot                                ;; @@6a99 201
 13975  6a9c c93b                                cmp #';'                                 ; semi-colon? ;; @@6a9c 201
 13976  6a9e d356cd                              +lbne crdo                               ; end of print using ;; @@6a9e 201
 13977  6aa1 4c8322                              jmp chrget                               ; branch if yes ;; @@6aa1 201
 13978                           ;; @@6aa4 201
 13979                          ; .page ;; @@6aa4 201
 13980                          ;  FFORM - output a number to format ;; @@6aa4 201
 13981                          ; ;; @@6aa4 201
 13982                          ;  Number is in fbuffr,  format checked by anaf ;; @@6aa4 201
 13983                           ;; @@6aa4 201
 13984                          fform                                                      ;; @@6aa4 201
 13985                          ; sta sw_rom_ram0 ;???? ;; @@6aa4 201
 13986  6aa4 add411                              lda pufill                                ;; @@6aa4 201
 13987  6aa7 8de811                              sta blfd                                 ; set working fill char ;; @@6aa7 201
 13988  6aaa a9ff                                lda #$ff                                  ;; @@6aaa 201
 13989  6aac 8de711             ana              sta sno                                  ; save blank or '-' in sno ;; @@6aac 201
 13990  6aaf 8002                                bra insy                                  ;; @@6aaf 201
 13991                           ;; @@6ab1 201
 13992                           ;; @@6ab1 201
 13993  6ab1 867f               stp              stx point                                ; set point pointer ;; @@6ab1 201
 13994  6ab3 c477               insy             cpy hulp                                 ; end of no reached? ;; @@6ab3 201
 13995  6ab5 f032                                beq eoa                                  ; branch if yes ;; @@6ab5 201
 13996  6ab7 b90001                              lda fbuffr,y                             ; get character of no ;; @@6ab7 201
 13997  6aba c8                                  iny                                       ;; @@6aba 201
 13998  6abb c920                                cmp #' '                                 ; blank? ;; @@6abb 201
 13999  6abd f0f4                                beq insy                                 ; yes...span ;; @@6abd 201
 14000  6abf c92d                                cmp #'-'                                 ; sign no negative ;; @@6abf 201
 14001  6ac1 f0e9                                beq ana                                  ; yes... ;; @@6ac1 201
 14002  6ac3 c92e                                cmp #'.'                                 ; decimal point? ;; @@6ac3 201
 14003  6ac5 f0ea                                beq stp                                  ; yes... ;; @@6ac5 201
 14004  6ac7 c945                                cmp #'E'                                 ; is char 'e'? ;; @@6ac7 201
 14005  6ac9 f010                                beq lsg                                  ; yes... ;; @@6ac9 201
 14006  6acb 9d0001                              sta fbuffr,x                             ; move number ;; @@6acb 201
 14007  6ace 8ed911                              stx enr                                  ; update end-no pointer ;; @@6ace 201
 14008  6ad1 e8                                  inx                                       ;; @@6ad1 201
 14009  6ad2 247f                                bit point                                ; point pointer set? ;; @@6ad2 201
 14010  6ad4 10dd                                bpl insy                                 ; yes... ;; @@6ad4 201
 14011  6ad6 eedf11                              inc vn                                   ; count digits before point ;; @@6ad6 201
 14012  6ad9 80d8                                bra insy                                  ;; @@6ad9 201
 14013                           ;; @@6adb 201
 14014                           ;; @@6adb 201
 14015  6adb b90001             lsg              lda fbuffr,y                              ;; @@6adb 201
 14016  6ade c92d                                cmp #'-'                                 ; sign of exponent negative ;; @@6ade 201
 14017  6ae0 d003                                bne _local_1200_10                       ; no... ;; @@6ae0 201
 14018  6ae2 6edd11                              ror usgn                                 ; make sign negative ;; @@6ae2 201
 14019  6ae5 c8                 _local_1200_10   iny                                       ;; @@6ae5 201
 14020  6ae6 8cde11                              sty uexp                                 ; set exponent pointer ;; @@6ae6 201
 14021                           ;; @@6ae9 201
 14022  6ae9 a57f               eoa              lda point                                ; decimal found? ;; @@6ae9 202
 14023  6aeb 1002                                bpl _local_1201_20                       ; yes... ;; @@6aeb 202
 14024  6aed 867f                                stx point                                ; no...add point ;; @@6aed 202
 14025                           ;; @@6aef 202
 14026  6aef 20a16d             _local_1201_20   jsr anaf                                 ; analyze format ;; @@6aef 202
 14027  6af2 ade111                              lda vf                                    ;; @@6af2 202
 14028  6af5 c9ff                                cmp #$ff                                  ;; @@6af5 202
 14029  6af7 f029                                beq _local_1201_40                       ; field overflow ;; @@6af7 202
 14030  6af9 ade411                              lda fesp                                 ; exponent in field ;; @@6af9 202
 14031  6afc f03f                                beq cff                                  ; convert to f format if not ;; @@6afc 202
 14032  6afe adde11                              lda uexp                                 ; exponent in number? ;; @@6afe 202
 14033  6b01 d012                                bne _local_1201_30                       ; yes... ;; @@6b01 202
 14034  6b03 aed911                              ldx enr                                   ;; @@6b03 202
 14035  6b06 20286c                              jsr et2                                  ; add exponent to number ;; @@6b06 202
 14036  6b09 de0201                              dec fbuffr+2,x                            ;; @@6b09 202
 14037  6b0c e8                                  inx                                       ;; @@6b0c 202
 14038  6b0d 8ede11                              stx uexp                                  ;; @@6b0d 202
 14039  6b10 20af6c                              jsr alg                                  ; delete leading zeros ;; @@6b10 202
 14040  6b13 f025                                beq hup                                  ; all zero ;; @@6b13 202
 14041                           ;; @@6b15 202
 14042  6b15 ace311             _local_1201_30   ldy posp                                 ; + or - in format? ;; @@6b15 202
 14043  6b18 d017                                bne sswe                                 ; yes... ;; @@6b18 202
 14044  6b1a ace711                              ldy sno                                  ; +? ;; @@6b1a 202
 14045  6b1d 3012                                bmi sswe                                 ; yes... ;; @@6b1d 202
 14046  6b1f ade111                              lda vf                                    ;; @@6b1f 202
 14047                           ;; @@6b22 202
 14048  6b22 f068               _local_1201_40   beq errf                                 ; no room for sign ;; @@6b22 202
 14049  6b24 cee111                              dec vf                                   ; reserve room ;; @@6b24 202
 14050  6b27 d005                                bne _local_1201_50                        ;; @@6b27 202
 14051  6b29 ade211                              lda nf                                   ; one #? ;; @@6b29 202
 14052  6b2c f05e                                beq errf                                 ; yes...error ;; @@6b2c 202
 14053                           ;; @@6b2e 202
 14054  6b2e eedc11             _local_1201_50   inc swe                                   ;; @@6b2e 202
 14055                           ;; @@6b31 202
 14056  6b31 20a36b             sswe             jsr shpn                                 ; shift decimal point ;; @@6b31 203
 14057  6b34 206d6c                              jsr uround                               ; round number ;; @@6b34 203
 14058  6b37 20a36b                              jsr shpn                                 ; shift again if necessary ;; @@6b37 203
 14059                           ;; @@6b3a 203
 14060  6b3a 839301             hup              +lbra chout                              ; output number ;; @@6b3a 203
 14061                           ;; @@6b3d 203
 14062                           ;; @@6b3d 203
 14063                           ;; @@6b3d 203
 14064  6b3d acde11             cff              ldy uexp                                 ; exponent in no? ;; @@6b3d 203
 14065  6b40 f015                                beq _local_1202_20                       ; no... ;; @@6b40 203
 14066  6b42 8577                                sta hulp                                 ; delete exponent ;; @@6b42 203
 14067  6b44 38                                  sec                                      ; adjust decimal point ;; @@6b44 203
 14068  6b45 6ee511                              ror etof                                 ; set e-to-f flag ;; @@6b45 203
 14069  6b48 a47f                                ldy point                                 ;; @@6b48 203
 14070  6b4a addd11                              lda usgn                                 ; exec nos3 or nos4 ;; @@6b4a 203
 14071  6b4d 1005                                bpl _local_1202_10                       ; depends on sign of exp ;; @@6b4d 203
 14072  6b4f 20db6b                              jsr nos3                                  ;; @@6b4f 203
 14073  6b52 800c                                bra _local_1202_30                        ;; @@6b52 203
 14074                           ;; @@6b54 203
 14075  6b54 20bd6b             _local_1202_10   jsr nos4                                  ;; @@6b54 203
 14076                           ;; @@6b57 203
 14077  6b57 a47f               _local_1202_20   ldy point                                ; at start of no? ;; @@6b57 203
 14078  6b59 f005                                beq _local_1202_30                       ; yes... ;; @@6b59 203
 14079  6b5b 20b36c                              jsr cho                                  ; no = 0 ? ;; @@6b5b 203
 14080  6b5e f005                                beq _local_1202_40                       ; yes...no round ;; @@6b5e 203
 14081                           ;; @@6b60 203
 14082  6b60 206d6c             _local_1202_30   jsr uround                                ;; @@6b60 203
 14083  6b63 8003                                bra _local_1202_50                        ;; @@6b63 203
 14084                           ;; @@6b65 203
 14085  6b65 cedf11             _local_1202_40   dec vn                                   ; adjust...no was 0 ;; @@6b65 203
 14086  6b68 38                 _local_1202_50   sec                                       ;; @@6b68 203
 14087  6b69 ade111                              lda vf                                    ;; @@6b69 203
 14088  6b6c eddf11                              sbc vn                                    ;; @@6b6c 203
 14089  6b6f 901b                                bcc errf                                 ; no fit...error ;; @@6b6f 203
 14090  6b71 8ddc11                              sta swe                                  ; save difference ;; @@6b71 203
 14091  6b74 ace311                              ldy posp                                 ; + or -? ;; @@6b74 203
 14092  6b77 d01b                                bne ahp                                  ; yes... ;; @@6b77 203
 14093  6b79 ace711                              ldy sno                                  ; get sign ;; @@6b79 203
 14094  6b7c 3016                                bmi ahp                                  ; positive... ;; @@6b7c 203
 14095  6b7e a8                                  tay                                       ;; @@6b7e 203
 14096  6b7f f00b                                beq errf                                 ; no room for sign ;; @@6b7f 203
 14097  6b81 88                                  dey                                       ;; @@6b81 203
 14098  6b82 d013                                bne ldvn                                 ; swe<>1 ;; @@6b82 203
 14099  6b84 ade211                              lda nf                                    ;; @@6b84 203
 14100  6b87 0ddf11                              ora vn                                   ; both zero? ;; @@6b87 203
 14101  6b8a d0ae                                bne hup                                  ; no... ;; @@6b8a 203
 14102                           ;; @@6b8c 203
 14103                           ;; @@6b8c 203
 14104  6b8c a92a               errf             lda #'*'                                 ; format error ;; @@6b8c 204
 14105  6b8e 209a6d             stout            jsr cdout                                ; fill field with stars ;; @@6b8e 204
 14106  6b91 d0fb                                bne stout                                 ;; @@6b91 204
 14107  6b93 60                                  rts                                       ;; @@6b93 204
 14108                           ;; @@6b94 204
 14109                           ;; @@6b94 204
 14110  6b94 a8                 ahp              tay                                      ; output no if swe=0 ;; @@6b94 204
 14111  6b95 f0a3                                beq hup                                   ;; @@6b95 204
 14112  6b97 addf11             ldvn             lda vn                                    ;; @@6b97 204
 14113  6b9a d09e                                bne hup                                  ; vn<>0 ;; @@6b9a 204
 14114  6b9c cedc11                              dec swe                                  ; add extra 0 ;; @@6b9c 204
 14115  6b9f e676                                inc z_p_temp_1                           ; before decimal point ;; @@6b9f 204
 14116  6ba1 8097                                bra hup                                   ;; @@6ba1 204
 14117                           ;; @@6ba3 204
 14118                          ; .page ;; @@6ba3 204
 14119                          ; Using- shift decimal point ;; @@6ba3 204
 14120                           ;; @@6ba3 204
 14121  6ba3 38                 shpn             sec                                       ;; @@6ba3 204
 14122  6ba4 ade111                              lda vf                                    ;; @@6ba4 204
 14123  6ba7 eddf11                              sbc vn                                    ;; @@6ba7 204
 14124  6baa f038                                beq rdy                                  ; format o.k ;; @@6baa 204
 14125  6bac a47f                                ldy point                                 ;; @@6bac 204
 14126  6bae 9016                                bcc pntl                                 ; vf<vn ;; @@6bae 204
 14127  6bb0 8577                                sta hulp                                  ;; @@6bb0 204
 14128                           ;; @@6bb2 204
 14129  6bb2 ccd911             incy             cpy enr                                  ; end of no reached? ;; @@6bb2 204
 14130  6bb5 f002                                beq ity                                   ;; @@6bb5 204
 14131  6bb7 b001                                bcs nos1                                 ; yes... ;; @@6bb7 204
 14132                           ;; @@6bb9 204
 14133  6bb9 c8                 ity              iny                                       ;; @@6bb9 204
 14134  6bba eedf11             nos1             inc vn                                    ;; @@6bba 204
 14135  6bbd 20f16b             nos4             jsr eado                                 ; adjust exponent ;; @@6bbd 204
 14136  6bc0 c677                                dec hulp                                 ; ready? ;; @@6bc0 204
 14137  6bc2 d0ee                                bne incy                                 ; no... ;; @@6bc2 204
 14138  6bc4 f01c                                beq poit                                  ;; @@6bc4 204
 14139                           ;; @@6bc6 204
 14140  6bc6 49ff               pntl             eor #$ff                                  ;; @@6bc6 204
 14141  6bc8 6901                                adc #1                                    ;; @@6bc8 204
 14142  6bca 8577                                sta hulp                                 ; =vn-vf ;; @@6bca 204
 14143                           ;; @@6bcc 204
 14144  6bcc ccd811             decy             cpy bnr                                  ; begin of no? ;; @@6bcc 204
 14145  6bcf f006                                beq inz1                                 ; yes... ;; @@6bcf 204
 14146  6bd1 88                                  dey                                       ;; @@6bd1 204
 14147  6bd2 cedf11                              dec vn                                    ;; @@6bd2 204
 14148  6bd5 8002                                bra inz2                                  ;; @@6bd5 204
 14149                           ;; @@6bd7 204
 14150                           ;; @@6bd7 204
 14151  6bd7 e676               inz1             inc z_p_temp_1                           ; add leading zeros ;; @@6bd7 204
 14152  6bd9 a980               inz2             lda #$80                                  ;; @@6bd9 204
 14153  6bdb 20f36b             nos3             jsr eadj                                 ; adjust exponent ;; @@6bdb 204
 14154  6bde c677                                dec hulp                                 ; ready? ;; @@6bde 204
 14155  6be0 d0ea                                bne decy                                 ; no... ;; @@6be0 204
 14156                           ;; @@6be2 204
 14157  6be2 847f               poit             sty point                                ; decimal point pointer ;; @@6be2 204
 14158  6be4 60                 rdy              rts                                       ;; @@6be4 204
 14159                           ;; @@6be5 204
 14160                          ; .page ;; @@6be5 204
 14161                          ; Using- adjust exponent ;; @@6be5 204
 14162                           ;; @@6be5 204
 14163  6be5 d039               sexp             bne retrn                                ; no over/underflow ;; @@6be5 204
 14164  6be7 4909                                eor #$09                                 ; .a is 0 or 9 ;; @@6be7 204
 14165  6be9 9d0001                              sta fbuffr,x                             ; digit back in exp ;; @@6be9 204
 14166  6bec ca                                  dex                                      ; = 0 or 9 ;; @@6bec 204
 14167  6bed ecde11                              cpx uexp                                  ;; @@6bed 204
 14168  6bf0 60                                  rts                                       ;; @@6bf0 204
 14169                           ;; @@6bf1 204
 14170                           ;; @@6bf1 204
 14171  6bf1 a900               eado             lda #0                                    ;; @@6bf1 204
 14172  6bf3 aede11             eadj             ldx uexp                                  ;; @@6bf3 204
 14173  6bf6 e8                                  inx                                       ;; @@6bf6 204
 14174  6bf7 2ce511                              bit etof                                 ; e-to-f flag on? ;; @@6bf7 204
 14175  6bfa 3010                                bmi _local_1203_20                       ; yes... ;; @@6bfa 204
 14176  6bfc 4ddd11                              eor usgn                                  ;; @@6bfc 204
 14177  6bff f00b                                beq _local_1203_20                       ; ++ or -- ;; @@6bff 204
 14178                           ;; @@6c01 204
 14179  6c01 20366c             _local_1203_10   jsr tag3                                 ; inc exp, overflow? ;; @@6c01 204
 14180  6c04 20e56b                              jsr sexp                                 ; digit 0 if yes ;; @@6c04 204
 14181  6c07 b0f8                                bcs _local_1203_10                       ; try second digit ;; @@6c07 204
 14182  6c09 833bc2                              +lbra overr                              ; exp>99 ;; @@6c09 204
 14183                           ;; @@6c0c 204
 14184  6c0c bd0001             _local_1203_20   lda fbuffr,x                              ;; @@6c0c 204
 14185  6c0f de0001                              dec fbuffr,x                             ; decrement exp ;; @@6c0f 204
 14186  6c12 c930                                cmp #'0'                                 ; underflow on digit? ;; @@6c12 204
 14187  6c14 20e56b                              jsr sexp                                 ; set digit=9 if yes... ;; @@6c14 204
 14188  6c17 b0f3                                bcs _local_1203_20                       ; try 2nd digit ;; @@6c17 204
 14189  6c19 2ce511                              bit etof                                 ; flag off? ;; @@6c19 204
 14190  6c1c 1005                                bpl et3                                  ; yes... ;; @@6c1c 204
 14191  6c1e 847f                                sty point                                ; decimal point pointer ;; @@6c1e 204
 14192                           ;; @@6c20 204
 14193  6c20 68                 retrn            pla                                       ;; @@6c20 205
 14194  6c21 68                                  pla                                       ;; @@6c21 205
 14195  6c22 60                                  rts                                      ; return to fform/main ;; @@6c22 205
 14196                           ;; @@6c23 205
 14197                           ;; @@6c23 205
 14198  6c23 addd11             et3              lda usgn                                  ;; @@6c23 205
 14199  6c26 4980                                eor #$80                                 ; reverse sign exp ;; @@6c26 205
 14200  6c28 8ddd11             et2              sta usgn                                  ;; @@6c28 205
 14201  6c2b a930                                lda #'0'                                  ;; @@6c2b 205
 14202  6c2d 9d0101                              sta fbuffr+1,x                           ; exp<0 here ;; @@6c2d 205
 14203  6c30 a931                                lda #'1'                                  ;; @@6c30 205
 14204  6c32 9d0201                              sta fbuffr+2,x                            ;; @@6c32 205
 14205  6c35 60                                  rts                                       ;; @@6c35 205
 14206                           ;; @@6c36 205
 14207                           ;; @@6c36 205
 14208  6c36 bd0001             tag3             lda fbuffr,x                             ; get digit of exp ;; @@6c36 205
 14209  6c39 fe0001                              inc fbuffr,x                             ; increment digit ;; @@6c39 205
 14210  6c3c c939                                cmp #'9'                                 ; overflow ;; @@6c3c 205
 14211  6c3e 60                                  rts                                      ; return .z set ;; @@6c3e 205
 14212                           ;; @@6c3f 205
 14213                          ; .page ;; @@6c3f 205
 14214                          ; Using- ansub: load format field char in .a ;; @@6c3f 205
 14215                           ;; @@6c3f 205
 14216  6c3f 18                 ansub            clc                                       ;; @@6c3f 205
 14217  6c40 c8                                  iny                                      ; begin format? ;; @@6c40 205
 14218  6c41 f005                                beq _local_1204_10                       ; yes... ;; @@6c41 205
 14219  6c43 ccea11                              cpy lfor                                 ; end? ;; @@6c43 205
 14220  6c46 9004                                bcc _local_1204_20                       ; no... ;; @@6c46 205
 14221                           ;; @@6c48 205
 14222  6c48 a476               _local_1204_10   ldy z_p_temp_1                           ; <>0? ;; @@6c48 205
 14223  6c4a d0d4                                bne retrn                                ; yes... ;; @@6c4a 205
 14224                           ;; @@6c4c 205
 14225  6c4c 209d22             _local_1204_20   jsr indfrm                                ;; @@6c4c 205
 14226  6c4f eee611                              inc cform                                ; pointer to field ;; @@6c4f 205
 14227  6c52 60                                  rts                                       ;; @@6c52 205
 14228                           ;; @@6c53 205
 14229                           ;; @@6c53 205
 14230                          ;  Using- ini: init counters and flags ;; @@6c53 205
 14231                           ;; @@6c53 205
 14232  6c53 206d5b             ini              jsr frefac                               ; free temp descriptor ;; @@6c53 206
 14233  6c56 8577                                sta hulp                                 ; length string ;; @@6c56 206
 14234  6c58 a20a                                ldx #$0a                                 ; printed in hulp ;; @@6c58 206
 14235  6c5a a900                                lda #0                                    ;; @@6c5a 206
 14236                           ;; @@6c5c 206
 14237  6c5c 9ddc11             _local_1205_10   sta swe,x                                ; init working registers ;; @@6c5c 206
 14238  6c5f ca                                  dex                                       ;; @@6c5f 206
 14239  6c60 10fa                                bpl _local_1205_10                        ;; @@6c60 206
 14240  6c62 8edb11                              stx flag                                 ; comma flag =ff ;; @@6c62 206
 14241  6c65 867f                                stx point                                ; point pointer=ff ;; @@6c65 206
 14242  6c67 8eda11                              stx dolr                                 ; dollar flag=ff ;; @@6c67 206
 14243  6c6a aa                                  tax                                      ; x=y=0 ;; @@6c6a 206
 14244  6c6b a8                                  tay                                       ;; @@6c6b 206
 14245  6c6c 60                                  rts                                       ;; @@6c6c 206
 14246                           ;; @@6c6d 206
 14247                          ; .page ;; @@6c6d 206
 14248                          ; Using- round number ;; @@6c6d 206
 14249                           ;; @@6c6d 206
 14250  6c6d 18                 uround           clc                                       ;; @@6c6d 207
 14251  6c6e a57f                                lda point                                 ;; @@6c6e 207
 14252  6c70 6de211                              adc nf                                   ; overflow? ;; @@6c70 207
 14253  6c73 b039                                bcs rrts                                 ; yes... ;; @@6c73 207
 14254  6c75 38                                  sec                                       ;; @@6c75 207
 14255  6c76 e576                                sbc z_p_temp_1                           ; underflow? ;; @@6c76 207
 14256  6c78 9034                                bcc rrts                                 ; yes... ;; @@6c78 207
 14257  6c7a cdd911                              cmp enr                                  ; anything to round? ;; @@6c7a 207
 14258  6c7d f002                                beq _local_1206_10                       ; yes... ;; @@6c7d 207
 14259  6c7f b02d                                bcs rrts                                 ; no... ;; @@6c7f 207
 14260                           ;; @@6c81 207
 14261  6c81 cdd811             _local_1206_10   cmp bnr                                  ; again... ;; @@6c81 207
 14262  6c84 9028                                bcc rrts                                 ; no... ;; @@6c84 207
 14263  6c86 aa                                  tax                                       ;; @@6c86 207
 14264  6c87 bd0001                              lda fbuffr,x                             ; get digit ;; @@6c87 207
 14265  6c8a c935                                cmp #'5'                                 ; <5 ? ;; @@6c8a 207
 14266  6c8c 9020                                bcc rrts                                 ; yes...no round ;; @@6c8c 207
 14267                           ;; @@6c8e 207
 14268  6c8e ecd811             _local_1206_20   cpx bnr                                  ; begin of no reached? ;; @@6c8e 207
 14269  6c91 f00a                                beq _local_1206_30                       ; yes..add 1 ;; @@6c91 207
 14270  6c93 ca                                  dex                                       ;; @@6c93 207
 14271  6c94 20366c                              jsr tag3                                 ; increment digit ;; @@6c94 207
 14272  6c97 8ed911                              stx enr                                  ; new end of no pointer ;; @@6c97 207
 14273  6c9a f0f2                                beq _local_1206_20                       ; branch on overflow ;; @@6c9a 207
 14274  6c9c 60                                  rts                                       ;; @@6c9c 207
 14275                           ;; @@6c9d 207
 14276  6c9d a931               _local_1206_30   lda #'1'                                  ;; @@6c9d 207
 14277  6c9f 9d0001                              sta fbuffr,x                              ;; @@6c9f 207
 14278  6ca2 e8                                  inx                                       ;; @@6ca2 207
 14279  6ca3 867f                                stx point                                 ;; @@6ca3 207
 14280  6ca5 c676                                dec z_p_temp_1                           ; # of 0's before '.' ;; @@6ca5 207
 14281  6ca7 1005                                bpl rrts                                 ; no underflow ;; @@6ca7 207
 14282  6ca9 e676                                inc z_p_temp_1                           ; underflow...back to 0 ;; @@6ca9 207
 14283  6cab eedf11                              inc vn                                    ;; @@6cab 207
 14284  6cae 60                 rrts             rts                                       ;; @@6cae 208
 14285                           ;; @@6caf 208
 14286                          ; .page ;; @@6caf 208
 14287                          ; Using- alg: delete leading zeros of no ;; @@6caf 208
 14288                           ;; @@6caf 208
 14289  6caf a47f               alg              ldy point                                ; start with a .? ;; @@6caf 208
 14290  6cb1 f017                                beq szer                                 ; yes... ;; @@6cb1 208
 14291                           ;; @@6cb3 208
 14292  6cb3 acd811             cho              ldy bnr                                   ;; @@6cb3 208
 14293  6cb6 b90001             cmo              lda fbuffr,y                             ; start with a 0? ;; @@6cb6 208
 14294  6cb9 c930                                cmp #'0'                                  ;; @@6cb9 208
 14295  6cbb 60                                  rts                                       ;; @@6cbb 208
 14296                           ;; @@6cbc 208
 14297                           ;; @@6cbc 208
 14298  6cbc e67f               nbr              inc point                                ; adjust point ;; @@6cbc 208
 14299  6cbe 20f16b                              jsr eado                                 ; and exponent ;; @@6cbe 208
 14300  6cc1 eed811                              inc bnr                                  ; and pointer to begin of no ;; @@6cc1 208
 14301  6cc4 ccd911                              cpy enr                                  ; end of number? ;; @@6cc4 208
 14302  6cc7 f0e5                                beq rrts                                 ; yes... ;; @@6cc7 208
 14303  6cc9 c8                                  iny                                       ;; @@6cc9 208
 14304                           ;; @@6cca 208
 14305  6cca 20b66c             szer             jsr cmo                                  ; zero in no? ;; @@6cca 208
 14306  6ccd f0ed                                beq nbr                                  ; yes... ;; @@6ccd 208
 14307  6ccf 60                                  rts                                      ; no... ;; @@6ccf 208
 14308                           ;; @@6cd0 208
 14309                           ;; @@6cd0 208
 14310                          ; Using- chout: print number ;; @@6cd0 208
 14311                           ;; @@6cd0 208
 14312  6cd0 adda11             chout            lda dolr                                 ; dollar flag set? ;; @@6cd0 208
 14313  6cd3 3002                                bmi _local_1207_10                       ; no... ;; @@6cd3 208
 14314  6cd5 e676                                inc z_p_temp_1                           ; make room for $ ;; @@6cd5 208
 14315                           ;; @@6cd7 208
 14316  6cd7 aed811             _local_1207_10   ldx bnr                                  ; start of # ;; @@6cd7 208
 14317  6cda ca                                  dex                                       ;; @@6cda 208
 14318  6cdb ace911                              ldy begfd                                ; begin of field ;; @@6cdb 208
 14319                           ;; @@6cde 208
 14320  6cde 209d22             afrm             jsr indfrm                                ;; @@6cde 209
 14321  6ce1 c8                                  iny                                       ;; @@6ce1 209
 14322  6ce2 c92c                                cmp #','                                 ; comma? ;; @@6ce2 209
 14323  6ce4 d00f                                bne punt                                 ; no... ;; @@6ce4 209
 14324  6ce6 2cdb11                              bit flag                                 ; comma flag on? ;; @@6ce6 209
 14325  6ce9 3005                                bmi bout                                 ; yes, do a fill char ;; @@6ce9 209
 14326                          ; sta sw_rom_ram0 ;???? ;; @@6ceb 209
 14327  6ceb add511                              lda pucoma                                ;; @@6ceb 209
 14328  6cee 8064                                bra out                                  ; no,...output a comma char ;; @@6cee 209
 14329                           ;; @@6cf0 209
 14330                           ;; @@6cf0 209
 14331  6cf0 ade811             bout             lda blfd                                  ;; @@6cf0 209
 14332  6cf3 805f                                bra out                                   ;; @@6cf3 209
 14333                           ;; @@6cf5 209
 14334                           ;; @@6cf5 209
 14335  6cf5 c92e               punt             cmp #'.'                                 ; decimal point? ;; @@6cf5 209
 14336  6cf7 d005                                bne afplus                                ;; @@6cf7 209
 14337                          ; sta sw_rom_ram0 ;???? ;; @@6cf9 209
 14338  6cf9 add611                              lda pudot                                ; yes... ;; @@6cf9 209
 14339  6cfc 8056                                bra out                                   ;; @@6cfc 209
 14340                           ;; @@6cfe 209
 14341                           ;; @@6cfe 209
 14342  6cfe c92b               afplus           cmp #'+'                                 ; plus? ;; @@6cfe 209
 14343  6d00 f03a                                beq ispl                                 ; yes... ;; @@6d00 209
 14344  6d02 c92d                                cmp #'-'                                 ; minus? ;; @@6d02 209
 14345  6d04 f031                                beq ispl1                                ; yes... ;; @@6d04 209
 14346  6d06 c95e                                cmp #'^'                                 ; up arrow? ;; @@6d06 209
 14347  6d08 d070                                bne pndd                                 ; no... ;; @@6d08 209
 14348  6d0a a945                                lda #'E'                                  ;; @@6d0a 209
 14349  6d0c 209a6d                              jsr cdout                                 ;; @@6d0c 209
 14350  6d0f acde11                              ldy uexp                                  ;; @@6d0f 209
 14351  6d12 20b66c                              jsr cmo                                  ; first dig of exp zero? ;; @@6d12 209
 14352  6d15 d006                                bne _local_1208_10                       ; no... ;; @@6d15 209
 14353  6d17 c8                                  iny                                       ;; @@6d17 209
 14354  6d18 20b66c                              jsr cmo                                  ; second digit? ;; @@6d18 209
 14355  6d1b f007                                beq _local_1208_20                       ; yes ;; @@6d1b 209
 14356                           ;; @@6d1d 209
 14357  6d1d a92d               _local_1208_10   lda #'-'                                  ;; @@6d1d 209
 14358  6d1f 2cdd11                              bit usgn                                  ;; @@6d1f 209
 14359  6d22 3002                                bmi _local_1208_30                        ;; @@6d22 209
 14360                           ;; @@6d24 209
 14361  6d24 a92b               _local_1208_20   lda #'+'                                  ;; @@6d24 209
 14362  6d26 209a6d             _local_1208_30   jsr cdout                                ; output sign exp ;; @@6d26 209
 14363  6d29 aede11                              ldx uexp                                  ;; @@6d29 209
 14364  6d2c bd0001                              lda fbuffr,x                              ;; @@6d2c 209
 14365  6d2f 209a6d                              jsr cdout                                ; output first dig exp ;; @@6d2f 209
 14366  6d32 aceb11                              ldy endfd                                 ;; @@6d32 209
 14367  6d35 8013                                bra telx                                  ;; @@6d35 209
 14368                           ;; @@6d37 209
 14369  6d37 ade711             ispl1            lda sno                                  ; positive? ;; @@6d37 210
 14370  6d3a 30b4                                bmi bout                                 ; yes...out blank or * ;; @@6d3a 210
 14371  6d3c ade711             ispl             lda sno                                  ; output sgn ;; @@6d3c 210
 14372  6d3f 8013                                bra out                                   ;; @@6d3f 210
 14373                           ;; @@6d41 210
 14374                           ;; @@6d41 210
 14375  6d41 a576               zerot            lda z_p_temp_1                           ; # of zeros ;; @@6d41 210
 14376  6d43 d017                                bne zerot1                                ;; @@6d43 210
 14377  6d45 ecd911                              cpx enr                                  ; end of # reached? ;; @@6d45 210
 14378  6d48 f005                                beq zout                                 ; yes...output zero ;; @@6d48 210
 14379                           ;; @@6d4a 210
 14380  6d4a e8                 telx             inx                                       ;; @@6d4a 210
 14381  6d4b bd0001                              lda fbuffr,x                             ; get digit ;; @@6d4b 210
 14382  6d4e 2c                                  !text $2c                                ; skip ;; @@6d4e 210
 14383                           ;; @@6d4f 210
 14384  6d4f a930               zout             lda #'0'                                 ; output zero ;; @@6d4f 210
 14385                           ;; @@6d51 210
 14386  6d51 4edb11             outs             lsr flag                                 ; clear comma flag ;; @@6d51 210
 14387                           ;; @@6d54 210
 14388  6d54 209a6d             out              jsr cdout                                ; output character ;; @@6d54 210
 14389  6d57 f354ff                              +lbeq rrts                                ;; @@6d57 210
 14390  6d5a 8082                                bra afrm                                 ; not ready... ;; @@6d5a 210
 14391                           ;; @@6d5c 210
 14392                           ;; @@6d5c 210
 14393  6d5c c676               zerot1           dec z_p_temp_1                           ; count leading zeros ;; @@6d5c 210
 14394  6d5e adda11                              lda dolr                                 ; $ flag set? ;; @@6d5e 210
 14395  6d61 30ec                                bmi zout                                 ; no...output zero ;; @@6d61 210
 14396                           ;; @@6d63 210
 14397  6d63 209d22                              jsr indfrm                               ; take a peek at the next character in the format string ;; @@6d63 210
 14398  6d66 c92c                                cmp #','                                 ; if it's a comma, we got problems ;; @@6d66 210
 14399  6d68 d007                                bne _local_1209_10                       ; ...branch if no comma & resume normal processing ;; @@6d68 210
 14400                           ;; @@6d6a 210
 14401  6d6a ade811                              lda blfd                                 ; here's the "$,999.99" bug fix: ;; @@6d6a 210
 14402  6d6d 209a6d                              jsr cdout                                ; print a 'fill' character instead of the '$' ;; @@6d6d 210
 14403  6d70 c8                                  iny                                      ; and increment format string pointer past comma ;; @@6d70 210
 14404                           ;; @@6d71 210
 14405  6d71 38                 _local_1209_10   sec                                      ; resume normal processing ;; @@6d71 210
 14406  6d72 6eda11                              ror dolr                                 ; clear the dollar flag & go on to print '$' ;; @@6d72 210
 14407                          ; sta sw_rom_ram0 ;???? ;; @@6d75 210
 14408  6d75 add711                              lda pumony                                ;; @@6d75 210
 14409  6d78 80d7                                bra outs                                 ; output money symbol ;; @@6d78 210
 14410                           ;; @@6d7a 210
 14411                           ;; @@6d7a 210
 14412  6d7a addc11             pndd             lda swe                                  ; # of blanks ;; @@6d7a 211
 14413  6d7d f0c2                                beq zerot                                 ;; @@6d7d 211
 14414  6d7f cedc11                              dec swe                                  ; count ! ;; @@6d7f 211
 14415                           ;; @@6d82 211
 14416  6d82 d36bff             _local_1210_5    +lbne bout                               ; out blank or * ;; @@6d82 211
 14417  6d85 ade311                              lda posp                                 ; + or - in field? ;; @@6d85 211
 14418  6d88 30f8                                bmi _local_1210_5                        ; yes...out blank or * ;; @@6d88 211
 14419                           ;; @@6d8a 211
 14420  6d8a 209d22             _local_1210_10   jsr indfrm                                ;; @@6d8a 211
 14421  6d8d c92c                                cmp #','                                 ; comma? ;; @@6d8d 211
 14422  6d8f d0a6                                bne ispl1                                ; no...out sign ;; @@6d8f 211
 14423  6d91 ade811                              lda blfd                                 ; yes... ;; @@6d91 211
 14424  6d94 209a6d                              jsr cdout                                ; out blank or * ;; @@6d94 211
 14425  6d97 c8                                  iny                                       ;; @@6d97 211
 14426  6d98 80f0                                bra _local_1210_10                        ;; @@6d98 211
 14427                           ;; @@6d9a 211
 14428                           ;; @@6d9a 211
 14429                           ;; @@6d9a 211
 14430  6d9a 203d68             cdout            jsr outch ;outdo                         ; char out ;; @@6d9a 212
 14431  6d9d cee611                              dec cform                                ; count it ;; @@6d9d 212
 14432  6da0 60                                  rts                                       ;; @@6da0 212
 14433                           ;; @@6da1 212
 14434                          ; .page ;; @@6da1 212
 14435                          ; Using- anaf: analyze format ;; @@6da1 212
 14436                           ;; @@6da1 212
 14437  6da1 aceb11             anaf             ldy endfd                                ; format pointer ;; @@6da1 212
 14438  6da4 203f6c             gfor             jsr ansub                                 ;; @@6da4 212
 14439  6da7 20536e                              jsr comp                                 ; check special chars ;; @@6da7 212
 14440  6daa d014                                bne pchar                                ; no match... ;; @@6daa 212
 14441  6dac 8ce911                              sty begfd                                ; save beginning of field ;; @@6dac 212
 14442  6daf 9019                                bcc ffoun                                ; # was found ;; @@6daf 212
 14443  6db1 aa                                  tax                                      ; save char ;; @@6db1 212
 14444                           ;; @@6db2 212
 14445  6db2 203f6c             sfur             jsr ansub                                ; get next format char ;; @@6db2 212
 14446  6db5 b005                                bcs _local_1211_10                       ; stop on wrap-around ;; @@6db5 212
 14447  6db7 205b6e                              jsr com1                                 ; compare specials ;; @@6db7 212
 14448  6dba f009                                beq foun1                                ; found some... ;; @@6dba 212
 14449                           ;; @@6dbc 212
 14450  6dbc ace911             _local_1211_10   ldy begfd                                 ;; @@6dbc 212
 14451  6dbf 8a                                  txa                                       ;; @@6dbf 212
 14452  6dc0 203d68             pchar            jsr outch ;outdo                         ; out character ;; @@6dc0 213
 14453  6dc3 80df                                bra gfor                                  ;; @@6dc3 213
 14454                           ;; @@6dc5 213
 14455                           ;; @@6dc5 213
 14456  6dc5 b0eb               foun1            bcs sfur                                 ; no #...keep looking ;; @@6dc5 213
 14457  6dc7 ace911                              ldy begfd                                 ;; @@6dc7 213
 14458  6dca a676               ffoun            ldx z_p_temp_1                            ;; @@6dca 213
 14459  6dcc d078                                bne trts                                  ;; @@6dcc 213
 14460  6dce 8ee611                              stx cform                                 ;; @@6dce 213
 14461  6dd1 88                                  dey                                       ;; @@6dd1 213
 14462                           ;; @@6dd2 213
 14463  6dd2 cee611             hyo2             dec cform                                ; correct counter ;; @@6dd2 213
 14464  6dd5 203f6c             hyo              jsr ansub                                ; get next format char ;; @@6dd5 213
 14465  6dd8 b072                                bcs efo                                  ; end of format ;; @@6dd8 213
 14466  6dda c92c                                cmp #','                                 ; comma? ;; @@6dda 213
 14467  6ddc f0f7                                beq hyo                                  ; yes...ignore it ;; @@6ddc 213
 14468  6dde 202a6e                              jsr isp                                  ; + or - in format? ;; @@6dde 213
 14469  6de1 90ef                                bcc hyo2                                 ; yes... ;; @@6de1 213
 14470  6de3 c92e                                cmp #'.'                                 ; decimal point? ;; @@6de3 213
 14471  6de5 d008                                bne avf1                                 ; no... ;; @@6de5 213
 14472  6de7 e8                                  inx                                       ;; @@6de7 213
 14473  6de8 e002                                cpx #2                                   ; more than 1 decimal? ;; @@6de8 213
 14474  6dea 90e9                                bcc hyo                                  ; no... ;; @@6dea 213
 14475  6dec 835bc0             ero              +lbra snerr                              ; yes...syntax error ;; @@6dec 213
 14476                           ;; @@6def 213
 14477                           ;; @@6def 213
 14478  6def 205f6e             avf1             jsr com2                                 ; =, >, or # in field ;; @@6def 213
 14479  6df2 d00a                                bne llar                                 ; no... ;; @@6df2 213
 14480  6df4 9003                                bcc hyo1                                 ; was # ;; @@6df4 213
 14481  6df6 8de011                              sta chsn                                 ; was > or = ;; @@6df6 213
 14482                           ;; @@6df9 213
 14483  6df9 fee111             hyo1             inc vf,x                                  ;; @@6df9 213
 14484  6dfc 80d7                                bra hyo                                   ;; @@6dfc 213
 14485                           ;; @@6dfe 213
 14486  6dfe c924               llar             cmp #'$'                                 ; dollar? ;; @@6dfe 213
 14487  6e00 d00e                                bne expo                                 ; no... ;; @@6e00 213
 14488  6e02 2cda11                              bit dolr                                 ; test flag ;; @@6e02 213
 14489  6e05 10f2                                bpl hyo1                                 ; no... ;; @@6e05 213
 14490  6e07 18                                  clc                                       ;; @@6e07 213
 14491  6e08 6eda11                              ror dolr                                 ; set flag ;; @@6e08 213
 14492  6e0b cee111                              dec vf                                    ;; @@6e0b 213
 14493  6e0e 80e9                                bra hyo1                                  ;; @@6e0e 213
 14494                           ;; @@6e10 213
 14495  6e10 c95e               expo             cmp #'^'                                 ; up arrow? ;; @@6e10 213
 14496  6e12 d016                                bne isp                                  ; no... ;; @@6e12 213
 14497  6e14 a202                                ldx #$02                                  ;; @@6e14 213
 14498  6e16 203f6c             _local_1212_10   jsr ansub                                ; must be 4 up arrows ;; @@6e16 213
 14499  6e19 b0d1                                bcs ero                                   ;; @@6e19 213
 14500  6e1b c95e                                cmp #'^'                                 ; up arrow? ;; @@6e1b 213
 14501  6e1d d0cd                                bne ero                                   ;; @@6e1d 213
 14502  6e1f ca                                  dex                                       ;; @@6e1f 213
 14503  6e20 10f4                                bpl _local_1212_10                        ;; @@6e20 213
 14504  6e22 eee411                              inc fesp                                 ; set exp flag ;; @@6e22 213
 14505  6e25 203f6c                              jsr ansub                                ; next format char ;; @@6e25 213
 14506  6e28 b022                                bcs efo                                  ; end of format ;; @@6e28 213
 14507                           ;; @@6e2a 213
 14508  6e2a c92b               isp              cmp #'+'                                 ; plus? ;; @@6e2a 214
 14509  6e2c d019                                bne chom                                 ; no... ;; @@6e2c 214
 14510  6e2e ade711                              lda sno                                  ; sign neg? ;; @@6e2e 214
 14511  6e31 1005                                bpl spos                                 ; yes... ;; @@6e31 214
 14512  6e33 a92b                                lda #'+'                                  ;; @@6e33 214
 14513  6e35 8de711                              sta sno                                   ;; @@6e35 214
 14514                           ;; @@6e38 214
 14515  6e38 ade311             spos             lda posp                                 ; + or - already? ;; @@6e38 214
 14516  6e3b d0af                                bne ero                                   ;; @@6e3b 214
 14517  6e3d 6ee311                              ror posp                                 ; make posp neg/clc ;; @@6e3d 214
 14518  6e40 8ceb11                              sty endfd                                ; end field pointer ;; @@6e40 214
 14519  6e43 eee611                              inc cform                                ; correct counter ;; @@6e43 214
 14520  6e46 60                 trts             rts                                       ;; @@6e46 214
 14521                           ;; @@6e47 214
 14522                           ;; @@6e47 214
 14523  6e47 c92d               chom             cmp #'-'                                 ; minus? ;; @@6e47 214
 14524  6e49 f0ed                                beq spos                                 ; yes... ;; @@6e49 214
 14525  6e4b 38                                  sec                                       ;; @@6e4b 214
 14526  6e4c 8ceb11             efo              sty endfd                                ; end field pointer ;; @@6e4c 214
 14527  6e4f ceeb11                              dec endfd                                 ;; @@6e4f 214
 14528  6e52 60                                  rts                                       ;; @@6e52 214
 14529                           ;; @@6e53 214
 14530                           ;; @@6e53 214
 14531                          ; Using- comp: compare .a with symbols ;; @@6e53 214
 14532                           ;; @@6e53 214
 14533  6e53 c92b               comp             cmp #'+'                                  ;; @@6e53 214
 14534  6e55 f015                                beq rt                                    ;; @@6e55 214
 14535  6e57 c92d                                cmp #'-'                                  ;; @@6e57 214
 14536  6e59 f011                                beq rt                                    ;; @@6e59 214
 14537                           ;; @@6e5b 214
 14538  6e5b c92e               com1             cmp #'.'                                  ;; @@6e5b 214
 14539  6e5d f00d                                beq rt                                    ;; @@6e5d 214
 14540                           ;; @@6e5f 214
 14541  6e5f c93d               com2             cmp #'='                                  ;; @@6e5f 214
 14542  6e61 f009                                beq rt                                    ;; @@6e61 214
 14543  6e63 c93e                                cmp #'>'                                  ;; @@6e63 214
 14544  6e65 f005                                beq rt                                    ;; @@6e65 214
 14545  6e67 c923                                cmp #'#'                                  ;; @@6e67 214
 14546  6e69 d001                                bne rt                                    ;; @@6e69 214
 14547  6e6b 18                                  clc                                       ;; @@6e6b 214
 14548  6e6c 60                 rt               rts                                       ;; @@6e6c 214
 14549                           ;; @@6e6d 214
 14550                          ;.end ;; @@6e6d 214
 14551                          ; .page ;; @@6e6d 214
 14552                          ; .subttl  INSTR() ;; @@6e6d 214
 14553                           ;; @@6e6d 214
 14554                          ;  INSTRing - Find position of str1 in str2 at or after position n ;; @@6e6d 214
 14555                          ; ;; @@6e6d 214
 14556                          ; Usage: INSTR(a$,b${,n}) ;; @@6e6d 214
 14557                           ;; @@6e6d 214
 14558  6e6d a566               instr            lda facmo                                ; save pointer to temporary descriptors ;; @@6e6d 214
 14559  6e6f 8dd302                              sta tmpdes                                ;; @@6e6f 214
 14560  6e72 a567                                lda facmo+1                               ;; @@6e72 214
 14561  6e74 8dd402                              sta tmpdes+1                              ;; @@6e74 214
 14562                           ;; @@6e77 214
 14563  6e77 20ef4c                              jsr frmevl                               ; get next arg ;; @@6e77 214
 14564  6e7a 20dd4c                              jsr chkstr                               ; must be string ;; @@6e7a 214
 14565  6e7d a566                                lda facmo                                 ;; @@6e7d 214
 14566  6e7f 8dd502                              sta tmpdes+2                              ;; @@6e7f 214
 14567  6e82 a567                                lda facmo+1                               ;; @@6e82 214
 14568  6e84 8dd602                              sta tmpdes+3                              ;; @@6e84 214
 14569                           ;; @@6e87 214
 14570  6e87 a201                                ldx #1                                   ; default starting position ;; @@6e87 214
 14571  6e89 8667                                stx faclo                                 ;; @@6e89 214
 14572  6e8b 208522                              jsr chrgot                                ;; @@6e8b 214
 14573  6e8e c929                                cmp #')'                                 ; any length argument? ;; @@6e8e 214
 14574  6e90 f003                                beq _local_1213_1                        ; branch if not ;; @@6e90 214
 14575  6e92 20825d                              jsr combyt                               ; else go get a one byte argument ;; @@6e92 214
 14576                           ;; @@6e95 214
 14577  6e95 20554e             _local_1213_1    jsr chkcls                               ; look for ) ;; @@6e95 214
 14578  6e98 a667                                ldx faclo                                 ;; @@6e98 214
 14579  6e9a f361e3                              +lbeq fcerr                              ; starting position can't be 0 ;; @@6e9a 214
 14580  6e9d ca                                  dex                                       ;; @@6e9d 214
 14581  6e9e 8663                                stx positn                                ;; @@6e9e 214
 14582                           ;; @@6ea0 214
 14583  6ea0 a203                                ldx #3                                   ; copy 'pointers to temp descriptors' to zero page ;; @@6ea0 214
 14584  6ea2 bdd302             _local_1213_3    lda tmpdes,x                              ;; @@6ea2 214
 14585  6ea5 9559                                sta ptarg1,x                              ;; @@6ea5 214
 14586  6ea7 ca                                  dex                                       ;; @@6ea7 214
 14587  6ea8 10f8                                bpl _local_1213_3                         ;; @@6ea8 214
 14588                           ;; @@6eaa 214
 14589  6eaa a002                                ldy #2                                   ; now get the descriptors ;; @@6eaa 214
 14590  6eac a959               _local_1213_4    lda #ptarg1                               ;; @@6eac 214
 14591  6eae 20d722                              jsr lda_far_ram1                         ; lda (ptarg1),y ;; @@6eae 214
 14592  6eb1 995d00                              sta str1,y                                ;; @@6eb1 214
 14593  6eb4 a95b                                lda #ptarg2                               ;; @@6eb4 214
 14594  6eb6 20d722                              jsr lda_far_ram1                         ; lda (ptarg2),y ;; @@6eb6 214
 14595  6eb9 996000                              sta str2,y                                ;; @@6eb9 214
 14596  6ebc 88                                  dey                                       ;; @@6ebc 214
 14597  6ebd 10ed                                bpl _local_1213_4                         ;; @@6ebd 214
 14598                           ;; @@6ebf 214
 14599  6ebf a560                                lda str2                                 ; check if string 2 is null ;; @@6ebf 214
 14600  6ec1 f03b                                beq _local_1213_50                       ; if so, return 0 ;; @@6ec1 214
 14601                           ;; @@6ec3 214
 14602  6ec3 a900               _local_1213_10   lda #0                                    ;; @@6ec3 214
 14603  6ec5 8564                                sta match                                 ;; @@6ec5 214
 14604  6ec7 18                                  clc                                       ;; @@6ec7 214
 14605  6ec8 a560                                lda str2                                 ; length of string 2 ;; @@6ec8 214
 14606  6eca 6563                                adc positn                                ;; @@6eca 214
 14607  6ecc b030                                bcs _local_1213_50                       ; too long, not found ;; @@6ecc 214
 14608  6ece c55d                                cmp str1                                 ; see if > length of string 1 ;; @@6ece 214
 14609  6ed0 9002                                bcc _local_1213_20                       ; < len string 1 ;; @@6ed0 214
 14610  6ed2 d02a                                bne _local_1213_50                       ; must be >, not found ;; @@6ed2 214
 14611                           ;; @@6ed4 214
 14612  6ed4 a464               _local_1213_20   ldy match                                 ;; @@6ed4 214
 14613  6ed6 c460                                cpy str2                                 ; if match len = str len, then found ;; @@6ed6 214
 14614  6ed8 f01f                                beq _local_1213_40                        ;; @@6ed8 214
 14615  6eda 98                                  tya                                       ;; @@6eda 214
 14616  6edb 18                                  clc                                       ;; @@6edb 214
 14617  6edc 6563                                adc positn                               ; compare str1(s+p+m) with str2(m) ;; @@6edc 214
 14618  6ede a8                                  tay                                       ;; @@6ede 214
 14619  6edf a95e                                lda #str1+1                               ;; @@6edf 214
 14620  6ee1 20d722                              jsr lda_far_ram1                         ; lda (str1+1),y ;; @@6ee1 214
 14621  6ee4 8578                                sta syntmp                                ;; @@6ee4 214
 14622  6ee6 a464                                ldy match                                 ;; @@6ee6 214
 14623  6ee8 a961                                lda #str2+1                               ;; @@6ee8 214
 14624  6eea 20d722                              jsr lda_far_ram1                         ; lda (str2+1),y ;; @@6eea 214
 14625  6eed c578                                cmp syntmp                                ;; @@6eed 214
 14626  6eef f004                                beq _local_1213_30                        ;; @@6eef 214
 14627  6ef1 e663                                inc positn                               ; not the same, start over from next positn ;; @@6ef1 214
 14628  6ef3 80ce                                bra _local_1213_10                       ; always ;; @@6ef3 214
 14629                           ;; @@6ef5 214
 14630  6ef5 e664               _local_1213_30   inc match                                ; count characters that match ;; @@6ef5 214
 14631  6ef7 80db                                bra _local_1213_20                       ; always ;; @@6ef7 214
 14632                           ;; @@6ef9 214
 14633                           ;; @@6ef9 214
 14634  6ef9 e663               _local_1213_40   inc positn                               ; found ;; @@6ef9 214
 14635  6efb a563                                lda positn                                ;; @@6efb 214
 14636  6efd 2c                                  !text $2c                                 ;; @@6efd 214
 14637                           ;; @@6efe 214
 14638  6efe a900               _local_1213_50   lda #0                                   ; not found ;; @@6efe 214
 14639                          ; sta sw_rom_ram0 ;???? ;; @@6f00 214
 14640  6f00 48                                  pha                                       ;; @@6f00 214
 14641  6f01 add502                              lda tmpdes+2                             ; free temp descriptors ;; @@6f01 214
 14642  6f04 acd602                              ldy tmpdes+3                              ;; @@6f04 214
 14643  6f07 20715b                              jsr fretmp                                ;; @@6f07 214
 14644                          ; sta sw_rom_ram0 ;???? ;; @@6f0a 214
 14645  6f0a add302                              lda tmpdes                                ;; @@6f0a 214
 14646  6f0d acd402                              ldy tmpdes+1                              ;; @@6f0d 214
 14647  6f10 20715b                              jsr fretmp                                ;; @@6f10 214
 14648  6f13 7a                                  ply                                       ;; @@6f13 214
 14649  6f14 83bbe9                              +lbra sngflt                             ; float 1 byte in .y ;; @@6f14 214
 14650                           ;; @@6f17 214
 14651                          ;.end ;; @@6f17 214
 14652                          ; .page ;; @@6f17 214
 14653                          ; .subttl  TYPE ;; @@6f17 214
 14654                           ;; @@6f17 214
 14655                          ; TYPE  types a given disk (SEQ) file to output channel ;; @@6f17 214
 14656                          ; ;; @@6f17 214
 14657                           ;; @@6f17 214
 14658  6f17 a300               type             ldz #0                                    ;; @@6f17 215
 14659                           ;; @@6f19 215
 14660                          open_SEQ_file                                              ;; @@6f19 215
 14661  6f19 db                                  phz                                      ; save EDIT load flag    [910620] ;; @@6f19 215
 14662  6f1a a9e6                                lda #$e6                                 ; parse:  filename [,U#] [,D#] ;; @@6f1a 215
 14663  6f1c 202074                              jsr dosprs                               ; (like dopen:      0 0 0 *  * 0 0 1 ) ;; @@6f1c 215
 14664  6f1f 20dc77                              jsr chk1                                 ; check parameters ;; @@6f1f 215
 14665  6f22 201d71                              jsr find_la                              ; find an available LA ;; @@6f22 215
 14666  6f25 200d71                              jsr find_sa                              ; find an available SA ;; @@6f25 215
 14667  6f28 a011                                ldy #fopnseq                              ;; @@6f28 215
 14668  6f2a a206                                ldx #6                                    ;; @@6f2a 215
 14669  6f2c 20fd70                              jsr open_file                            ; open the file ;; @@6f2c 215
 14670  6f2f b3f5c3                              +lbcs list_err                           ; exit if error ;; @@6f2f 215
 14671  6f32 fb                                  plz                                      ; [910620] ;; @@6f32 215
 14672  6f33 f001                                beq _local_1214_20                        ;; @@6f33 215
 14673  6f35 60                                  rts                                      ; or exit if called by EDIT load routine ;; @@6f35 215
 14674                           ;; @@6f36 215
 14675  6f36 20e1ff             _local_1214_20   jsr _stop                                ; check stop key ;; @@6f36 215
 14676  6f39 f03c                                beq _local_1214_30                       ; exit if down ;; @@6f39 215
 14677  6f3b ae8111                              ldx dosla                                 ;; @@6f3b 215
 14678  6f3e 20c6ff                              jsr _chkin                               ; get input channel ;; @@6f3e 215
 14679  6f41 b034                                bcs _local_1214_30                       ; exit if bad?? ;; @@6f41 215
 14680  6f43 a200                                ldx #0                                    ;; @@6f43 215
 14681  6f45 e0ff               _local_1214_25   cpx #255                                 ; check buffer (buflen????) ;; @@6f45 215
 14682                          ; bcs 99$   ; 'too long' error ;; @@6f47 215
 14683  6f47 f011                                beq _local_1214_26                       ; allow long lines   [910620] ;; @@6f47 215
 14684  6f49 20cfff                              jsr _basin                               ; read file data ;; @@6f49 215
 14685  6f4c 9d0013                              sta dosstr,x                             ; buffer it ;; @@6f4c 215
 14686  6f4f e8                                  inx                                      ; bump buffer pointer ;; @@6f4f 215
 14687  6f50 a8                                  tay                                      ; save char ;; @@6f50 215
 14688  6f51 20b7ff                              jsr _readst                              ; check channel status ;; @@6f51 215
 14689  6f54 d004                                bne _local_1214_26                       ; exit if eof or error ;; @@6f54 215
 14690  6f56 c00d                                cpy #cr                                   ;; @@6f56 215
 14691  6f58 d0eb                                bne _local_1214_25                       ; loop until eol ;; @@6f58 215
 14692                           ;; @@6f5a 215
 14693  6f5a 08                 _local_1214_26   php                                      ; save input channel status (beq=eol, bne=eof/err) ;; @@6f5a 215
 14694  6f5b 8e7b11                              stx t4                                   ; save character count ;; @@6f5b 215
 14695  6f5e 20c770                              jsr dcato                                ; get output channel ;; @@6f5e 215
 14696  6f61 a200                                ldx #0                                    ;; @@6f61 215
 14697  6f63 ec7b11             _local_1214_27   cpx t4                                   ; check buffer ;; @@6f63 215
 14698  6f66 b009                                bcs _local_1214_28                       ; end of buffered data ;; @@6f66 215
 14699  6f68 bd0013                              lda dosstr,x                             ; output data ;; @@6f68 215
 14700  6f6b 20d2ff                              jsr _bsout                                ;; @@6f6b 215
 14701  6f6e e8                                  inx                                      ; bump buffer pointer ;; @@6f6e 215
 14702  6f6f d0f2                                bne _local_1214_27                       ; loop until end of buffer ;; @@6f6f 215
 14703                           ;; @@6f71 215
 14704  6f71 20ccff             _local_1214_28   jsr _clrch                                ;; @@6f71 215
 14705  6f74 28                                  plp                                      ; check input status ;; @@6f74 215
 14706  6f75 f0bf                                beq _local_1214_20                       ; loop until eof or bad status ;; @@6f75 215
 14707                           ;; @@6f77 215
 14708  6f77 83a6c3             _local_1214_30   +lbra list_exit                          ; release channel, close file, return to main ;; @@6f77 215
 14709                           ;; @@6f7a 215
 14710                          ;99$ jsr _clrch  ;non-I/O trouble   removed [910620] ;; @@6f7a 215
 14711                          ; lda dosla  ; shut down disk & report BASIC error ;; @@6f7a 215
 14712                          ; clc ;; @@6f7a 215
 14713                          ; jsr _close ;; @@6f7a 215
 14714                          ; bra errlen  ;buffer overflow: report 'string too long' ;; @@6f7a 215
 14715                           ;; @@6f7a 215
 14716                          ; .page ;; @@6f7a 215
 14717                          ; .subttl  DISK command ;; @@6f7a 215
 14718                           ;; @@6f7a 215
 14719                          ; DISK "command_string" [,U#] [,D#]     new [910123] ;; @@6f7a 215
 14720                           ;; @@6f7a 215
 14721                          disk                                                       ;; @@6f7a 216
 14722  6f7a a9f6                                lda #$f6                                 ; parse:  command_string [,U#] ;; @@6f7a 216
 14723  6f7c 202074                              jsr dosprs                                ;; @@6f7c 216
 14724  6f7f 20dc77                              jsr chk1                                 ; check parameters ;; @@6f7f 216
 14725  6f82 a900                                lda #doslfn                              ; la (reserved la) ;; @@6f82 216
 14726  6f84 8d8111                              sta dosla                                 ;; @@6f84 216
 14727  6f87 a96f                                lda #$6f                                  ;; @@6f87 216
 14728  6f89 8d8311                              sta dossa                                ; sa (command channel) ;; @@6f89 216
 14729  6f8c a053                                ldy #fdisk                                ;; @@6f8c 216
 14730  6f8e a202                                ldx #2                                   ; add "/" [911108] ;; @@6f8e 216
 14731  6f90 20fd70                              jsr open_file                            ; open command channel & send command string ;; @@6f90 216
 14732  6f93 08                                  php                                      ; save error status    [910404] ;; @@6f93 216
 14733  6f94 48                                  pha                                       ;; @@6f94 216
 14734  6f95 a900                                lda #doslfn                              ; close it ;; @@6f95 216
 14735  6f97 38                                  sec                                      ; not a real close ;; @@6f97 216
 14736  6f98 20c3ff                              jsr _close                               ; close it ;; @@6f98 216
 14737  6f9b 68                                  pla                                      ; [910404] ;; @@6f9b 216
 14738  6f9c 28                                  plp                                       ;; @@6f9c 216
 14739  6f9d 83cef8                              +lbra exit_disk_op                       ; common error check & exit path ???? ;; @@6f9d 216
 14740                           ;; @@6fa0 216
 14741                           ;; @@6fa0 216
 14742                          ;.end ;; @@6fa0 216
 14743                          ; .page ;; @@6fa0 216
 14744                          ; .subttl  DOS 1 ;; @@6fa0 216
 14745                           ;; @@6fa0 216
 14746                          ; These routines take tokens and values after the following BASIC keywords: ;; @@6fa0 216
 14747                          ; ;; @@6fa0 216
 14748                          ;  DOPEN,   DCLOSE,  APPEND,  CONCAT, RECORD ;; @@6fa0 216
 14749                          ;  DLOAD,   DSAVE,   DVERIFY, BLOAD,  BSAVE ;; @@6fa0 216
 14750                          ;  FORMAT,  COLLECT, BACKUP,  COPY ;; @@6fa0 216
 14751                          ;  CATALOG, RENAME,  SCRATCH, DCLEAR ;; @@6fa0 216
 14752                          ; ;; @@6fa0 216
 14753                          ; It then parses the following line and finds syntax errors, checks for values ;; @@6fa0 216
 14754                          ; out of range, and sets variables in the zero-page to be passed to the disk ;; @@6fa0 216
 14755                          ; message generator. ;; @@6fa0 216
 14756                           ;; @@6fa0 216
 14757                           ;; @@6fa0 216
 14758                          directory                                                 ; display disk directory (catalog) ;; @@6fa0 216
 14759  6fa0 208522                              jsr chrgot                               ; get current chr ;; @@6fa0 216
 14760  6fa3 c9fe                                cmp #esc_command_token                   ; eat dirECTORY kludge if it's there ;; @@6fa3 216
 14761  6fa5 d00b                                bne _local_1215_1                         ;; @@6fa5 216
 14762  6fa7 208322                              jsr chrget                               ; (esc token + another) ;; @@6fa7 216
 14763  6faa c929                                cmp #ectory_token                         ;; @@6faa 216
 14764  6fac d39bbe                              +lbne snerr                               ;; @@6fac 216
 14765  6faf 208322                              jsr chrget                               ; yes- get next good char ;; @@6faf 216
 14766                           ;; @@6fb2 216
 14767  6fb2 201e74             _local_1215_1    jsr dospar                               ; parse the line ;; @@6fb2 216
 14768  6fb5 a57f                                lda parsts                               ; check options ;; @@6fb5 216
 14769  6fb7 29e6                                and #$e6                                  ;; @@6fb7 216
 14770  6fb9 d38ebe                              +lbne snerr                               ;; @@6fb9 216
 14771                           ;; @@6fbc 216
 14772  6fbc a001                                ldy #fdir                                ; table offset for directory ;; @@6fbc 216
 14773  6fbe 2c8f11                              bit dosflags                             ; want recoverable files? [901024] ;; @@6fbe 216
 14774  6fc1 5002                                bvc _local_1215_2                        ; no ;; @@6fc1 216
 14775  6fc3 a005                                ldy #fdirr                               ; yes ;; @@6fc3 216
 14776  6fc5 a201               _local_1215_2    ldx #1                                   ; just $ ;; @@6fc5 216
 14777  6fc7 a57f                                lda parsts                               ; check for default ;; @@6fc7 216
 14778  6fc9 2911                                and #$11                                 ; no drive? ;; @@6fc9 216
 14779  6fcb f006                                beq _local_1215_20                        ;; @@6fcb 216
 14780  6fcd 4a                                  lsr                                       ;; @@6fcd 216
 14781  6fce 9002                                bcc _local_1215_10                       ; just drive ;; @@6fce 216
 14782  6fd0 e8                                  inx                                      ; drive and filename ;; @@6fd0 216
 14783  6fd1 e8                                  inx                                       ;; @@6fd1 216
 14784  6fd2 e8                 _local_1215_10   inx                                       ;; @@6fd2 216
 14785  6fd3 8a                 _local_1215_20   txa                                      ; a now has length ;; @@6fd3 216
 14786  6fd4 20f276                              jsr sendp                                ; build ;; @@6fd4 216
 14787                           ;; @@6fd7 216
 14788  6fd7 a200                                ldx #sys_bank                            ; set banks????  fname in system space, bank0 [910620] ;; @@6fd7 216
 14789  6fd9 8a                                  txa                                      ; (load bank is don't care- we're not actually loading) ;; @@6fd9 216
 14790  6fda 206bff                              jsr _setbank                              ;; @@6fda 216
 14791                           ;; @@6fdd 216
 14792  6fdd a060                                ldy #$60                                 ; sa, load floppy ;; @@6fdd 216
 14793  6fdf ae8211                              ldx dosfa                                 ;; @@6fdf 216
 14794  6fe2 a900                                lda #doslfn                              ; lfn ;; @@6fe2 216
 14795  6fe4 20baff                              jsr _setlfs                              ; set file parameters ;; @@6fe4 216
 14796  6fe7 20c0ff                              jsr _open                                ; open it... ;; @@6fe7 216
 14797  6fea 9009                                bcc _local_1215_30                       ; ...ok ;; @@6fea 216
 14798  6fec 48                                  pha                                       ;; @@6fec 216
 14799  6fed 204f70                              jsr dcat11                               ; ...error, shut down and report ;; @@6fed 216
 14800  6ff0 fa                                  plx                                       ;; @@6ff0 216
 14801  6ff1 38                                  sec                                       ;; @@6ff1 216
 14802  6ff2 835abe                              +lbra error                               ;; @@6ff2 216
 14803                           ;; @@6ff5 216
 14804  6ff5 a515               _local_1215_30   lda channl                               ; determine DIR vs LDIR ;; @@6ff5 216
 14805  6ff7 d05e                                bne ldir                                 ; if output channel not default (screen) ;; @@6ff7 216
 14806                          ; use LDIR ;; @@6ff9 216
 14807                           ;; @@6ff9 216
 14808                          ; Get length in blocks ;; @@6ff9 216
 14809                           ;; @@6ff9 216
 14810  6ff9 a200               dir              ldx #doslfn                               ;; @@6ff9 217
 14811  6ffb 20c6ff                              jsr _chkin                                ;; @@6ffb 217
 14812  6ffe b04f                                bcs dcat11                               ; if problem?? ;; @@6ffe 217
 14813  7000 20b7ff                              jsr _readst                              ; check status ;; @@7000 217
 14814  7003 d04a                                bne dcat11                               ; exit if bad status ;; @@7003 217
 14815  7005 20f737                              jsr crdo                                 ; output new line ;; @@7005 217
 14816  7008 a003                                ldy #3                                   ; loop counter ;; @@7008 217
 14817                           ;; @@700a 217
 14818  700a 8c7911             dcat3            sty t3                                   ; save counter ;; @@700a 217
 14819                           ;; @@700d 217
 14820  700d 20cfff             _local_1216_10   jsr _basin                               ; get char ;; @@700d 217
 14821  7010 8d7b11                              sta t4                                    ;; @@7010 217
 14822  7013 20cfff                              jsr _basin                               ; get char ;; @@7013 217
 14823  7016 8d7c11                              sta t4+1                                  ;; @@7016 217
 14824  7019 20b7ff                              jsr _readst                              ; check status ;; @@7019 217
 14825  701c d031                                bne dcat11                               ; exit if eof or bad status ;; @@701c 217
 14826  701e ce7911                              dec t3                                    ;; @@701e 217
 14827  7021 d0ea                                bne _local_1216_10                       ; if not done ;; @@7021 217
 14828                           ;; @@7023 217
 14829                          ; Output blocks number ;; @@7023 217
 14830                           ;; @@7023 217
 14831  7023 ae7b11                              ldx t4                                    ;; @@7023 217
 14832  7026 ad7c11                              lda t4+1                                  ;; @@7026 217
 14833  7029 207f64                              jsr linprt                               ; output number ;; @@7029 217
 14834  702c a920                                lda #' '                                  ;; @@702c 217
 14835  702e 20d2ff                              jsr _bsout                               ; output a space ;; @@702e 217
 14836                           ;; @@7031 217
 14837                          ; Get name & output it ;; @@7031 217
 14838                           ;; @@7031 217
 14839  7031 20b7ff             dcat4            jsr _readst                              ; get status ;; @@7031 218
 14840  7034 d016                                bne dcat10                               ; if bad status ;; @@7034 218
 14841  7036 20cfff                              jsr _basin                               ; get char ;; @@7036 218
 14842  7039 f005                                beq dcat5                                ; if eol ;; @@7039 218
 14843  703b 20d2ff                              jsr _bsout                               ; echo char ;; @@703b 218
 14844  703e 80f1                                bra dcat4                                ; continue to process name until eol or err ;; @@703e 218
 14845                           ;; @@7040 218
 14846                          ; Here on end of name ;; @@7040 218
 14847                           ;; @@7040 218
 14848  7040 20f737             dcat5            jsr crdo                                 ; output new line ;; @@7040 218
 14849  7043 20e1ff                              jsr _stop                                ; check stop key ;; @@7043 218
 14850  7046 f007                                beq dcat11                               ; exit if stop request ;; @@7046 218
 14851                           ;; @@7048 218
 14852                          ; Process next ;; @@7048 218
 14853                           ;; @@7048 218
 14854  7048 a002                                ldy #2                                   ; perform 2 times ;; @@7048 218
 14855  704a 80be                                bra dcat3                                 ;; @@704a 218
 14856                           ;; @@704c 218
 14857                           ;; @@704c 218
 14858                          ; Exit directory ;; @@704c 218
 14859                           ;; @@704c 218
 14860  704c 20f737             dcat10           jsr crdo                                 ; flush current line ;; @@704c 218
 14861  704f 20b438             dcat11           jsr release_channels                     ; release cmd channel, restore terminal ;; @@704f 218
 14862  7052 a900                                lda #doslfn                               ;; @@7052 218
 14863  7054 83b7f8                              +lbra close_out                          ; [900725] ;; @@7054 218
 14864                           ;; @@7057 218
 14865                          ; .page ;; @@7057 218
 14866                          ; LDIR  same as DIR, except it buffers each line to reduce ;; @@7057 218
 14867                          ;       talker/listener turnaround time.  Even so, it is still ;; @@7057 218
 14868                          ; unacceptably slow for normal screen output, which is ;; @@7057 218
 14869                          ; why it was split out from the original DIRECTORY routine. ;; @@7057 218
 14870                          ; ;; @@7057 218
 14871                           ;; @@7057 218
 14872                          ; Read block count ;; @@7057 218
 14873                           ;; @@7057 218
 14874                          ldir                                                       ;; @@7057 218
 14875  7057 a9c0                                lda #$c0                                 ; serial bus kludge for open4,4:cmd4:dir ???? ;; @@7057 218
 14876  7059 2d09d6                              and $d609                                 ;; @@7059 218
 14877  705c 1c09d6                              trb $d609                                ; disable fast serial bus ;; @@705c 218
 14878  705f 8586                                sta sid_speed_flag                       ; but save enables so we can restore them ;; @@705f 218
 14879                           ;; @@7061 218
 14880  7061 a003                                ldy #3                                   ; loop counter (3=skip fake load adr & link bytes) ;; @@7061 218
 14881  7063 8c7911             _local_1217_1    sty t3                                   ; save counter ;; @@7063 218
 14882  7066 a200                                ldx #doslfn                               ;; @@7066 218
 14883  7068 20c6ff                              jsr _chkin                                ;; @@7068 218
 14884  706b b053                                bcs ldir_end                             ; problem?? ;; @@706b 218
 14885                           ;; @@706d 218
 14886  706d 20b7ff             _local_1217_10   jsr _readst                              ; check status ;; @@706d 218
 14887  7070 d04e                                bne ldir_end                             ; exit if bad status ;; @@7070 218
 14888  7072 20cfff                              jsr _basin                               ; get block count ;; @@7072 218
 14889  7075 8d0013                              sta dosstr                               ; buffer it ;; @@7075 218
 14890  7078 20cfff                              jsr _basin                                ;; @@7078 218
 14891  707b 8d0113                              sta dosstr+1                              ;; @@707b 218
 14892  707e ce7911                              dec t3                                    ;; @@707e 218
 14893  7081 d0ea                                bne _local_1217_10                       ; continue eating bytes until we have block count ;; @@7081 218
 14894                           ;; @@7083 218
 14895                          ; Read filename ;; @@7083 218
 14896                           ;; @@7083 218
 14897  7083 a201                                ldx #1                                   ; buffer index-1 ;; @@7083 218
 14898  7085 e8                 _local_1217_20   inx                                       ;; @@7085 218
 14899  7086 20b7ff                              jsr _readst                              ; check status ;; @@7086 218
 14900  7089 d035                                bne ldir_end                             ; exit if eof or bad status ;; @@7089 218
 14901  708b 20cfff                              jsr _basin                               ; buffer next character ;; @@708b 218
 14902  708e 9d0013                              sta dosstr,x                              ;; @@708e 218
 14903  7091 d0f2                                bne _local_1217_20                       ; loop until eol (null terminator) ;; @@7091 218
 14904                           ;; @@7093 218
 14905                          ; Print one line of directory ;; @@7093 218
 14906                           ;; @@7093 218
 14907  7093 20c770                              jsr dcato                                ; get output channel ;; @@7093 218
 14908  7096 ae0013                              ldx dosstr                                ;; @@7096 218
 14909  7099 ad0113                              lda dosstr+1                              ;; @@7099 218
 14910  709c 207f64                              jsr linprt                               ; print blocks ;; @@709c 218
 14911                           ;; @@709f 218
 14912  709f a920                                lda #' '                                  ;; @@709f 218
 14913  70a1 20d2ff                              jsr _bsout                               ; print space ;; @@70a1 218
 14914                           ;; @@70a4 218
 14915  70a4 a202                                ldx #2                                    ;; @@70a4 218
 14916  70a6 bd0013             _local_1217_30   lda dosstr,x                              ;; @@70a6 218
 14917  70a9 f006                                beq _local_1217_40                        ;; @@70a9 218
 14918  70ab 20d2ff                              jsr _bsout                               ; print filename (null terminated) ;; @@70ab 218
 14919  70ae e8                                  inx                                       ;; @@70ae 218
 14920  70af d0f5                                bne _local_1217_30                        ;; @@70af 218
 14921                           ;; @@70b1 218
 14922  70b1 20f737             _local_1217_40   jsr crdo                                 ; print return ;; @@70b1 218
 14923  70b4 20ccff                              jsr _clrch                                ;; @@70b4 218
 14924  70b7 20e1ff                              jsr _stop                                ; check stop key ;; @@70b7 218
 14925  70ba f004                                beq ldir_end                             ; exit if stop request ;; @@70ba 218
 14926                           ;; @@70bc 218
 14927                          ; Continue with next line ;; @@70bc 218
 14928                           ;; @@70bc 218
 14929  70bc a002                                ldy #2                                   ; set to skip fake link bytes ;; @@70bc 218
 14930  70be 80a3                                bra _local_1217_1                        ; loop ;; @@70be 218
 14931                           ;; @@70c0 218
 14932                           ;; @@70c0 218
 14933                          ldir_end                                                   ;; @@70c0 219
 14934  70c0 a586                                lda sid_speed_flag                       ; serial bus kludge for open4,4:cmd4:dir ???? ;; @@70c0 219
 14935  70c2 0c09d6                              tsb $d609                                ; restore fast serial bus enables ;; @@70c2 219
 14936  70c5 8088                                bra dcat11                                ;; @@70c5 219
 14937                           ;; @@70c7 219
 14938                           ;; @@70c7 219
 14939                           ;; @@70c7 219
 14940  70c7 20ccff             dcato            jsr _clrch                                ;; @@70c7 219
 14941  70ca a615                                ldx channl                               ; restore output channel ;; @@70ca 219
 14942  70cc f003                                beq _local_1218_10                       ; branch if screen (default output) ;; @@70cc 219
 14943  70ce 4cc9ff                              jmp _chkout                              ; else get output channel ;; @@70ce 219
 14944                           ;; @@70d1 219
 14945  70d1 60                 _local_1218_10   rts                                       ;; @@70d1 219
 14946                           ;; @@70d2 219
 14947                          ; .page ;; @@70d2 219
 14948                          ; DOPEN dfn(,t(,r)) ;; @@70d2 219
 14949                           ;; @@70d2 219
 14950  70d2 a922               dopen            lda #$22                                 ; set error flag ;; @@70d2 220
 14951  70d4 202074                              jsr dosprs                               ; parse the line ;; @@70d4 220
 14952  70d7 200478                              jsr chk6                                 ; check required parameters ;; @@70d7 220
 14953  70da 200d71                              jsr find_sa                              ; find unused secondary address ;; @@70da 220
 14954  70dd a009                                ldy #fopn                                ; fcb format pointer ;; @@70dd 220
 14955  70df a204                                ldx #4                                   ; normal length ;; @@70df 220
 14956  70e1 6f7f13                              bbr6 parsts,open_it                      ; relative record? branch if not relative ;; @@70e1 220
 14957  70e4 a208                                ldx #8                                   ; random access length ;; @@70e4 220
 14958  70e6 800f                                bra open_it                              ; [910925] ;; @@70e6 220
 14959                           ;; @@70e8 220
 14960                          ;_local_1219_10 jsr open_file  ;open it ;; @@70e8 220
 14961                          ; bra exit_disk_op ;report any DOS errors, & return to main [910404] ;; @@70e8 220
 14962                           ;; @@70e8 220
 14963                           ;; @@70e8 220
 14964                           ;; @@70e8 220
 14965                          ; APPEND ;; @@70e8 220
 14966                           ;; @@70e8 220
 14967  70e8 a9e2               append           lda #$e2                                 ; set error flags ;; @@70e8 220
 14968  70ea 202074                              jsr dosprs                               ; parse the line ;; @@70ea 220
 14969  70ed 200478                              jsr chk6                                 ; check required parameters ;; @@70ed 220
 14970  70f0 200d71                              jsr find_sa                              ; find secondary address ;; @@70f0 220
 14971  70f3 a028                                ldy #fapn                                ; tabld index ;; @@70f3 220
 14972  70f5 a205                                ldx #5                                   ; length ;; @@70f5 220
 14973                          open_it                                                    ;; @@70f7 220
 14974  70f7 20fd70                              jsr open_file                            ; open it ;; @@70f7 220
 14975  70fa 8371f7                              +lbra exit_disk_op                       ; report any DOS errors, & return to main [910404] ;; @@70fa 220
 14976                           ;; @@70fd 220
 14977                           ;; @@70fd 220
 14978                           ;; @@70fd 220
 14979                          open_file                                                 ; dop2. ;; @@70fd 220
 14980  70fd 8a                                  txa                                      ; set length into a ;; @@70fd 220
 14981  70fe 20f276                              jsr sendp                                 ;; @@70fe 220
 14982  7101 20ccff                              jsr _clrch                                ;; @@7101 220
 14983  7104 a200                                ldx #sys_bank                            ; fname is in system space, bank0  [910620] ;; @@7104 220
 14984  7106 8a                                  txa                                      ; (load bank not req'd)???? ;; @@7106 220
 14985  7107 206bff                              jsr _setbank                              ;; @@7107 220
 14986  710a 4cc0ff                              jmp _open                                 ;; @@710a 220
 14987                           ;; @@710d 220
 14988                          ; .page ;; @@710d 220
 14989                          ; Find an available secondary address ;; @@710d 220
 14990                           ;; @@710d 220
 14991                          find_sa                                                    ;; @@710d 220
 14992  710d a061                                ldy #$61                                 ; 2-14 possible ;; @@710d 220
 14993                           ;; @@710f 220
 14994  710f c8                 _local_1219_10   iny                                       ;; @@710f 220
 14995  7110 c06f                                cpy #$6f                                  ;; @@7110 220
 14996  7112 f017                                beq too_many_files                       ; if none available error ;; @@7112 220
 14997  7114 2062ff                              jsr _lkupsa                              ; kernel will lookup this sa in its tables ;; @@7114 220
 14998  7117 90f6                                bcc _local_1219_10                       ; if used keep looking ;; @@7117 220
 14999  7119 8c8311                              sty dossa                                ; save secondary address ;; @@7119 220
 15000  711c 60                                  rts                                      ; return .y = sa ;; @@711c 220
 15001                           ;; @@711d 220
 15002                           ;; @@711d 220
 15003                           ;; @@711d 220
 15004                          ; Find an available logical address ;; @@711d 220
 15005                           ;; @@711d 220
 15006                          find_la                                                    ;; @@711d 221
 15007  711d a900                                lda #0                                   ; 1-127 possible ;; @@711d 221
 15008                           ;; @@711f 221
 15009  711f 1a                 _local_1220_10   inc                                       ;; @@711f 221
 15010  7120 3009                                bmi too_many_files                       ; if none available error ;; @@7120 221
 15011  7122 205fff                              jsr _lkupla                              ; kernel will lookup this la in its tables ;; @@7122 221
 15012  7125 90f8                                bcc _local_1220_10                       ; if used keep looking ;; @@7125 221
 15013  7127 8d8111                              sta dosla                                ; save logical address ;; @@7127 221
 15014  712a 60                                  rts                                      ; return .a = la ;; @@712a 221
 15015                           ;; @@712b 221
 15016                           ;; @@712b 221
 15017                           ;; @@712b 221
 15018                           ;; @@712b 221
 15019                          too_many_files                                             ;; @@712b 222
 15020  712b a201                                ldx #errtmf                              ; too many files open ;; @@712b 222
 15021  712d 831fbd                              +lbra error                               ;; @@712d 222
 15022                           ;; @@7130 222
 15023                          ; .page ;; @@7130 222
 15024                          ; Close disk file ;; @@7130 222
 15025                           ;; @@7130 222
 15026  7130 a9f3               dclose           lda #$f3                                 ; set error flags ;; @@7130 222
 15027  7132 202074                              jsr dosprs                               ; parse the line ;; @@7132 222
 15028  7135 208278                              jsr Clear_DS                              ;; @@7135 222
 15029  7138 2f7f06                              bbr2 parsts,dclall                       ; any la given?  branch if not ;; @@7138 222
 15030  713b ad8111                              lda dosla                                 ;; @@713b 222
 15031  713e 83cdf7                              +lbra close_out                           ;; @@713e 222
 15032                           ;; @@7141 222
 15033  7141 ad8211             dclall           lda dosfa                                ; get disk # ;; @@7141 222
 15034                          ; jsr put_io_in_map ;; @@7144 222
 15035  7144 4c50ff                              jmp _close_all                           ; close all channels ;; @@7144 222
 15036                           ;; @@7147 222
 15037                           ;; @@7147 222
 15038                           ;; @@7147 222
 15039                          ; DSAVE dfn ;; @@7147 222
 15040                           ;; @@7147 222
 15041  7147 4f7e03             dsave            bbr4 runmod,_local_1221_10               ; PROGRAM or EDIT mode?    [910620] ;; @@7147 222
 15042  714a 83aa4c                              +lbra edit_save                          ; edit ;; @@714a 222
 15043                           ;; @@714d 222
 15044  714d a966               _local_1221_10   lda #$66                                 ; set error flags ;; @@714d 222
 15045  714f 202074                              jsr dosprs                               ; parse the line ;; @@714f 222
 15046  7152 20e177                              jsr chk2                                 ; check required parameters ;; @@7152 222
 15047  7155 a009                                ldy #fopn                                ; table offset ;; @@7155 222
 15048  7157 a904                                lda #4                                   ; ..length, ;; @@7157 222
 15049  7159 20f276                              jsr sendp                                 ;; @@7159 222
 15050                           ;; @@715c 222
 15051  715c a584                                lda text_bank                            ; default to text bank set up banks???? [910620] ;; @@715c 222
 15052  715e a200                                ldx #sys_bank                            ; fname is in system space, bank0 ;; @@715e 222
 15053  7160 206bff                              jsr _setbank                              ;; @@7160 222
 15054  7163 83fff6                              +lbra savenp                              ;; @@7163 222
 15055                           ;; @@7166 222
 15056                          ; .page ;; @@7166 222
 15057                          ; DVERIFY ;; @@7166 222
 15058                           ;; @@7166 222
 15059  7166 a901               dverify          lda #1                                   ; flag 'verify' ;; @@7166 223
 15060  7168 2c                                  !text $2c                                 ;; @@7168 223
 15061                           ;; @@7169 223
 15062                           ;; @@7169 223
 15063                           ;; @@7169 223
 15064                          ; DLOAD dfn ;; @@7169 223
 15065                           ;; @@7169 223
 15066  7169 a900               dload            lda #0                                    ;; @@7169 223
 15067  716b 850c                                sta verck                                ; set load flag (for verify check later) ;; @@716b 223
 15068                           ;; @@716d 223
 15069  716d 4f7e03                              bbr4 runmod,_local_1222_10               ; PROGRAM or EDIT mode?    [910620] ;; @@716d 223
 15070  7170 839a4b                              +lbra edit_load                          ; edit ;; @@7170 223
 15071                           ;; @@7173 223
 15072  7173 a9e6               _local_1222_10   lda #$e6                                 ; set error flags ;; @@7173 223
 15073  7175 202074                              jsr dosprs                               ; parse the line ;; @@7175 223
 15074  7178 20e177                              jsr chk2                                 ; check required parameters ;; @@7178 223
 15075                           ;; @@717b 223
 15076                           ;; @@717b 223
 15077                          dload_boot                                                ; <<<<<<<<<<<<<<<<<< entry for BOOT'AUTOBOOT.C65' ;; @@717b 224
 15078  717b a900                                lda #0                                    ;; @@717b 224
 15079  717d 8d8311                              sta dossa                                ; set relocate flag ;; @@717d 224
 15080  7180 a009                                ldy #fopn                                ; table offset ;; @@7180 224
 15081  7182 a904                                lda #4                                   ; ..length ;; @@7182 224
 15082  7184 20f276                              jsr sendp                                 ;; @@7184 224
 15083                           ;; @@7187 224
 15084  7187 a584                                lda text_bank                            ; set up banks ???? want text_bank ????  [910620] ;; @@7187 224
 15085  7189 a200                                ldx #sys_bank                            ; fname is in system space, bank0 ;; @@7189 224
 15086  718b 206bff                              jsr _setbank                              ;; @@718b 224
 15087                           ;; @@718e 224
 15088  718e 8306f7                              +lbra cld10                              ; finish load, using 'LOAD' code. ;; @@718e 224
 15089                           ;; @@7191 224
 15090                          ; .page ;; @@7191 224
 15091                          ; BSAVE ;; @@7191 224
 15092                           ;; @@7191 224
 15093  7191 a966               bsave            lda #$66                                 ; std error flag ;; @@7191 224
 15094  7193 a2f8                                ldx #$f8                                 ; auxiliary error flag (allow bank, start & end address) ;; @@7193 224
 15095  7195 202274                              jsr dosprx                               ; parse options ;; @@7195 224
 15096  7198 20e177                              jsr chk2                                 ; check required parameters ;; @@7198 224
 15097                           ;; @@719b 224
 15098  719b a580                                lda parstx                               ; check for starting & ending addresses ;; @@719b 224
 15099  719d 2906                                and #6                                    ;; @@719d 224
 15100  719f c906                                cmp #6                                    ;; @@719f 224
 15101  71a1 d3a6bc                              +lbne snerr                              ; ..if not present, syntax error ;; @@71a1 224
 15102                           ;; @@71a4 224
 15103  71a4 ad8011                              lda dosofh+1                             ; check that ea>sa ;; @@71a4 224
 15104  71a7 cd7e11                              cmp dosofl+1                              ;; @@71a7 224
 15105  71aa 9351e0                              +lbcc fcerr                              ; ...error ;; @@71aa 224
 15106  71ad d00c                                bne _local_1223_20                        ;; @@71ad 224
 15107  71af ad7f11                              lda dosofh                                ;; @@71af 224
 15108  71b2 cd7d11                              cmp dosofl                                ;; @@71b2 224
 15109  71b5 9346e0                              +lbcc fcerr                              ; ...error ;; @@71b5 224
 15110  71b8 f343e0                              +lbeq fcerr                               ;; @@71b8 224
 15111                           ;; @@71bb 224
 15112  71bb a009               _local_1223_20   ldy #fopn                                ; table offset ;; @@71bb 224
 15113  71bd a904                                lda #4                                   ; ..length ;; @@71bd 224
 15114  71bf 20f276                              jsr sendp                                 ;; @@71bf 224
 15115                           ;; @@71c2 224
 15116  71c2 ad8c11                              lda dosbnk                               ; get requested bank ;; @@71c2 224
 15117  71c5 a200                                ldx #sys_bank                            ; ..and name will be in system bank ;; @@71c5 224
 15118  71c7 206bff                              jsr _setbank                             ; ..and go set up bank ;; @@71c7 224
 15119                           ;; @@71ca 224
 15120  71ca ae7d11                              ldx dosofl                               ; start addr ;; @@71ca 224
 15121  71cd ac7e11                              ldy dosofl+1                              ;; @@71cd 224
 15122  71d0 a95a                                lda #highds                              ; ..and a pointer to start address ;; @@71d0 224
 15123  71d2 865a                                stx highds                                ;; @@71d2 224
 15124  71d4 845b                                sty highds+1                              ;; @@71d4 224
 15125  71d6 ae7f11                              ldx dosofh                               ; end addr ;; @@71d6 224
 15126  71d9 ac8011                              ldy dosofh+1                              ;; @@71d9 224
 15127  71dc 838cf6                              +lbra savenb                              ;; @@71dc 224
 15128                           ;; @@71df 224
 15129                           ;; @@71df 224
 15130                          ; .page ;; @@71df 224
 15131                          ; DVERIFY ;; @@71df 224
 15132                           ;; @@71df 224
 15133  71df a901               bverify          lda #1                                   ; flag 'verify' ;; @@71df 225
 15134  71e1 2c                                  !text $2c                                 ;; @@71e1 225
 15135                           ;; @@71e2 225
 15136                           ;; @@71e2 225
 15137                          ; BLOAD dfn ;; @@71e2 225
 15138                           ;; @@71e2 225
 15139  71e2 a900               bload            lda #0                                   ; flag 'load' ;; @@71e2 225
 15140  71e4 850c                                sta verck                                ; eventually the 'load' routine will look here ;; @@71e4 225
 15141                           ;; @@71e6 225
 15142  71e6 a9e6                                lda #$e6                                 ; std error flag ;; @@71e6 225
 15143  71e8 a2fc                                ldx #$fc                                 ; aux error flag (allow bank & load address) ;; @@71e8 225
 15144  71ea 202274                              jsr dosprx                               ; parse options ;; @@71ea 225
 15145                           ;; @@71ed 225
 15146                          bload_boot                                                ; <<<<<<<<<<<<<<<<<<<<<< entry for BOOT'filename' ;; @@71ed 225
 15147  71ed 20e177                              jsr chk2                                 ; check required parameters ;; @@71ed 225
 15148  71f0 ae7d11                              ldx dosofl                               ; get starting address high ;; @@71f0 225
 15149  71f3 ac7e11                              ldy dosofl+1                             ; ..and lo ;; @@71f3 225
 15150  71f6 a900                                lda #0                                   ; assume x & y not both=ff (means real add., not def) ;; @@71f6 225
 15151  71f8 e0ff                                cpx #$ff                                  ;; @@71f8 225
 15152  71fa d006                                bne _local_1224_5                         ;; @@71fa 225
 15153  71fc c0ff                                cpy #$ff                                  ;; @@71fc 225
 15154  71fe d002                                bne _local_1224_5                         ;; @@71fe 225
 15155  7200 a9ff                                lda #$ff                                 ; use defaults ;; @@7200 225
 15156  7202 8d8311             _local_1224_5    sta dossa                                 ;; @@7202 225
 15157                           ;; @@7205 225
 15158  7205 a009                                ldy #fopn                                ; table offset ;; @@7205 225
 15159  7207 a904                                lda #4                                   ; ..length, ;; @@7207 225
 15160  7209 20f276                              jsr sendp                                ; ...and go send parameters ;; @@7209 225
 15161                           ;; @@720c 225
 15162  720c ad8c11                              lda dosbnk                                ;; @@720c 225
 15163  720f a200                                ldx #sys_bank                             ;; @@720f 225
 15164  7211 206bff                              jsr _setbank                              ;; @@7211 225
 15165                           ;; @@7214 225
 15166  7214 a50c                                lda verck                                ; flag LOAD or VERIFY ;; @@7214 225
 15167  7216 ae7d11                              ldx dosofl                               ; get starting address high ;; @@7216 225
 15168  7219 ac7e11                              ldy dosofl+1                             ; ..and lo (in case this isn't a 'default' load) ;; @@7219 225
 15169  721c 20d5ff                              jsr _loadsp                              ; load it ;; @@721c 225
 15170                           ;; @@721f 225
 15171                          ; Any changes to the following code must be duplicated at: ;; @@721f 225
 15172                          ;  load (load_file) ;; @@721f 225
 15173                          ;  save (exit_disk_op) ;; @@721f 225
 15174                           ;; @@721f 225
 15175  721f 08                                  php                                      ; save kernel load status (.c) ;; @@721f 225
 15176  7220 48                                  pha                                      ; save kernel error # (.a) ;; @@7220 225
 15177  7221 20b7ff                              jsr _readst                              ; save I/O status byte ;; @@7221 225
 15178  7224 857f                                sta parsts                                ;; @@7224 225
 15179  7226 206e72                              jsr print_dos_error                      ; report DOS problems ;; @@7226 225
 15180  7229 68                                  pla                                      ; restore error stuff ;; @@7229 225
 15181  722a 28                                  plp                                       ;; @@722a 225
 15182  722b 9010                                bcc _local_1224_30                       ; branch if no error (rts) ;; @@722b 225
 15183  722d ff7e0a                              bbs7 runmod,_local_1224_20               ; branch if run mode (erexit) ;; @@722d 225
 15184  7230 c904                                cmp #errfnf                              ; is it 'file not found' catch-all? ;; @@7230 225
 15185  7232 d005                                bne _local_1224_10                       ; no  (erexit) ;; @@7232 225
 15186  7234 8dc702                              sta errnum                               ; yes- save error # for 'er' ;; @@7234 225
 15187  7237 0980                                ora #$80                                 ; but no errdis ;; @@7237 225
 15188  7239 38                 _local_1224_10   sec                                       ;; @@7239 225
 15189  723a b3f9f5             _local_1224_20   +lbcs erexit                             ; exit if kernel problem (rts) ;; @@723a 225
 15190                           ;; @@723d 225
 15191  723d a50c               _local_1224_30   lda verck                                ; load or verify operation? ;; @@723d 225
 15192  723f d387f6                              +lbne verify_check                       ; verify ;; @@723f 225
 15193                           ;; @@7242 225
 15194                          ; jsr _readst  ;  read status ;; @@7242 225
 15195  7242 a57f                                lda parsts                               ; load ;; @@7242 225
 15196  7244 29bf                                and #%10111111                           ; EOI is okay, so mask it ;; @@7244 225
 15197  7246 d397f6                              +lbne load_error                         ; load error ;; @@7246 225
 15198  7249 18                                  clc                                       ;; @@7249 225
 15199  724a 60                                  rts                                       ;; @@724a 225
 15200                           ;; @@724b 225
 15201                          ; .page ;; @@724b 225
 15202                          ; HEADER nddn [,id]  (alias: FORMAT) ;; @@724b 225
 15203                           ;; @@724b 225
 15204  724b 201e74             header           jsr dospar                               ; parse the line ;; @@724b 226
 15205  724e 20dc77                              jsr chk1                                 ; check parameter errors ;; @@724e 226
 15206  7251 2901                                and #$01                                  ;; @@7251 226
 15207  7253 c901                                cmp #$01                                  ;; @@7253 226
 15208  7255 d3f2bb                              +lbne snerr                              ; if required parameters not present ;; @@7255 226
 15209                           ;; @@7258 226
 15210  7258 20e7ff                              jsr _clall                               ; close all files ;; @@7258 226
 15211  725b 20c378                              jsr are_you_sure                         ; confirm if in direct mode ;; @@725b 226
 15212  725e d072                                bne header_rts                           ; exit if 'no' response ;; @@725e 226
 15213  7260 a02d                                ldy #fhed                                ; tabld index ;; @@7260 226
 15214  7262 a904                                lda #4                                   ; length ;; @@7262 226
 15215  7264 ae8d11                              ldx dosdid                               ; check for diskid ;; @@7264 226
 15216  7267 f002                                beq _local_1225_10                        ;; @@7267 226
 15217  7269 a906                                lda #6                                   ; length with id ;; @@7269 226
 15218                           ;; @@726b 226
 15219  726b 20f973             _local_1225_10   jsr trans                                ; build and send command ;; @@726b 226
 15220                          ;fall into 'print_dos_error' ;; @@726e 226
 15221                           ;; @@726e 226
 15222                          ; .page ;; @@726e 226
 15223                          print_dos_error                                           ; [900725] ;; @@726e 227
 15224  726e ff7e61                              bbs7 runmod,header_rts                   ; branch if not direct mode ;; @@726e 227
 15225  7271 200e78                              jsr Check_DS                             ; get current disk error message ;; @@7271 227
 15226  7274 a000                                ldy #0                                    ;; @@7274 227
 15227  7276 a97a                                lda #dsdesc+1                             ;; @@7276 227
 15228  7278 20d722                              jsr lda_far_ram1                         ; lda (dsdesc+1),y peek at first character ;; @@7278 227
 15229  727b c932                                cmp #'2'                                  ;; @@727b 227
 15230  727d 9053                                bcc header_rts                           ; branch if no error occured ('00' or '01') ;; @@727d 227
 15231  727f c937                                cmp #'7'                                  ;; @@727f 227
 15232  7281 d00a                                bne _local_1226_1                        ; [900730] ;; @@7281 227
 15233  7283 c8                                  iny                                       ;; @@7283 227
 15234  7284 a97a                                lda #dsdesc+1                             ;; @@7284 227
 15235  7286 20d722                              jsr lda_far_ram1                         ; might be '73' powerup message ;; @@7286 227
 15236  7289 c933                                cmp #'3'                                  ;; @@7289 227
 15237  728b f045                                beq header_rts                           ; yup ;; @@728b 227
 15238                           ;; @@728d 227
 15239                          ; ldx #errbdk  ; bad disk error (carry is set) ;; @@728d 227
 15240                          ; bra error ;; @@728d 227
 15241                           ;; @@728d 227
 15242                          ; Print DOS error message as if it were a BASIC error message   [900910] ;; @@728d 227
 15243                           ;; @@728d 227
 15244  728d a9ff               _local_1226_1    lda #$ff                                 ; reset error line ;; @@728d 227
 15245  728f 8dc802                              sta errlin                               ;  ;; @@728f 227
 15246  7292 8dc902                              sta errlin+1                              ;; @@7292 227
 15247  7295 20ccff                              jsr _clrch                                ;; @@7295 227
 15248                          ; inc a   ;a=0 restore output to screen   [910909] ;; @@7298 227
 15249  7298 8515                                sta channl                                ;; @@7298 227
 15250  729a 2027af                              jsr RestoreTextScreen                    ; make sure we're in text mode????  [910404] ;; @@729a 227
 15251  729d 200935                              jsr init_stack                           ; clean up system, string temps, etc.  [910121] ;; @@729d 227
 15252                           ;; @@72a0 227
 15253  72a0 20dc3c                              jsr highlight_text                       ; [910624] ;; @@72a0 227
 15254  72a3 207dff                              jsr _primm                               ; start a new line with '?DOS: ' ;; @@72a3 227
 15255  72a6 0d3f444f533a2000                    !text cr,"?DOS: ",0                      ; (to distinguish ?DOS: SYNTAX ERROR from ?SYNTAX ERROR) ;; @@72a6 227
 15256                           ;; @@72ae 227
 15257  72ae a003                                ldy #3                                   ; print text part of message only ;; @@72ae 227
 15258  72b0 a97a                                lda #dsdesc+1                             ;; @@72b0 227
 15259  72b2 20d722                              jsr lda_far_ram1                         ; skip err#, comma, & leading space if any ;; @@72b2 227
 15260  72b5 c920                                cmp #' '                                  ;; @@72b5 227
 15261  72b7 d00a                                bne _local_1226_20                        ;; @@72b7 227
 15262  72b9 c8                                  iny                                       ;; @@72b9 227
 15263  72ba a97a               _local_1226_10   lda #dsdesc+1                             ;; @@72ba 227
 15264  72bc 20d722                              jsr lda_far_ram1                          ;; @@72bc 227
 15265  72bf c92c                                cmp #','                                 ; finished at comma preceding trk, sector ;; @@72bf 227
 15266  72c1 f006                                beq _local_1226_30                        ;; @@72c1 227
 15267  72c3 203d68             _local_1226_20   jsr outch                                 ;; @@72c3 227
 15268  72c6 c8                                  iny                                       ;; @@72c6 227
 15269  72c7 10f1                                bpl _local_1226_10                       ; loop always (bpl=failsafe) ;; @@72c7 227
 15270                           ;; @@72c9 227
 15271  72c9 20cb3c             _local_1226_30   jsr highlight_done                       ; [910624] ;; @@72c9 227
 15272  72cc 20f737                              jsr crdo                                  ;; @@72cc 227
 15273  72cf 837bbb                              +lbra ready                              ; we're in direct mode, error msg has been printed, abort ;; @@72cf 227
 15274                           ;; @@72d2 227
 15275                          header_rts                                                 ;; @@72d2 228
 15276  72d2 18                                  clc                                       ;; @@72d2 228
 15277  72d3 60                                  rts                                       ;; @@72d3 228
 15278                           ;; @@72d4 228
 15279                          ; .page ;; @@72d4 228
 15280                          ; SCRATCH sdfn  aliases: DELETE, ERASE ;; @@72d4 228
 15281                           ;; @@72d4 228
 15282  72d4 201e74             scratch          jsr dospar                               ; parse the line ;; @@72d4 228
 15283  72d7 20dc77                              jsr chk1                                  ;; @@72d7 228
 15284  72da 20c378                              jsr are_you_sure                         ; confirm if in direct mode ;; @@72da 228
 15285  72dd d02b                                bne _local_1227_30                       ; branch if 'no' response given ;; @@72dd 228
 15286                           ;; @@72df 228
 15287  72df a049                                ldy #fscr                                ; offset ;; @@72df 228
 15288  72e1 a904                                lda #4                                   ; length ;; @@72e1 228
 15289  72e3 2c8f11                              bit dosflags                             ; scratch or recover? ;; @@72e3 228
 15290  72e6 5004                                bvc _local_1227_1                        ; scratch ;; @@72e6 228
 15291  72e8 a04d                                ldy #frscr                               ; recover ;; @@72e8 228
 15292  72ea a906                                lda #6                                    ;; @@72ea 228
 15293  72ec 20f973             _local_1227_1    jsr trans                                ; transmit scratch command ;; @@72ec 228
 15294  72ef 201378                              jsr Read_DS                              ; read error channel & update DS$ ;; @@72ef 228
 15295                           ;; @@72f2 228
 15296  72f2 ff7e15                              bbs7 runmod,_local_1227_30               ; branch if not direct mode ;; @@72f2 228
 15297  72f5 20f737                              jsr crdo                                 ; output cr ;; @@72f5 228
 15298                           ;; @@72f8 228
 15299  72f8 a000                                ldy #0                                   ; display 'files scratched' DOS message ;; @@72f8 228
 15300  72fa a97a               _local_1227_10   lda #dsdesc+1                             ;; @@72fa 228
 15301  72fc 20d722                              jsr lda_far_ram1                         ; lda (dsdesc+1),y ;; @@72fc 228
 15302  72ff f006                                beq _local_1227_20                       ; if end of error message ;; @@72ff 228
 15303  7301 203d68                              jsr outch                                ; print it ;; @@7301 228
 15304  7304 c8                                  iny                                       ;; @@7304 228
 15305  7305 10f3                                bpl _local_1227_10                       ; always (bpl=failsafe) ;; @@7305 228
 15306                           ;; @@7307 228
 15307  7307 20f737             _local_1227_20   jsr crdo                                 ; done ;; @@7307 228
 15308                           ;; @@730a 228
 15309  730a 60                 _local_1227_30   rts                                       ;; @@730a 228
 15310                           ;; @@730b 228
 15311                          ; .page ;; @@730b 228
 15312                          ; RECORD- relative record access ;; @@730b 228
 15313                           ;; @@730b 228
 15314  730b a923               record           lda #'#'                                  ;; @@730b 229
 15315  730d 205d4e                              jsr synchr                               ; syntax error if not 'record#' ;; @@730d 229
 15316                           ;; @@7310 229
 15317  7310 206c5d                              jsr getbyt                               ; get lfn in x ;; @@7310 229
 15318  7313 e000                                cpx #0                                    ;; @@7313 229
 15319  7315 f3e6de                              +lbeq fcerr                              ; cannot be zero ;; @@7315 229
 15320  7318 8e8111                              stx dosla                                ; save logical address ;; @@7318 229
 15321                           ;; @@731b 229
 15322  731b 20875d                              jsr comwrd                               ; check for comma, get record number in 'poker' ;; @@731b 229
 15323                           ;; @@731e 229
 15324  731e a201                                ldx #1                                   ; set up to get starting byte # - default is 1 ;; @@731e 229
 15325  7320 202679                              jsr optbyt                                ;; @@7320 229
 15326  7323 8e8b11                              stx dosrcl                               ; save byte position (pos)    [911024] ;; @@7323 229
 15327  7326 8a                                  txa                                      ; cpx #0 ;; @@7326 229
 15328  7327 f3d4de                              +lbeq fcerr                              ; if out of range ;; @@7327 229
 15329  732a e8                                  inx                                      ; cpx #$ff ;; @@732a 229
 15330  732b f3d0de                              +lbeq fcerr                              ; if out of range ;; @@732b 229
 15331                           ;; @@732e 229
 15332  732e ad8111                              lda dosla                                ; get logical address ;; @@732e 229
 15333                          ; jsr put_io_in_map ;; @@7331 229
 15334  7331 205fff                              jsr _lkupla                              ; logical to physical map ;; @@7331 229
 15335  7334 b01a                                bcs _local_1228_20                       ; if file not found (not open)    [910404] ;; @@7334 229
 15336  7336 8c9011                              sty dossa_temp                           ; save secondary address ;; @@7336 229
 15337                           ;; @@7339 229
 15338  7339 8e8211                              stx dosfa                                ; set up device number for trans routine ;; @@7339 229
 15339  733c a900                                lda #0                                    ;; @@733c 229
 15340  733e 8d8111                              sta dosla                                ; set up logical address for trans routine ;; @@733e 229
 15341  7341 a96f                                lda #$6f                                  ;; @@7341 229
 15342  7343 8d8311                              sta dossa                                ; and secondary address, too! ;; @@7343 229
 15343                           ;; @@7346 229
 15344  7346 a055                                ldy #frec                                ; set pointer ;; @@7346 229
 15345  7348 a904                                lda #4                                   ; process five bytes ;; @@7348 229
 15346  734a 20f973                              jsr trans                                ; send command ;; @@734a 229
 15347  734d 831eff                              +lbra print_dos_error                    ; if any ;; @@734d 229
 15348                           ;; @@7350 229
 15349  7350 a203               _local_1228_20   ldx #errfno                              ; file not found err (file not open)   [910404] ;; @@7350 229
 15350  7352 83faba                              +lbra error                               ;; @@7352 229
 15351                           ;; @@7355 229
 15352                          ; .page ;; @@7355 229
 15353                          ; DCLEAR - reinitilaize the drive ;; @@7355 229
 15354                           ;; @@7355 229
 15355  7355 201e74             dclear           jsr dospar                               ; parse the line ;; @@7355 230
 15356  7358 a0ff                                ldy #finit                               ; set code ;; @@7358 230
 15357  735a a902                                lda #2                                    ;; @@735a 230
 15358  735c 20f973                              jsr trans                                ; send command ;; @@735c 230
 15359  735f 206e72                              jsr print_dos_error                      ; if any ;; @@735f 230
 15360  7362 83dcfd                              +lbra dclall                              ;; @@7362 230
 15361                           ;; @@7365 230
 15362                           ;; @@7365 230
 15363                           ;; @@7365 230
 15364                           ;; @@7365 230
 15365                          ; COLLECT v<drive#> ;; @@7365 230
 15366                           ;; @@7365 230
 15367  7365 201e74             collect          jsr dospar                               ; parse the line ;; @@7365 230
 15368  7368 20ed77                              jsr chk3                                 ; check optional parameters ;; @@7368 230
 15369  736b 20e7ff                              jsr _clall                               ; close all files ;; @@736b 230
 15370  736e a033                                ldy #fcoll                               ; tabld offset ;; @@736e 230
 15371  7370 a901                                lda #1                                   ; length ;; @@7370 230
 15372  7372 4f7f01                              bbr4 parsts,_local_1229_10                ;; @@7372 230
 15373  7375 1a                                  inc                                      ; include drive ;; @@7375 230
 15374  7376 20f973             _local_1229_10   jsr trans                                ; send command ;; @@7376 230
 15375  7379 83f2fe                              +lbra print_dos_error                    ; if any ;; @@7379 230
 15376                           ;; @@737c 230
 15377                           ;; @@737c 230
 15378                          ; .page ;; @@737c 230
 15379                          ; COPY cdddfn=sdsfn ;; @@737c 230
 15380                           ;; @@737c 230
 15381  737c 201e74             dcopy            jsr dospar                               ; parse the line ;; @@737c 231
 15382  737f 2930                                and #$30                                  ;; @@737f 231
 15383  7381 c930                                cmp #$30                                 ; check required parameters ;; @@7381 231
 15384  7383 d024                                bne _local_1230_10                       ; branch if single drive copy ;; @@7383 231
 15385  7385 a57f                                lda parsts                               ; else check for dual drive params ;; @@7385 231
 15386  7387 29c7                                and #$c7                                  ;; @@7387 231
 15387  7389 f023                                beq _local_1230_20                        ;; @@7389 231
 15388  738b 2903                                and #3                                   ; special check for 2nd filename   [910717] ;; @@738b 231
 15389  738d c903                                cmp #3                                    ;; @@738d 231
 15390  738f f018                                beq _local_1230_10                       ; branch if given ;; @@738f 231
 15391  7391 a92a                                lda #'*'                                  ;; @@7391 231
 15392  7393 8d8d11                              sta dosdid                               ; else supply "*" for him, just like 'name2' ;; @@7393 231
 15393  7396 a901                                lda #1                                    ;; @@7396 231
 15394  7398 a28d                                ldx #<dosdid                              ;; @@7398 231
 15395  739a a011                                ldy #>dosdid                              ;; @@739a 231
 15396  739c 8d8711                              sta dosf2l                                ;; @@739c 231
 15397  739f 8e8911                              stx dosf2a                                ;; @@739f 231
 15398  73a2 8c8a11                              sty dosf2a+1                              ;; @@73a2 231
 15399  73a5 a902                                lda #2                                   ; and set filename2 flag ;; @@73a5 231
 15400  73a7 047f                                tsb parsts                               ; set flag in status ;; @@73a7 231
 15401  73a9 a57f               _local_1230_10   lda parsts                                ;; @@73a9 231
 15402  73ab 20f377                              jsr chk4                                  ;; @@73ab 231
 15403                          ; lda parsts ;; @@73ae 231
 15404  73ae a039               _local_1230_20   ldy #fcopy                               ; tabld offset ;; @@73ae 231
 15405  73b0 a908                                lda #8                                   ; length ;; @@73b0 231
 15406  73b2 20f973                              jsr trans                                ; send command ;; @@73b2 231
 15407  73b5 83b6fe                              +lbra print_dos_error                    ; if any ;; @@73b5 231
 15408                           ;; @@73b8 231
 15409                           ;; @@73b8 231
 15410                           ;; @@73b8 231
 15411                          ; CONCAT ;; @@73b8 231
 15412                           ;; @@73b8 231
 15413  73b8 201e74             concat           jsr dospar                               ; parse the line ;; @@73b8 232
 15414  73bb 20f377                              jsr chk4                                  ;; @@73bb 232
 15415  73be a01f                                ldy #fconc                               ; offset ;; @@73be 232
 15416  73c0 a90c                                lda #12                                  ; length ;; @@73c0 232
 15417  73c2 20f973                              jsr trans                                ; send command ;; @@73c2 232
 15418  73c5 83a6fe                              +lbra print_dos_error                    ; if any ;; @@73c5 232
 15419                           ;; @@73c8 232
 15420                           ;; @@73c8 232
 15421                           ;; @@73c8 232
 15422                           ;; @@73c8 232
 15423                          ; RENAME rdddfn=sdsfn ;; @@73c8 232
 15424                           ;; @@73c8 232
 15425  73c8 a9e4               rename           lda #$e4                                 ; set error flags ;; @@73c8 232
 15426  73ca 202074                              jsr dosprs                               ; parse the line ;; @@73ca 232
 15427  73cd 20fa77                              jsr chk5                                  ;; @@73cd 232
 15428  73d0 a041                                ldy #fren                                ; offset ;; @@73d0 232
 15429  73d2 a908                                lda #8                                   ; length ;; @@73d2 232
 15430  73d4 20f973                              jsr trans                                ; send command ;; @@73d4 232
 15431  73d7 8394fe                              +lbra print_dos_error                    ; if any ;; @@73d7 232
 15432                           ;; @@73da 232
 15433                           ;; @@73da 232
 15434                          ; .page ;; @@73da 232
 15435                          ; BACKUP D<destination_drive>=D<source_drive> ;; @@73da 232
 15436                          ; ;; @@73da 232
 15437                          ; where destination|source_drive is [0...9] ;; @@73da 232
 15438                           ;; @@73da 232
 15439  73da a9c7               backup           lda #$c7                                 ; set error flags ;; @@73da 232
 15440  73dc 202074                              jsr dosprs                               ; parse the line ;; @@73dc 232
 15441  73df 2930                                and #$30                                 ; required parameters ;; @@73df 232
 15442  73e1 c930                                cmp #$30                                  ;; @@73e1 232
 15443  73e3 d364ba                              +lbne snerr                               ;; @@73e3 232
 15444  73e6 20c378                              jsr are_you_sure                          ;; @@73e6 232
 15445  73e9 f001                                beq _local_1231_10                       ; if run mode or not 'yes' ;; @@73e9 232
 15446  73eb 60                                  rts                                       ;; @@73eb 232
 15447                           ;; @@73ec 232
 15448  73ec 204171             _local_1231_10   jsr dclall                               ; close disk ;; @@73ec 232
 15449  73ef a035                                ldy #fbak                                 ;; @@73ef 232
 15450  73f1 a904                                lda #4                                   ; length ;; @@73f1 232
 15451  73f3 20f973                              jsr trans                                ; send command ;; @@73f3 232
 15452  73f6 8375fe                              +lbra print_dos_error                    ; if any ;; @@73f6 232
 15453                           ;; @@73f9 232
 15454                           ;; @@73f9 232
 15455                          ; .page ;; @@73f9 232
 15456                          ; Trans subroutine ;; @@73f9 232
 15457                           ;; @@73f9 232
 15458  73f9 20f276             trans            jsr sendp                                ; build string to output ;; @@73f9 233
 15459  73fc 20ccff                              jsr _clrch                                ;; @@73fc 233
 15460  73ff a200                                ldx #sys_bank                            ; name is in system space, bank0 ????  [910620] ;; @@73ff 233
 15461  7401 8a                                  txa                                       ;; @@7401 233
 15462  7402 206bff                              jsr _setbank                              ;; @@7402 233
 15463  7405 20c0ff                              jsr _open                                ; send it... ;; @@7405 233
 15464  7408 08                                  php                                      ; save error status (.c) ;; @@7408 233
 15465  7409 48                                  pha                                      ; save error code (if any) ;; @@7409 233
 15466  740a ad8111                              lda dosla                                 ;; @@740a 233
 15467  740d 38                                  sec                                       ;; @@740d 233
 15468  740e 20c3ff                              jsr _close                               ; special close... ;; @@740e 233
 15469  7411 68                                  pla                                      ; pop error ;; @@7411 233
 15470  7412 28                                  plp                                      ; pop error status ;; @@7412 233
 15471  7413 b320f4                              +lbcs erexit                             ; ...branch if there was an error opening ;; @@7413 233
 15472  7416 60                                  rts                                       ;; @@7416 233
 15473                           ;; @@7417 233
 15474                          ;.end ;; @@7417 233
 15475                          ; .page ;; @@7417 233
 15476                          ; .subttl  DOS 2 ;; @@7417 233
 15477                           ;; @@7417 233
 15478                          ; This is the DOS parser routine which looks at lines passed to it and ;; @@7417 233
 15479                          ; verifies that the syntax is proper.  -mgm 7/23/79- ;; @@7417 233
 15480                          ; ;; @@7417 233
 15481                          ; Entry  (dosprs) ;; @@7417 233
 15482                          ; a = parsts bit which must be zero. ;; @@7417 233
 15483                          ; ;; @@7417 233
 15484                          ; Exit  a = parsts as follows ;; @@7417 233
 15485                          ; ;; @@7417 233
 15486                          ;    --------------------------------- ;; @@7417 233
 15487                          ;    | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 | ;; @@7417 233
 15488                          ;    --------------------------------- ;; @@7417 233
 15489                          ;      ^   ^   ^   ^   ^   ^   ^   ^ ;; @@7417 233
 15490                          ;      |   |   |   |   |   |   |   |_____ fn1 set for the first filename ;; @@7417 233
 15491                          ;      |   |   |   |   |   |   |_______ fn2 set for second filename ;; @@7417 233
 15492                          ;      |   |   |   |   |   |_________ la set when #lfn parsed ;; @@7417 233
 15493                          ;      |   |   |   |   |___________ fa set for device number ;; @@7417 233
 15494                          ;      |   |   |   |_____________ d1 set for first disk unit ;; @@7417 233
 15495                          ;      |   |   |_______________ d2 set for second disk unit ;; @@7417 233
 15496                          ;      |   |_________________ dosrcl set for record size ;; @@7417 233
 15497                          ;      |___________________ @ set when @ encountered ;; @@7417 233
 15498                          ; ;; @@7417 233
 15499                          ; The following are the vaild bit patterns for parsts after parsing for the ;; @@7417 233
 15500                          ; various keywords: ;; @@7417 233
 15501                          ; ;; @@7417 233
 15502                          ;       7 6 5 4  3 2 1 0 ;; @@7417 233
 15503                          ; ;; @@7417 233
 15504                          ;     header  0 0 0 *  * 0 0 1 ;; @@7417 233
 15505                          ;     collect 0 0 0 *  * 0 0 0 ;; @@7417 233
 15506                          ;     dclear  0 0 0 *  * 0 0 0 ;; @@7417 233
 15507                          ;     backup  0 0 1 1  * 0 0 0 ;; @@7417 233
 15508                          ;     copy    0 0 1 1  * 0 0 0 ;; @@7417 233
 15509                          ;      or..   0 0 * *  * 0 1 1 ;; @@7417 233
 15510                          ;     concat  0 0 * *  * 0 1 1 ;; @@7417 233
 15511                          ;     bsave   * 0 0 *  * 0 0 1 ;; @@7417 233
 15512                          ;     dsave   * 0 0 *  * 0 0 1 ;; @@7417 233
 15513                          ;     bload   0 0 0 *  * 0 0 1 ;; @@7417 233
 15514                          ;     dload   0 0 0 *  * 0 0 1 ;; @@7417 233
 15515                          ;     dverify 0 0 0 *  * 0 0 1 ;; @@7417 233
 15516                          ;     catalog 0 0 0 *  * 0 0 * ;; @@7417 233
 15517                          ;     rename  0 0 0 *  * 0 1 1 ;; @@7417 233
 15518                          ;     append  0 0 0 *  * 1 0 1 ;; @@7417 233
 15519                          ;     scratch 0 0 0 *  * 0 0 1 ;; @@7417 233
 15520                          ;     dopen   * * 0 *  * 1 0 1 ;; @@7417 233
 15521                          ;     dclose  0 0 0 0  * * 0 0 ;; @@7417 233
 15522                          ;             ^ ^ ^ ^  ^ ^ ^ ^ ;; @@7417 233
 15523                          ;             @ l d d  f l f f ;; @@7417 233
 15524                          ;             r r 2 1  a a n n ;; @@7417 233
 15525                          ;             p e          2 1 ;; @@7417 233
 15526                          ;             l l ;; @@7417 233
 15527                          ; ;; @@7417 233
 15528                          ;      "0" bits are required to be clear ;; @@7417 233
 15529                          ;      "1" bits are required to be set ;; @@7417 233
 15530                          ;      "*" bits are optional parameters ;; @@7417 233
 15531                          ; .page ;; @@7417 233
 15532                          ; Entry (dosprs): ;; @@7417 233
 15533                          ;  parstx shall be set to prevent any auxiliary options to be specified. ;; @@7417 233
 15534                          ; ;; @@7417 233
 15535                          ; Entry (dosprx): ;; @@7417 233
 15536                          ;  .x = parstx bits which must be zero. ;; @@7417 233
 15537                          ; ;; @@7417 233
 15538                          ; Exit:  .x = parstx as follows: ;; @@7417 233
 15539                          ; ;; @@7417 233
 15540                          ;     --------------------------------- ;; @@7417 233
 15541                          ;     | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 | ;; @@7417 233
 15542                          ;     --------------------------------- ;; @@7417 233
 15543                          ;       ^   ^   ^   ^   ^   ^   ^   ^____ bnk is set for bank option ;; @@7417 233
 15544                          ;       |   |   |   |   |   |   | ______ offl set for 1st address ;; @@7417 233
 15545                          ;       |   |   |   |   |   |_________ offh set for 2nd address ;; @@7417 233
 15546                          ;       |   |   |   |   |___________ unused ;; @@7417 233
 15547                          ;       |   |   |   |_____________ unused ;; @@7417 233
 15548                          ;       |   |   |_______________ unused ;; @@7417 233
 15549                          ;       |   |_________________ unused ;; @@7417 233
 15550                          ;       |___________________ unused ;; @@7417 233
 15551                          ; ;; @@7417 233
 15552                          ; The following are the valid bit patterns for parstx after parsing for the ;; @@7417 233
 15553                          ; various keywords.  These options are allowed for load/save commands only. ;; @@7417 233
 15554                          ; ;; @@7417 233
 15555                          ;    7 6 5 4  3 2 1 0 ;; @@7417 233
 15556                          ; ;; @@7417 233
 15557                          ;   bsave   0 0 0 0  0 1 1 * ;; @@7417 233
 15558                          ;   bload   0 0 0 0  0 0 * * ;; @@7417 233
 15559                          ;   bverify 0 0 0 0  0 0 * * ;; @@7417 233
 15560                          ;   [auto]boot 0 0 0 0  0 0 * * ;; @@7417 233
 15561                          ;    ^ ^ ^ ^  ^ ^ ^ ^ ;; @@7417 233
 15562                          ;    ? ? ? ?  ? o o b ;; @@7417 233
 15563                          ;        f f n ;; @@7417 233
 15564                          ;        h l k ;; @@7417 233
 15565                          ; ;; @@7417 233
 15566                          ;      "0" bits are required to be clear ;; @@7417 233
 15567                          ;      "1" bits are required to be set ;; @@7417 233
 15568                          ;      "*" bits are optional parameters ;; @@7417 233
 15569                           ;; @@7417 233
 15570  7417 ffffffff           dostbl           !word $ffff,$ffff                        ; default start/end address ;; @@7417 233
 15571  741b 00086f                              !text doslfn,dosffn,$6f                  ; default la/fa/sa ;; @@741b 233
 15572                           ;; @@741e 233
 15573                          ; .page ;; @@741e 233
 15574  741e a900               dospar           lda #0                                   ; DOS Parser ;; @@741e 233
 15575                           ;; @@7420 233
 15576                          dosprs                                                    ; special error flag entry ;; @@7420 233
 15577  7420 a2ff                                ldx #$ff                                 ; no aux options! ;; @@7420 233
 15578                           ;; @@7422 233
 15579                          dosprx                                                    ; spec aux error flag entry ;; @@7422 233
 15580  7422 48                                  pha                                      ; save error flags ;; @@7422 233
 15581  7423 da                                  phx                                       ;; @@7423 233
 15582  7424 a900                                lda #0                                    ;; @@7424 233
 15583  7426 857f                                sta parsts                               ; reset parser status/option words ;; @@7426 233
 15584  7428 8580                                sta parstx                                ;; @@7428 233
 15585                           ;; @@742a 233
 15586  742a a20d                                ldx #dosspc                              ; clear DOS scratch area   [900522] ;; @@742a 233
 15587  742c 9d8311             _local_1232_10   sta xcnt-1,x                              ;; @@742c 233
 15588  742f ca                                  dex                                      ; no filenames, null lengths ;; @@742f 233
 15589  7430 d0fa                                bne _local_1232_10                        ;; @@7430 233
 15590                           ;; @@7432 233
 15591  7432 a206                                ldx #dossa-dosofl                        ; set some defaults from table ;; @@7432 233
 15592  7434 bd1774             _local_1232_20   lda dostbl,x                              ;; @@7434 233
 15593  7437 9d7d11                              sta dosofl,x                             ; start/end adr = $FFFF, la/fa/sa ;; @@7437 233
 15594  743a ca                                  dex                                       ;; @@743a 233
 15595  743b 10f7                                bpl _local_1232_20                        ;; @@743b 233
 15596                           ;; @@743d 233
 15597  743d ae0611                              ldx _default_drive                       ; set default device   [900522] ;; @@743d 233
 15598  7440 8e8211                              stx dosfa                                 ;; @@7440 233
 15599  7443 aed102                              ldx current_bank                         ; set current bank ;; @@7443 233
 15600  7446 8e8c11                              stx dosbnk                                ;; @@7446 233
 15601                           ;; @@7449 233
 15602  7449 208522                              jsr chrgot                               ; get next character from command string ;; @@7449 233
 15603  744c d00f                                bne parse1                               ; if eol stick with defaults, else begin parsing ;; @@744c 233
 15604                           ;; @@744e 233
 15605                           ;; @@744e 233
 15606                          ; Done parsing, check for errors, return if everything okay ;; @@744e 233
 15607                           ;; @@744e 233
 15608  744e 68                 done             pla                                      ; get aux error flag ;; @@744e 234
 15609  744f 2580                                and parstx                               ; repeated or illegal params? ;; @@744f 234
 15610  7451 d3f6b9                              +lbne snerr                              ; yes- report syntax error ;; @@7451 234
 15611  7454 68                                  pla                                      ; get error flags ;; @@7454 234
 15612  7455 208c76                              jsr prmrpt                                ;; @@7455 234
 15613  7458 a57f                                lda parsts                                ;; @@7458 234
 15614  745a a680                                ldx parstx                                ;; @@745a 234
 15615  745c 60                                  rts                                       ;; @@745c 234
 15616                           ;; @@745d 234
 15617                          ; .page ;; @@745d 234
 15618                          ; Parse given parameters.  what it is  example ;; @@745d 234
 15619                          ;     -------------------- --------- ;; @@745d 234
 15620  745d c922               parse1           cmp #'"'                                  ;; @@745d 234
 15621  745f f30101                              +lbeq name1                              ; explicit filename "file" ;; @@745f 234
 15622  7462 c928                                cmp #'('                                  ;; @@7462 234
 15623  7464 f3fc00                              +lbeq name1                              ; evaluate filename (f$) ;; @@7464 234
 15624  7467 c923                                cmp #'#'                                  ;; @@7467 234
 15625  7469 f039                                beq logadr                               ; logical file number #1 ;; @@7469 234
 15626  746b c955                                cmp #'U'                                  ;; @@746b 234
 15627  746d f029                                beq unit1                                ; unit number  U8 ;; @@746d 234
 15628  746f c944                                cmp #'D'                                  ;; @@746f 234
 15629  7471 f06d                                beq drv1                                 ; drive number  D0 ;; @@7471 234
 15630  7473 c950                                cmp #'P'                                  ;; @@7473 234
 15631  7475 f3b600                              +lbeq doffl                              ; load/save address P1234 ;; @@7475 234
 15632  7478 c942                                cmp #'B'                                  ;; @@7478 234
 15633  747a f022                                beq dbank1                               ; load/save bank   B0 ;; @@747a 234
 15634  747c c957                                cmp #'W'                                  ;; @@747c 234
 15635  747e f038                                beq reclen                               ; write mode  W ;; @@747e 234
 15636  7480 c94c                                cmp #'L'                                  ;; @@7480 234
 15637  7482 f034                                beq reclen                               ; record length  L80 ;; @@7482 234
 15638  7484 c952                                cmp #'R'                                  ;; @@7484 234
 15639  7486 f3cd00                              +lbeq recover                            ; recover mode  R ;; @@7486 234
 15640  7489 c949                                cmp #'I'                                  ;; @@7489 234
 15641  748b f06b                                beq ident                                ; ID   Ixx ;; @@748b 234
 15642  748d c991                                cmp #on_token                             ;; @@748d 234
 15643                          ; beq on1   ; ON token  ON ;; @@748f 234
 15644                           ;; @@748f 234
 15645  748f d3b8b9                              +lbne snerr                              ; none of these, syntax error ;; @@748f 234
 15646                           ;; @@7492 234
 15647                          ; .page ;; @@7492 234
 15648  7492 20fe75             on1              jsr on                                    ;; @@7492 234
 15649  7495 83e300                              +lbra del1                                ;; @@7495 234
 15650                           ;; @@7498 234
 15651                           ;; @@7498 234
 15652  7498 200a76             unit1            jsr unit                                 ; do unit# parsing ;; @@7498 234
 15653  749b 83dd00                              +lbra del1                               ; always ;; @@749b 234
 15654                           ;; @@749e 234
 15655                           ;; @@749e 234
 15656  749e 202476             dbank1           jsr dbank                                 ;; @@749e 234
 15657  74a1 83d700                              +lbra del1                               ; always ;; @@74a1 234
 15658                           ;; @@74a4 234
 15659                           ;; @@74a4 234
 15660  74a4 a904               logadr           lda #4                                    ;; @@74a4 234
 15661  74a6 208c76                              jsr prmrpt                               ; check for repeated parameter ;; @@74a6 234
 15662  74a9 20695d                              jsr gtbytc                               ; getval ;; @@74a9 234
 15663  74ac 8a                                  txa                                      ; cpx #0 ;; @@74ac 234
 15664  74ad f34edd                              +lbeq fcerr                              ; if illegal value ;; @@74ad 234
 15665  74b0 8e8111                              stx dosla                                 ;; @@74b0 234
 15666  74b3 a904                                lda #4                                   ; set logical address flag ;; @@74b3 234
 15667  74b5 83c300                              +lbra del1                               ; get next parameter ;; @@74b5 234
 15668                           ;; @@74b8 234
 15669                           ;; @@74b8 234
 15670  74b8 aa                 reclen           tax                                      ; save char ;; @@74b8 234
 15671  74b9 a940                                lda #$40                                  ;; @@74b9 234
 15672  74bb 208c76                              jsr prmrpt                               ; check for repeated parameter ;; @@74bb 234
 15673  74be e057                                cpx #'W'                                  ;; @@74be 234
 15674  74c0 d005                                bne _local_1233_10                        ;; @@74c0 234
 15675  74c2 208322                              jsr chrget                                ;; @@74c2 234
 15676  74c5 8014                                bra _local_1233_20                       ; set parsts ;; @@74c5 234
 15677                           ;; @@74c7 234
 15678  74c7 a201               _local_1233_10   ldx #1                                   ; a kludge to allow  DOPEN#lf,"relfile",L  [911024] ;; @@74c7 234
 15679  74c9 208322                              jsr chrget                                ;; @@74c9 234
 15680  74cc f003                                beq _local_1233_12                       ; eol? open existing rel file ;; @@74cc 234
 15681  74ce 206c5d                              jsr getbyt                               ; get reclen (was getval) ;; @@74ce 234
 15682  74d1 8e8b11             _local_1233_12   stx dosrcl                               ; store parcel ;; @@74d1 234
 15683  74d4 8a                                  txa                                      ; cpx #0 ;; @@74d4 234
 15684  74d5 f001                                beq _local_1233_15                       ; zero illegal dosrcl ;; @@74d5 234
 15685  74d7 e8                                  inx                                      ; cpx #255 ;; @@74d7 234
 15686  74d8 f323dd             _local_1233_15   +lbeq fcerr                              ; illegal dosrcl ;; @@74d8 234
 15687                           ;; @@74db 234
 15688  74db a940               _local_1233_20   lda #$40                                 ; set dosrcl flag & ;; @@74db 234
 15689  74dd 839b00                              +lbra del1                                ;; @@74dd 234
 15690                           ;; @@74e0 234
 15691                           ;; @@74e0 234
 15692  74e0 a910               drv1             lda #$10                                  ;; @@74e0 235
 15693  74e2 208c76                              jsr prmrpt                               ; check for repeated parameter ;; @@74e2 235
 15694  74e5 20695d                              jsr gtbytc                               ; getval ;; @@74e5 235
 15695  74e8 e00a                                cpx #10                                   ;; @@74e8 235
 15696  74ea b311dd                              +lbcs fcerr                              ; illegal drv# if >9 [allow 0: to 9: ?????] ;; @@74ea 235
 15697  74ed 8e8611                              stx dosds1                                ;; @@74ed 235
 15698  74f0 8e8811                              stx dosds2                                ;; @@74f0 235
 15699  74f3 a910                                lda #$10                                  ;; @@74f3 235
 15700  74f5 838300                              +lbra del1                                ;; @@74f5 235
 15701                           ;; @@74f8 235
 15702                           ;; @@74f8 235
 15703  74f8 a980               ident            lda #$80                                 ; set ID flag ;; @@74f8 235
 15704  74fa 0c8f11                              tsb dosflags                              ;; @@74fa 235
 15705  74fd d34ab9                              +lbne snerr                              ; repeated parameter ;; @@74fd 235
 15706  7500 208322                              jsr chrget                               ; get next character ;; @@7500 235
 15707  7503 c928                                cmp #'('                                 ; c65: allow I(ID$) syntax  [900710] ;; @@7503 235
 15708  7505 d019                                bne _local_1234_10                        ;; @@7505 235
 15709  7507 20675b                              jsr frmstr                               ; get ID from var ;; @@7507 235
 15710  750a c902                                cmp #2                                    ;; @@750a 235
 15711  750c 935b01                              +lbcc err_mfn                            ; if length < 2, error ;; @@750c 235
 15712  750f a000                                ldy #0                                    ;; @@750f 235
 15713  7511 20d522                              jsr indin1_ram1                          ; else grab first two characters ;; @@7511 235
 15714  7514 8d8d11                              sta dosdid                                ;; @@7514 235
 15715  7517 c8                                  iny                                       ;; @@7517 235
 15716  7518 20d522                              jsr indin1_ram1                           ;; @@7518 235
 15717  751b 8d8e11                              sta dosdid+1                              ;; @@751b 235
 15718  751e 805d                                bra delim1                               ; continue ;; @@751e 235
 15719                           ;; @@7520 235
 15720  7520 8d8d11             _local_1234_10   sta dosdid                               ; m(txtptr => dosdid ;; @@7520 235
 15721  7523 208322                              jsr chrget                                ;; @@7523 235
 15722  7526 8d8e11                              sta dosdid+1                              ;; @@7526 235
 15723  7529 208322                              jsr chrget                               ; continue ;; @@7529 235
 15724  752c 8052                                bra delim2                                ;; @@752c 235
 15725                           ;; @@752e 235
 15726                           ;; @@752e 235
 15727  752e a902               doffl            lda #$02                                 ; check aux status ;; @@752e 236
 15728  7530 209276                              jsr prxrpt                                ;; @@7530 236
 15729  7533 207576                              jsr getoff                               ; get offset value ;; @@7533 236
 15730  7536 8c7d11                              sty dosofl                                ;; @@7536 236
 15731  7539 8d7e11                              sta dosofl+1                              ;; @@7539 236
 15732  753c a902                                lda #$02                                  ;; @@753c 236
 15733  753e 0580               dlimx1           ora parstx                               ; set aux status bits ;; @@753e 236
 15734  7540 8580                                sta parstx                                ;; @@7540 236
 15735  7542 d039                                bne delim1                               ; try for next param ;; @@7542 236
 15736                           ;; @@7544 236
 15737                           ;; @@7544 236
 15738  7544 a904               doffh            lda #$04                                  ;; @@7544 236
 15739  7546 209276                              jsr prxrpt                                ;; @@7546 236
 15740  7549 207576                              jsr getoff                                ;; @@7549 236
 15741  754c 8c7f11                              sty dosofh                                ;; @@754c 236
 15742  754f 8d8011                              sta dosofh+1                              ;; @@754f 236
 15743  7552 a904                                lda #$04                                  ;; @@7552 236
 15744  7554 80e8                                bra dlimx1                               ; set aux status ;; @@7554 236
 15745                           ;; @@7556 236
 15746                           ;; @@7556 236
 15747  7556 a940               recover          lda #$40                                  ;; @@7556 236
 15748  7558 0c8f11                              tsb dosflags                             ; set 'recover' bit ;; @@7558 236
 15749  755b d3ecb8                              +lbne snerr                              ; if repeated parameter ;; @@755b 236
 15750  755e 208322                              jsr chrget                               ; continue ;; @@755e 236
 15751  7561 801d                                bra delim2                                ;; @@7561 236
 15752                           ;; @@7563 236
 15753                           ;; @@7563 236
 15754  7563 a901               name1            lda #1                                   ; name1 allowed only once ;; @@7563 236
 15755  7565 203676                              jsr newnam                               ; do name parsing ;; @@7565 236
 15756  7568 8d8511                              sta dosf1l                                ;; @@7568 236
 15757                           ;; @@756b 236
 15758  756b a000                                ldy #0                                    ;; @@756b 236
 15759  756d 20d522             _local_1235_10   jsr indin1_ram1                           ;; @@756d 236
 15760  7570 999111                              sta savram,y                             ; copy name into buffer ;; @@7570 236
 15761  7573 c8                                  iny                                       ;; @@7573 236
 15762  7574 cc8511                              cpy dosf1l                                ;; @@7574 236
 15763  7577 90f4                                bcc _local_1235_10                       ; ...copy all of it ;; @@7577 236
 15764  7579 a901                                lda #1                                   ; set name1 flag ;; @@7579 236
 15765                           ;; @@757b 236
 15766                           ;; @@757b 236
 15767  757b 047f               del1             tsb parsts                                ;; @@757b 237
 15768                           ;; @@757d 237
 15769  757d 208522             delim1           jsr chrgot                                ;; @@757d 237
 15770  7580 d016               delim2           bne nxxx                                  ;; @@7580 237
 15771  7582 83c9fe                              +lbra done                               ; <cr>/<> => done ;; @@7582 237
 15772                           ;; @@7585 237
 15773                           ;; @@7585 237
 15774  7585 c991               next6            cmp #on_token                             ;; @@7585 237
 15775  7587 f308ff                              +lbeq on1                                 ;; @@7587 237
 15776  758a c9a4                                cmp #to_token                            ; "to" token ;; @@758a 237
 15777  758c d3bbb8                              +lbne snerr                              ; syntax error ;; @@758c 237
 15778                           ;; @@758f 237
 15779                          ;  If "to" is not followed by an offset param, then do file2 params. ;; @@758f 237
 15780                          ;  Otherwise, do high offset and continue with file0 options. ;; @@758f 237
 15781                           ;; @@758f 237
 15782  758f 208322                              jsr chrget                                ;; @@758f 237
 15783  7592 c950                                cmp #'P'                                  ;; @@7592 237
 15784  7594 d00f                                bne pars22                                ;; @@7594 237
 15785  7596 f0ac                                beq doffh                                 ;; @@7596 237
 15786                           ;; @@7598 237
 15787                           ;; @@7598 237
 15788  7598 c92c               nxxx             cmp #','                                  ;; @@7598 237
 15789  759a d0e9                                bne next6                                 ;; @@759a 237
 15790  759c 208322                              jsr chrget                                ;; @@759c 237
 15791  759f 83bbfe                              +lbra parse1                              ;; @@759f 237
 15792                           ;; @@75a2 237
 15793                           ;; @@75a2 237
 15794  75a2 208322             parse2           jsr chrget                                ;; @@75a2 237
 15795  75a5 c944               pars22           cmp #'D'                                  ;; @@75a5 237
 15796  75a7 f010                                beq _local_1236_10                        ;; @@75a7 237
 15797  75a9 c991                                cmp #on_token                            ; "on" token ;; @@75a9 237
 15798  75ab f020                                beq on2                                   ;; @@75ab 237
 15799  75ad c955                                cmp #'U'                                  ;; @@75ad 237
 15800  75af f021                                beq unit2                                 ;; @@75af 237
 15801  75b1 c922                                cmp #'"'                                  ;; @@75b1 237
 15802  75b3 f022                                beq name2                                 ;; @@75b3 237
 15803  75b5 c928                                cmp #'('                                  ;; @@75b5 237
 15804  75b7 f01e                                beq name2                                 ;; @@75b7 237
 15805                           ;; @@75b9 237
 15806  75b9 a920               _local_1236_10   lda #$20                                  ;; @@75b9 237
 15807  75bb 208c76                              jsr prmrpt                               ; check for repeated parameter ;; @@75bb 237
 15808  75be 20695d                              jsr gtbytc                               ; getval ;; @@75be 237
 15809  75c1 e00a                                cpx #10                                   ;; @@75c1 237
 15810  75c3 b338dc                              +lbcs fcerr                              ; illegal drive #  [allow 0: to 9: ????] ;; @@75c3 237
 15811  75c6 8e8811                              stx dosds2                                ;; @@75c6 237
 15812  75c9 a920                                lda #$20                                  ;; @@75c9 237
 15813  75cb 801a                                bra del2                                  ;; @@75cb 237
 15814                           ;; @@75cd 237
 15815  75cd 20fe75             on2              jsr on                                    ;; @@75cd 238
 15816  75d0 8015                                bra del2                                  ;; @@75d0 238
 15817                           ;; @@75d2 238
 15818                           ;; @@75d2 238
 15819  75d2 200a76             unit2            jsr unit                                 ; do unit# parsing ;; @@75d2 238
 15820  75d5 8010                                bra del2                                 ; always ;; @@75d5 238
 15821                           ;; @@75d7 238
 15822  75d7 a902               name2            lda #2                                   ; name2 allowed only once ;; @@75d7 238
 15823  75d9 203676                              jsr newnam                                ;; @@75d9 238
 15824  75dc 8d8711                              sta dosf2l                                ;; @@75dc 238
 15825  75df 8e8911                              stx dosf2a                                ;; @@75df 238
 15826  75e2 8c8a11                              sty dosf2a+1                              ;; @@75e2 238
 15827                           ;; @@75e5 238
 15828  75e5 a902                                lda #2                                   ; set filename2 flag & ;; @@75e5 238
 15829  75e7 047f               del2             tsb parsts                               ; set flag in status ;; @@75e7 238
 15830  75e9 208522                              jsr chrgot                                ;; @@75e9 238
 15831  75ec f35ffe                              +lbeq done                               ; done on <cr>/<> ;; @@75ec 238
 15832  75ef c92c                                cmp #','                                  ;; @@75ef 238
 15833  75f1 f0af                                beq parse2                                ;; @@75f1 238
 15834  75f3 c991                                cmp #on_token                            ; "on" token ;; @@75f3 238
 15835  75f5 f0d6                                beq on2                                   ;; @@75f5 238
 15836  75f7 c955                                cmp #'U'                                  ;; @@75f7 238
 15837  75f9 f0d7                                beq unit2                                 ;; @@75f9 238
 15838  75fb 834cb8                              +lbra snerr                               ;; @@75fb 238
 15839                           ;; @@75fe 238
 15840                           ;; @@75fe 238
 15841  75fe 208322             on               jsr chrget                                ;; @@75fe 238
 15842  7601 c942                                cmp #'B'                                  ;; @@7601 238
 15843  7603 f01f                                beq dbank                                 ;; @@7603 238
 15844  7605 c955                                cmp #'U'                                  ;; @@7605 238
 15845  7607 d340b8                              +lbne snerr                               ;; @@7607 238
 15846                           ;; @@760a 238
 15847                           ;; @@760a 238
 15848  760a 20695d             unit             jsr gtbytc                               ; getval ;; @@760a 238
 15849  760d e01f                                cpx #31                                   ;; @@760d 238
 15850  760f b05c                                bcs err_ild                              ; error if >30 ;; @@760f 238
 15851  7611 e001                                cpx #1                                   ; drive 1 = use system default drive  [910221] ;; @@7611 238
 15852  7613 d005                                bne _local_1237_10                        ;; @@7613 238
 15853  7615 ae0611                              ldx _default_drive                        ;; @@7615 238
 15854  7618 8004                                bra _local_1237_20                        ;; @@7618 238
 15855  761a e004               _local_1237_10   cpx #4                                    ;; @@761a 238
 15856  761c 904f                                bcc err_ild                              ; error if <4 ;; @@761c 238
 15857  761e 8e8211             _local_1237_20   stx dosfa                                 ;; @@761e 238
 15858  7621 a908                                lda #$08                                 ; set parser's unit flag ;; @@7621 238
 15859  7623 60                                  rts                                       ;; @@7623 238
 15860                           ;; @@7624 238
 15861                           ;; @@7624 238
 15862  7624 a901               dbank            lda #$01                                 ; repeated param? ;; @@7624 239
 15863  7626 209276                              jsr prxrpt                                ;; @@7626 239
 15864  7629 20695d                              jsr gtbytc                               ; getval ;; @@7629 239
 15865                          ; cpx #16  ;bank too large? ;; @@762c 239
 15866                          ; bcs fcerr ;illegal qty ;; @@762c 239
 15867  762c 8e8c11                              stx dosbnk                                ;; @@762c 239
 15868  762f a901                                lda #$01                                  ;; @@762f 239
 15869  7631 0480                                tsb parstx                               ; set bnk bit in aux status ;; @@7631 239
 15870  7633 a900                                lda #0                                   ; .a=std status wrd, no bits to set ;; @@7633 239
 15871  7635 60                                  rts                                       ;; @@7635 239
 15872                           ;; @@7636 239
 15873                           ;; @@7636 239
 15874                          newnam                                                     ;; @@7636 239
 15875  7636 48                                  pha                                      ; save nam1,2 for subdir check later  [901115] ;; @@7636 239
 15876  7637 208c76                              jsr prmrpt                               ; check for repeated parameter ;; @@7637 239
 15877  763a 20675b                              jsr frmstr                                ;; @@763a 239
 15878  763d aa                                  tax                                      ; save length of string ;; @@763d 239
 15879  763e f02a                                beq err_mfn                              ; if length = 0 ;; @@763e 239
 15880  7640 a000                                ldy #0                                    ;; @@7640 239
 15881  7642 20d522                              jsr indin1_ram1                           ;; @@7642 239
 15882  7645 c940                                cmp #'@'                                 ; Replace file convention? ;; @@7645 239
 15883  7647 d00c                                bne _local_1238_10                       ; no ;; @@7647 239
 15884  7649 a980                                lda #$80                                 ; yes- check for repeated param ;; @@7649 239
 15885  764b 208c76                              jsr prmrpt                                ;; @@764b 239
 15886  764e f77f                                smb7 parsts                              ; set "@" flag ;; @@764e 239
 15887  7650 ca                                  dex                                      ; decrement length ;; @@7650 239
 15888  7651 e324                                inw index1                               ; increment past "@" ;; @@7651 239
 15889  7653 800c                                bra lenchk                                ;; @@7653 239
 15890                           ;; @@7655 239
 15891  7655 c92f               _local_1238_10   cmp #'/'                                 ; Subdirectory (partition)?   [901115] ;; @@7655 239
 15892  7657 d008                                bne lenchk                               ; no ;; @@7657 239
 15893  7659 68                                  pla                                      ; yes- recall nam1 or nam2 ;; @@7659 239
 15894  765a 0c8f11                              tsb dosflags                             ; set appropriate '/' flag (.a=1 or 2) ;; @@765a 239
 15895  765d ca                                  dex                                      ; decrement length ;; @@765d 239
 15896  765e e324                                inw index1                               ; increment past "@" ;; @@765e 239
 15897  7660 89                                  !text $89                                 ;; @@7660 239
 15898                           ;; @@7661 239
 15899                           ;; @@7661 239
 15900  7661 68                 lenchk           pla                                      ; [901115] ;; @@7661 240
 15901  7662 8a                                  txa                                      ; Check filename length ;; @@7662 240
 15902  7663 f005                                beq err_mfn                              ; too small, missing filename  [901115] ;; @@7663 240
 15903                          ; cmp #17  ;  ???? (problem if name has ',P') ;; @@7665 240
 15904                          ; bcs errlen ; too long ;; @@7665 240
 15905  7665 a624                                ldx index1                                ;; @@7665 240
 15906  7667 a425                                ldy index1+1                             ; ok- return pointer to filename ;; @@7667 240
 15907  7669 60                                  rts                                       ;; @@7669 240
 15908                           ;; @@766a 240
 15909                           ;; @@766a 240
 15910  766a a208               err_mfn          ldx #err_missing_fname                    ;; @@766a 240
 15911  766c 2c                                  !text $2c                                 ;; @@766c 240
 15912                           ;; @@766d 240
 15913  766d a209               err_ild          ldx #err_illegal_device                   ;; @@766d 240
 15914  766f 2c                                  !text $2c                                 ;; @@766f 240
 15915                           ;; @@7670 240
 15916  7670 a217               errlen           ldx #errls                               ; string or filename too long ;; @@7670 240
 15917  7672 83dab7                              +lbra error                               ;; @@7672 240
 15918                           ;; @@7675 240
 15919                           ;; @@7675 240
 15920                           ;; @@7675 240
 15921                          ; Get next value routine (use gtbytc instead!) ;; @@7675 240
 15922                           ;; @@7675 240
 15923                          ;getval jsr chrget ;get nxt chr ;; @@7675 240
 15924                          ; beq snerr ;if end of statement ;; @@7675 240
 15925                          ; bra getbyt ;       [911024] ;; @@7675 240
 15926                           ;; @@7675 240
 15927                          ; bcc getbyt ;can be numeric, go evaluate it  why this crap ???? ;; @@7675 240
 15928                          ; jsr chkopn ;or a "(" ;; @@7675 240
 15929                          ; jsr getbyt ;anything else is an error ;; @@7675 240
 15930                          ; bra chkcls ;need closing ")" ;; @@7675 240
 15931                           ;; @@7675 240
 15932                           ;; @@7675 240
 15933                           ;; @@7675 240
 15934                          ; Get next 2-byte expression.  Exit: .a,.y (high,low) value ;; @@7675 240
 15935                           ;; @@7675 240
 15936  7675 208322             getoff           jsr chrget                               ; get nxt chr ;; @@7675 240
 15937  7678 f3cfb7                              +lbeq snerr                              ; if end of statement ;; @@7678 240
 15938  767b 930ce7                              +lbcc getwrd                             ; can be num. const, go evaluate it ;; @@767b 240
 15939  767e 20584e                              jsr chkopn                               ; or a "(" ;; @@767e 240
 15940  7681 208a5d                              jsr getwrd                               ; expr ;; @@7681 240
 15941  7684 20554e                              jsr chkcls                               ; need closing ")" ;; @@7684 240
 15942  7687 a416                                ldy poker                                 ;; @@7687 240
 15943  7689 a517                                lda poker+1                               ;; @@7689 240
 15944  768b 60                                  rts                                       ;; @@768b 240
 15945                           ;; @@768c 240
 15946                           ;; @@768c 240
 15947                           ;; @@768c 240
 15948                          ; Prmrpt checks for a repeated parameter. ;; @@768c 240
 15949                          ; ;; @@768c 240
 15950                          ; Entry: .a contains parsts flag to check ;; @@768c 240
 15951                           ;; @@768c 240
 15952                           ;; @@768c 240
 15953  768c 257f               prmrpt           and parsts                               ; compare mask with status ;; @@768c 240
 15954  768e d3b9b7                              +lbne snerr                              ; error if bit previously set ;; @@768e 240
 15955  7691 60                                  rts                                       ;; @@7691 240
 15956                           ;; @@7692 240
 15957                           ;; @@7692 240
 15958                           ;; @@7692 240
 15959                          ; Prxrpt checks for a repeated parameter. ;; @@7692 240
 15960                          ; ;; @@7692 240
 15961                          ; Entry: .a contains parstx flag to check ;; @@7692 240
 15962                           ;; @@7692 240
 15963                           ;; @@7692 240
 15964  7692 2580               prxrpt           and parstx                               ; and with parstx ;; @@7692 240
 15965  7694 d3b3b7                              +lbne snerr                              ; if bit previously set ;; @@7694 240
 15966  7697 60                                  rts                                       ;; @@7697 240
 15967                           ;; @@7698 240
 15968                          ;.end ;; @@7698 240
 15969                          ; .page ;; @@7698 240
 15970                          ; .subttl  DOS 3 ;; @@7698 240
 15971                           ;; @@7698 240
 15972                          ; CBM-2001 BASIC-4 disk verb processors.  -- rsr 7-24-79 -- ;; @@7698 240
 15973                          ; ;; @@7698 240
 15974                          ; Token Table Definitions ;; @@7698 240
 15975                           ;; @@7698 240
 15976                          xsca             =$c2                                     ; send dossca ;; @@7698 240
 15977                          xid              =$d0                                     ; sends disk id ;; @@7698 240
 15978                          xd1              =$d1                                     ; sends dosds1 ;; @@7698 240
 15979                          xd2              =$d2                                     ; sends dosds2 ;; @@7698 240
 15980                          xrec             =$e0                                     ; sends S for SEQ, or dosrcl ;; @@7698 240
 15981                          xwrt             =$e1                                     ; sends W or L ;; @@7698 240
 15982                          xrcl             =$e2                                     ; send low ((poker)) ;; @@7698 240
 15983                          xfat             =$f0                                     ; sends "@" or "/" if specified ;; @@7698 240
 15984                          xfn1             =$f1                                     ; sends filename1 ;; @@7698 240
 15985                          xfn2             =$f2                                     ; sends filename2 ;; @@7698 240
 15986                           ;; @@7698 240
 15987                           ;; @@7698 240
 15988                          ; Tabld - used to build disk command strings ;; @@7698 240
 15989                           ;; @@7698 240
 15990                          tabld                                                      ;; @@7698 240
 15991                          finit            = $ff                                    ; Dclear ;; @@7698 240
 15992  7698 49d1                                !text "I",xd1                             ;; @@7698 240
 15993                           ;; @@769a 240
 15994                          fdir             = *-tabld-1                              ; Dir ;; @@769a 240
 15995  769a 24d13af1                            !text "$",xd1,":",xfn1                    ;; @@769a 240
 15996                           ;; @@769e 240
 15997                          fdirr            = *-tabld-1                              ; Recover Dir  [901024] ;; @@769e 240
 15998  769e 5fd13af1                            !text "_",xd1,":",xfn1                   ; ('_'=CBM backarrow, $5F) ;; @@769e 240
 15999                           ;; @@76a2 240
 16000                          fopn             = *-tabld-1                              ; Dopen ;; @@76a2 240
 16001  76a2 f0d13af12ce12ce0                    !text xfat,xd1,":",xfn1,",",xwrt,",",xrec  ;; @@76a2 240
 16002                           ;; @@76aa 240
 16003                          fopnseq          = *-tabld-1                              ; Type   [900801] ;; @@76aa 240
 16004  76aa f0d13af12c53                        !text xfat,xd1,":",xfn1,",S"              ;; @@76aa 240
 16005                           ;; @@76b0 240
 16006                          fsavseq          = *-tabld-1                              ; EDIT_SAVE  [910620] ;; @@76b0 240
 16007  76b0 f0d13af12c532c57                    !text xfat,xd1,":",xfn1,",S,W"            ;; @@76b0 240
 16008                           ;; @@76b8 240
 16009                          fconc            = *-tabld-1                              ; Concat ;; @@76b8 240
 16010  76b8 43d23af23dd23af2...                 !text "C",xd2,":",xfn2,"=",xd2,":",xfn2,","  ;; @@76b8 240
 16011                           ;; @@76c1 240
 16012                          fapn             = *-tabld-1                              ; Append ;; @@76c1 240
 16013  76c1 d13af12c41                          !text xd1,":",xfn1,",A"                   ;; @@76c1 240
 16014                           ;; @@76c6 240
 16015                          fhed             = *-tabld-1                              ; Header ;; @@76c6 240
 16016  76c6 4ed13af12cd0                        !text "N",xd1,":",xfn1,",",xid            ;; @@76c6 240
 16017                           ;; @@76cc 240
 16018                          fcoll            = *-tabld-1                              ; Collect ;; @@76cc 240
 16019  76cc 56d1                                !text "V",xd1                             ;; @@76cc 240
 16020                           ;; @@76ce 240
 16021                          fbak             = *-tabld-1                              ; Backup ;; @@76ce 240
 16022  76ce 44d23dd1                            !text "D",xd2,"=",xd1                     ;; @@76ce 240
 16023                           ;; @@76d2 240
 16024                          fcopy            = *-tabld-1                              ; Copy ;; @@76d2 240
 16025  76d2 43d23af23dd13af1                    !text "C",xd2,":",xfn2,"=",xd1,":",xfn1   ;; @@76d2 240
 16026                           ;; @@76da 240
 16027                          fren             = *-tabld-1                              ; Rename ;; @@76da 240
 16028  76da 52d13af23dd13af1                    !text "R",xd1,":",xfn2,"=",xd1,":",xfn1   ;; @@76da 240
 16029                           ;; @@76e2 240
 16030                          fscr             = *-tabld-1                              ; Scratch ;; @@76e2 240
 16031  76e2 53d13af1                            !text "S",xd1,":",xfn1                    ;; @@76e2 240
 16032                           ;; @@76e6 240
 16033                          frscr            = *-tabld-1                              ; Recover Del  [901024] ;; @@76e6 240
 16034  76e6 462d52d13af1                        !text "F-R",xd1,":",xfn1                  ;; @@76e6 240
 16035                           ;; @@76ec 240
 16036                          fdisk            = *-tabld-1                              ; Disk command  [910123] ;; @@76ec 240
 16037  76ec f0f1                                !text xfat,xfn1                          ; pass '/' [911030] ;; @@76ec 240
 16038                           ;; @@76ee 240
 16039                          frec             = *-tabld-1                              ; Record ;; @@76ee 240
 16040  76ee 50c2e2e0                            !text "P",xsca,xrcl,xrec                  ;; @@76ee 240
 16041                           ;; @@76f2 240
 16042                          ; .page ;; @@76f2 240
 16043                          ; Send parameters to device ;; @@76f2 240
 16044                          ; ;; @@76f2 240
 16045                          ; Entry: .a = number of bytes in format ;; @@76f2 240
 16046                          ;  .y = pointer to TABLD entry ;; @@76f2 240
 16047                           ;; @@76f2 240
 16048  76f2 8d8411             sendp            sta xcnt                                 ; save number of string bytes ;; @@76f2 240
 16049  76f5 5a                                  phy                                       ;; @@76f5 240
 16050  76f6 208278                              jsr Clear_DS                             ; clear old status ;; @@76f6 240
 16051                           ;; @@76f9 240
 16052  76f9 a200                                ldx #0                                    ;; @@76f9 240
 16053  76fb 68                 sdp1             pla                                       ;; @@76fb 240
 16054  76fc ce8411                              dec xcnt                                  ;; @@76fc 240
 16055  76ff 304d                                bmi tranr                                 ;; @@76ff 240
 16056  7701 a8                                  tay                                       ;; @@7701 240
 16057  7702 c8                                  iny                                      ; move down table ;; @@7702 240
 16058  7703 5a                                  phy                                       ;; @@7703 240
 16059  7704 b99876                              lda tabld,y                              ; get next entry ;; @@7704 240
 16060  7707 103f                                bpl sdp5                                 ; if not escape code ;; @@7707 240
 16061  7709 c9c2                                cmp #xsca                                ; if not secondary address ;; @@7709 240
 16062  770b f058                                beq rsca                                  ;; @@770b 240
 16063  770d c9d0                                cmp #xid                                  ;; @@770d 240
 16064  770f f06a                                beq rid                                  ; if disk id ;; @@770f 240
 16065  7711 c9e2                                cmp #xrcl                                 ;; @@7711 240
 16066  7713 f38300                              +lbeq rdcn                               ; if record number ;; @@7713 240
 16067  7716 c9e1                                cmp #xwrt                                 ;; @@7716 240
 16068  7718 f06d                                beq rwrt                                 ; if W or L ;; @@7718 240
 16069  771a c9f0                                cmp #xfat                                 ;; @@771a 240
 16070  771c f04c                                beq rfat                                 ; if "@" symbol request ;; @@771c 240
 16071  771e c9f1                                cmp #xfn1                                 ;; @@771e 240
 16072  7720 f38000                              +lbeq rsfn                               ; if filename 1 ;; @@7720 240
 16073  7723 c9f2                                cmp #xfn2                                 ;; @@7723 240
 16074  7725 f39100                              +lbeq rdfn                               ; if filename 2 ;; @@7725 240
 16075  7728 c9e0                                cmp #xrec                                 ;; @@7728 240
 16076  772a d00a                                bne sdp2                                 ; if not record type ;; @@772a 240
 16077  772c ad8b11                              lda dosrcl                               ; get rec # ;; @@772c 240
 16078  772f c901                                cmp #1                                   ; kludge to allow DOPEN#lf,"relfile",L  [911024] ;; @@772f 240
 16079  7731 d015                                bne sdp5                                 ; (note RECORD byte 0 = byte 1 anyhow) ;; @@7731 240
 16080  7733 3a                                  dec                                       ;; @@7733 240
 16081  7734 8012                                bra sdp5                                 ; always branch ;; @@7734 240
 16082                           ;; @@7736 240
 16083  7736 c9d1               sdp2             cmp #xd1                                  ;; @@7736 240
 16084  7738 d005                                bne sdp3                                 ; if not drive 1 ;; @@7738 240
 16085  773a ad8611                              lda dosds1                                ;; @@773a 240
 16086  773d 8007                                bra sdp4                                 ; always branch ;; @@773d 240
 16087                           ;; @@773f 240
 16088  773f c9d2               sdp3             cmp #xd2                                  ;; @@773f 240
 16089  7741 d0b8                                bne sdp1                                 ; if not drive 2, continue ;; @@7741 240
 16090  7743 ad8811                              lda dosds2                                ;; @@7743 240
 16091  7746 0930               sdp4             ora #'0'                                 ; change # to PETSCII ;; @@7746 240
 16092                           ;; @@7748 240
 16093  7748 9d0013             sdp5             sta dosstr,x                             ; else into buffer ;; @@7748 240
 16094  774b e8                                  inx                                       ;; @@774b 240
 16095  774c 80ad                                bra sdp1                                 ; always ;; @@774c 240
 16096                           ;; @@774e 240
 16097                           ;; @@774e 240
 16098  774e 8a                 tranr            txa                                      ; length to a ;; @@774e 240
 16099  774f 48                                  pha                                       ;; @@774f 240
 16100  7750 a200                                ldx #<dosstr                             ; set filename ;; @@7750 240
 16101  7752 a013                                ldy #>dosstr                              ;; @@7752 240
 16102  7754 20bdff                              jsr _setnam                               ;; @@7754 240
 16103                           ;; @@7757 240
 16104  7757 ad8111                              lda dosla                                ; set channel ;; @@7757 240
 16105  775a ae8211                              ldx dosfa                                 ;; @@775a 240
 16106  775d ac8311                              ldy dossa                                 ;; @@775d 240
 16107  7760 20baff                              jsr _setlfs                               ;; @@7760 240
 16108                           ;; @@7763 240
 16109  7763 68                                  pla                                       ;; @@7763 240
 16110  7764 60                                  rts                                       ;; @@7764 240
 16111                           ;; @@7765 240
 16112                           ;; @@7765 240
 16113                           ;; @@7765 240
 16114                           ;; @@7765 240
 16115  7765 ad9011             rsca             lda dossa_temp                           ; secondary address (record) ;; @@7765 240
 16116  7768 80de                                bra sdp5                                 ; always ;; @@7768 240
 16117                           ;; @@776a 240
 16118                           ;; @@776a 240
 16119  776a 7f7f04             rfat             bbr7 parsts,_local_1239_10               ; if "@" not encountered ;; @@776a 240
 16120  776d a940                                lda #'@'                                  ;; @@776d 240
 16121  776f 80d7                                bra sdp5                                 ; always ;; @@776f 240
 16122                           ;; @@7771 240
 16123  7771 ad8f11             _local_1239_10   lda dosflags                              ;; @@7771 240
 16124  7774 4a                                  lsr                                       ;; @@7774 240
 16125  7775 9084                                bcc sdp1                                 ; if "/" not encountered ;; @@7775 240
 16126  7777 a92f                                lda #'/'                                  ;; @@7777 240
 16127  7779 80cd                                bra sdp5                                  ;; @@7779 240
 16128                           ;; @@777b 240
 16129                           ;; @@777b 240
 16130                          ; ID subroutine ;; @@777b 240
 16131                           ;; @@777b 240
 16132  777b ad8d11             rid              lda dosdid                               ; include id ;; @@777b 241
 16133  777e 9d0013                              sta dosstr,x                              ;; @@777e 241
 16134  7781 e8                                  inx                                       ;; @@7781 241
 16135  7782 ad8e11                              lda dosdid+1                              ;; @@7782 241
 16136  7785 80c1                                bra sdp5                                 ; always ;; @@7785 241
 16137                           ;; @@7787 241
 16138                           ;; @@7787 241
 16139  7787 ad8b11             rwrt             lda dosrcl                               ; check for L or W ;; @@7787 241
 16140  778a f004                                beq _local_1240_10                       ; zero then write ;; @@778a 241
 16141  778c a94c                                lda #'L'                                  ;; @@778c 241
 16142  778e 80b8                                bra sdp5                                 ; always ;; @@778e 241
 16143                           ;; @@7790 241
 16144  7790 a953               _local_1240_10   lda #'S'                                 ; send W,S ;; @@7790 241
 16145  7792 8d8b11                              sta dosrcl                                ;; @@7792 241
 16146  7795 a957                                lda #'W'                                  ;; @@7795 241
 16147  7797 80af                                bra sdp5                                 ; always ;; @@7797 241
 16148                           ;; @@7799 241
 16149                           ;; @@7799 241
 16150                           ;; @@7799 241
 16151                          ; Move record number ;; @@7799 241
 16152                           ;; @@7799 241
 16153  7799 a516               rdcn             lda poker                                 ;; @@7799 242
 16154  779b 9d0013                              sta dosstr,x                              ;; @@779b 242
 16155  779e a517                                lda poker+1                               ;; @@779e 242
 16156  77a0 e8                                  inx                                       ;; @@77a0 242
 16157  77a1 80a5                                bra sdp5                                 ; always ;; @@77a1 242
 16158                           ;; @@77a3 242
 16159                           ;; @@77a3 242
 16160                          ; Move file names ;; @@77a3 242
 16161                           ;; @@77a3 242
 16162  77a3 ac8511             rsfn             ldy dosf1l                               ; file name 1: get length ;; @@77a3 242
 16163  77a6 f030                                beq rdrt0                                ; if null string ;; @@77a6 242
 16164                           ;; @@77a8 242
 16165  77a8 a000                                ldy #0                                   ; move name to dosstr ;; @@77a8 242
 16166  77aa b99111             _local_1241_10   lda savram,y                              ;; @@77aa 242
 16167  77ad 9d0013                              sta dosstr,x                              ;; @@77ad 242
 16168  77b0 e8                                  inx                                       ;; @@77b0 242
 16169  77b1 c8                                  iny                                       ;; @@77b1 242
 16170  77b2 cc8511                              cpy dosf1l                                ;; @@77b2 242
 16171  77b5 d0f3                                bne _local_1241_10                       ; if move not complete ;; @@77b5 242
 16172  77b7 8020                                bra rdrt1                                ; always ;; @@77b7 242
 16173                           ;; @@77b9 242
 16174                           ;; @@77b9 242
 16175  77b9 ad8911             rdfn             lda dosf2a                                ;; @@77b9 243
 16176  77bc 8524                                sta index1                                ;; @@77bc 243
 16177  77be ad8a11                              lda dosf2a+1                              ;; @@77be 243
 16178  77c1 8525                                sta index1+1                              ;; @@77c1 243
 16179  77c3 ac8711                              ldy dosf2l                                ;; @@77c3 243
 16180  77c6 f010                                beq rdrt0                                ; if null string ;; @@77c6 243
 16181                           ;; @@77c8 243
 16182  77c8 a000                                ldy #0                                   ; move name to dosstr ;; @@77c8 243
 16183  77ca 20d522             _local_1242_10   jsr indin1_ram1                           ;; @@77ca 243
 16184  77cd 9d0013                              sta dosstr,x                              ;; @@77cd 243
 16185  77d0 e8                                  inx                                       ;; @@77d0 243
 16186  77d1 c8                                  iny                                       ;; @@77d1 243
 16187  77d2 cc8711                              cpy dosf2l                                ;; @@77d2 243
 16188  77d5 d0f3                                bne _local_1242_10                       ; if move not complete ;; @@77d5 243
 16189  77d7 89                                  !text $89                                ; hop ;; @@77d7 243
 16190                           ;; @@77d8 243
 16191  77d8 ca                 rdrt0            dex                                      ; case cdd=sd ;; @@77d8 244
 16192  77d9 831fff             rdrt1            +lbra sdp1                               ; get next symbol ;; @@77d9 244
 16193                           ;; @@77dc 244
 16194                          ; .page ;; @@77dc 244
 16195                          ; Syntax checker DOS write ;; @@77dc 244
 16196                           ;; @@77dc 244
 16197  77dc 29e6               chk1             and #$e6                                 ; for HEADER, DLOAD, SCRATCH, TYPE, LIST ;; @@77dc 244
 16198  77de d369b6                              +lbne snerr                               ;; @@77de 244
 16199                           ;; @@77e1 244
 16200  77e1 a57f               chk2             lda parsts                               ; for DSAVE ;; @@77e1 244
 16201  77e3 2901                                and #1                                    ;; @@77e3 244
 16202  77e5 c901                                cmp #1                                   ; check required parameters ;; @@77e5 244
 16203  77e7 d360b6                              +lbne snerr                              ; error if 1 missing ;; @@77e7 244
 16204  77ea a57f                                lda parsts                               ; reload for return ;; @@77ea 244
 16205  77ec 60                                  rts                                       ;; @@77ec 244
 16206                           ;; @@77ed 244
 16207                           ;; @@77ed 244
 16208  77ed 29e7               chk3             and #$e7                                 ; for COLLECT ;; @@77ed 244
 16209  77ef d358b6                              +lbne snerr                              ; check optional parameters ;; @@77ef 244
 16210  77f2 60                                  rts                                       ;; @@77f2 244
 16211                           ;; @@77f3 244
 16212                           ;; @@77f3 244
 16213  77f3 29c4               chk4             and #$c4                                 ; for COPY, CONCAT ;; @@77f3 244
 16214  77f5 d352b6                              +lbne snerr                              ; check optional parameters ;; @@77f5 244
 16215  77f8 a57f                                lda parsts                                ;; @@77f8 244
 16216  77fa 2903               chk5             and #3                                   ; for RENAME ;; @@77fa 244
 16217  77fc c903                                cmp #3                                   ; check required parameters ;; @@77fc 244
 16218  77fe d349b6                              +lbne snerr                               ;; @@77fe 244
 16219  7801 a57f                                lda parsts                               ; reload for return ;; @@7801 244
 16220  7803 60                                  rts                                       ;; @@7803 244
 16221                           ;; @@7804 244
 16222                           ;; @@7804 244
 16223  7804 2905               chk6             and #5                                   ; for APPEND, DOPEN ;; @@7804 244
 16224  7806 c905                                cmp #5                                   ; check required parameters ;; @@7806 244
 16225  7808 d33fb6                              +lbne snerr                               ;; @@7808 244
 16226  780b a57f                                lda parsts                               ; reload for rts ;; @@780b 244
 16227  780d 60                                  rts                                       ;; @@780d 244
 16228                           ;; @@780e 244
 16229                          ;.end ;; @@780e 244
 16230                          ; .page ;; @@780e 244
 16231                          ; .subttl  DOS 4 ;; @@780e 244
 16232                           ;; @@780e 244
 16233                          ; Allocate DS$ if nesessary, but use old DS$ string otherwise ;; @@780e 244
 16234                          ; Called by DS$ and DS ;; @@780e 244
 16235                           ;; @@780e 244
 16236                          Check_DS                                                  ; chkds. ;; @@780e 244
 16237  780e a579                                lda dsdesc                                ;; @@780e 244
 16238  7810 f005                                beq Read_DS_1                            ; branch if DS$ is not in memory ;; @@7810 244
 16239  7812 60                                  rts                                      ; else return & use old one ;; @@7812 244
 16240                           ;; @@7813 244
 16241                           ;; @@7813 244
 16242                          ; Allocate DS$ if necessary & Read DOS error channel ;; @@7813 244
 16243                           ;; @@7813 244
 16244                          Read_DS                                                   ; errchl. ;; @@7813 244
 16245  7813 a579                                lda dsdesc                               ; has DS$ space been allocated? ;; @@7813 244
 16246  7815 d01a                                bne Read_DS_2                            ; yes ;; @@7815 244
 16247                           ;; @@7817 244
 16248                          Read_DS_1                                                  ;; @@7817 244
 16249  7817 a928                                lda #40                                  ; no- get 40 char string ;; @@7817 244
 16250  7819 8579                                sta dsdesc                                ;; @@7819 244
 16251  781b 20dd5b                              jsr getspa                               ; allocate space for DS$ ;; @@781b 244
 16252  781e 867a                                stx dsdesc+1                             ; low address of string ;; @@781e 244
 16253  7820 847b                                sty dsdesc+2                             ; high   "    "    " ;; @@7820 244
 16254  7822 a27a                                ldx #dsdesc+1                            ; set up string back pointer to dsdesc ;; @@7822 244
 16255  7824 a028                                ldy #40                                   ;; @@7824 244
 16256  7826 a979                                lda #<dsdesc                              ;; @@7826 244
 16257  7828 20f022                              jsr sta_far_ram1                         ; sta (dsdesc+1),y ;; @@7828 244
 16258  782b c8                                  iny                                       ;; @@782b 244
 16259  782c a900                                lda #>dsdesc                              ;; @@782c 244
 16260  782e 20f022                              jsr sta_far_ram1                         ; sta (dsdesc+1),y ;; @@782e 244
 16261                           ;; @@7831 244
 16262                          Read_DS_2                                                  ;; @@7831 244
 16263  7831 ae8211                              ldx dosfa                                ; fa ;; @@7831 244
 16264  7834 e002                                cpx #2                                    ;; @@7834 244
 16265  7836 b006                                bcs _local_1243_10                       ; if =0 or 1 use default  [910429] ;; @@7836 244
 16266  7838 ae0611                              ldx _default_drive                       ; (was dosffn)   [900710] ;; @@7838 244
 16267  783b 8e8211                              stx dosfa                                 ;; @@783b 244
 16268  783e a900               _local_1243_10   lda #doslfn                              ; la (reserved la) ;; @@783e 244
 16269  7840 a06f                                ldy #$6f                                 ; sa (command channel) ;; @@7840 244
 16270  7842 20baff                              jsr _setlfs                               ;; @@7842 244
 16271  7845 a900                                lda #0                                   ; no name (so no setbank) ;; @@7845 244
 16272  7847 20bdff                              jsr _setnam                               ;; @@7847 244
 16273  784a 20c0ff                              jsr _open                                ; get command channel ;; @@784a 244
 16274  784d a200                                ldx #doslfn                               ;; @@784d 244
 16275  784f 20c6ff                              jsr _chkin                                ;; @@784f 244
 16276  7852 b023                                bcs _local_1243_40                       ; a problem (file already open??) ;; @@7852 244
 16277                           ;; @@7854 244
 16278  7854 a0ff                                ldy #$ff                                  ;; @@7854 244
 16279  7856 c8                 _local_1243_20   iny                                      ; read disk error message ;; @@7856 244
 16280  7857 20cfff                              jsr _basin                                ;; @@7857 244
 16281  785a c90d                                cmp #cr                                   ;; @@785a 244
 16282  785c f009                                beq _local_1243_30                       ; if eol ;; @@785c 244
 16283  785e a27a                                ldx #dsdesc+1                             ;; @@785e 244
 16284  7860 20f022                              jsr sta_far_ram1                         ; sta (dsdesc+1),y copy to DS$ ;; @@7860 244
 16285  7863 c028                                cpy #40                                   ;; @@7863 244
 16286  7865 90ef                                bcc _local_1243_20                       ; loop unless too long ;; @@7865 244
 16287                           ;; @@7867 244
 16288  7867 a900               _local_1243_30   lda #0                                   ; errend. ;; @@7867 244
 16289  7869 a27a                                ldx #dsdesc+1                            ; terminate DS$ with a null ;; @@7869 244
 16290  786b 20f022                              jsr sta_far_ram1                         ; sta (dsdesc+1),y ;; @@786b 244
 16291                           ;; @@786e 244
 16292  786e 20ccff                              jsr _clrch                               ; shut down command channel ;; @@786e 244
 16293  7871 a900                                lda #doslfn                               ;; @@7871 244
 16294  7873 38                                  sec                                      ; not a real close ;; @@7873 244
 16295  7874 4cc3ff                              jmp _close                               ; close it and rts ;; @@7874 244
 16296                           ;; @@7877 244
 16297  7877 48                 _local_1243_40   pha                                      ; errbad. ;; @@7877 244
 16298  7878 206778                              jsr _local_1243_30                        ;; @@7878 244
 16299  787b 208278                              jsr Clear_DS                             ; flag 'no DS available' ;; @@787b 244
 16300  787e fa                                  plx                                      ; get error ;; @@787e 244
 16301  787f 83cdb5                              +lbra error                               ;; @@787f 244
 16302                           ;; @@7882 244
 16303                          ; .page ;; @@7882 244
 16304                          ; Clear_DS subroutine - forget current DS$ message, if any ;; @@7882 244
 16305                          ; ;; @@7882 244
 16306                           ;; @@7882 244
 16307                          Clear_DS                                                  ; oldclr. ;; @@7882 245
 16308  7882 a579                                lda dsdesc                               ; check for allocation ;; @@7882 245
 16309  7884 f013                                beq _local_1244_10                       ; branch if not allocated ;; @@7884 245
 16310                           ;; @@7886 245
 16311  7886 5a                                  phy                                      ; mark current DS$ string as garbage ;; @@7886 245
 16312  7887 da                                  phx                                       ;; @@7887 245
 16313                          ; lda #40   ;   standard DS$ allocation ;; @@7888 245
 16314  7888 a8                                  tay                                       ;; @@7888 245
 16315  7889 a27a                                ldx #dsdesc+1                             ;; @@7889 245
 16316  788b 20f022                              jsr sta_far_ram1                         ; sta (dsdesc+1),y length of garbage ;; @@788b 245
 16317  788e c8                                  iny                                       ;; @@788e 245
 16318  788f a9ff                                lda #$ff                                  ;; @@788f 245
 16319  7891 20f022                              jsr sta_far_ram1                         ; sta (dsdesc+1),y garbage flagged ;; @@7891 245
 16320  7894 1a                                  inc                                       ;; @@7894 245
 16321  7895 8579                                sta dsdesc                               ; (0)    kill DS$ ;; @@7895 245
 16322  7897 fa                                  plx                                       ;; @@7897 245
 16323  7898 7a                                  ply                                       ;; @@7898 245
 16324                           ;; @@7899 245
 16325  7899 60                 _local_1244_10   rts                                       ;; @@7899 245
 16326                           ;; @@789a 245
 16327                          ; .page ;; @@789a 245
 16328                          ; Read DOS error message, but don't care what it is.  Want to stop disk LED blink. ;; @@789a 245
 16329                          ; ;; @@789a 245
 16330                           ;; @@789a 245
 16331                          Suck_DS                                                    ;; @@789a 246
 16332  789a ae8211                              ldx dosfa                                ; fa ;; @@789a 246
 16333  789d a900                                lda #doslfn                              ; la (reserved la) ;; @@789d 246
 16334  789f a06f                                ldy #$6f                                 ; sa (command channel) ;; @@789f 246
 16335  78a1 20baff                              jsr _setlfs                               ;; @@78a1 246
 16336  78a4 a900                                lda #0                                   ; no name (so no setbank) ;; @@78a4 246
 16337  78a6 20bdff                              jsr _setnam                               ;; @@78a6 246
 16338  78a9 20c0ff                              jsr _open                                ; get command channel ;; @@78a9 246
 16339  78ac a200                                ldx #doslfn                               ;; @@78ac 246
 16340  78ae 20c6ff                              jsr _chkin                                ;; @@78ae 246
 16341  78b1 b007                                bcs _local_1245_20                       ; skip input if problem ;; @@78b1 246
 16342                           ;; @@78b3 246
 16343  78b3 20cfff             _local_1245_10   jsr _basin                               ; read disk error message ;; @@78b3 246
 16344  78b6 c90d                                cmp #cr                                   ;; @@78b6 246
 16345  78b8 d0f9                                bne _local_1245_10                       ; loop until eol ;; @@78b8 246
 16346                           ;; @@78ba 246
 16347  78ba 20ccff             _local_1245_20   jsr _clrch                               ; shut down command channel ;; @@78ba 246
 16348  78bd a900                                lda #doslfn                               ;; @@78bd 246
 16349  78bf 38                                  sec                                      ; not a real close ;; @@78bf 246
 16350  78c0 4cc3ff                              jmp _close                               ; close it ;; @@78c0 246
 16351                           ;; @@78c3 246
 16352                          ; .page ;; @@78c3 246
 16353                          ; R-U-sure subroutine ;; @@78c3 246
 16354                           ;; @@78c3 246
 16355                          are_you_sure                                               ;; @@78c3 247
 16356                           ;; @@78c3 247
 16357  78c3 ff7e29                              bbs7 runmod,response_fake                ; branch if not direct mode ;; @@78c3 247
 16358                           ;; @@78c6 247
 16359  78c6 207dff                              jsr _primm                               ; else prompt user for y/n answer ;; @@78c6 247
 16360  78c9 41524520594f5520...                 !text "ARE YOU SURE? ", 0                 ;; @@78c9 247
 16361                           ;; @@78d8 247
 16362                           ;; @@78d8 247
 16363                          response_get                                               ;; @@78d8 247
 16364  78d8 20ccff                              jsr _clrch                               ; clear channel for basin ;; @@78d8 247
 16365  78db 20cfff                              jsr _basin                               ; next char ;; @@78db 247
 16366  78de 48                                  pha                                      ; save first char of reply ;; @@78de 247
 16367                           ;; @@78df 247
 16368  78df c90d               _local_1246_10   cmp #cr                                  ; eat chars until end of line ;; @@78df 247
 16369  78e1 f005                                beq _local_1246_20                       ; if cr received, exit ;; @@78e1 247
 16370  78e3 20cfff                              jsr _basin                                ;; @@78e3 247
 16371  78e6 d0f7                                bne _local_1246_10                       ; continue to ignore ;; @@78e6 247
 16372                           ;; @@78e8 247
 16373  78e8 20d2ff             _local_1246_20   jsr _bsout                               ; new line     [910212] FAB ;; @@78e8 247
 16374  78eb 68                                  pla                                       ;; @@78eb 247
 16375  78ec c959                                cmp #'Y'                                 ; z set means ans=y..... ;; @@78ec 247
 16376  78ee 60                                  rts                                       ;; @@78ee 247
 16377                           ;; @@78ef 247
 16378                           ;; @@78ef 247
 16379                          response_fake                                              ;; @@78ef 248
 16380  78ef a900                                lda #0                                   ; ...or not in direct mode ;; @@78ef 248
 16381  78f1 60                                  rts                                       ;; @@78f1 248
 16382                           ;; @@78f2 248
 16383                          ;.end ;; @@78f2 248
 16384                          ; .page ;; @@78f2 248
 16385                          ; .subttl  General Purpose Subroutines ;; @@78f2 248
 16386                           ;; @@78f2 248
 16387                          ;***************************************************************** ;; @@78f2 248
 16388                          ;  OPTWRD - get an optional, unsigned 2-byte value in y,a. ;; @@78f2 248
 16389                          ; ;; @@78f2 248
 16390                          ;      case 1 : pointer at end of line: ;; @@78f2 248
 16391                          ;   return a=y=0, clear c to flag 'default' ;; @@78f2 248
 16392                          ;      case 2 : pointer is at comma, next non-blank is also a comma: ;; @@78f2 248
 16393                          ;   return a=y=0, clear c to flag 'default' ;; @@78f2 248
 16394                          ;      case 3 : pointer is at comma, next non-blank is not a comma: ;; @@78f2 248
 16395                          ;   get word in y,a, set c to flag 'non-default' ;; @@78f2 248
 16396                          ;***************************************************************** ;; @@78f2 248
 16397                           ;; @@78f2 248
 16398  78f2 208522             optwrd           jsr chrgot                                ;; @@78f2 248
 16399  78f5 f00c                                beq _local_1247_10                        ;; @@78f5 248
 16400  78f7 205b4e                              jsr chkcom                                ;; @@78f7 248
 16401  78fa c92c                                cmp #','                                  ;; @@78fa 248
 16402  78fc f005                                beq _local_1247_10                        ;; @@78fc 248
 16403  78fe 208a5d                              jsr getwrd                                ;; @@78fe 248
 16404  7901 38                                  sec                                       ;; @@7901 248
 16405  7902 60                                  rts                                       ;; @@7902 248
 16406                           ;; @@7903 248
 16407  7903 a900               _local_1247_10   lda #0                                    ;; @@7903 248
 16408  7905 a8                                  tay                                       ;; @@7905 248
 16409                           ;; @@7906 248
 16410  7906 18                 optw99           clc                                       ;; @@7906 249
 16411  7907 60                                  rts                                       ;; @@7907 249
 16412                           ;; @@7908 249
 16413                          ; .page ;; @@7908 249
 16414  7908 205b4e             comsad           jsr chkcom                               ; get a comma & signed 2-byte arg in y,a   [910307] ;; @@7908 249
 16415  790b 83d73e                              +lbra sadwrd                              ;; @@790b 249
 16416                           ;; @@790e 249
 16417                           ;; @@790e 249
 16418                           ;; @@790e 249
 16419  790e 208522             optsad           jsr chrgot                               ; get a comma & optional, signed 2-byte arg in y,a [910307] ;; @@790e 249
 16420  7911 f00c                                beq _local_1248_10                       ; eol, therefore this arg is not specified ;; @@7911 249
 16421  7913 205b4e                              jsr chkcom                               ; eat comma ;; @@7913 249
 16422  7916 c92c                                cmp #','                                 ; is next a comma too? ;; @@7916 249
 16423  7918 f005                                beq _local_1248_10                       ; yes, therefore this arg is not specified ;; @@7918 249
 16424  791a 20e5b7                              jsr sadwrd                               ; get signed word ;; @@791a 249
 16425  791d 38                                  sec                                       ;; @@791d 249
 16426  791e 60                                  rts                                       ;; @@791e 249
 16427                           ;; @@791f 249
 16428  791f a900               _local_1248_10   lda #0                                   ; default optional arg to zero ;; @@791f 249
 16429  7921 a8                                  tay                                       ;; @@7921 249
 16430  7922 18                                  clc                                       ;; @@7922 249
 16431  7923 60                                  rts                                       ;; @@7923 249
 16432                           ;; @@7924 249
 16433                          ; .page ;; @@7924 249
 16434                          ;***************************************************************** ;; @@7924 249
 16435                          ;  OPTBYT - get an optional 1 byte value in x. ;; @@7924 249
 16436                          ; ;; @@7924 249
 16437                          ;  Enter with default value in x. ;; @@7924 249
 16438                          ; ;; @@7924 249
 16439                          ;      case 1 : pointer at end of line: ;; @@7924 249
 16440                          ;   return default x. ;; @@7924 249
 16441                          ;      case 2 : pointer is at comma, next non-blank is also a comma: ;; @@7924 249
 16442                          ;   return default x. ;; @@7924 249
 16443                          ;      case 3 : pointer is at comma, next non-blank is not a comma: ;; @@7924 249
 16444                          ;   get byte in x. ;; @@7924 249
 16445                          ;***************************************************************** ;; @@7924 249
 16446                           ;; @@7924 249
 16447  7924 a200               optzer           ldx #0                                   ; optional byte, with default=0 ;; @@7924 250
 16448                           ;; @@7926 250
 16449  7926 208522             optbyt           jsr chrgot                                ;; @@7926 250
 16450  7929 f0db                                beq optw99                               ; EOL: clc/rts ;; @@7929 250
 16451  792b 205b4e                              jsr chkcom                                ;; @@792b 250
 16452  792e c92c                                cmp #','                                  ;; @@792e 250
 16453  7930 f0d4                                beq optw99                               ; Comma: clc/rts ;; @@7930 250
 16454  7932 206c5d                              jsr getbyt                                ;; @@7932 250
 16455  7935 38                                  sec                                       ;; @@7935 250
 16456  7936 60                                  rts                                       ;; @@7936 250
 16457                           ;; @@7937 250
 16458                          ; .page ;; @@7937 250
 16459                          prtdec                                                     ;; @@7937 250
 16460  7937 5a                                  phy                                       ;; @@7937 250
 16461  7938 da                                  phx                                       ;; @@7938 250
 16462  7939 aa                                  tax                                      ; prints decimal value of chr in .a ;; @@7939 250
 16463  793a a900                                lda #0                                    ;; @@793a 250
 16464  793c 207f64                              jsr linprt                                ;; @@793c 250
 16465  793f fa                                  plx                                       ;; @@793f 250
 16466  7940 7a                                  ply                                       ;; @@7940 250
 16467  7941 60                                  rts                                       ;; @@7941 250
 16468                           ;; @@7942 250
 16469                           ;; @@7942 250
 16470                           ;; @@7942 250
 16471                          retpat                                                    ; f.bowen ;; @@7942 250
 16472  7942 88                                  dey                                      ; [910828] ;; @@7942 250
 16473  7943 b13f                                lda (fndpnt),y                           ; restore pointers ;; @@7943 250
 16474  7945 853e                                sta txtptr+1                              ;; @@7945 250
 16475  7947 88                                  dey                                       ;; @@7947 250
 16476  7948 b13f                                lda (fndpnt),y                            ;; @@7948 250
 16477  794a 853d                                sta txtptr                                ;; @@794a 250
 16478  794c 88                                  dey                                       ;; @@794c 250
 16479  794d b13f                                lda (fndpnt),y                            ;; @@794d 250
 16480                           ;; @@794f 250
 16481  794f 853c                                sta curlin+1                             ; fixes a problem when RETURNing to a GOSUB in direct mode ;; @@794f 250
 16482  7951 88                                  dey                                      ; or LOOPing to a DO in direct mode. 'curlin+1' must not be ;; @@7951 250
 16483  7952 aa                                  tax                                      ; restored to $ff without also resetting 'runmod' ;; @@7952 250
 16484  7953 e8                                  inx                                       ;; @@7953 250
 16485  7954 d004                                bne _local_1249_10                       ; branch if GOSUB or DO was from a program ;; @@7954 250
 16486  7956 a9c0                                lda #%11000000                            ;; @@7956 250
 16487  7958 147e                                trb runmod                               ; else force return to direct mode ;; @@7958 250
 16488                           ;; @@795a 250
 16489  795a b13f               _local_1249_10   lda (fndpnt),y                            ;; @@795a 250
 16490  795c 853b                                sta curlin                                ;; @@795c 250
 16491  795e 60                                  rts                                       ;; @@795e 250
 16492                           ;; @@795f 250
 16493                           ;; @@795f 250
 16494  795f 010204010204       vbits            !text $01,$02,$04,$01,$02,$04            ; for stereo filter, volume bit setting ;; @@795f 251
 16495  7965 0102040810204080   sbits            !text $01,$02,$04,$08,$10,$20,$40,$80     ;; @@7965 251
 16496  796d 8040201008040201   rbits            !text $80,$40,$20,$10,$08,$04,$02,$01     ;; @@796d 251
 16497                           ;; @@7975 251
 16498                          ;.end ;; @@7975 251
 16499                          ; .page ;; @@7975 251
 16500                          ; .subttl BASIC IRQ Handler ;; @@7975 251
 16501                           ;; @@7975 251
 16502                          basic_irq                                                  ;; @@7975 251
 16503                          ; lda _vicIRQ  ;a VIC raster interrupt? ;; @@7975 251
 16504                          ; and #%10000001  ; (used to update moving sprites & sound stuff) ;; @@7975 251
 16505                          ; cmp #%10000001 ;; @@7975 251
 16506                          ; bne collision_irq ; no, go check other VIC interrupts ;; @@7975 251
 16507                           ;; @@7975 251
 16508  7975 addb02                              lda irq_wrap_flag                        ; filter out wrapped IRQ calls (allows interruptable code) ;; @@7975 251
 16509  7978 f001                                beq _local_1250_1                        ; it's ok ;; @@7978 251
 16510  797a 60                                  rts                                      ; exit- we're already handling one interrupt ;; @@797a 251
 16511                           ;; @@797b 251
 16512  797b eedb02             _local_1250_1    inc irq_wrap_flag                        ; shut the door ;; @@797b 251
 16513  797e 58                                  cli                                      ; but leave the window open ;; @@797e 251
 16514                           ;; @@797f 251
 16515                          ; .page ;; @@797f 251
 16516                          ; Test if there was a VIC collision/light pen interrupt ;; @@797f 251
 16517                           ;; @@797f 251
 16518                          collision_irq                                              ;; @@797f 252
 16519                          ; sei ;; @@797f 252
 16520  797f a5a0                                lda _vicIRQ                              ; check VIC IRQ flags ;; @@797f 252
 16521  7981 290e                                and #%00001110                           ; mask all but lp, s/s, and s/bgnd flags ;; @@7981 252
 16522  7983 f04c                                beq _local_1251_40                       ; exit if none set ;; @@7983 252
 16523  7985 14a0                                trb _vicIRQ                              ; else reset flags we're going to handle ;; @@7985 252
 16524  7987 4a                                  lsr                                      ; shift out raster interrupt bit (not used) ;; @@7987 252
 16525                           ;; @@7988 252
 16526                          ; Test for 3 types of collision interrupts : sprite/sprite, sprite/bgnd, & light pen ;; @@7988 252
 16527                           ;; @@7988 252
 16528  7988 a001                                ldy #1                                   ; loop for sprite/bgnd and sprite/sprite collision check ;; @@7988 252
 16529  798a 4a                 _local_1251_10   lsr                                       ;; @@798a 252
 16530  798b 901b                                bcc _local_1251_30                       ; bit not set ==> not source of interrupt ;; @@798b 252
 16531                           ;; @@798d 252
 16532  798d 48                                  pha                                       ;; @@798d 252
 16533  798e b91ed0                              lda vic+30,y                             ; accumulate collision data (resets register) ;; @@798e 252
 16534  7991 19e602                              ora collisions,y                          ;; @@7991 252
 16535  7994 99e602                              sta collisions,y                          ;; @@7994 252
 16536                           ;; @@7997 252
 16537  7997 addc02                              lda intval                               ; allowable interrupts ;; @@7997 252
 16538  799a c000                                cpy #0                                   ; examine selected bit ;; @@799a 252
 16539  799c f001                                beq _local_1251_20                        ;; @@799c 252
 16540  799e 4a                                  lsr                                       ;; @@799e 252
 16541  799f 4a                 _local_1251_20   lsr                                       ;; @@799f 252
 16542  79a0 9005                                bcc _local_1251_25                       ; BASIC doesn't want this interrupt ;; @@79a0 252
 16543  79a2 a9ff                                lda #$ff                                  ;; @@79a2 252
 16544  79a4 99dd02                              sta int_trip_flag,y                      ; turn on trip flag ;; @@79a4 252
 16545                           ;; @@79a7 252
 16546  79a7 68                 _local_1251_25   pla                                       ;; @@79a7 252
 16547                           ;; @@79a8 252
 16548  79a8 88                 _local_1251_30   dey                                       ;; @@79a8 252
 16549  79a9 10df                                bpl _local_1251_10                        ;; @@79a9 252
 16550                           ;; @@79ab 252
 16551                          ; .page ;; @@79ab 252
 16552                          ; Check light pen latch ;; @@79ab 252
 16553                           ;; @@79ab 252
 16554  79ab 4a                                  lsr                                       ;; @@79ab 252
 16555  79ac 9023                                bcc _local_1251_40                       ; LightPen latch not valid ;; @@79ac 252
 16556                           ;; @@79ae 252
 16557  79ae ae31d0                              ldx vic+49                               ; 4567R7 bug- must read LP_latches in Slow mode???? ;; @@79ae 252
 16558  79b1 a940                                lda #%01000000                           ; [910618] ;; @@79b1 252
 16559  79b3 1c31d0                              trb vic+49                                ;; @@79b3 252
 16560  79b6 ac13d0                              ldy vic+19                               ; save latched x position ;; @@79b6 252
 16561  79b9 8ce802                              sty lightpen_xpos                         ;; @@79b9 252
 16562  79bc ac14d0                              ldy vic+20                               ; save latched y position ;; @@79bc 252
 16563  79bf 8ce902                              sty lightpen_ypos                         ;; @@79bf 252
 16564  79c2 8e31d0                              stx vic+49                               ; restore speed     [910618] ;; @@79c2 252
 16565                           ;; @@79c5 252
 16566  79c5 addc02                              lda intval                               ; is BASIC interested in our little find? ;; @@79c5 252
 16567  79c8 2904                                and #4                                    ;; @@79c8 252
 16568  79ca f005                                beq _local_1251_40                       ; no, move on to next IRQ task ;; @@79ca 252
 16569  79cc a9ff                                lda #$ff                                  ;; @@79cc 252
 16570  79ce 8ddf02                              sta int_trip_flag+2                      ; yes- let BASIC know we caught one ;; @@79ce 252
 16571                           ;; @@79d1 252
 16572                          _local_1251_40                                             ;; @@79d1 252
 16573                          ; .page ;; @@79d1 252
 16574                          ; Update moving sprites ;; @@79d1 252
 16575                           ;; @@79d1 252
 16576                          movspr_irq                                                 ;; @@79d1 253
 16577  79d1 ad15d0                              lda vic+21                               ; any sprites active?    [910212] ;; @@79d1 253
 16578  79d4 f3f000                              +lbeq music_irq                          ; no- skip ahead ;; @@79d4 253
 16579                           ;; @@79d7 253
 16580  79d7 a007                                ldy #7                                   ; check each of 8 sprites ;; @@79d7 253
 16581  79d9 ad15d0             _local_1252_10   lda vic+21                               ; is this sprite is enabled? ;; @@79d9 253
 16582  79dc 396579                              and sbits,y                               ;; @@79dc 253
 16583  79df f03d                                beq _local_1252_40                       ; sprite not enabled ;; @@79df 253
 16584                           ;; @@79e1 253
 16585  79e1 befeb7                              ldx sproff,y                             ; get offset to sprite info from a table ;; @@79e1 253
 16586  79e4 bd0512                              lda sprite_data,x                        ; is this sprite moving (speed >0 )? ;; @@79e4 253
 16587  79e7 f035                                beq _local_1252_40                       ; sprite not moving ;; @@79e7 253
 16588  79e9 1005                                bpl _local_1252_15                       ; sprite moving, no destination ;; @@79e9 253
 16589  79eb 633700                              bsr movspr_to_irq                        ; sprite moving to a destination [910809] ;; @@79eb 253
 16590  79ee 802e                                bra _local_1252_40                        ;; @@79ee 253
 16591                           ;; @@79f0 253
 16592  79f0 9d0612             _local_1252_15   sta sprite_data+1,x                      ; set counter ;; @@79f0 253
 16593  79f3 98                 _local_1252_20   tya                                      ; convert sprite# to a VIC register pointer ;; @@79f3 253
 16594  79f4 0a                                  asl                                       ;; @@79f4 253
 16595  79f5 a8                                  tay                                       ;; @@79f5 253
 16596  79f6 bd0712                              lda sprite_data+2,x                      ; get angle sign ;; @@79f6 253
 16597  79f9 3a                                  dec                                      ; subtract 1 for cosine ;; @@79f9 253
 16598  79fa e8                                  inx                                       ;; @@79fa 253
 16599  79fb e8                                  inx                                       ;; @@79fb 253
 16600  79fc c8                                  iny                                       ;; @@79fc 253
 16601  79fd 20c67b                              jsr sprsub                               ; update y position ;; @@79fd 253
 16602  7a00 ca                                  dex                                       ;; @@7a00 253
 16603  7a01 ca                                  dex                                       ;; @@7a01 253
 16604  7a02 88                                  dey                                       ;; @@7a02 253
 16605  7a03 bd0712                              lda sprite_data+2,x                       ;; @@7a03 253
 16606  7a06 20c67b                              jsr sprsub                               ; update x position ;; @@7a06 253
 16607  7a09 08                                  php                                       ;; @@7a09 253
 16608  7a0a 98                                  tya                                       ;; @@7a0a 253
 16609  7a0b 4a                                  lsr                                      ; restore index (.Y=sprite pointer) ;; @@7a0b 253
 16610  7a0c a8                                  tay                                       ;; @@7a0c 253
 16611  7a0d 28                                  plp                                       ;; @@7a0d 253
 16612  7a0e 9009                                bcc _local_1252_30                       ; skip if no overflow ;; @@7a0e 253
 16613  7a10 ad10d0                              lda vic+16                               ; get x position msb bits ???vic_save ;; @@7a10 253
 16614  7a13 596579                              eor sbits,y                              ; invert bit ;; @@7a13 253
 16615  7a16 8d10d0                              sta vic+16                               ; ???vic_save ;; @@7a16 253
 16616  7a19 de0612             _local_1252_30   dec sprite_data+1,x                       ;; @@7a19 253
 16617  7a1c d0d5                                bne _local_1252_20                       ; loop until counter done ;; @@7a1c 253
 16618                           ;; @@7a1e 253
 16619  7a1e 88                 _local_1252_40   dey                                      ; check next sprite ;; @@7a1e 253
 16620  7a1f 10b8                                bpl _local_1252_10                       ; loop until done moving all sprites ;; @@7a1f 253
 16621  7a21 83a300                              +lbra music_irq                          ; then continue with next IRQ task ;; @@7a21 253
 16622                          ; .page ;; @@7a24 253
 16623                          movspr_to_irq                                             ; [910809] ;; @@7a24 254
 16624  7a24 5a                                  phy                                      ; sprite # ;; @@7a24 254
 16625  7a25 293f                                and #$3f                                 ; speed factor ;; @@7a25 254
 16626  7a27 4b                                  taz                                       ;; @@7a27 254
 16627  7a28 98                                  tya                                      ; vic sprite index ;; @@7a28 254
 16628  7a29 0a                                  asl                                       ;; @@7a29 254
 16629  7a2a a8                                  tay                                       ;; @@7a2a 254
 16630                           ;; @@7a2b 254
 16631  7a2b 38                 _local_1253_10   sec                                      ; for i = 1 to abs(greatr) ;; @@7a2b 254
 16632  7a2c bd0612                              lda sprite_data+1,x                       ;; @@7a2c 254
 16633  7a2f e901                                sbc #1                                    ;; @@7a2f 254
 16634  7a31 9d0612                              sta sprite_data+1,x                       ;; @@7a31 254
 16635  7a34 b011                                bcs _local_1253_20                        ;; @@7a34 254
 16636  7a36 bd0712                              lda sprite_data+2,x                       ;; @@7a36 254
 16637  7a39 e900                                sbc #0                                    ;; @@7a39 254
 16638  7a3b 9d0712                              sta sprite_data+2,x                       ;; @@7a3b 254
 16639  7a3e b007                                bcs _local_1253_20                        ;; @@7a3e 254
 16640  7a40 a900                                lda #0                                    ;; @@7a40 254
 16641  7a42 9d0512                              sta sprite_data,x                        ; done!  sprite is at its destination ;; @@7a42 254
 16642  7a45 7a                                  ply                                      ; remember sprite # ;; @@7a45 254
 16643  7a46 60                                  rts                                       ;; @@7a46 254
 16644                           ;; @@7a47 254
 16645  7a47 bd0812             _local_1253_20   lda sprite_data+3,x                      ; ptr(lesser) ;; @@7a47 254
 16646  7a4a 3c0f12                              bit sprite_data+10,x                      ;; @@7a4a 254
 16647  7a4d 3009                                bmi _local_1253_30                       ; if e > 0 ;; @@7a4d 254
 16648  7a4f 3c0812                              bit sprite_data+3,x                      ; sgn(lesser) (b7=1=neg, b6=1=pos, else 0) ;; @@7a4f 254
 16649  7a52 20907a                              jsr drwinc                               ; pos(lesser) = pos(lesser) + sgn(lesser) ;; @@7a52 254
 16650                           ;; @@7a55 254
 16651  7a55 bd0912                              lda sprite_data+4,x                      ; ptr(greater) ;; @@7a55 254
 16652  7a58 4a                 _local_1253_30   lsr                                      ; which f? ;; @@7a58 254
 16653  7a59 b014                                bcs _local_1253_40                        ;; @@7a59 254
 16654  7a5b bd0e12                              lda sprite_data+9,x                      ; e = e + f1 ;; @@7a5b 254
 16655  7a5e 7d0a12                              adc sprite_data+5,x                       ;; @@7a5e 254
 16656  7a61 9d0e12                              sta sprite_data+9,x                       ;; @@7a61 254
 16657  7a64 bd0f12                              lda sprite_data+10,x                      ;; @@7a64 254
 16658  7a67 7d0b12                              adc sprite_data+6,x                       ;; @@7a67 254
 16659  7a6a 9d0f12                              sta sprite_data+10,x                      ;; @@7a6a 254
 16660  7a6d 8013                                bra _local_1253_50                        ;; @@7a6d 254
 16661                           ;; @@7a6f 254
 16662  7a6f 18                 _local_1253_40   clc                                       ;; @@7a6f 254
 16663  7a70 bd0e12                              lda sprite_data+9,x                      ; e = e + f2 ;; @@7a70 254
 16664  7a73 7d0c12                              adc sprite_data+7,x                       ;; @@7a73 254
 16665  7a76 9d0e12                              sta sprite_data+9,x                       ;; @@7a76 254
 16666  7a79 bd0f12                              lda sprite_data+10,x                      ;; @@7a79 254
 16667  7a7c 7d0d12                              adc sprite_data+8,x                       ;; @@7a7c 254
 16668  7a7f 9d0f12                              sta sprite_data+10,x                      ;; @@7a7f 254
 16669                           ;; @@7a82 254
 16670  7a82 bd0912             _local_1253_50   lda sprite_data+4,x                      ; ptr(greater) ;; @@7a82 254
 16671  7a85 3c0912                              bit sprite_data+4,x                      ; sgn(greater) (b7=1=neg, b6=1=pos, else 0) ;; @@7a85 254
 16672  7a88 20907a                              jsr drwinc                               ; pos(greater) = pos(greater) + sgn(greater) ;; @@7a88 254
 16673                           ;; @@7a8b 254
 16674  7a8b 3b                                  dez                                      ; count ;; @@7a8b 254
 16675  7a8c d09d                                bne _local_1253_10                        ;; @@7a8c 254
 16676  7a8e 7a                                  ply                                      ; remember sprite # ;; @@7a8e 254
 16677  7a8f 60                                  rts                                      ; done this frame ;; @@7a8f 254
 16678                           ;; @@7a90 254
 16679                           ;; @@7a90 254
 16680  7a90 08                 drwinc           php                                       ;; @@7a90 255
 16681  7a91 2901                                and #1                                   ; adjust .y for x or y position ;; @@7a91 255
 16682  7a93 f001                                beq _local_1254_5                        ; 0=x ;; @@7a93 255
 16683  7a95 c8                                  iny                                      ; 1=y ;; @@7a95 255
 16684  7a96 28                 _local_1254_5    plp                                       ;; @@7a96 255
 16685  7a97 300b                                bmi _local_1254_10                       ; enter with b7=negative, b6=positive, else zero ;; @@7a97 255
 16686  7a99 5027                                bvc _local_1254_30                        ;; @@7a99 255
 16687                           ;; @@7a9b 255
 16688  7a9b b900d0                              lda vic,y                                ; positive direction ;; @@7a9b 255
 16689  7a9e 1a                                  inc                                       ;; @@7a9e 255
 16690  7a9f 9900d0                              sta vic,y                                 ;; @@7a9f 255
 16691  7aa2 8009                                bra _local_1254_20                        ;; @@7aa2 255
 16692                           ;; @@7aa4 255
 16693  7aa4 b900d0             _local_1254_10   lda vic,y                                ; negative direction ;; @@7aa4 255
 16694  7aa7 3a                                  dec                                       ;; @@7aa7 255
 16695  7aa8 9900d0                              sta vic,y                                 ;; @@7aa8 255
 16696  7aab c9ff                                cmp #$ff                                  ;; @@7aab 255
 16697                           ;; @@7aad 255
 16698  7aad d013               _local_1254_20   bne _local_1254_30                       ; no wrap ;; @@7aad 255
 16699  7aaf 98                                  tya                                       ;; @@7aaf 255
 16700  7ab0 8901                                bit #1                                    ;; @@7ab0 255
 16701  7ab2 d00e                                bne _local_1254_30                       ; wrap in y okay ;; @@7ab2 255
 16702  7ab4 4a                                  lsr                                       ;; @@7ab4 255
 16703  7ab5 a8                                  tay                                       ;; @@7ab5 255
 16704  7ab6 b96579                              lda sbits,y                              ; wrap in x- toggle msb ;; @@7ab6 255
 16705  7ab9 4d10d0                              eor vic+16                                ;; @@7ab9 255
 16706  7abc 8d10d0                              sta vic+16                                ;; @@7abc 255
 16707  7abf 98                                  tya                                       ;; @@7abf 255
 16708  7ac0 0a                                  asl                                       ;; @@7ac0 255
 16709  7ac1 a8                                  tay                                       ;; @@7ac1 255
 16710                           ;; @@7ac2 255
 16711  7ac2 98                 _local_1254_30   tya                                      ; restore y to sprite offset ;; @@7ac2 255
 16712  7ac3 29fe                                and #$fe                                  ;; @@7ac3 255
 16713  7ac5 a8                                  tay                                       ;; @@7ac5 255
 16714  7ac6 60                                  rts                                       ;; @@7ac6 255
 16715                           ;; @@7ac7 255
 16716                          ; .page ;; @@7ac7 255
 16717                          ; Play music, if in progress ;; @@7ac7 255
 16718                           ;; @@7ac7 255
 16719                          music_irq                                                  ;; @@7ac7 256
 16720  7ac7 a200                                ldx #0                                    ;; @@7ac7 256
 16721  7ac9 bc5e12             _local_1255_100  ldy voices+1,x                            ;; @@7ac9 256
 16722  7acc 3025                                bmi _local_1255_110                      ; skip if not active ;; @@7acc 256
 16723                           ;; @@7ace 256
 16724  7ace bd5d12                              lda voices,x                              ;; @@7ace 256
 16725  7ad1 38                                  sec                                       ;; @@7ad1 256
 16726  7ad2 ed7312                              sbc tempo_rate                           ; decrement current value by current tempo ;; @@7ad2 256
 16727  7ad5 9d5d12                              sta voices,x                              ;; @@7ad5 256
 16728  7ad8 b019                                bcs _local_1255_110                       ;; @@7ad8 256
 16729  7ada 98                                  tya                                      ; lda voices+1,x ;; @@7ada 256
 16730  7adb e900                                sbc #0                                    ;; @@7adb 256
 16731  7add 9d5e12                              sta voices+1,x                            ;; @@7add 256
 16732  7ae0 b011                                bcs _local_1255_110                      ; ok, no underflow ;; @@7ae0 256
 16733                           ;; @@7ae2 256
 16734  7ae2 8a                                  txa                                       ;; @@7ae2 256
 16735  7ae3 4a                                  lsr                                      ; get offset to waveform ;; @@7ae3 256
 16736  7ae4 a8                                  tay                                       ;; @@7ae4 256
 16737  7ae5 b96912                              lda waveform,y                           ; get waveform ;; @@7ae5 256
 16738  7ae8 29fe                                and #$fe                                 ; mask out gate bit ;; @@7ae8 256
 16739  7aea 48                                  pha                                       ;; @@7aea 256
 16740  7aeb b9004a                              lda SID_offset,y                         ; get offset to correct oscillator ;; @@7aeb 256
 16741  7aee a8                                  tay                                       ;; @@7aee 256
 16742  7aef 68                                  pla                                       ;; @@7aef 256
 16743                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@7af0 256
 16744  7af0 9904d4                              sta sid1+4,y                             ; turn off sound ;; @@7af0 256
 16745                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@7af3 256
 16746                           ;; @@7af3 256
 16747  7af3 e8                 _local_1255_110  inx                                       ;; @@7af3 256
 16748  7af4 e8                                  inx                                       ;; @@7af4 256
 16749  7af5 e00c                                cpx #6+6                                 ; [910612] ;; @@7af5 256
 16750  7af7 90d0                                bcc _local_1255_100                      ; loop for 6 voices ;; @@7af7 256
 16751                          ;then continue with next IRQ task ;; @@7af9 256
 16752                          ; .page ;; @@7af9 256
 16753                          ; Test if SOUND command wants anything ;; @@7af9 256
 16754                           ;; @@7af9 256
 16755                          sound_irq                                                  ;; @@7af9 257
 16756  7af9 a005                                ldy #6-1                                 ; test six voices    [910612] ;; @@7af9 257
 16757  7afb b9c412             _local_1256_10   lda sound_time_hi,y                      ; active if msb clear ;; @@7afb 257
 16758  7afe 1006                                bpl _local_1256_12                        ;; @@7afe 257
 16759  7b00 88                 _local_1256_11   dey                                       ;; @@7b00 257
 16760  7b01 10f8                                bpl _local_1256_10                        ;; @@7b01 257
 16761  7b03 83bb00                              +lbra basic_irq_end                       ;; @@7b03 257
 16762                           ;; @@7b06 257
 16763  7b06 18                 _local_1256_12   clc                                      ; add step to frequency ;; @@7b06 257
 16764  7b07 b9f412                              lda sound_freq_lo,y                       ;; @@7b07 257
 16765  7b0a 79e812                              adc sound_step_lo,y                       ;; @@7b0a 257
 16766  7b0d 99f412                              sta sound_freq_lo,y                       ;; @@7b0d 257
 16767  7b10 b9fa12                              lda sound_freq_hi,y                       ;; @@7b10 257
 16768  7b13 79ee12                              adc sound_step_hi,y                       ;; @@7b13 257
 16769  7b16 99fa12                              sta sound_freq_hi,y                       ;; @@7b16 257
 16770                           ;; @@7b19 257
 16771  7b19 b9e212                              lda sound_direction,y                    ; test if this is up or down ;; @@7b19 257
 16772  7b1c aa                                  tax                                       ;; @@7b1c 257
 16773  7b1d 2901                                and #1                                    ;; @@7b1d 257
 16774  7b1f f02d                                beq _local_1256_20                       ; branch if up ;; @@7b1f 257
 16775                           ;; @@7b21 257
 16776                          ; If step direction is down, .C==0 OR freq < min  ==> reset value ;; @@7b21 257
 16777                           ;; @@7b21 257
 16778  7b21 900f                                bcc _local_1256_13                       ; underflow, reset ;; @@7b21 257
 16779  7b23 38                                  sec                                       ;; @@7b23 257
 16780  7b24 b9f412                              lda sound_freq_lo,y                       ;; @@7b24 257
 16781  7b27 f9d612                              sbc sound_min_lo,y                        ;; @@7b27 257
 16782  7b2a b9fa12                              lda sound_freq_hi,y                       ;; @@7b2a 257
 16783  7b2d f9dc12                              sbc sound_min_hi,y                        ;; @@7b2d 257
 16784  7b30 b04c                                bcs _local_1256_40                       ; no borrow, don't reset ;; @@7b30 257
 16785                           ;; @@7b32 257
 16786  7b32 e002               _local_1256_13   cpx #2                                   ; is 'cycle' bit set? ;; @@7b32 257
 16787  7b34 900a                                bcc _local_1256_15                       ; no, keep direction 'down' ;; @@7b34 257
 16788                           ;; @@7b36 257
 16789  7b36 20ab7b                              jsr negate_step                          ; make step 2's comp ;; @@7b36 257
 16790  7b39 a902                                lda #2                                   ; change direction to 'up' ;; @@7b39 257
 16791  7b3b 99e212                              sta sound_direction,y                     ;; @@7b3b 257
 16792  7b3e d032                                bne _local_1256_35                       ; go reset for 'up' ;; @@7b3e 257
 16793                           ;; @@7b40 257
 16794  7b40 b9ca12             _local_1256_15   lda sound_max_lo,y                       ; reset to max ;; @@7b40 257
 16795  7b43 99f412                              sta sound_freq_lo,y                       ;; @@7b43 257
 16796  7b46 b9d012                              lda sound_max_hi,y                        ;; @@7b46 257
 16797  7b49 99fa12                              sta sound_freq_hi,y                       ;; @@7b49 257
 16798  7b4c 8030                                bra _local_1256_40                       ; go update SID frequency ;; @@7b4c 257
 16799                           ;; @@7b4e 257
 16800                          ; If step direction is up, overflow (.C==1) OR freq > max ==> reset frequency ;; @@7b4e 257
 16801                           ;; @@7b4e 257
 16802  7b4e b014               _local_1256_20   bcs _local_1256_30                       ; overflow, must reset ;; @@7b4e 257
 16803  7b50 b9fa12                              lda sound_freq_hi,y                      ; 16 bit compare (yech!) ;; @@7b50 257
 16804  7b53 d9d012                              cmp sound_max_hi,y                        ;; @@7b53 257
 16805  7b56 9026                                bcc _local_1256_40                       ; freq < max, no reset ;; @@7b56 257
 16806  7b58 d00a                                bne _local_1256_30                       ; freq > max, reset ;; @@7b58 257
 16807  7b5a b9f412                              lda sound_freq_lo,y                      ; msb's the same, test lsb's ;; @@7b5a 257
 16808  7b5d d9ca12                              cmp sound_max_lo,y                        ;; @@7b5d 257
 16809  7b60 901c                                bcc _local_1256_40                       ; freq < max, no reset ;; @@7b60 257
 16810  7b62 f01a                                beq _local_1256_40                       ; freq = max, no reset ;; @@7b62 257
 16811                           ;; @@7b64 257
 16812  7b64 e002               _local_1256_30   cpx #2                                   ; is this 'cycle'? ;; @@7b64 257
 16813  7b66 900a                                bcc _local_1256_35                       ; no, go reset for next 'up' ;; @@7b66 257
 16814                           ;; @@7b68 257
 16815  7b68 20ab7b                              jsr negate_step                          ; make step 2's comp ;; @@7b68 257
 16816  7b6b a903                                lda #3                                   ; change direction to 'down' ;; @@7b6b 257
 16817  7b6d 99e212                              sta sound_direction,y                     ;; @@7b6d 257
 16818  7b70 d0ce                                bne _local_1256_15                       ; go reset for next 'down' ;; @@7b70 257
 16819                           ;; @@7b72 257
 16820  7b72 b9d612             _local_1256_35   lda sound_min_lo,y                       ; set freq to minimum value ;; @@7b72 257
 16821  7b75 99f412                              sta sound_freq_lo,y                       ;; @@7b75 257
 16822  7b78 b9dc12                              lda sound_min_hi,y                        ;; @@7b78 257
 16823  7b7b 99fa12                              sta sound_freq_hi,y                       ;; @@7b7b 257
 16824                           ;; @@7b7e 257
 16825                          ; Update SID frequency registers ;; @@7b7e 257
 16826                           ;; @@7b7e 257
 16827                          _local_1256_40                                             ;; @@7b7e 257
 16828                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@7b7e 257
 16829  7b7e be004a                              ldx SID_offset,y                         ; get index to SID voices ;; @@7b7e 257
 16830  7b81 b9f412                              lda sound_freq_lo,y                       ;; @@7b81 257
 16831  7b84 9d00d4                              sta sid1,x                                ;; @@7b84 257
 16832  7b87 b9fa12                              lda sound_freq_hi,y                       ;; @@7b87 257
 16833  7b8a 9d01d4                              sta sid1+1,x                              ;; @@7b8a 257
 16834                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@7b8d 257
 16835                           ;; @@7b8d 257
 16836                          ; Decrement total time - see if it's time to bring down the curtain ;; @@7b8d 257
 16837                           ;; @@7b8d 257
 16838  7b8d 98                                  tya                                       ;; @@7b8d 257
 16839  7b8e aa                                  tax                                       ;; @@7b8e 257
 16840  7b8f bdbe12                              lda sound_time_lo,x                      ; 16 bit decrement - not very pretty ;; @@7b8f 257
 16841  7b92 d003                                bne _local_1256_50                        ;; @@7b92 257
 16842  7b94 dec412                              dec sound_time_hi,x                       ;; @@7b94 257
 16843  7b97 debe12             _local_1256_50   dec sound_time_lo,x                       ;; @@7b97 257
 16844                           ;; @@7b9a 257
 16845  7b9a bdc412                              lda sound_time_hi,x                      ; underflow? ;; @@7b9a 257
 16846  7b9d 1360ff                              +lbpl _local_1256_11                     ; nope ;; @@7b9d 257
 16847                           ;; @@7ba0 257
 16848                          ; Time to turn off this voice ;; @@7ba0 257
 16849                           ;; @@7ba0 257
 16850                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@7ba0 257
 16851  7ba0 a908                                lda #$08                                  ;; @@7ba0 257
 16852  7ba2 be004a                              ldx SID_offset,y                          ;; @@7ba2 257
 16853  7ba5 9d04d4                              sta sid1+4,x                              ;; @@7ba5 257
 16854                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@7ba8 257
 16855  7ba8 8355ff                              +lbra _local_1256_11                      ;; @@7ba8 257
 16856                           ;; @@7bab 257
 16857                           ;; @@7bab 257
 16858                          negate_step                                                ;; @@7bab 258
 16859  7bab b9e812                              lda sound_step_lo,y                       ;; @@7bab 258
 16860  7bae 49ff                                eor #$ff                                  ;; @@7bae 258
 16861  7bb0 18                                  clc                                       ;; @@7bb0 258
 16862  7bb1 6901                                adc #1                                    ;; @@7bb1 258
 16863  7bb3 99e812                              sta sound_step_lo,y                       ;; @@7bb3 258
 16864  7bb6 b9ee12                              lda sound_step_hi,y                       ;; @@7bb6 258
 16865  7bb9 49ff                                eor #$ff                                  ;; @@7bb9 258
 16866  7bbb 6900                                adc #0                                    ;; @@7bbb 258
 16867  7bbd 99ee12                              sta sound_step_hi,y                       ;; @@7bbd 258
 16868  7bc0 60                                  rts                                       ;; @@7bc0 258
 16869                           ;; @@7bc1 258
 16870                           ;; @@7bc1 258
 16871                          ; .page ;; @@7bc1 258
 16872                          ; Here is where BASIC_IRQ exits ;; @@7bc1 258
 16873                           ;; @@7bc1 258
 16874                          basic_irq_end                                              ;; @@7bc1 258
 16875  7bc1 cedb02                              dec irq_wrap_flag                        ; open the door to IRQ ;; @@7bc1 258
 16876  7bc4 58                                  cli                                       ;; @@7bc4 258
 16877  7bc5 60                                  rts                                       ;; @@7bc5 258
 16878                           ;; @@7bc6 258
 16879                          ; .page ;; @@7bc6 258
 16880                          ; Update sprite position subroutine ;; @@7bc6 258
 16881                           ;; @@7bc6 258
 16882  7bc6 48                 sprsub           pha                                      ; save angle phase ;; @@7bc6 258
 16883  7bc7 18                                  clc                                       ;; @@7bc7 258
 16884  7bc8 bd0812                              lda sprite_data+3,x                      ; add low bytes ;; @@7bc8 258
 16885  7bcb 7d0c12                              adc sprite_data+7,x                       ;; @@7bcb 258
 16886  7bce 9d0c12                              sta sprite_data+7,x                       ;; @@7bce 258
 16887  7bd1 bd0912                              lda sprite_data+4,x                      ; add high bytes ;; @@7bd1 258
 16888  7bd4 7d0d12                              adc sprite_data+8,x                       ;; @@7bd4 258
 16889  7bd7 9d0d12                              sta sprite_data+8,x                       ;; @@7bd7 258
 16890  7bda 68                                  pla                                      ; get angle sign ;; @@7bda 258
 16891  7bdb 9012                                bcc _local_1257_30                       ; skip if no carry - do not update position ;; @@7bdb 258
 16892  7bdd 4a                                  lsr                                       ;; @@7bdd 258
 16893  7bde 4a                                  lsr                                      ; test if positive or negative ;; @@7bde 258
 16894  7bdf b900d0                              lda vic,y                                ; ???vic_save ;; @@7bdf 258
 16895  7be2 b004                                bcs _local_1257_10                       ; skip if negative ;; @@7be2 258
 16896  7be4 6901                                adc #1                                   ; increment position ;; @@7be4 258
 16897  7be6 8004                                bra _local_1257_20                        ;; @@7be6 258
 16898                           ;; @@7be8 258
 16899  7be8 e901               _local_1257_10   sbc #1                                   ; decrement position ;; @@7be8 258
 16900  7bea c9ff                                cmp #$ff                                 ; set carry if underflow ;; @@7bea 258
 16901  7bec 9900d0             _local_1257_20   sta vic,y                                ; decrement position  ???vic_save ;; @@7bec 258
 16902  7bef 60                 _local_1257_30   rts                                       ;; @@7bef 258
 16903                           ;; @@7bf0 258
 16904                          ;.end ;; @@7bf0 258
 16905                          ; .page ;; @@7bf0 258
 16906                          ; .subttl  MOUSE ;; @@7bf0 258
 16907                           ;; @@7bf0 258
 16908                          ;*********************************************************************** ;; @@7bf0 258
 16909                          ;*   MOUSE  ON  [,[port] [,[sprite] [,[hotspot] [,X/Yposition] ]]] ;; @@7bf0 258
 16910                          ;*   MOUSE  OFF ;; @@7bf0 258
 16911                          ;*    where: port     = (1...3) for joyport 1, 2, or either (both) ;; @@7bf0 258
 16912                          ;*  sprite   = (0...7) sprite pointer ;; @@7bf0 258
 16913                          ;*  hotspot  = x,y offset in sprite, default 0,0 ;; @@7bf0 258
 16914                          ;*  position = normal, relative, or angluar coordinates ;; @@7bf0 258
 16915                          ;* ;; @@7bf0 258
 16916                          ;*      (defaults to sprite 0, port 2, last hotspot & position) ;; @@7bf0 258
 16917                          ;*********************************************************************** ;; @@7bf0 258
 16918                           ;; @@7bf0 258
 16919  7bf0 c991               mouse            cmp #on_token                            ; new [910122] ;; @@7bf0 259
 16920  7bf2 f010                                beq _local_1258_10                        ;; @@7bf2 259
 16921  7bf4 2016b5                              jsr chkesc                                ;; @@7bf4 259
 16922  7bf7 c924                                cmp #off_token                            ;; @@7bf7 259
 16923  7bf9 d34eb2                              +lbne snerr                               ;; @@7bf9 259
 16924                           ;; @@7bfc 259
 16925                          ;    The Kernel MOUSE_CMD is called to install or remove mouse driver. ;; @@7bfc 259
 16926                          ; .a= B7,6 set to install mouse in game port 2 ($80), 1 ($40), or both ($C0) ;; @@7bfc 259
 16927                          ; .a= 0 to disable mouse driver ;; @@7bfc 259
 16928                          ; .x= 0-7 physical sprite pointer ;; @@7bfc 259
 16929                           ;; @@7bfc 259
 16930  7bfc a900                                lda #0                                   ; TURN MOUSE OFF ;; @@7bfc 259
 16931  7bfe 201be0                              jsr _mouse                               ; do it ;; @@7bfe 259
 16932  7c01 831e39                              +lbra chkeos                             ; eat token & exit after checking for eos ;; @@7c01 259
 16933                           ;; @@7c04 259
 16934                          ;TURN MOUSE ON ;; @@7c04 259
 16935  7c04 208322             _local_1258_10   jsr chrget                               ; eat token ;; @@7c04 259
 16936  7c07 a202                                ldx #2                                   ; get (optional) port# in .X ;; @@7c07 259
 16937  7c09 202679                              jsr optbyt                               ; if not present default to port 2 ;; @@7c09 259
 16938  7c0c e004                                cpx #4                                   ;  ;; @@7c0c 259
 16939  7c0e b3edd5                              +lbcs fcerr                              ; illegal value ;; @@7c0e 259
 16940  7c11 da                                  phx                                       ;; @@7c11 259
 16941                           ;; @@7c12 259
 16942  7c12 a200                                ldx #0                                   ; get (optional) sprite# in .X ;; @@7c12 259
 16943  7c14 202679                              jsr optbyt                               ; if not present default to sprite 0 ;; @@7c14 259
 16944  7c17 e008                                cpx #8                                    ;; @@7c17 259
 16945  7c19 b3e2d5                              +lbcs fcerr                              ; illegal value ;; @@7c19 259
 16946  7c1c 8676                                stx z_p_temp_1                            ;; @@7c1c 259
 16947  7c1e bcfeb7                              ldy sproff,x                             ; kill moving sprite ;; @@7c1e 259
 16948  7c21 a900                                lda #0                                   ; get offset to speed data ;; @@7c21 259
 16949  7c23 990512                              sta sprite_data,y                        ; reset sprite's speed value ;; @@7c23 259
 16950                           ;; @@7c26 259
 16951  7c26 68                                  pla                                      ; setup for Kernel call- get port# into b7,6 ;; @@7c26 259
 16952  7c27 6a                                  ror                                      ; .a= port(s), .x=sprite ;; @@7c27 259
 16953  7c28 6a                                  ror                                       ;; @@7c28 259
 16954  7c29 6a                                  ror                                       ;; @@7c29 259
 16955  7c2a 201be0                              jsr _mouse                               ; do it (???? do after coord error check) ;; @@7c2a 259
 16956                           ;; @@7c2d 259
 16957                          ; .page ;; @@7c2d 259
 16958  7c2d 202679                              jsr optbyt                               ; get (optional) hotspot, x  new [910307] ;; @@7c2d 259
 16959  7c30 9014                                bcc _local_1258_20                       ; not given ;; @@7c30 259
 16960  7c32 e018                                cpx #24                                   ;; @@7c32 259
 16961  7c34 b3c7d5                              +lbcs fcerr                              ; out of range (0-23) ;; @@7c34 259
 16962  7c37 8a                                  txa                                       ;; @@7c37 259
 16963  7c38 42                                  neg                                       ;; @@7c38 259
 16964  7c39 aa                                  tax                                       ;; @@7c39 259
 16965  7c3a 6918                                adc #24                                   ;; @@7c3a 259
 16966  7c3c 8d3d11                              sta _mouse_left                           ;; @@7c3c 259
 16967  7c3f 8a                                  txa                                       ;; @@7c3f 259
 16968  7c40 18                                  clc                                       ;; @@7c40 259
 16969  7c41 6957                                adc #87                                   ;; @@7c41 259
 16970  7c43 8d3e11                              sta _mouse_right                          ;; @@7c43 259
 16971                           ;; @@7c46 259
 16972  7c46 202679             _local_1258_20   jsr optbyt                               ; get (optional) hotspot, y ;; @@7c46 259
 16973  7c49 9014                                bcc _local_1258_30                       ; not given ;; @@7c49 259
 16974  7c4b e015                                cpx #21                                   ;; @@7c4b 259
 16975  7c4d b3aed5                              +lbcs fcerr                              ; out of range (0-20) ;; @@7c4d 259
 16976  7c50 8a                                  txa                                       ;; @@7c50 259
 16977  7c51 42                                  neg                                       ;; @@7c51 259
 16978  7c52 aa                                  tax                                       ;; @@7c52 259
 16979  7c53 6932                                adc #50                                   ;; @@7c53 259
 16980  7c55 8d3b11                              sta _mouse_top                            ;; @@7c55 259
 16981  7c58 8a                                  txa                                       ;; @@7c58 259
 16982  7c59 18                                  clc                                       ;; @@7c59 259
 16983  7c5a 69fa                                adc #250                                  ;; @@7c5a 259
 16984  7c5c 8d3c11                              sta _mouse_bottom                         ;; @@7c5c 259
 16985                           ;; @@7c5f 259
 16986  7c5f 208522             _local_1258_30   jsr chrgot                               ; get (optional) position coordinate  [910123] ;; @@7c5f 259
 16987  7c62 f028                                beq _local_1258_40                       ; eol, use this sprite's last position ;; @@7c62 259
 16988  7c64 20c3b7                              jsr sprcor                               ; else get first coordinate ;; @@7c64 259
 16989  7c67 2cf411                              bit numcnt                               ; test coordinate type ;; @@7c67 259
 16990  7c6a 73ddb1                              +lbvs snerr                              ; syntax error ;; @@7c6a 259
 16991  7c6d 8cf011                              sty xdest                                ; save coordinate value ;; @@7c6d 259
 16992  7c70 8cf211                              sty xdest+2                               ;; @@7c70 259
 16993  7c73 8df111                              sta xdest+1                               ;; @@7c73 259
 16994  7c76 8df311                              sta xdest+3                               ;; @@7c76 259
 16995                           ;; @@7c79 259
 16996  7c79 a97f                                lda #$7f                                 ; flag 'mouse' for movspr call  [910808] ;; @@7c79 259
 16997  7c7b 8587                                sta op                                    ;; @@7c7b 259
 16998  7c7d 20c3b7                              jsr sprcor                               ; get second coordinate ;; @@7c7d 259
 16999  7c80 2cf411                              bit numcnt                               ; test type of coordinate ;; @@7c80 259
 17000  7c83 53be39                              +lbvc movspr_normal                      ; position sprite, normal coordinates ;; @@7c83 259
 17001  7c86 339d39                              +lbmi movspr_angle                       ; angular coordinates ;; @@7c86 259
 17002  7c89 83beb1                              +lbra snerr                              ; else error ;; @@7c89 259
 17003                           ;; @@7c8c 259
 17004  7c8c 60                 _local_1258_40   rts                                       ;; @@7c8c 259
 17005                           ;; @@7c8d 259
 17006                          ;.end ;; @@7c8d 259
 17007                          ; .page ;; @@7c8d 259
 17008                          ;************************************************************************ ;; @@7c8d 259
 17009                          ;*   RMOUSE Returns in variable list current status of mouse * ;; @@7c8d 259
 17010                          ;*         * ;; @@7c8d 259
 17011                          ;*   Syntax: RMOUSE [Xposition [,Yposition [, Buttons] ]]  * ;; @@7c8d 259
 17012                          ;*         * ;; @@7c8d 259
 17013                          ;*   Where: X,Yposition = current position of mouse pointer sprite * ;; @@7c8d 259
 17014                          ;*  Button      = current status of mouse buttons  * ;; @@7c8d 259
 17015                          ;*         * ;; @@7c8d 259
 17016                          ;*   0   = no button     * ;; @@7c8d 259
 17017                          ;*   1   = right button    * ;; @@7c8d 259
 17018                          ;*   128 = left button    * ;; @@7c8d 259
 17019                          ;*   129 = both buttons    * ;; @@7c8d 259
 17020                          ;*         * ;; @@7c8d 259
 17021                          ;* If a mouse is not installed, "-1" is returned for all vars. * ;; @@7c8d 259
 17022                          ;* If both ports are enabled, buttons from each port are merged. * ;; @@7c8d 259
 17023                          ;************************************************************************ ;; @@7c8d 259
 17024                           ;; @@7c8d 259
 17025  7c8d a900               rmouse           lda #0                                   ; Init ;; @@7c8d 260
 17026  7c8f 850d                                sta count                                ; variable count = 0 ;; @@7c8f 260
 17027  7c91 3a                                  dec                                       ;; @@7c91 260
 17028  7c92 a205                                ldx #6-1                                  ;; @@7c92 260
 17029  7c94 9587               _local_1259_10   sta grapnt,x                             ; positions/buttons = -1 ;; @@7c94 260
 17030  7c96 ca                                  dex                                       ;; @@7c96 260
 17031  7c97 10fb                                bpl _local_1259_10                        ;; @@7c97 260
 17032                           ;; @@7c99 260
 17033  7c99 ad3511                              lda _mouse_enable                        ; Is there a mouse in the house? ;; @@7c99 260
 17034  7c9c 29c0                                and #%11000000                            ;; @@7c9c 260
 17035  7c9e f050                                beq _local_1259_50                       ; no, exit ;; @@7c9e 260
 17036  7ca0 48                                  pha                                      ; yes, save port assigns for later ;; @@7ca0 260
 17037  7ca1 78                                  sei                                       ;; @@7ca1 260
 17038  7ca2 ac3611                              ldy _mouse_pointer                       ; Where is it?  Get pointer to sprite ;; @@7ca2 260
 17039  7ca5 b900d0                              lda vic,y                                ; Get X position    ???vic_save ;; @@7ca5 260
 17040  7ca8 8587                                sta grapnt                               ; lsb ;; @@7ca8 260
 17041  7caa b96579                              lda sbits,y                               ;; @@7caa 260
 17042  7cad 2d10d0                              and vic+16                               ; msb    ???vic_save ;; @@7cad 260
 17043  7cb0 f002                                beq _local_1259_20                        ;; @@7cb0 260
 17044  7cb2 a901                                lda #1                                   ; convert to 0 or 1 ;; @@7cb2 260
 17045  7cb4 8588               _local_1259_20   sta grapnt+1                              ;; @@7cb4 260
 17046  7cb6 c8                                  iny                                      ; Get Y position ;; @@7cb6 260
 17047  7cb7 b900d0                              lda vic,y                                ; lsb    ???vic_save ;; @@7cb7 260
 17048  7cba 8589                                sta grapnt+2                              ;; @@7cba 260
 17049  7cbc a900                                lda #0                                   ; msb (fake it) ;; @@7cbc 260
 17050  7cbe 858a                                sta grapnt+3                              ;; @@7cbe 260
 17051                           ;; @@7cc0 260
 17052  7cc0 858b                                sta grapnt+4                             ; Init button status ;; @@7cc0 260
 17053  7cc2 858c                                sta grapnt+5                              ;; @@7cc2 260
 17054  7cc4 ab00dc                              ldz d1pra                                ; Set up port & read buttons ;; @@7cc4 260
 17055  7cc7 a9ff                                lda #$ff                                 ; save kybd output lines (IRQ already disabled) ;; @@7cc7 260
 17056  7cc9 8d00dc                              sta d1pra                                ; set to not read any kybd inputs ;; @@7cc9 260
 17057                           ;; @@7ccc 260
 17058  7ccc a000                                ldy #0                                   ; which port? ;; @@7ccc 260
 17059  7cce fa                                  plx                                      ; recall port assignments ;; @@7cce 260
 17060  7ccf 8a                 _local_1259_30   txa                                       ;; @@7ccf 260
 17061  7cd0 0a                                  asl                                      ; .c=1 if this one ;; @@7cd0 260
 17062  7cd1 aa                                  tax                                       ;; @@7cd1 260
 17063  7cd2 900f                                bcc _local_1259_40                       ; not this one ;; @@7cd2 260
 17064  7cd4 b900dc                              lda d1pra,y                              ; read it (logical port is opposite physical port) ;; @@7cd4 260
 17065  7cd7 2911                                and #%00010001                           ; want left, right buttons only ;; @@7cd7 260
 17066  7cd9 4911                                eor #%00010001                           ; (invert, since low means button down) ;; @@7cd9 260
 17067  7cdb 048b                                tsb grapnt+4                              ;; @@7cdb 260
 17068  7cdd 2910                                and #%00010000                           ; shift left button to msb ;; @@7cdd 260
 17069  7cdf f002                                beq _local_1259_40                        ;; @@7cdf 260
 17070  7ce1 f78b                                smb7 grapnt+4                             ;; @@7ce1 260
 17071  7ce3 c8                 _local_1259_40   iny                                      ; next port ;; @@7ce3 260
 17072  7ce4 c002                                cpy #2                                    ;; @@7ce4 260
 17073  7ce6 90e7                                bcc _local_1259_30                        ;; @@7ce6 260
 17074                           ;; @@7ce8 260
 17075  7ce8 a97e                                lda #%01111110                           ; clean up ;; @@7ce8 260
 17076  7cea 148b                                trb grapnt+4                             ; fix button register ;; @@7cea 260
 17077  7cec 9c00dc                              stz d1pra                                ; restore port for Kernel ;; @@7cec 260
 17078  7cef 58                                  cli                                       ;; @@7cef 260
 17079                           ;; @@7cf0 260
 17080                          ; At this point, we have snapshot the current mouse status. ;; @@7cf0 260
 17081                          ; Now pass requested info along in a manner very similar to RREG... ;; @@7cf0 260
 17082                           ;; @@7cf0 260
 17083  7cf0 208522             _local_1259_50   jsr chrgot                               ; Get a variable name from variable list ;; @@7cf0 260
 17084  7cf3 f032                                beq _local_1259_90                       ; eol- exit ;; @@7cf3 260
 17085  7cf5 c92c                                cmp #','                                 ;  ;; @@7cf5 260
 17086  7cf7 f01a                                beq _local_1259_70                       ; null- skip this arg ;; @@7cf7 260
 17087  7cf9 207c4f                              jsr ptrget                               ; Get pointer to target variable ;; @@7cf9 260
 17088  7cfc 854b                                sta forpnt                               ; set up so we can share LET code ;; @@7cfc 260
 17089  7cfe 844c                                sty forpnt+1                              ;; @@7cfe 260
 17090  7d00 a50f                                lda valtyp                               ; what kind of variable name did ptrget find? ;; @@7d00 260
 17091  7d02 d3e2cf                              +lbne chkerr                             ; string- type mismatch error ;; @@7d02 260
 17092                           ;; @@7d05 260
 17093  7d05 a60d               _local_1259_60   ldx count                                ; Make assignment ;; @@7d05 260
 17094  7d07 b487                                ldy grapnt,x                             ; low byte ;; @@7d07 260
 17095  7d09 b588                                lda grapnt+1,x                           ; high byte ;; @@7d09 260
 17096  7d0b 203f4e                              jsr givayf                               ; float it ;; @@7d0b 260
 17097  7d0e a510                                lda intflg                               ; set flags for type of var (int/float) ;; @@7d0e 260
 17098  7d10 209336                              jsr qintgr                               ; use part of LET to do the work ;; @@7d10 260
 17099                           ;; @@7d13 260
 17100  7d13 e60d               _local_1259_70   inc count                                ; Next assignment ;; @@7d13 260
 17101  7d15 e60d                                inc count                                 ;; @@7d15 260
 17102  7d17 a60d                                ldx count                                 ;; @@7d17 260
 17103  7d19 e006                                cpx #6                                   ; there are 3 possible ;; @@7d19 260
 17104  7d1b b00a                                bcs _local_1259_90                       ; done all 3, exit ;; @@7d1b 260
 17105  7d1d 208522                              jsr chrgot                               ; check terminator ;; @@7d1d 260
 17106  7d20 f005                                beq _local_1259_90                       ; eol- exit ;; @@7d20 260
 17107  7d22 205b4e                              jsr chkcom                               ; check delimiter ;; @@7d22 260
 17108  7d25 80c9                                bra _local_1259_50                       ; loop until done ;; @@7d25 260
 17109                           ;; @@7d27 260
 17110  7d27 60                 _local_1259_90   rts                                       ;; @@7d27 260
 17111                           ;; @@7d28 260
 17112                          ;.end ;; @@7d28 260
 17113                          ; .page ;; @@7d28 260
 17114                          ; .subttl   CURSOR ;; @@7d28 260
 17115                           ;; @@7d28 260
 17116                          ;***************************************************************** ;; @@7d28 260
 17117                          ;*   CURSOR [ON|OFF,] [column] [,row [,style] ] ;; @@7d28 260
 17118                          ;* ;; @@7d28 260
 17119                          ;*   where: column,row = x,y logical screen position ;; @@7d28 260
 17120                          ;*  style      = flashing (0) or solid (1) ;; @@7d28 260
 17121                          ;*  ON,OFF     = to turn the cursor on or off ;; @@7d28 260
 17122                          ;***************************************************************** ;; @@7d28 260
 17123                           ;; @@7d28 260
 17124  7d28 c991               cursor           cmp #on_token                            ; Check for ON | OFF ;; @@7d28 261
 17125  7d2a 18                                  clc                                       ;; @@7d2a 261
 17126  7d2b f046                                beq _local_1260_20                       ; turn cursor on (.c=0) ;; @@7d2b 261
 17127  7d2d c9fe                                cmp #esc_command_token                    ;; @@7d2d 261
 17128  7d2f d00a                                bne _local_1260_1                        ; (might be a function) ;; @@7d2f 261
 17129  7d31 2016b5                              jsr chkesc                                ;; @@7d31 261
 17130  7d34 c924                                cmp #off_token                           ; turn cursor off (.c=1) ;; @@7d34 261
 17131  7d36 f03b                                beq _local_1260_20                        ;; @@7d36 261
 17132  7d38 830fb1                              +lbra snerr                               ;; @@7d38 261
 17133                           ;; @@7d3b 261
 17134  7d3b 48                 _local_1260_1    pha                                      ; Evaluate cursor position parameters ;; @@7d3b 261
 17135  7d3c 38                                  sec                                       ;; @@7d3c 261
 17136  7d3d 20f0ff                              jsr _plot                                ; get current cursor position & save it ;; @@7d3d 261
 17137  7d40 8688                                stx srow                                  ;; @@7d40 261
 17138  7d42 8487                                sty column                                ;; @@7d42 261
 17139                           ;; @@7d44 261
 17140  7d44 a687                                ldx column                               ; get new column, default=current column ;; @@7d44 261
 17141  7d46 68                                  pla                                       ;; @@7d46 261
 17142  7d47 c92c                                cmp #','                                  ;; @@7d47 261
 17143  7d49 f003                                beq _local_1260_10                       ; not given, use default ;; @@7d49 261
 17144  7d4b 206c5d                              jsr getbyt                                ;; @@7d4b 261
 17145  7d4e 8687               _local_1260_10   stx column                                ;; @@7d4e 261
 17146  7d50 a688                                ldx srow                                 ; get new row, default=current row ;; @@7d50 261
 17147  7d52 202679                              jsr optbyt                                ;; @@7d52 261
 17148                          ; stx srow ;; @@7d55 261
 17149  7d55 a487                                ldy column                                ;; @@7d55 261
 17150  7d57 18                                  clc                                       ;; @@7d57 261
 17151  7d58 20f0ff                              jsr _plot                                ; set new cursor position ;; @@7d58 261
 17152  7d5b b3a0d4                              +lbcs fcerr                              ; error if bad position ;; @@7d5b 261
 17153                           ;; @@7d5e 261
 17154  7d5e 202479                              jsr optzer                               ; Get new cursor type   ???? assumes screen output ;; @@7d5e 261
 17155  7d61 901d                                bcc _local_1260_30                       ; not given, exit ;; @@7d61 261
 17156  7d63 a91b                                lda #esc                                  ;; @@7d63 261
 17157  7d65 20d2ff                              jsr _bsout                               ; use escape sequence to set ;; @@7d65 261
 17158  7d68 8a                                  txa                                       ;; @@7d68 261
 17159  7d69 2901                                and #1                                    ;; @@7d69 261
 17160  7d6b 4901                                eor #1                                   ; [910808] ;; @@7d6b 261
 17161  7d6d 18                                  clc                                       ;; @@7d6d 261
 17162  7d6e 6945                                adc #'E'                                 ; 0=F=flash, 1=E=solid ;; @@7d6e 261
 17163  7d70 4cd2ff                              jmp _bsout                               ; set it and exit ;; @@7d70 261
 17164                           ;; @@7d73 261
 17165  7d73 2030e0             _local_1260_20   jsr _cursor                              ; Turn cursor ON or OFF per .c ;; @@7d73 261
 17166                           ;; @@7d76 261
 17167  7d76 208322                              jsr chrget                               ; eat token, get next character ;; @@7d76 261
 17168  7d79 f005                                beq _local_1260_30                       ; eol- exit ;; @@7d79 261
 17169  7d7b 205b4e                              jsr chkcom                               ; else, must be comma ;; @@7d7b 261
 17170  7d7e 80bb                                bra _local_1260_1                        ; it is- go evaluate position ;; @@7d7e 261
 17171                           ;; @@7d80 261
 17172  7d80 60                 _local_1260_30   rts                                      ; eol ;; @@7d80 261
 17173                           ;; @@7d81 261
 17174                          ; .page ;; @@7d81 261
 17175                          ;************************************************************************ ;; @@7d81 261
 17176                          ;*   RCURSOR Returns in variable list current cursor position * ;; @@7d81 261
 17177                          ;*         * ;; @@7d81 261
 17178                          ;*   Syntax: RCURSOR [column [,row] ]    * ;; @@7d81 261
 17179                          ;************************************************************************ ;; @@7d81 261
 17180                           ;; @@7d81 261
 17181  7d81 38                 rcursor          sec                                      ; new [910228] ;; @@7d81 262
 17182  7d82 20f0ff                              jsr _plot                                ; get current cursor position & save it ;; @@7d82 262
 17183  7d85 8688                                stx srow                                  ;; @@7d85 262
 17184  7d87 8487                                sty column                                ;; @@7d87 262
 17185                           ;; @@7d89 262
 17186  7d89 a200                                ldx #0                                   ; just like RREG and RMOUSE... ;; @@7d89 262
 17187  7d8b 860d                                stx count                                 ;; @@7d8b 262
 17188  7d8d 208522             _local_1261_50   jsr chrgot                               ; Get a variable name from variable list ;; @@7d8d 262
 17189  7d90 f030                                beq _local_1261_90                       ; eol- exit ;; @@7d90 262
 17190  7d92 c92c                                cmp #','                                 ;  ;; @@7d92 262
 17191  7d94 f01a                                beq _local_1261_70                       ; null- skip this arg ;; @@7d94 262
 17192  7d96 207c4f                              jsr ptrget                               ; Get pointer to target variable ;; @@7d96 262
 17193  7d99 854b                                sta forpnt                               ; set up so we can share LET code ;; @@7d99 262
 17194  7d9b 844c                                sty forpnt+1                              ;; @@7d9b 262
 17195  7d9d a50f                                lda valtyp                               ; what kind of variable name did ptrget find? ;; @@7d9d 262
 17196  7d9f d345cf                              +lbne chkerr                             ; string- type mismatch error ;; @@7d9f 262
 17197                           ;; @@7da2 262
 17198  7da2 a60d               _local_1261_60   ldx count                                ; Make assignment ;; @@7da2 262
 17199  7da4 b487                                ldy column,x                             ; low byte ;; @@7da4 262
 17200  7da6 a900                                lda #0                                   ; high byte ;; @@7da6 262
 17201  7da8 203f4e                              jsr givayf                               ; float it ;; @@7da8 262
 17202  7dab a510                                lda intflg                               ; set flags for type of var (int/float) ;; @@7dab 262
 17203  7dad 209336                              jsr qintgr                               ; use part of LET to do the work ;; @@7dad 262
 17204                           ;; @@7db0 262
 17205  7db0 e60d               _local_1261_70   inc count                                ; Next assignment ;; @@7db0 262
 17206  7db2 a60d                                ldx count                                 ;; @@7db2 262
 17207  7db4 e002                                cpx #2                                   ; there are 2 possible ;; @@7db4 262
 17208  7db6 b00a                                bcs _local_1261_90                       ; done 2, exit ;; @@7db6 262
 17209  7db8 208522                              jsr chrgot                               ; check terminator ;; @@7db8 262
 17210  7dbb f005                                beq _local_1261_90                       ; eol- exit ;; @@7dbb 262
 17211  7dbd 205b4e                              jsr chkcom                               ; check delimiter ;; @@7dbd 262
 17212  7dc0 80cb                                bra _local_1261_50                       ; loop until done ;; @@7dc0 262
 17213                           ;; @@7dc2 262
 17214  7dc2 60                 _local_1261_90   rts                                       ;; @@7dc2 262
 17215                           ;; @@7dc3 262
 17216                          ;.end ;; @@7dc3 262
 17217                          ; .page ;; @@7dc3 262
 17218                          ; .subttl  AutoScroll ;; @@7dc3 262
 17219                           ;; @@7dc3 262
 17220                          AutoScroll                                                 ;; @@7dc3 263
 17221  7dc3 48                                  pha                                      ; save character for Editor ;; @@7dc3 263
 17222  7dc4 ff7e1e                              bbs7 runmod,AutoScrollno                 ; branch if not direct mode ;; @@7dc4 263
 17223  7dc7 a415                                ldy channl                               ; is output redirected? ;; @@7dc7 263
 17224  7dc9 d01a                                bne AutoScrollno                         ; yes- can't do scroll (need to read screen) ;; @@7dc9 263
 17225  7dcb a52d                                lda txttab                                ;; @@7dcb 263
 17226  7dcd a62e                                ldx txttab+1                             ; is there a program in memory to scroll? ;; @@7dcd 263
 17227  7dcf 853d                                sta txtptr                                ;; @@7dcf 263
 17228  7dd1 863e                                stx txtptr+1                              ;; @@7dd1 263
 17229  7dd3 c8                                  iny                                      ; (1) ;; @@7dd3 263
 17230  7dd4 20c522                              jsr indtxt                                ;; @@7dd4 263
 17231  7dd7 d011                                bne AutoScrollyes                        ; yes- continue ;; @@7dd7 263
 17232  7dd9 800a                                bra AutoScrollno                         ; no-  exit ;; @@7dd9 263
 17233                           ;; @@7ddb 263
 17234                          AutoScrollpop                                              ;; @@7ddb 263
 17235  7ddb 68                                  pla                                       ;; @@7ddb 263
 17236  7ddc 68                                  pla                                       ;; @@7ddc 263
 17237                          AutoScrollng                                               ;; @@7ddd 263
 17238  7ddd a67f                                ldx point                                ; restore cursor position ;; @@7ddd 263
 17239  7ddf a480                                ldy point+1                               ;; @@7ddf 263
 17240  7de1 18                                  clc                                       ;; @@7de1 263
 17241  7de2 20f0ff                              jsr _plot                                 ;; @@7de2 263
 17242                          AutoScrollno                                               ;; @@7de5 263
 17243  7de5 1755                                rmb1 helper                              ; remove LINGET flag ;; @@7de5 263
 17244  7de7 68                                  pla                                      ; restore character ;; @@7de7 263
 17245  7de8 38                                  sec                                      ; return to Editor with no action taken ;; @@7de8 263
 17246  7de9 60                                  rts                                       ;; @@7de9 263
 17247                           ;; @@7dea 263
 17248                          AutoScrollyes                                              ;; @@7dea 263
 17249  7dea 663f                                ror form                                 ; save .c=direction (character already on stack) ;; @@7dea 263
 17250  7dec 38                                  sec                                       ;; @@7dec 263
 17251  7ded 20f0ff                              jsr _plot                                ; get current cursor position & save it ;; @@7ded 263
 17252  7df0 867f                                stx point                                 ;; @@7df0 263
 17253  7df2 8480                                sty point+1                               ;; @@7df2 263
 17254  7df4 9755                                smb1 helper                              ; set flag for LINGET not to go to error if it has problems ;; @@7df4 263
 17255  7df6 ff3f3d                              bbs7 form,AutoScrolldn                   ; branch according to direction of scroll... ;; @@7df6 263
 17256                           ;; @@7df9 263
 17257                          ; .page ;; @@7df9 263
 17258                          AutoScrollup                                              ; wanting to scroll up ;; @@7df9 263
 17259  7df9 38                                  sec                                       ;; @@7df9 263
 17260  7dfa a5e4                                lda _screen_bottom                       ; put cursor at bottom of screen ;; @@7dfa 263
 17261  7dfc e5e5                                sbc _screen_top                           ;; @@7dfc 263
 17262  7dfe 8540                                sta form+1                               ; save where it is- we'll be printing line there ;; @@7dfe 263
 17263  7e00 aa                                  tax                                       ;; @@7e00 263
 17264  7e01 20a87e                              jsr AutoSearch                           ; search for a line number on screen, put it in linnum ;; @@7e01 263
 17265  7e04 20fa31                              jsr FindLine                             ; find the line in program ;; @@7e04 263
 17266  7e07 900e                                bcc _local_1262_10   ;  line not found   ; we have a pointer to the next line ;; @@7e07 263
 17267  7e09 a000                                ldy #0                                    ;; @@7e09 263
 17268  7e0b 20ad22                              jsr indlow                               ; find the next line, the one we want to print, via link bytes ;; @@7e0b 263
 17269  7e0e aa                                  tax                                       ;; @@7e0e 263
 17270  7e0f c8                                  iny                                       ;; @@7e0f 263
 17271  7e10 20ad22                              jsr indlow                                ;; @@7e10 263
 17272  7e13 8661                                stx lowtr                                ; advance pointer to it ;; @@7e13 263
 17273  7e15 8562                                sta lowtr+1                               ;; @@7e15 263
 17274  7e17 a640               _local_1262_10   ldx form+1                               ; put cursor back at bottom of screen ;; @@7e17 263
 17275  7e19 a000                                ldy #0                                    ;; @@7e19 263
 17276  7e1b 18                                  clc                                       ;; @@7e1b 263
 17277  7e1c 20f0ff                              jsr _plot                                 ;; @@7e1c 263
 17278  7e1f 20f737             _local_1262_20   jsr crdo                                 ; get a blank line to print on- scroll screen up ;; @@7e1f 263
 17279  7e22 a001                                ldy #1                                    ;; @@7e22 263
 17280  7e24 20ad22                              jsr indlow                               ; end of program marker? ;; @@7e24 263
 17281  7e27 d05f                                bne AutoScrollprint                      ; no-  print this line & exit ;; @@7e27 263
 17282  7e29 a52d                                lda txttab                               ; yes- loop to start of program, ;; @@7e29 263
 17283  7e2b a62e                                ldx txttab+1                              ;; @@7e2b 263
 17284  7e2d 8561                                sta lowtr                                 ;; @@7e2d 263
 17285  7e2f 8662                                stx lowtr+1                               ;; @@7e2f 263
 17286  7e31 20f737                              jsr crdo                                 ; and add an extra newline ;; @@7e31 263
 17287  7e34 80e9                                bra _local_1262_20                        ;; @@7e34 263
 17288                           ;; @@7e36 263
 17289                          ; .page ;; @@7e36 263
 17290                          AutoScrolldn                                              ; wanting to scroll down ;; @@7e36 264
 17291  7e36 a200                                ldx #0                                   ; put cursor at top of screen ;; @@7e36 264
 17292  7e38 20a87e                              jsr AutoSearch                           ; search for a line number on screen, put it in linnum ;; @@7e38 264
 17293  7e3b a200                                ldx #0                                   ; get a blank line to print on ;; @@7e3b 264
 17294  7e3d a000                                ldy #0                                   ; put cursor at top of screen ;; @@7e3d 264
 17295  7e3f 18                                  clc                                       ;; @@7e3f 264
 17296  7e40 20f0ff                              jsr _plot                                 ;; @@7e40 264
 17297  7e43 207dff             _local_1263_10   jsr _primm                               ; and scroll screen (kill any pending Editor modes, too) ;; @@7e43 264
 17298  7e46 1b1b1b5700                          !text esc,esc,esc,"W",0                   ;; @@7e46 264
 17299  7e4b 20fa31                              jsr FindLine                             ; find the line in program whose number we found on screen ;; @@7e4b 264
 17300  7e4e a561                                lda lowtr                                ; (does not matter if it or next higher line is found) ;; @@7e4e 264
 17301  7e50 c52d                                cmp txttab                                ;; @@7e50 264
 17302  7e52 d012                                bne _local_1263_20                        ;; @@7e52 264
 17303  7e54 a562                                lda lowtr+1                               ;; @@7e54 264
 17304  7e56 c52e                                cmp txttab+1                              ;; @@7e56 264
 17305  7e58 d00c                                bne _local_1263_20                        ;; @@7e58 264
 17306  7e5a a9ff                                lda #$ff                                 ; special case- it's the very first line, want to wrap to last line ;; @@7e5a 264
 17307  7e5c 8517                                sta linnum+1                             ; fake pointer to the last line, ;; @@7e5c 264
 17308  7e5e 207dff                              jsr _primm                               ; scroll screen to insert extra space, ;; @@7e5e 264
 17309  7e61 1b5700                              !text esc,"W",0                           ;; @@7e61 264
 17310  7e64 80dd                                bra _local_1263_10                       ; and go around again ;; @@7e64 264
 17311                           ;; @@7e66 264
 17312  7e66 a52d               _local_1263_20   lda txttab                               ; start at beginning of program (txttab) and find the line which points at (lowtr) ;; @@7e66 264
 17313  7e68 a62e                                ldx txttab+1                              ;; @@7e68 264
 17314  7e6a 8524               _local_1263_30   sta index                                ; pointer to link bytes ;; @@7e6a 264
 17315  7e6c 8625                                stx index+1                               ;; @@7e6c 264
 17316  7e6e a001                                ldy #1                                    ;; @@7e6e 264
 17317  7e70 20c122                              jsr indin1                               ; get link bytes ;; @@7e70 264
 17318  7e73 aa                                  tax                                       ;; @@7e73 264
 17319  7e74 88                                  dey                                       ;; @@7e74 264
 17320  7e75 20c122                              jsr indin1                                ;; @@7e75 264
 17321  7e78 e462                                cpx lowtr+1                              ; do link bytes point at target line? ;; @@7e78 264
 17322  7e7a d0ee                                bne _local_1263_30                        ;; @@7e7a 264
 17323  7e7c c561                                cmp lowtr                                 ;; @@7e7c 264
 17324  7e7e d0ea                                bne _local_1263_30                       ; no- use these link bytes to find next line ;; @@7e7e 264
 17325                           ;; @@7e80 264
 17326  7e80 a524                                lda index                                ; yes- copy pointer ;; @@7e80 264
 17327  7e82 a625                                ldx index+1                               ;; @@7e82 264
 17328  7e84 8561                                sta lowtr                                 ;; @@7e84 264
 17329  7e86 8662                                stx lowtr+1                               ;; @@7e86 264
 17330                          ; bra AutoScrollprint ; print the line & exit ;; @@7e88 264
 17331                           ;; @@7e88 264
 17332                          ; .page ;; @@7e88 264
 17333                          AutoScrollprint                                            ;; @@7e88 265
 17334  7e88 a002                                ldy #2                                   ; get line number to print ;; @@7e88 265
 17335  7e8a 20ad22                              jsr indlow                                ;; @@7e8a 265
 17336  7e8d aa                                  tax                                       ;; @@7e8d 265
 17337  7e8e c8                                  iny                                       ;; @@7e8e 265
 17338  7e8f 20ad22                              jsr indlow                                ;; @@7e8f 265
 17339  7e92 207733                              jsr p1line                               ; print the number & the line ;; @@7e92 265
 17340                          ; bra AutoScrolldone ;Normal exit ;; @@7e95 265
 17341                           ;; @@7e95 265
 17342                          AutoScrolldone                                             ;; @@7e95 265
 17343  7e95 207dff                              jsr _primm                               ; kill special Editor modes ;; @@7e95 265
 17344  7e98 1b1b00                              !text esc,esc,0                           ;; @@7e98 265
 17345  7e9b a67f                                ldx point                                ; restore cursor position ;; @@7e9b 265
 17346  7e9d a480                                ldy point+1                               ;; @@7e9d 265
 17347  7e9f 18                                  clc                                       ;; @@7e9f 265
 17348  7ea0 20f0ff                              jsr _plot                                 ;; @@7ea0 265
 17349  7ea3 1755                                rmb1 helper                              ; remove LINGET flag ;; @@7ea3 265
 17350  7ea5 68                                  pla                                      ; restore character ;; @@7ea5 265
 17351  7ea6 18                                  clc                                      ; return to Editor, with flag we handled character ;; @@7ea6 265
 17352  7ea7 60                                  rts                                       ;; @@7ea7 265
 17353                           ;; @@7ea8 265
 17354                          AutoSearch                                                 ;; @@7ea8 265
 17355  7ea8 a000                                ldy #0                                   ; search for any line number on screen in leftmost column ;; @@7ea8 265
 17356  7eaa 18                                  clc                                       ;; @@7eaa 265
 17357  7eab 20f0ff                              jsr _plot                                ; move to beginning of next line ;; @@7eab 265
 17358                          ; bcs AutoScrollpop ;  exit if no more lines ;; @@7eae 265
 17359  7eae b02a                                bcs _local_1264_30                       ; no more lines- fake one   [910716] ;; @@7eae 265
 17360  7eb0 38                                  sec                                       ;; @@7eb0 265
 17361  7eb1 20f0ff                              jsr _plot                                ; else check if wrapped line ;; @@7eb1 265
 17362  7eb4 b018                                bcs _local_1264_10                       ; it's wrapped- move up one line ;; @@7eb4 265
 17363  7eb6 a5e0                                lda _pnt                                  ;; @@7eb6 265
 17364  7eb8 65e6                                adc _screen_left                         ; (.c=0) ;; @@7eb8 265
 17365  7eba 853d                                sta txtptr                               ; copy screen address of logical line to txtptr ;; @@7eba 265
 17366  7ebc a5e1                                lda _pnt+1                                ;; @@7ebc 265
 17367  7ebe 6900                                adc #0                                    ;; @@7ebe 265
 17368  7ec0 853e                                sta txtptr+1                              ;; @@7ec0 265
 17369  7ec2 a000                                ldy #0                                   ; get first character on this line in window ;; @@7ec2 265
 17370  7ec4 b13d                                lda (txtptr),y                            ;; @@7ec4 265
 17371                          ; jsr indtxt  ;    (I did not want to limit search to the first column, ;; @@7ec6 265
 17372  7ec6 c93a                                cmp #'9'+1                               ; but it was way too slow searching the entire screen) ;; @@7ec6 265
 17373  7ec8 b004                                bcs _local_1264_10                       ; it's not a number ;; @@7ec8 265
 17374  7eca c930                                cmp #'0'                                  ;; @@7eca 265
 17375  7ecc b008                                bcs _local_1264_20                       ; it's a digit 0-9, continue ;; @@7ecc 265
 17376                           ;; @@7ece 265
 17377  7ece ff3f02             _local_1264_10   bbs7 form,_local_1264_15                 ; not on this line- move to next line ;; @@7ece 265
 17378  7ed1 ca                                  dex                                      ; move up one line ;; @@7ed1 265
 17379  7ed2 89                                  !text $89                                 ;; @@7ed2 265
 17380  7ed3 e8                 _local_1264_15   inx                                      ; move down one line ;; @@7ed3 265
 17381  7ed4 80d2                                bra AutoSearch                           ; loop until we find a numeric digit or run out of lines ;; @@7ed4 265
 17382                           ;; @@7ed6 265
 17383  7ed6 18                 _local_1264_20   clc                                      ; found a digit, get entire number into linnum & rts ;; @@7ed6 265
 17384  7ed7 8354b3                              +lbra linget                              ;; @@7ed7 265
 17385                           ;; @@7eda 265
 17386  7eda a9ff               _local_1264_30   lda #$ff                                 ; no line found, fake end of program   [910716] ;; @@7eda 265
 17387  7edc 8517                                sta linnum+1                              ;; @@7edc 265
 17388  7ede 60                                  rts                                       ;; @@7ede 265
 17389                           ;; @@7edf 265
 17390                          ; .ifgt *-$7f00 ;; @@7edf 265
 17391                          ; .messg ***ROM OVERFLOW: $7F00 ;; @@7edf 265
 17392                          ; .endif ;; @@7edf 265
 17393                          ;.end ;; @@7edf 265
 17394                          ; .page ;; @@7edf 265
 17395                          ; .subttl  GRAPHIC Interface ;; @@7edf 265
 17396                           ;; @@7edf 265
 17397                                           * = $af00                                ; [911001] ;; @@7edf 265
 17398                           ;; @@af00 265
 17399                          ;***************************************************************** ;; @@af00 265
 17400                          ; SCREEN DEF      define a screen ;; @@af00 265
 17401                          ; SCREEN SET  set draw, view screen ;; @@af00 265
 17402                          ; SCREEN CLR  clear a screen ;; @@af00 265
 17403                          ; SCREEN OPEN  open a screen ;; @@af00 265
 17404                          ; SCREEN CLOSE  close a screen ;; @@af00 265
 17405                          ;***************************************************************** ;; @@af00 265
 17406                           ;; @@af00 265
 17407                          Screen                                                     ;; @@af00 266
 17408  af00 c99f                                cmp #open_token                          ; else dispatch per secondary token... ;; @@af00 266
 17409  af02 f39100                              +lbeq ScreenOpen                          ;; @@af02 266
 17410  af05 c9a0                                cmp #close_token                          ;; @@af05 266
 17411  af07 f39d00                              +lbeq ScreenClose                         ;; @@af07 266
 17412  af0a c996                                cmp #def_token                            ;; @@af0a 266
 17413  af0c f058                                beq ScreenDef                             ;; @@af0c 266
 17414  af0e c99c                                cmp #clr_token                            ;; @@af0e 266
 17415  af10 f020                                beq ScreenClr                             ;; @@af10 266
 17416                           ;; @@af12 266
 17417  af12 2016b5                              jsr chkesc                               ; [910930] ;; @@af12 266
 17418                          ; cmp #esc_command_token ;; @@af15 266
 17419                          ; bne _local_1265_10 ;; @@af15 266
 17420                          ; jsr chrget  ; get past escape token ;; @@af15 266
 17421  af15 c92d                                cmp #set_token                            ;; @@af15 266
 17422  af17 f02f                                beq ScreenSet                             ;; @@af17 266
 17423  af19 832e7f             _local_1265_10   +lbra snerr                              ; report syntax error ;; @@af19 266
 17424                           ;; @@af1c 266
 17425                          ; .page ;; @@af1c 266
 17426                          CheckGraphicMode                                           ;; @@af1c 267
 17427  af1c 2c4b1f                              bit $1f4b                                ; Check draw screen allocation   [910711] ;; @@af1c 267
 17428  af1f 3001                                bmi NoGraphicArea                         ;; @@af1f 267
 17429  af21 60                                  rts                                      ; ok ;; @@af21 267
 17430                           ;; @@af22 267
 17431                           ;; @@af22 267
 17432                          NoGraphicArea                                              ;; @@af22 267
 17433  af22 a223                                ldx #errng                               ; bad- no graphic area???? ;; @@af22 267
 17434  af24 83287f                              +lbra error                               ;; @@af24 267
 17435                           ;; @@af27 267
 17436                           ;; @@af27 267
 17437                          RestoreTextScreen                                          ; [910404] ;; @@af27 267
 17438  af27 a9ff                                lda #$ff                                 ; [910930] ;; @@af27 267
 17439  af29 8d001f                              sta GKI__parm1                           ; leave drawscreen as is ;; @@af29 267
 17440  af2c 8d011f                              sta GKI__parm2                           ; set viewscreen to text ;; @@af2c 267
 17441  af2f 6c0e80                              jmp ($800e)                              ; kg65.screen ;; @@af2f 267
 17442                           ;; @@af32 267
 17443                          ; lda vic+49  ;Check graphic screen allocation ;; @@af32 267
 17444                          ; and #%00010000 ;; @@af32 267
 17445                          ; beq 99$   ; we're in text mode ;; @@af32 267
 17446                          ;; bit $1f43 ;; @@af32 267
 17447                          ;; bmi NoGraphicArea ;; @@af32 267
 17448                          ; ;; @@af32 267
 17449                          ; sei ;; @@af32 267
 17450                          ; lda #$80 ;; @@af32 267
 17451                          ; bit _mode  ;40/80 mode, 0=80 128=40 ;; @@af32 267
 17452                          ; bmi _local_1266_10 ;; @@af32 267
 17453                          ; ;; @@af32 267
 17454                          ; tsb vic+49  ; 80 ;; @@af32 267
 17455                          ; lda #1 ;; @@af32 267
 17456                          ; trb vic+22  ;  fix x-scroll register ;; @@af32 267
 17457                          ; bra 99$ ;; @@af32 267
 17458                          ; ;; @@af32 267
 17459                          ;_local_1266_10 trb vic+49  ; 40 ;; @@af32 267
 17460                          ; lda #1 ;; @@af32 267
 17461                          ; tsb vic+22  ;  fix x-scroll register ;; @@af32 267
 17462                          ; ;; @@af32 267
 17463                          ;99$ cli ;; @@af32 267
 17464                          ;; lda #0 ;; @@af32 267
 17465                          ;; sta _graphm  ;text mode???? ;; @@af32 267
 17466                          ; rts ;; @@af32 267
 17467                           ;; @@af32 267
 17468                          ; .page ;; @@af32 267
 17469                          ;***************************************************************** ;; @@af32 267
 17470                          ; SCNCLR  clear a text or graphic screen ;; @@af32 267
 17471                          ; ;; @@af32 267
 17472                          ;  Syntax : SCNCLR  [ColorReg] ;; @@af32 267
 17473                          ; ;; @@af32 267
 17474                          ; if [ColorReg] not specified, clears text screen ;; @@af32 267
 17475                          ; else clears the graphic screen with given value. ;; @@af32 267
 17476                          ;***************************************************************** ;; @@af32 267
 17477                           ;; @@af32 267
 17478                          ScreenClr                                                  ;; @@af32 267
 17479  af32 208322                              jsr chrget                               ; eat token & fall into SCNCLR ;; @@af32 267
 17480                           ;; @@af35 267
 17481                          scnclr                                                     ;; @@af35 267
 17482  af35 d005                                bne C65__screenclear                     ; have a parameter, go clear graphic screen ;; @@af35 267
 17483                           ;; @@af37 267
 17484  af37 a993                                lda #$93                                  ;; @@af37 267
 17485  af39 4cd2ff                              jmp _bsout                               ; no parameter, clear text screen ;; @@af39 267
 17486                          ; rts ;; @@af3c 267
 17487                           ;; @@af3c 267
 17488                           ;; @@af3c 267
 17489                           ;; @@af3c 267
 17490                          ;***************************************************************** ;; @@af3c 267
 17491                          ;* SCREEN CLR  clear a graphic screen ;; @@af3c 267
 17492                          ;* ;; @@af3c 267
 17493                          ;*  Syntax : SCREEN CLR  color_reg# ;; @@af3c 267
 17494                          ;* ;; @@af3c 267
 17495                          ;*           parm1 = color reg#  0-255 ;; @@af3c 267
 17496                          ;***************************************************************** ;; @@af3c 267
 17497                           ;; @@af3c 267
 17498                          C65__screenclear                                           ;; @@af3c 267
 17499  af3c 206c5d                              jsr getbyt                               ; get color register # (range 0-255)????? ;; @@af3c 267
 17500                          ;limit to range allowed by current screen def? ;; @@af3f 267
 17501  af3f 8e001f                              stx GKI__parm1                            ;; @@af3f 267
 17502  af42 201caf                              jsr CheckGraphicMode                      ;; @@af42 267
 17503  af45 6c0c80                              jmp ($800c)                              ; bra screenclear ;; @@af45 267
 17504                           ;; @@af48 267
 17505                          ; .page ;; @@af48 267
 17506                          ;***************************************************************** ;; @@af48 267
 17507                          ;* SCREEN SET  specify draw & view screens ;; @@af48 267
 17508                          ;* ;; @@af48 267
 17509                          ;*  Syntax : SCREEN SET  [DrawScreen] [,ViewScreen] ;; @@af48 267
 17510                          ;* ;; @@af48 267
 17511                          ;*           parm1 = draw screen # 0-3, 255=don't change    [910711] ;; @@af48 267
 17512                          ;*           parm2 = view screen # 0-3, 255=text ;; @@af48 267
 17513                          ;***************************************************************** ;; @@af48 267
 17514                           ;; @@af48 267
 17515                          ScreenSet                                                  ;; @@af48 267
 17516  af48 208322                              jsr chrget                               ; advance past token ;; @@af48 267
 17517                           ;; @@af4b 267
 17518                          C65__screen                                                ;; @@af4b 267
 17519                          ; beq snerr  ;missing args??      [911017] ;; @@af4b 267
 17520  af4b a2ff                                ldx #255                                 ; [911028] ;; @@af4b 267
 17521  af4d c92c                                cmp #','                                  ;; @@af4d 267
 17522  af4f f003                                beq _local_1266_10                       ; options byte only ;; @@af4f 267
 17523                           ;; @@af51 267
 17524  af51 206c5d                              jsr getbyt                               ; get draw screen# in .x ;; @@af51 267
 17525                          ; cpx #4   ;       [910711] ;; @@af54 267
 17526                          ; bcs 20$   ;  out of range error???? (255=leave alone)  [910930] ;; @@af54 267
 17527  af54 8e001f             _local_1266_10   stx GKI__parm1                            ;; @@af54 267
 17528                           ;; @@af57 267
 17529  af57 ae691f                              ldx $1f69                                ; current viewscreen     [911017] ;; @@af57 267
 17530  af5a 202679                              jsr optbyt                               ; eat a comma, get view screen# in .x ;; @@af5a 267
 17531                          ; cpx #4   ; ;; @@af5d 267
 17532                          ;20$ bcs fcerr  ;  out of range error???? (255=text)   [910930] ;; @@af5d 267
 17533  af5d 8e011f                              stx GKI__parm2                            ;; @@af5d 267
 17534                           ;; @@af60 267
 17535  af60 220e80                              jsr ($800e)                              ; kg65.screen ;; @@af60 267
 17536  af63 b0bd                                bcs NoGraphicArea                         ;; @@af63 267
 17537  af65 60                                  rts                                       ;; @@af65 267
 17538                           ;; @@af66 267
 17539                          ; .page ;; @@af66 267
 17540                          ;***************************************************************** ;; @@af66 267
 17541                          ;* SCREEN DEF  define a graphic screen ;; @@af66 267
 17542                          ;* ;; @@af66 267
 17543                          ;*  Syntax : SCREEN DEF  screen#, width, height, depth ;; @@af66 267
 17544                          ;* ;; @@af66 267
 17545                          ;*           parm1 = screen#           0-3    [910711] ;; @@af66 267
 17546                          ;*           parm2 = width             0=320, 1=640, 2=1280 ;; @@af66 267
 17547                          ;*           parm3 = height            0=200, 1=400 ;; @@af66 267
 17548                          ;*           parm4 = depth             1-8 bitplanes (2-256 colors) ;; @@af66 267
 17549                          ;***************************************************************** ;; @@af66 267
 17550                           ;; @@af66 267
 17551                          ScreenDef                                                  ;; @@af66 268
 17552  af66 208322                              jsr chrget                               ; advance past token ;; @@af66 268
 17553                           ;; @@af69 268
 17554                          C65__screendef                                             ;; @@af69 268
 17555  af69 206c5d                              jsr getbyt                               ; get screen number ;; @@af69 268
 17556  af6c e004                                cpx #4                                   ; range 0-3   [910711] ;; @@af6c 268
 17557  af6e b01d                                bcs _local_1267_10                        ;; @@af6e 268
 17558  af70 8e001f                              stx GKI__parm1                           ; screen# ;; @@af70 268
 17559                           ;; @@af73 268
 17560  af73 20825d                              jsr combyt                               ; get width ;; @@af73 268
 17561  af76 e003                                cpx #3                                   ; range 0-2 ???? 1280 mode ???? ;; @@af76 268
 17562  af78 b013                                bcs _local_1267_10                        ;; @@af78 268
 17563  af7a 8e011f                              stx GKI__parm2                           ; width ;; @@af7a 268
 17564                           ;; @@af7d 268
 17565  af7d 20825d                              jsr combyt                               ; get height ;; @@af7d 268
 17566  af80 e002                                cpx #2                                   ; range 0-1 ;; @@af80 268
 17567  af82 b009                                bcs _local_1267_10                        ;; @@af82 268
 17568  af84 8e021f                              stx GKI__parm3                           ; height ;; @@af84 268
 17569                           ;; @@af87 268
 17570  af87 20825d                              jsr combyt                               ; get depth (# bitplanes) ;; @@af87 268
 17571  af8a ca                                  dex                                      ; convert 1-8 to 0-7 ;; @@af8a 268
 17572  af8b e008                                cpx #8                                   ; range 0-7 ;; @@af8b 268
 17573  af8d b36ea2             _local_1267_10   +lbcs fcerr                              ; illegal quantity error ;; @@af8d 268
 17574  af90 8e031f                              stx GKI__parm4                           ; depth ;; @@af90 268
 17575                           ;; @@af93 268
 17576  af93 6c0680                              jmp ($8006)                              ; bra screendef ;; @@af93 268
 17577                           ;; @@af96 268
 17578                          ; .page ;; @@af96 268
 17579                          ;***************************************************************** ;; @@af96 268
 17580                          ;* SCREEN OPEN  open a graphic screen for viewing or drawing ;; @@af96 268
 17581                          ;* ;; @@af96 268
 17582                          ;*  Syntax : SCREEN OPEN screen# ;; @@af96 268
 17583                          ;* ;; @@af96 268
 17584                          ;*           parm1 = screen#      0-3    [910711] ;; @@af96 268
 17585                          ;***************************************************************** ;; @@af96 268
 17586                           ;; @@af96 268
 17587                           ;; @@af96 268
 17588                          ScreenOpen                                                 ;; @@af96 269
 17589  af96 208322                              jsr chrget                               ; advance past Open token ;; @@af96 269
 17590                           ;; @@af99 269
 17591                          C65__screenopen                                            ;; @@af99 269
 17592  af99 206c5d                              jsr getbyt                               ; get screen# in .x ;; @@af99 269
 17593  af9c e004                                cpx #4                                   ; range 0-3   [910711] ;; @@af9c 269
 17594  af9e b35da2                              +lbcs fcerr                              ; branch if out of range ;; @@af9e 269
 17595                           ;; @@afa1 269
 17596  afa1 8e001f                              stx GKI__parm1                            ;; @@afa1 269
 17597  afa4 6c0880                              jmp ($8008)                              ; screenopen    [910826] ;; @@afa4 269
 17598                           ;; @@afa7 269
 17599                          ; bcs NoGraphicArea ; bad ???? let user catch via RGRAPHIC ;; @@afa7 269
 17600                          ; rts ;; @@afa7 269
 17601                           ;; @@afa7 269
 17602                          ; .page ;; @@afa7 269
 17603                          ;***************************************************************** ;; @@afa7 269
 17604                          ;* SCREEN CLOSE  close a graphic screen ;; @@afa7 269
 17605                          ;* ;; @@afa7 269
 17606                          ;*  Syntax : SCREEN CLOSE screen# ;; @@afa7 269
 17607                          ;* ;; @@afa7 269
 17608                          ;*           parm1 = screen#  0-3    [910711] ;; @@afa7 269
 17609                          ;***************************************************************** ;; @@afa7 269
 17610                           ;; @@afa7 269
 17611                           ;; @@afa7 269
 17612                          ScreenClose                                                ;; @@afa7 269
 17613  afa7 208322                              jsr chrget                               ; advance past Close token ;; @@afa7 269
 17614                           ;; @@afaa 269
 17615                          C65__screenclose                                           ;; @@afaa 269
 17616  afaa 206c5d                              jsr getbyt                               ; get screen# ;; @@afaa 269
 17617  afad e004                                cpx #4                                   ; range 0-3   [910711] ;; @@afad 269
 17618  afaf b34ca2                              +lbcs fcerr                              ; branch if out of range ;; @@afaf 269
 17619  afb2 8e001f                              stx GKI__parm1                            ;; @@afb2 269
 17620                           ;; @@afb5 269
 17621  afb5 6c0a80                              jmp ($800a)                              ; bra screenclose ;; @@afb5 269
 17622                           ;; @@afb8 269
 17623                          ; .page ;; @@afb8 269
 17624                          ;***************************************************************** ;; @@afb8 269
 17625                          ;* PEN ;; @@afb8 269
 17626                          ;* ;; @@afb8 269
 17627                          ;*  Syntax : PEN  Pen#, ColorReg ;; @@afb8 269
 17628                          ;* ;; @@afb8 269
 17629                          ;*           parm1 = pen#  0-2 ;; @@afb8 269
 17630                          ;*           parm2 = color reg#  0-255 ;; @@afb8 269
 17631                          ;***************************************************************** ;; @@afb8 269
 17632                           ;; @@afb8 269
 17633                          C65__setpen                                                ;; @@afb8 269
 17634  afb8 206c5d                              jsr getbyt                               ; get pen# ;; @@afb8 269
 17635  afbb e003                                cpx #3                                   ; range 0-2 ;; @@afbb 269
 17636  afbd b33ea2                              +lbcs fcerr                              ; branch if out of range ;; @@afbd 269
 17637  afc0 8e001f                              stx GKI__parm1                            ;; @@afc0 269
 17638                           ;; @@afc3 269
 17639  afc3 20825d                              jsr combyt                               ; get color reg# ;; @@afc3 269
 17640                          ;???? error check for max color allowed ;; @@afc6 269
 17641                          ; for the current screen. ;; @@afc6 269
 17642  afc6 8e011f                              stx GKI__parm2                            ;; @@afc6 269
 17643                           ;; @@afc9 269
 17644  afc9 6c1080                              jmp ($8010)                              ; bra setpen ;; @@afc9 269
 17645                           ;; @@afcc 269
 17646                          ; .page ;; @@afcc 269
 17647                          ;***************************************************************** ;; @@afcc 269
 17648                          ;* DMODE   Set Draw Mode ;; @@afcc 269
 17649                          ;* ;; @@afcc 269
 17650                          ;*  Syntax : DMODE  jam, complement, stencil, style, thickness ;; @@afcc 269
 17651                          ;* ;; @@afcc 269
 17652                          ;*         parm1 = jam           0-1 ;; @@afcc 269
 17653                          ;*         parm2 = complement (XOR) 0-1 ;; @@afcc 269
 17654                          ;*         parm3 = stencil       0-1  <<< not implemented  [911003] ;; @@afcc 269
 17655                          ;*         parm4 = style         0-3  <<< only 0-1 implemented [911003] ;; @@afcc 269
 17656                          ;*         parm5 = thickness     1-8  <<< not implemented  [911003] ;; @@afcc 269
 17657                          ;******************************************************************* ;; @@afcc 269
 17658                           ;; @@afcc 269
 17659                          C65__setdmode                                              ;; @@afcc 269
 17660  afcc 206c5d                              jsr getbyt                               ; jam mode ;; @@afcc 269
 17661  afcf e002                                cpx #2                                    ;; @@afcf 269
 17662  afd1 b026                                bcs _local_1268_10                        ;; @@afd1 269
 17663  afd3 8e001f                              stx GKI__parm1                            ;; @@afd3 269
 17664                           ;; @@afd6 269
 17665  afd6 20825d                              jsr combyt                               ; complement (xor) mode ;; @@afd6 269
 17666  afd9 e002                                cpx #2                                   ; (ignores jam mode if set) ;; @@afd9 269
 17667  afdb b01c                                bcs _local_1268_10                        ;; @@afdb 269
 17668  afdd 8e011f                              stx GKI__parm2                            ;; @@afdd 269
 17669                           ;; @@afe0 269
 17670  afe0 20825d                              jsr combyt                               ; stencil mode (not implemented) ;; @@afe0 269
 17671  afe3 e002                                cpx #2                                    ;; @@afe3 269
 17672  afe5 b012                                bcs _local_1268_10                        ;; @@afe5 269
 17673  afe7 8e021f                              stx GKI__parm3                            ;; @@afe7 269
 17674                           ;; @@afea 269
 17675  afea 20825d                              jsr combyt                               ; style mode ;; @@afea 269
 17676  afed e004                                cpx #4                                   ; 0=solid, 1=pattern, 2=tile (not implemented), 3=reserved ;; @@afed 269
 17677  afef b008                                bcs _local_1268_10                        ;; @@afef 269
 17678  aff1 8e031f                              stx GKI__parm4                            ;; @@aff1 269
 17679                           ;; @@aff4 269
 17680  aff4 20825d                              jsr combyt                               ; thickness mode (not implemented) ;; @@aff4 269
 17681                          ; dex   ; adjust to 0-7     [911003] ;; @@aff7 269
 17682  aff7 e009                                cpx #8+1                                  ;; @@aff7 269
 17683  aff9 b302a2             _local_1268_10   +lbcs fcerr                              ; illegal quantity error ;; @@aff9 269
 17684  affc 8e041f                              stx GKI__parm5                            ;; @@affc 269
 17685                           ;; @@afff 269
 17686  afff 6c1480                              jmp ($8014)                              ; bra setdmode ;; @@afff 269
 17687                           ;; @@b002 269
 17688                          ; .page ;; @@b002 269
 17689                          ;***************************************************************** ;; @@b002 269
 17690                          ;* DPAT   set draw pattern ;; @@b002 269
 17691                          ;* ;; @@b002 269
 17692                          ;*  Syntax : DPAT  type [, # bytes, byte1, byte2, byte3, byte4] ;; @@b002 269
 17693                          ;* ;; @@b002 269
 17694                          ;*           parm1 = type        0-63  <<< only 0-4 implemented [911003] ;; @@b002 269
 17695                          ;*           parm2 = # bytes     1-4 ;; @@b002 269
 17696                          ;*           parm3 = byte1       0-255 ;; @@b002 269
 17697                          ;*           parm4 = byte2       0-255 ;; @@b002 269
 17698                          ;*           parm5 = byte3       0-255 ;; @@b002 269
 17699                          ;*           parm6 = byte4       0-255 ;; @@b002 269
 17700                          ;***************************************************************** ;; @@b002 269
 17701                           ;; @@b002 269
 17702                          C65__setdpat                                               ;; @@b002 270
 17703  b002 206c5d                              jsr getbyt                               ; get pattern type ;; @@b002 270
 17704  b005 e005                                cpx #4+1                                 ; 63+1       [911028] ;; @@b005 270
 17705  b007 b3f4a1             _local_1269_10   +lbcs fcerr                              ; if out of range ;; @@b007 270
 17706  b00a 8e001f                              stx GKI__parm1                            ;; @@b00a 270
 17707  b00d 8a                                  txa                                       ;; @@b00d 270
 17708  b00e d033                                bne _local_1269_20                       ; if parm1 is 0 then get extra stuff ;; @@b00e 270
 17709                           ;; @@b010 270
 17710  b010 20825d                              jsr combyt                               ; get number of bytes ;; @@b010 270
 17711  b013 e005                                cpx #5                                    ;; @@b013 270
 17712  b015 b0f0                                bcs _local_1269_10                       ; too many bytes ;; @@b015 270
 17713  b017 8e011f                              stx GKI__parm2                            ;; @@b017 270
 17714  b01a 8676                                stx z_p_temp_1                           ; save for count ;; @@b01a 270
 17715                           ;; @@b01c 270
 17716  b01c 20825d                              jsr combyt                               ; get byte 1 ;; @@b01c 270
 17717  b01f 8e021f                              stx GKI__parm3                            ;; @@b01f 270
 17718  b022 c676                                dec z_p_temp_1                            ;; @@b022 270
 17719  b024 f01d                                beq _local_1269_20                        ;; @@b024 270
 17720  b026 33d5a1                              +lbmi fcerr                              ; too few bytes ;; @@b026 270
 17721                           ;; @@b029 270
 17722  b029 20825d                              jsr combyt                               ; get byte 2 ;; @@b029 270
 17723  b02c 8e031f                              stx GKI__parm4                            ;; @@b02c 270
 17724  b02f c676                                dec z_p_temp_1                            ;; @@b02f 270
 17725  b031 f010                                beq _local_1269_20                        ;; @@b031 270
 17726                           ;; @@b033 270
 17727  b033 20825d                              jsr combyt                               ; get byte 3 ;; @@b033 270
 17728  b036 8e041f                              stx GKI__parm5                            ;; @@b036 270
 17729  b039 c676                                dec z_p_temp_1                            ;; @@b039 270
 17730  b03b f006                                beq _local_1269_20                        ;; @@b03b 270
 17731                           ;; @@b03d 270
 17732  b03d 20825d                              jsr combyt                               ; get byte 4 ;; @@b03d 270
 17733  b040 8e051f                              stx GKI__parm6                            ;; @@b040 270
 17734                           ;; @@b043 270
 17735  b043 6c1680             _local_1269_20   jmp ($8016)                              ; bra setdpat ;; @@b043 270
 17736                           ;; @@b046 270
 17737                          ; .page ;; @@b046 270
 17738                          ;***************************************************************** ;; @@b046 270
 17739                          ;* PALETTE   set palette colors ;; @@b046 270
 17740                          ;* ;; @@b046 270
 17741                          ;*  Syntax : PALETTE {screen|COLOR}, color_index, red, green, blue ;; @@b046 270
 17742                          ;*           PALETTE RESTORE ;; @@b046 270
 17743                          ;* ;; @@b046 270
 17744                          ;*           parm1 = screen  0-3     [910711] ;; @@b046 270
 17745                          ;*           parm2 = color_index 0-255 ;; @@b046 270
 17746                          ;*           parm3 = red           0-31 (b0-3 red, b4=fgbg)  [910520] ;; @@b046 270
 17747                          ;*           parm4 = green         0-15 ;; @@b046 270
 17748                          ;*           parm5 = blue          0-15 ;; @@b046 270
 17749                          ;***************************************************************** ;; @@b046 270
 17750                           ;; @@b046 270
 17751                          C65__setpalette                                            ;; @@b046 271
 17752  b046 c98c                                cmp #restore_token                       ; restore palette? ;; @@b046 271
 17753  b048 d006                                bne _local_1270_10                       ; no ;; @@b048 271
 17754  b04a 208322                              jsr chrget                               ; yes- advance past Restore token ;; @@b04a 271
 17755  b04d 4c27e0                              jmp _palette_init                         ;; @@b04d 271
 17756                           ;; @@b050 271
 17757  b050 c9e7               _local_1270_10   cmp #color_token                         ; set physical color register? ;; @@b050 271
 17758  b052 d00b                                bne _local_1270_20                       ; no- set logical color register ;; @@b052 271
 17759  b054 8d001f                              sta GKI__parm1                            ;; @@b054 271
 17760  b057 208322                              jsr chrget                               ; yes- advance past Color token ;; @@b057 271
 17761  b05a 206c5d                              jsr getbyt                                ;; @@b05a 271
 17762  b05d 800e                                bra _local_1270_30                        ;; @@b05d 271
 17763                           ;; @@b05f 271
 17764  b05f 206c5d             _local_1270_20   jsr getbyt                               ; get screen# ;; @@b05f 271
 17765  b062 e004                                cpx #4                                   ; [910711] ;; @@b062 271
 17766  b064 b397a1                              +lbcs fcerr                               ;; @@b064 271
 17767  b067 8e001f                              stx GKI__parm1                            ;; @@b067 271
 17768                           ;; @@b06a 271
 17769  b06a 20825d                              jsr combyt                               ; get color reg # ;; @@b06a 271
 17770  b06d 8e011f             _local_1270_30   stx GKI__parm2                           ; (GKI will check for out of range????) ;; @@b06d 271
 17771                           ;; @@b070 271
 17772                          set_palette                                                ;; @@b070 272
 17773  b070 20825d                              jsr combyt                               ; get red & fgbg ;; @@b070 272
 17774  b073 e020                                cpx #32                                  ; [910520] ;; @@b073 272
 17775  b075 b386a1                              +lbcs fcerr                               ;; @@b075 272
 17776  b078 8e021f                              stx GKI__parm3                            ;; @@b078 272
 17777                           ;; @@b07b 272
 17778  b07b 200ab5                              jsr getcomnyb                            ; get green ;; @@b07b 272
 17779                          ; cpx #16 ;; @@b07e 272
 17780                          ; bcs 10$ ;; @@b07e 272
 17781  b07e 8e031f                              stx GKI__parm4                            ;; @@b07e 272
 17782                           ;; @@b081 272
 17783  b081 200ab5                              jsr getcomnyb                            ; get blue ;; @@b081 272
 17784                          ; cpx #16 ;; @@b084 272
 17785                          ; bcs fcerr  ; illegal quantity error ;; @@b084 272
 17786  b084 8e041f                              stx GKI__parm5                            ;; @@b084 272
 17787                           ;; @@b087 272
 17788  b087 ad001f                              lda GKI__parm1                           ; logical or physical color register? ;; @@b087 272
 17789  b08a 1017                                bpl _local_1271_40                       ; logical ;; @@b08a 272
 17790  b08c ae011f                              ldx GKI__parm2                            ;; @@b08c 272
 17791  b08f ad021f                              lda GKI__parm3                           ; physical ;; @@b08f 272
 17792  b092 9d00d1                              sta _red,x                                ;; @@b092 272
 17793  b095 ad031f                              lda GKI__parm4                            ;; @@b095 272
 17794  b098 9d00d2                              sta _green,x                              ;; @@b098 272
 17795  b09b ad041f                              lda GKI__parm5                            ;; @@b09b 272
 17796  b09e 9d00d3                              sta _blue,x                               ;; @@b09e 272
 17797  b0a1 8006                                bra _local_1271_50                        ;; @@b0a1 272
 17798                           ;; @@b0a3 272
 17799  b0a3 221280             _local_1271_40   jsr ($8012)                              ; go set screen palette ;; @@b0a3 272
 17800  b0a6 b379fe                              +lbcs NoGraphicArea                      ; illegal screen# or color#  [910917] ;; @@b0a6 272
 17801                           ;; @@b0a9 272
 17802  b0a9 202679             _local_1271_50   jsr optbyt                               ; get another color reg # ? ;; @@b0a9 272
 17803  b0ac 8e011f                              stx GKI__parm2                            ;; @@b0ac 272
 17804  b0af b0bf                                bcs set_palette                          ; yes- loop ;; @@b0af 272
 17805  b0b1 60                                  rts                                       ;; @@b0b1 272
 17806                           ;; @@b0b2 272
 17807                          ; .page ;; @@b0b2 272
 17808                          ;***************************************************************** ;; @@b0b2 272
 17809                          ;* LINE  draw a dot, a line or a stick shape ;; @@b0b2 272
 17810                          ;* ;; @@b0b2 272
 17811                          ;*  Syntax : LINE  x0, y0 [,[x1] [,y1]]... ;; @@b0b2 272
 17812                          ;* ;; @@b0b2 272
 17813                          ;* parm1,2 = x0 (lo/hi) ;; @@b0b2 272
 17814                          ;* parm3,4 = y0 ;; @@b0b2 272
 17815                          ;* parm5,6 = x1 (x1,y1)=(x0,y0) if not specified ;; @@b0b2 272
 17816                          ;* parm7,8 = y1 ;; @@b0b2 272
 17817                          ;***************************************************************** ;; @@b0b2 272
 17818                           ;; @@b0b2 272
 17819                          C65__line                                                  ;; @@b0b2 273
 17820  b0b2 c984                                cmp #input_token                         ; special check for 'line input#'  [910103] ;; @@b0b2 273
 17821  b0b4 f3e587                              +lbeq linputn                            ; yes ;; @@b0b4 273
 17822  b0b7 c985                                cmp #input_token+1                       ; special check for 'line input' ;; @@b0b7 273
 17823  b0b9 f3fe87                              +lbeq linput                             ; yes ;; @@b0b9 273
 17824                           ;; @@b0bc 273
 17825  b0bc 201caf                              jsr CheckGraphicMode                      ;; @@b0bc 273
 17826  b0bf 20e5b7                              jsr sadwrd                               ; get x0 ;; @@b0bf 273
 17827  b0c2 8c001f                              sty GKI__parm1                            ;; @@b0c2 273
 17828  b0c5 8d011f                              sta GKI__parm2                            ;; @@b0c5 273
 17829  b0c8 8c041f                              sty GKI__parm5                           ; [910228] ;; @@b0c8 273
 17830  b0cb 8d051f                              sta GKI__parm6                            ;; @@b0cb 273
 17831                           ;; @@b0ce 273
 17832  b0ce 200879                              jsr comsad                               ; get y0 ;; @@b0ce 273
 17833  b0d1 8c021f                              sty GKI__parm3                            ;; @@b0d1 273
 17834  b0d4 8d031f                              sta GKI__parm4                            ;; @@b0d4 273
 17835  b0d7 8c061f                              sty GKI__parm7                           ; [910228] ;; @@b0d7 273
 17836  b0da 8d071f                              sta GKI__parm8                            ;; @@b0da 273
 17837                           ;; @@b0dd 273
 17838  b0dd 200e79                              jsr optsad                               ; get x1     [910228] ;; @@b0dd 273
 17839  b0e0 9006                                bcc _local_1272_10                       ; use x0 ;; @@b0e0 273
 17840  b0e2 8c041f             _local_1272_1    sty GKI__parm5                            ;; @@b0e2 273
 17841  b0e5 8d051f                              sta GKI__parm6                            ;; @@b0e5 273
 17842                           ;; @@b0e8 273
 17843  b0e8 200e79             _local_1272_10   jsr optsad                               ; get y1     [910228] ;; @@b0e8 273
 17844  b0eb 9006                                bcc _local_1272_20                       ; use y0 ;; @@b0eb 273
 17845  b0ed 8c061f                              sty GKI__parm7                            ;; @@b0ed 273
 17846  b0f0 8d071f                              sta GKI__parm8                            ;; @@b0f0 273
 17847                           ;; @@b0f3 273
 17848  b0f3 221880             _local_1272_20   jsr ($8018)                              ; draw a line from x0,y0 to x1,y1 ;; @@b0f3 273
 17849                           ;; @@b0f6 273
 17850  b0f6 a203                                ldx #3                                    ;; @@b0f6 273
 17851  b0f8 bd041f             _local_1272_30   lda GKI__parm5,x                         ; copy x1,y1 to x0,y0 ;; @@b0f8 273
 17852  b0fb 9d001f                              sta GKI__parm1,x                          ;; @@b0fb 273
 17853  b0fe ca                                  dex                                       ;; @@b0fe 273
 17854  b0ff 10f7                                bpl _local_1272_30                        ;; @@b0ff 273
 17855                           ;; @@b101 273
 17856  b101 200e79                              jsr optsad                               ; more? ;; @@b101 273
 17857  b104 b0dc                                bcs _local_1272_1                        ; yes, continue ;; @@b104 273
 17858  b106 60                                  rts                                       ;; @@b106 273
 17859                           ;; @@b107 273
 17860                          ; .page ;; @@b107 273
 17861                          ;***************************************************************** ;; @@b107 273
 17862                          ;* BOX   draw a 4-sided figure ;; @@b107 273
 17863                          ;* ;; @@b107 273
 17864                          ;*  Syntax :  BOX x0,y0, x1,y1, x2,y2, x3,y3 [,solid flag] ;; @@b107 273
 17865                          ;* ;; @@b107 273
 17866                          ;* parm1,2   = x0  (lo/hi) ;; @@b107 273
 17867                          ;* parm3,4   = y0 ;; @@b107 273
 17868                          ;* parm5,6   = x1 ;; @@b107 273
 17869                          ;* parm7,8   = y1 ;; @@b107 273
 17870                          ;* parm9,10  = x2 ;; @@b107 273
 17871                          ;* parm11,12 = y2 ;; @@b107 273
 17872                          ;* parm13,14 = x3 ;; @@b107 273
 17873                          ;* parm15,16 = y3 ;; @@b107 273
 17874                          ;* parm17    = solid flag ;; @@b107 273
 17875                          ;***************************************************************** ;; @@b107 273
 17876                           ;; @@b107 273
 17877                          C65__box                                                   ;; @@b107 274
 17878  b107 201caf                              jsr CheckGraphicMode                      ;; @@b107 274
 17879  b10a 20e5b7                              jsr sadwrd                               ; get x0 ;; @@b10a 274
 17880  b10d 8c001f                              sty GKI__parm1                            ;; @@b10d 274
 17881  b110 8d011f                              sta GKI__parm2                            ;; @@b110 274
 17882                           ;; @@b113 274
 17883  b113 200879                              jsr comsad                               ; get y0 ;; @@b113 274
 17884  b116 8c021f                              sty GKI__parm3                            ;; @@b116 274
 17885  b119 8d031f                              sta GKI__parm4                            ;; @@b119 274
 17886                           ;; @@b11c 274
 17887  b11c 200879                              jsr comsad                               ; get x1 ;; @@b11c 274
 17888  b11f 8c041f                              sty GKI__parm5                            ;; @@b11f 274
 17889  b122 8d051f                              sta GKI__parm6                            ;; @@b122 274
 17890                           ;; @@b125 274
 17891  b125 200879                              jsr comsad                               ; get y1 ;; @@b125 274
 17892  b128 8c061f                              sty GKI__parm7                            ;; @@b128 274
 17893  b12b 8d071f                              sta GKI__parm8                            ;; @@b12b 274
 17894                           ;; @@b12e 274
 17895  b12e 200879                              jsr comsad                               ; get x2 ;; @@b12e 274
 17896  b131 8c081f                              sty GKI__parm9                            ;; @@b131 274
 17897  b134 8d091f                              sta GKI__parm10                           ;; @@b134 274
 17898                           ;; @@b137 274
 17899  b137 200879                              jsr comsad                               ; get y2 ;; @@b137 274
 17900  b13a 8c0a1f                              sty GKI__parm11                           ;; @@b13a 274
 17901  b13d 8d0b1f                              sta GKI__parm12                           ;; @@b13d 274
 17902                           ;; @@b140 274
 17903  b140 200879                              jsr comsad                               ; get x3 ;; @@b140 274
 17904  b143 8c0c1f                              sty GKI__parm13                           ;; @@b143 274
 17905  b146 8d0d1f                              sta GKI__parm14                           ;; @@b146 274
 17906                           ;; @@b149 274
 17907  b149 200879                              jsr comsad                               ; get y3 ;; @@b149 274
 17908  b14c 8c0e1f                              sty GKI__parm15                           ;; @@b14c 274
 17909  b14f 8d0f1f                              sta GKI__parm16                           ;; @@b14f 274
 17910                           ;; @@b152 274
 17911  b152 202479                              jsr optzer                               ; get solid flag ;; @@b152 274
 17912  b155 8e101f                              stx GKI__parm17                           ;; @@b155 274
 17913                           ;; @@b158 274
 17914  b158 6c1a80                              jmp ($801a)                              ; bra box ;; @@b158 274
 17915                           ;; @@b15b 274
 17916                          ; .page ;; @@b15b 274
 17917                          ;***************************************************************** ;; @@b15b 274
 17918                          ;* CIRCLE   draw a Circle ;; @@b15b 274
 17919                          ;* ;; @@b15b 274
 17920                          ;*  Syntax : CIRCLE  CenterX, CenterY, radius [,solid flag] ;; @@b15b 274
 17921                          ;* ;; @@b15b 274
 17922                          ;*         parm1 = center x lo ;; @@b15b 274
 17923                          ;*         parm2 = center x hi ;; @@b15b 274
 17924                          ;*         parm3 = center y lo ;; @@b15b 274
 17925                          ;*         parm4 = center y hi ;; @@b15b 274
 17926                          ;*         parm5 = radius lo ;; @@b15b 274
 17927                          ;*         parm6 = radius hi ;; @@b15b 274
 17928                          ;*         parm7 = solid flag 0=no, 1=yes ;; @@b15b 274
 17929                          ;***************************************************************** ;; @@b15b 274
 17930                           ;; @@b15b 274
 17931                          C65__circle                                                ;; @@b15b 274
 17932  b15b 201caf                              jsr CheckGraphicMode                      ;; @@b15b 274
 17933  b15e 20e5b7                              jsr sadwrd                               ; get center x ;; @@b15e 274
 17934  b161 8c001f                              sty GKI__parm1                            ;; @@b161 274
 17935  b164 8d011f                              sta GKI__parm2                            ;; @@b164 274
 17936                           ;; @@b167 274
 17937  b167 200879                              jsr comsad                               ; get center y ;; @@b167 274
 17938  b16a 8c021f                              sty GKI__parm3                            ;; @@b16a 274
 17939  b16d 8d031f                              sta GKI__parm4                            ;; @@b16d 274
 17940                           ;; @@b170 274
 17941  b170 200879                              jsr comsad                               ; get radius ;; @@b170 274
 17942  b173 8c041f                              sty GKI__parm5                            ;; @@b173 274
 17943  b176 8d051f                              sta GKI__parm6                            ;; @@b176 274
 17944                           ;; @@b179 274
 17945  b179 202479                              jsr optzer                               ; get solid flag ;; @@b179 274
 17946  b17c e002                                cpx #2                                    ;; @@b17c 274
 17947  b17e b37da0                              +lbcs fcerr                               ;; @@b17e 274
 17948  b181 8e061f                              stx GKI__parm7                            ;; @@b181 274
 17949                           ;; @@b184 274
 17950  b184 6c1c80                              jmp ($801c)                              ; bra circle ;; @@b184 274
 17951                           ;; @@b187 274
 17952                          ; .page ;; @@b187 274
 17953                          ; .subttl  ELLIPSE ;; @@b187 274
 17954                           ;; @@b187 274
 17955                          ;***************************************************************** ;; @@b187 274
 17956                          ;* ELLIPSE   draw an Ellipse ;; @@b187 274
 17957                          ;* ;; @@b187 274
 17958                          ;*  Syntax : ELLIPSE  CenterX, CenterY, RadiusX,  RadiusY  [,solid flag] ;; @@b187 274
 17959                          ;* ;; @@b187 274
 17960                          ;*         parm1 = center x lo ;; @@b187 274
 17961                          ;*         parm2 = center x hi ;; @@b187 274
 17962                          ;*         parm3 = center y lo ;; @@b187 274
 17963                          ;*         parm4 = center y hi ;; @@b187 274
 17964                          ;*         parm5 = x radius lo ;; @@b187 274
 17965                          ;*         parm6 = x radius hi ;; @@b187 274
 17966                          ;*         parm7 = y radius lo ;; @@b187 274
 17967                          ;*         parm8 = y radius hi ;; @@b187 274
 17968                          ;*         parm9 = solid flag 0-1 ;; @@b187 274
 17969                          ;***************************************************************** ;; @@b187 274
 17970                           ;; @@b187 274
 17971                          C65__ellipse                                               ;; @@b187 274
 17972  b187 201caf                              jsr CheckGraphicMode                      ;; @@b187 274
 17973  b18a 20e5b7                              jsr sadwrd                               ; get center x ;; @@b18a 274
 17974  b18d 8c001f                              sty GKI__parm1                            ;; @@b18d 274
 17975  b190 8d011f                              sta GKI__parm2                            ;; @@b190 274
 17976                           ;; @@b193 274
 17977  b193 200879                              jsr comsad                               ; get center y ;; @@b193 274
 17978  b196 8c021f                              sty GKI__parm3                            ;; @@b196 274
 17979  b199 8d031f                              sta GKI__parm4                            ;; @@b199 274
 17980                           ;; @@b19c 274
 17981  b19c 200879                              jsr comsad                               ; get xradius ;; @@b19c 274
 17982  b19f 8c041f                              sty GKI__parm5                            ;; @@b19f 274
 17983  b1a2 8d051f                              sta GKI__parm6                            ;; @@b1a2 274
 17984                           ;; @@b1a5 274
 17985  b1a5 200879                              jsr comsad                               ; get yradius ;; @@b1a5 274
 17986  b1a8 8c061f                              sty GKI__parm7                            ;; @@b1a8 274
 17987  b1ab 8d071f                              sta GKI__parm8                            ;; @@b1ab 274
 17988                           ;; @@b1ae 274
 17989  b1ae 202479                              jsr optzer                               ; get solid flag ;; @@b1ae 274
 17990  b1b1 e002                                cpx #2                                    ;; @@b1b1 274
 17991  b1b3 b348a0                              +lbcs fcerr                               ;; @@b1b3 274
 17992  b1b6 8e081f                              stx GKI__parm9                            ;; @@b1b6 274
 17993                           ;; @@b1b9 274
 17994  b1b9 6c2080                              jmp ($8020)                              ; bra ellipse ;; @@b1b9 274
 17995                           ;; @@b1bc 274
 17996                          ; .page ;; @@b1bc 274
 17997                          ; .subttl  POLYGON ;; @@b1bc 274
 17998                           ;; @@b1bc 274
 17999                          ;***************************************************************** ;; @@b1bc 274
 18000                          ;* POLYGON   draw a regular n-sided Polygon ;; @@b1bc 274
 18001                          ;* ;; @@b1bc 274
 18002                          ;*  POLYGON  X,Y, Xradius, Yradius, sides [,drawsides [,subtend [,angle [,solid] ]]] ;; @@b1bc 274
 18003                          ;* ;; @@b1bc 274
 18004                          ;*         parm1 = center x lo ;; @@b1bc 274
 18005                          ;*         parm2 = center x hi ;; @@b1bc 274
 18006                          ;*         parm3 = center y lo ;; @@b1bc 274
 18007                          ;*         parm4 = center y hi ;; @@b1bc 274
 18008                          ;*         parm5 = xradius lo ;; @@b1bc 274
 18009                          ;*         parm6 = xradius hi ;; @@b1bc 274
 18010                          ;*         parm7 = yradius lo ;; @@b1bc 274
 18011                          ;*         parm8 = yradius hi ;; @@b1bc 274
 18012                          ;*         parm9 = solid flag 0-1 ;; @@b1bc 274
 18013                          ;*         parm10 = sa lo (starting angle 0-360) ;; @@b1bc 274
 18014                          ;*         parm11 = sa hi ;; @@b1bc 274
 18015                          ;*         parm12 = # of sides to draw (1 to 127) ;; @@b1bc 274
 18016                          ;*         parm13 = # of sides (3 to parm12) ;; @@b1bc 274
 18017                          ;*         parm14 = subtend flag 0-1 ;; @@b1bc 274
 18018                          ;**************************************************************** ;; @@b1bc 274
 18019                           ;; @@b1bc 274
 18020                          C65__polygon                                              ; changed BASIC syntax to something more reasonable [910923] FAB ;; @@b1bc 274
 18021  b1bc 201caf                              jsr CheckGraphicMode                      ;; @@b1bc 274
 18022  b1bf 20e5b7                              jsr sadwrd                               ; get center x ;; @@b1bf 274
 18023  b1c2 8c001f                              sty GKI__parm1                            ;; @@b1c2 274
 18024  b1c5 8d011f                              sta GKI__parm2                            ;; @@b1c5 274
 18025                           ;; @@b1c8 274
 18026  b1c8 200879                              jsr comsad                               ; get center y ;; @@b1c8 274
 18027  b1cb 8c021f                              sty GKI__parm3                            ;; @@b1cb 274
 18028  b1ce 8d031f                              sta GKI__parm4                            ;; @@b1ce 274
 18029                           ;; @@b1d1 274
 18030  b1d1 20875d                              jsr comwrd                               ; get x radius ;; @@b1d1 274
 18031  b1d4 8c041f                              sty GKI__parm5                            ;; @@b1d4 274
 18032  b1d7 8d051f                              sta GKI__parm6                            ;; @@b1d7 274
 18033                           ;; @@b1da 274
 18034  b1da 20875d                              jsr comwrd                               ; get y radius ;; @@b1da 274
 18035  b1dd 8c061f                              sty GKI__parm7                            ;; @@b1dd 274
 18036  b1e0 8d071f                              sta GKI__parm8                            ;; @@b1e0 274
 18037                           ;; @@b1e3 274
 18038  b1e3 20825d                              jsr combyt                               ; get number of sides ;; @@b1e3 274
 18039  b1e6 e003                                cpx #3                                    ;; @@b1e6 274
 18040  b1e8 900d                                bcc _local_1273_20                       ; too few ;; @@b1e8 274
 18041  b1ea e080                                cpx #128                                  ;; @@b1ea 274
 18042  b1ec b30fa0             _local_1273_10   +lbcs fcerr                              ; too many ;; @@b1ec 274
 18043  b1ef 8e0c1f                              stx GKI__parm13                           ;; @@b1ef 274
 18044                           ;; @@b1f2 274
 18045                          ; ldx GKI__parm13  ;get number of sides to draw (default=#sides) ;; @@b1f2 274
 18046  b1f2 202679                              jsr optbyt                                ;; @@b1f2 274
 18047  b1f5 e001                                cpx #1                                   ; must be at least 1 side ;; @@b1f5 274
 18048  b1f7 9304a0             _local_1273_20   +lbcc fcerr                               ;; @@b1f7 274
 18049  b1fa 8e0b1f                              stx GKI__parm12                           ;; @@b1fa 274
 18050  b1fd ca                                  dex                                       ;; @@b1fd 274
 18051  b1fe ec0c1f                              cpx GKI__parm13                          ; draw sides must be <= #sides ;; @@b1fe 274
 18052  b201 b0e9                                bcs _local_1273_10                        ;; @@b201 274
 18053                           ;; @@b203 274
 18054  b203 202479                              jsr optzer                               ; get subtend flag ;; @@b203 274
 18055                          ; cpx #2 ;; @@b206 274
 18056                          ; bcs _local_1273_10 ;; @@b206 274
 18057  b206 8e0d1f                              stx GKI__parm14                           ;; @@b206 274
 18058                           ;; @@b209 274
 18059  b209 20f278                              jsr optwrd                               ; get starting angle (default=0 degrees) ;; @@b209 274
 18060  b20c 8c091f                              sty GKI__parm10                          ; lo ;; @@b20c 274
 18061  b20f 8d0a1f                              sta GKI__parm11                          ; hi ;; @@b20f 274
 18062                           ;; @@b212 274
 18063  b212 202479                              jsr optzer                               ; get solid flag ;; @@b212 274
 18064                          ; cpx #2 ;; @@b215 274
 18065                          ; bcs _local_1273_10 ;; @@b215 274
 18066  b215 8e081f                              stx GKI__parm9                            ;; @@b215 274
 18067                           ;; @@b218 274
 18068  b218 6c1e80                              jmp ($801e)                              ; bra polygon ;; @@b218 274
 18069                           ;; @@b21b 274
 18070                          ; .page ;; @@b21b 274
 18071                          ; .subttl  SET multipurpose command ;; @@b21b 274
 18072                           ;; @@b21b 274
 18073                          ;  SET  A multipurpose command initiator ;; @@b21b 274
 18074                           ;; @@b21b 274
 18075                           ;; @@b21b 274
 18076                          C65__set                                                   ;; @@b21b 275
 18077  b21b c995                                cmp #verify_token                        ; SET VERIFY <ON | OFF>  new [910429] ;; @@b21b 275
 18078  b21d f39b00                              +lbeq verify_mode                         ;; @@b21d 275
 18079  b220 c996                                cmp #def_token                           ; SET DEF unit ;; @@b220 275
 18080  b222 d00c                                bne _local_1274_10                        ;; @@b222 275
 18081  b224 2085b2                              jsr getdisknum_1                          ;; @@b224 275
 18082  b227 8e0611                              stx _default_drive                        ;; @@b227 275
 18083  b22a 8e8211                              stx dosfa                                ; Make last DOS device = current device ;; @@b22a 275
 18084  b22d 8352c6                              +lbra Clear_DS                            ;; @@b22d 275
 18085                           ;; @@b230 275
 18086                           ;; @@b230 275
 18087                           ;; @@b230 275
 18088  b230 2016b5             _local_1274_10   jsr chkesc                               ; Must be ESCape token ;; @@b230 275
 18089  b233 c940                                cmp #disk_token                          ; ok so far ;; @@b233 275
 18090  b235 d3037c                              +lbne bad_command                        ; unknown command ;; @@b235 275
 18091                           ;; @@b238 275
 18092                           ;; @@b238 275
 18093                           ;; @@b238 275
 18094                           ;; @@b238 275
 18095  b238 2085b2                              jsr getdisknum_1                         ; SET DISK # [<,|TO> #] ;; @@b238 275
 18096  b23b 8e8211                              stx dosfa                                ; got current disk unit # ;; @@b23b 275
 18097                           ;; @@b23e 275
 18098  b23e 208522                              jsr chrgot                               ; check delimiter (comma, 'TO', or eos) ;; @@b23e 275
 18099  b241 f33ec6                              +lbeq Clear_DS                           ; eos- just change DOS' current drive [910417] ;; @@b241 275
 18100  b244 c92c                                cmp #','                                 ; not eos, must be comma or 'TO' ;; @@b244 275
 18101  b246 f005                                beq _local_1274_20                        ;; @@b246 275
 18102  b248 c9a4                                cmp #to_token                             ;; @@b248 275
 18103  b24a d3fd7b                              +lbne snerr                               ;; @@b24a 275
 18104                           ;; @@b24d 275
 18105  b24d 2085b2             _local_1274_20   jsr getdisknum_1                         ; skip delimiter ;; @@b24d 275
 18106  b250 8e8811                              stx dosds2                               ; got new disk unit # ;; @@b250 275
 18107                           ;; @@b253 275
 18108                           ;; @@b253 275
 18109                          ; .page ;; @@b253 275
 18110                          ;  Open disk command channel & pass it 'renumber' command ;; @@b253 275
 18111                           ;; @@b253 275
 18112  b253 204171                              jsr dclall                               ; Close any open files???? ;; @@b253 275
 18113                           ;; @@b256 275
 18114  b256 a205                                ldx #6-1                                  ;; @@b256 275
 18115  b258 bd7fb2             _local_1274_30   lda disk_renum_cmd,x                     ; move command to RAM, setup for open ;; @@b258 275
 18116  b25b 9d9111                              sta savram,x                              ;; @@b25b 275
 18117  b25e ca                                  dex                                       ;; @@b25e 275
 18118  b25f 10f7                                bpl _local_1274_30                        ;; @@b25f 275
 18119  b261 ad8811                              lda dosds2                                ;; @@b261 275
 18120  b264 0920                                ora #32                                  ; make new # a talk/listen address ;; @@b264 275
 18121  b266 8d9711                              sta savram+6                              ;; @@b266 275
 18122  b269 ad8811                              lda dosds2                                ;; @@b269 275
 18123  b26c 0940                                ora #64                                   ;; @@b26c 275
 18124  b26e 8d9811                              sta savram+7                              ;; @@b26e 275
 18125                           ;; @@b271 275
 18126  b271 a908                                lda #8                                   ; command string length ;; @@b271 275
 18127  b273 2096b2                              jsr SendDiskCmd                          ; Send command ;; @@b273 275
 18128  b276 ad8811                              lda dosds2                                ;; @@b276 275
 18129  b279 8d8211                              sta dosfa                                ; Make last DOS device = current device ;; @@b279 275
 18130  b27c 8393b6                              +lbra close_out_1                        ; common error check & exit path ???? ;; @@b27c 275
 18131                           ;; @@b27f 275
 18132                           ;; @@b27f 275
 18133  b27f 4d2d57770002       disk_renum_cmd   !text "M-W",119,0,2                      ; Renumber Drive command ;; @@b27f 276
 18134                           ;; @@b285 276
 18135                          ; .page ;; @@b285 276
 18136                           ;; @@b285 276
 18137                          ;  GetDiskNum - Get a (required) disk number and check it ;; @@b285 276
 18138                           ;; @@b285 276
 18139                          getdisknum_1                                               ;; @@b285 276
 18140  b285 208322                              jsr chrget                               ; skip current character ;; @@b285 276
 18141                          getdisknum                                                 ;; @@b288 276
 18142  b288 206c5d                              jsr getbyt                               ; get number in .x ;; @@b288 276
 18143  b28b e008                                cpx #8                                   ; check range (8-30) ;; @@b28b 276
 18144  b28d 936e9f                              +lbcc fcerr                               ;; @@b28d 276
 18145  b290 e01f                                cpx #31                                   ;; @@b290 276
 18146  b292 b3699f                              +lbcs fcerr                               ;; @@b292 276
 18147  b295 60                                  rts                                      ; returns only if okay ;; @@b295 276
 18148                           ;; @@b296 276
 18149                           ;; @@b296 276
 18150                           ;; @@b296 276
 18151                          ;  SendDiskCmd - Send command in SAVRAM to disk, length in .A ;; @@b296 276
 18152                           ;; @@b296 276
 18153                          SendDiskCmd                                                ;; @@b296 276
 18154                          ; lda #   ; command string length ;; @@b296 276
 18155  b296 a291                                ldx #<savram                             ; address ;; @@b296 276
 18156  b298 a011                                ldy #>savram                              ;; @@b298 276
 18157  b29a 20bdff                              jsr _setnam                               ;; @@b29a 276
 18158  b29d a200                                ldx #sys_bank                            ; ???? sysbank ???? ;; @@b29d 276
 18159  b29f 206bff                              jsr _setbank                              ;; @@b29f 276
 18160  b2a2 20ccff                              jsr _clrch                               ; Restore normal channels, establish our's ;; @@b2a2 276
 18161  b2a5 ae8211                              ldx dosfa                                ; fa ;; @@b2a5 276
 18162  b2a8 a900                                lda #doslfn                              ; la (reserved la) ;; @@b2a8 276
 18163  b2aa a06f                                ldy #$6f                                 ; sa (command channel) ;; @@b2aa 276
 18164  b2ac 20baff                              jsr _setlfs                               ;; @@b2ac 276
 18165  b2af 20c0ff                              jsr _open                                ; open channel & send command ;; @@b2af 276
 18166  b2b2 a900                                lda #doslfn                              ; close it already ;; @@b2b2 276
 18167  b2b4 38                                  sec                                      ; not a real close ;; @@b2b4 276
 18168  b2b5 20c3ff                              jsr _close                                ;; @@b2b5 276
 18169  b2b8 83c7c5                              +lbra Clear_DS                           ; Exit ;; @@b2b8 276
 18170                           ;; @@b2bb 276
 18171                          ; .page ;; @@b2bb 276
 18172                          ;  SET VERIFY <ON | OFF> Set DOS verify-after-write mode for 3.5" drives ;; @@b2bb 276
 18173                           ;; @@b2bb 276
 18174                          verify_mode                                                ;; @@b2bb 276
 18175  b2bb 208322                              jsr chrget                               ; eat 'verify' token, get next  new [910429] ;; @@b2bb 276
 18176  b2be c991                                cmp #on_token                             ;; @@b2be 276
 18177  b2c0 38                                  sec                                       ;; @@b2c0 276
 18178  b2c1 f009                                beq _local_1275_10                       ; turn verify on (.c=1) ;; @@b2c1 276
 18179  b2c3 2016b5                              jsr chkesc                                ;; @@b2c3 276
 18180  b2c6 c924                                cmp #off_token                           ; turn cursor off (.c=0) ;; @@b2c6 276
 18181  b2c8 d37f7b                              +lbne snerr                               ;; @@b2c8 276
 18182  b2cb 18                                  clc                                       ;; @@b2cb 276
 18183                           ;; @@b2cc 276
 18184                          ;  Open disk command channel & pass it 'verify' command ;; @@b2cc 276
 18185                           ;; @@b2cc 276
 18186  b2cc 08                 _local_1275_10   php                                      ; Save mode ;; @@b2cc 276
 18187  b2cd 2022b5                              jsr chkeos                               ; eat 'on/off' token, error if not eos ;; @@b2cd 276
 18188                           ;; @@b2d0 276
 18189  b2d0 a203                                ldx #4-1                                  ;; @@b2d0 276
 18190  b2d2 bdecb2             _local_1275_20   lda verify_cmd,x                         ; move command to RAM, setup for open ;; @@b2d2 276
 18191  b2d5 9d9111                              sta savram,x                              ;; @@b2d5 276
 18192  b2d8 ca                                  dex                                       ;; @@b2d8 276
 18193  b2d9 10f7                                bpl _local_1275_20                        ;; @@b2d9 276
 18194                           ;; @@b2db 276
 18195  b2db a900                                lda #0                                   ; form on/off flag ;; @@b2db 276
 18196  b2dd 28                                  plp                                       ;; @@b2dd 276
 18197  b2de 2a                                  rol                                       ;; @@b2de 276
 18198  b2df 0930                                ora #$30                                  ;; @@b2df 276
 18199  b2e1 8d9511                              sta savram+4                              ;; @@b2e1 276
 18200                           ;; @@b2e4 276
 18201  b2e4 a905                                lda #5                                   ; command string length ;; @@b2e4 276
 18202  b2e6 2096b2                              jsr SendDiskCmd                          ; Send command ;; @@b2e6 276
 18203  b2e9 8326b6                              +lbra close_out_1                        ; common error check & exit path ???? ;; @@b2e9 276
 18204                           ;; @@b2ec 276
 18205                           ;; @@b2ec 276
 18206  b2ec 55303e56           verify_cmd       !text "U0>V"                             ; Verify on/off command ;; @@b2ec 277
 18207                           ;; @@b2f0 277
 18208                          ;.end ;; @@b2f0 277
 18209                          ; .page ;; @@b2f0 277
 18210                          ; .subttl  CHAR ;; @@b2f0 277
 18211                           ;; @@b2f0 277
 18212                          ;***************************************************************** ;; @@b2f0 277
 18213                          ;* CHAR   draw a character string ;; @@b2f0 277
 18214                          ;* ;; @@b2f0 277
 18215                          ;*  Syntax : CHAR column, row, height, width, direction, "string" [,charsetadr [,bank]] ;; @@b2f0 277
 18216                          ;* ;; @@b2f0 277
 18217                          ;* parm1  = column# ;; @@b2f0 277
 18218                          ;* parm2  = row lo ;; @@b2f0 277
 18219                          ;* parm3  = row hi ;; @@b2f0 277
 18220                          ;* parm4  = height ;; @@b2f0 277
 18221                          ;* parm5  = width ;; @@b2f0 277
 18222                          ;* parm6  = direction ;; @@b2f0 277
 18223                          ;* parm7  = len of string ;; @@b2f0 277
 18224                          ;* parm8  = lo addr of string ;; @@b2f0 277
 18225                          ;* parm9  = hi addr of string ;; @@b2f0 277
 18226                          ;* parm10 = lo addr of character set $29800 default ;; @@b2f0 277
 18227                          ;* parm11 = hi addr of character set ;; @@b2f0 277
 18228                          ;* parm12 = bank of character set   [910912] ;; @@b2f0 277
 18229                          ;**************************************************************** ;; @@b2f0 277
 18230                           ;; @@b2f0 277
 18231                          C65__char                                                  ;; @@b2f0 277
 18232  b2f0 201caf                              jsr CheckGraphicMode                      ;; @@b2f0 277
 18233  b2f3 206c5d                              jsr getbyt                               ; get column ;; @@b2f3 277
 18234  b2f6 8e001f                              stx GKI__parm1                            ;; @@b2f6 277
 18235                           ;; @@b2f9 277
 18236  b2f9 200879                              jsr comsad                               ; get row ;; @@b2f9 277
 18237  b2fc 8c011f                              sty GKI__parm2                            ;; @@b2fc 277
 18238  b2ff 8d021f                              sta GKI__parm3                            ;; @@b2ff 277
 18239                           ;; @@b302 277
 18240  b302 20825d                              jsr combyt                               ; get height ;; @@b302 277
 18241  b305 8e031f                              stx GKI__parm4                            ;; @@b305 277
 18242                           ;; @@b308 277
 18243  b308 20825d                              jsr combyt                               ; get width ;; @@b308 277
 18244  b30b 8e041f                              stx GKI__parm5                            ;; @@b30b 277
 18245                           ;; @@b30e 277
 18246  b30e 20825d                              jsr combyt                               ; get direction ;; @@b30e 277
 18247  b311 8e051f                              stx GKI__parm6                            ;; @@b311 277
 18248                           ;; @@b314 277
 18249  b314 205b4e                              jsr chkcom                                ;; @@b314 277
 18250  b317 20ef4c                              jsr frmevl                               ; evaluate the string ;; @@b317 277
 18251  b31a 20dd4c                              jsr chkstr                               ; type mismatch error if not string ;; @@b31a 277
 18252  b31d a000                                ldy #0                                    ;; @@b31d 277
 18253  b31f 20a922                              jsr indfmo                               ; pointer to string descriptor is left in the fac by frmevl ;; @@b31f 277
 18254  b322 8d061f                              sta GKI__parm7                           ; length  ???? check for null string ???? ;; @@b322 277
 18255  b325 48                                  pha                                       ;; @@b325 277
 18256  b326 c8                                  iny                                       ;; @@b326 277
 18257  b327 20a922                              jsr indfmo                                ;; @@b327 277
 18258  b32a 8d071f                              sta GKI__parm8                           ; adrlo ;; @@b32a 277
 18259  b32d c8                                  iny                                       ;; @@b32d 277
 18260  b32e 20a922                              jsr indfmo                                ;; @@b32e 277
 18261  b331 8d081f                              sta GKI__parm9                           ; adrhi ;; @@b331 277
 18262  b334 206d5b                              jsr frefac                               ; [910917] ;; @@b334 277
 18263  b337 68                                  pla                                       ;; @@b337 277
 18264  b338 20dd5b                              jsr getspa                                ;; @@b338 277
 18265                           ;; @@b33b 277
 18266  b33b 20f278                              jsr optwrd                               ; get charset address (????bank) ;; @@b33b 277
 18267  b33e b004                                bcs _local_1276_10                       ; given ;; @@b33e 277
 18268  b340 a000                                ldy #<$9800                              ; not given- use ROM as default   [910207] FAB ;; @@b340 277
 18269  b342 a998                                lda #>$9800                              ; ???? uc/lc or graphic set ???? ;; @@b342 277
 18270  b344 8c091f             _local_1276_10   sty GKI__parm10                          ; lo ;; @@b344 277
 18271  b347 8d0a1f                              sta GKI__parm11                          ; hi ;; @@b347 277
 18272  b34a a202                                ldx #2                                   ; default to ROM bank 2    [910912] FAB ;; @@b34a 277
 18273  b34c 202679                              jsr optbyt                                ;; @@b34c 277
 18274  b34f 8e0b1f                              stx GKI__parm12                           ;; @@b34f 277
 18275                           ;; @@b352 277
 18276  b352 ad061f                              lda GKI__parm7                           ; ???? check for null string ???? ;; @@b352 277
 18277  b355 f003                                beq _local_1276_40                        ;; @@b355 277
 18278  b357 6c2c80                              jmp ($802c)                              ; bra kg65.char ;; @@b357 277
 18279                           ;; @@b35a 277
 18280  b35a 60                 _local_1276_40   rts                                       ;; @@b35a 277
 18281                           ;; @@b35b 277
 18282                          ; .page ;; @@b35b 277
 18283                          ; .subttl  PAINT ;; @@b35b 277
 18284                           ;; @@b35b 277
 18285                          ;***************************************************************** ;; @@b35b 277
 18286                          ;* PAINT   fill a graphic area with color ;; @@b35b 277
 18287                          ;* ;; @@b35b 277
 18288                          ;*  Syntax : PAINT x, y [,mode [,color]] ;; @@b35b 277
 18289                          ;* ;; @@b35b 277
 18290                          ;* parm1  = x lo ;; @@b35b 277
 18291                          ;* parm2  = x lo ;; @@b35b 277
 18292                          ;* parm3  = y lo ;; @@b35b 277
 18293                          ;* parm4  = y hi ;; @@b35b 277
 18294                          ;* parm5  = mode ;; @@b35b 277
 18295                          ;* parm6  = color ;; @@b35b 277
 18296                          ;* ;; @@b35b 277
 18297                          ;* fill color is pen-A ;; @@b35b 277
 18298                          ; mode 0: fill region defined by color at x,y (default) new modes [910916] FAB ;; @@b35b 277
 18299                          ; mode 1: fill region using given color as boundary ;; @@b35b 277
 18300                          ; mode 2: fill connected region ;; @@b35b 277
 18301                          ;**************************************************************** ;; @@b35b 277
 18302                           ;; @@b35b 277
 18303                          C65__paint                                                ; new [910228] FAB ;; @@b35b 278
 18304  b35b 201caf                              jsr CheckGraphicMode                      ;; @@b35b 278
 18305  b35e 20e5b7                              jsr sadwrd                               ; get x ;; @@b35e 278
 18306  b361 8c001f                              sty GKI__parm1                            ;; @@b361 278
 18307  b364 8d011f                              sta GKI__parm2                            ;; @@b364 278
 18308                           ;; @@b367 278
 18309  b367 200879                              jsr comsad                               ; get y ;; @@b367 278
 18310  b36a 8c021f                              sty GKI__parm3                            ;; @@b36a 278
 18311  b36d 8d031f                              sta GKI__parm4                            ;; @@b36d 278
 18312                           ;; @@b370 278
 18313  b370 a200                                ldx #0                                   ; [910916] ;; @@b370 278
 18314  b372 202679                              jsr optbyt                               ; mode, default = 0 (fill region pointed to) ;; @@b372 278
 18315  b375 e003                                cpx #3                                    ;; @@b375 278
 18316  b377 b3849e                              +lbcs fcerr                              ; (range 0-2) ;; @@b377 278
 18317  b37a 8e041f                              stx GKI__parm5                            ;; @@b37a 278
 18318  b37d a200                                ldx #0                                    ;; @@b37d 278
 18319  b37f 202679                              jsr optbyt                               ; boundary color, default = 0 ;; @@b37f 278
 18320  b382 8e051f                              stx GKI__parm6                            ;; @@b382 278
 18321                           ;; @@b385 278
 18322  b385 20335c             _local_1277_10   jsr garba2                               ; create space in var bank for paint stack [910716] ;; @@b385 278
 18323  b388 a533                                lda strend                                ;; @@b388 278
 18324  b38a 8d061f                              sta GKI__parm7                           ; pass pointer to bottom of bank-1 free space ;; @@b38a 278
 18325  b38d a534                                lda strend+1                             ; (top of stack) ;; @@b38d 278
 18326  b38f 8d071f                              sta GKI__parm8                            ;; @@b38f 278
 18327  b392 38                                  sec                                       ;; @@b392 278
 18328  b393 a535                                lda fretop                               ; pass pointer to top of free space ;; @@b393 278
 18329  b395 e903                                sbc #3                                   ; (bottom of stack) ;; @@b395 278
 18330  b397 8d081f                              sta GKI__parm9                            ;; @@b397 278
 18331  b39a a536                                lda fretop+1                              ;; @@b39a 278
 18332  b39c e900                                sbc #0                                    ;; @@b39c 278
 18333  b39e 8d091f                              sta GKI__parm10                           ;; @@b39e 278
 18334                           ;; @@b3a1 278
 18335  b3a1 222e80                              jsr ($802e)                              ; bra paint ;; @@b3a1 278
 18336  b3a4 b001                                bcs _local_1277_20                       ; error- stack overflow or stop key ;; @@b3a4 278
 18337  b3a6 60                                  rts                                       ;; @@b3a6 278
 18338                           ;; @@b3a7 278
 18339  b3a7 e010               _local_1277_20   cpx #errom                                ;; @@b3a7 278
 18340  b3a9 f3a37a                              +lbeq error                              ; stack overflow, say 'out of memory' ;; @@b3a9 278
 18341  b3ac 832279                              +lbra break_exit                         ; user hit stop key ;; @@b3ac 278
 18342                           ;; @@b3af 278
 18343                          ; .page ;; @@b3af 278
 18344                          ; .subttl   LOAD/SAVE IFF ;; @@b3af 278
 18345                           ;; @@b3af 278
 18346                          ;***************************************************************** ;; @@b3af 278
 18347                          ;*   LOADIFF "filename" [,U#] [,D#] ;; @@b3af 278
 18348                          ;* ;; @@b3af 278
 18349                          ;* ???? requires SCREEN already opened   910402 FAB ;; @@b3af 278
 18350                          ;***************************************************************** ;; @@b3af 278
 18351                           ;; @@b3af 278
 18352                          loadiff                                                    ;; @@b3af 279
 18353  b3af 201caf                              jsr CheckGraphicMode                      ;; @@b3af 279
 18354  b3b2 a9e6                                lda #$e6                                 ; parse:  filename [,U#] [,D#] ;; @@b3b2 279
 18355  b3b4 202074                              jsr dosprs                               ; (like dopen:  0 0 0 *  * 0 0 1 ) ;; @@b3b4 279
 18356  b3b7 20dc77                              jsr chk1                                 ; check parameters ;; @@b3b7 279
 18357  b3ba a900                                lda #0                                    ;; @@b3ba 279
 18358  b3bc 8d8311                              sta dossa                                ; setup as dload would (0 = load channel) ;; @@b3bc 279
 18359  b3bf 201d71                              jsr find_la                              ; find an available la to use (cannot use reserved one) ;; @@b3bf 279
 18360  b3c2 a009                                ldy #fopn                                 ;; @@b3c2 279
 18361  b3c4 a204                                ldx #4                                    ;; @@b3c4 279
 18362  b3c6 20fd70                              jsr open_file                            ; open the file ;; @@b3c6 279
 18363  b3c9 b006                                bcs _local_1278_10                       ; exit if error ;; @@b3c9 279
 18364                           ;; @@b3cb 279
 18365  b3cb ae8111                              ldx dosla                                 ;; @@b3cb 279
 18366                          ; stx GKI__parm1 ;; @@b3ce 279
 18367  b3ce 20c6ff                              jsr _chkin                               ; get input channel ;; @@b3ce 279
 18368  b3d1 b3537f             _local_1278_10   +lbcs list_err                           ; exit if error ;; @@b3d1 279
 18369                           ;; @@b3d4 279
 18370  b3d4 222a80                              jsr ($802a)                              ; Load it ;; @@b3d4 279
 18371                           ;; @@b3d7 279
 18372                          exit_GKI_disk_op                                           ;; @@b3d7 280
 18373  b3d7 08                                  php                                      ; preserve completion status ;; @@b3d7 280
 18374  b3d8 48                                  pha                                       ;; @@b3d8 280
 18375  b3d9 20ccff                              jsr _clrch                                ;; @@b3d9 280
 18376  b3dc ad8111                              lda dosla                                 ;; @@b3dc 280
 18377  b3df 200e69                              jsr close_out                            ; close channel ;; @@b3df 280
 18378                           ;; @@b3e2 280
 18379  b3e2 20cc2c                              jsr is_stop_key_down                     ; weed out BREAK error ;; @@b3e2 280
 18380  b3e5 fa                                  plx                                       ;; @@b3e5 280
 18381  b3e6 28                                  plp                                       ;; @@b3e6 280
 18382  b3e7 b3657a                              +lbcs error                              ; must be I/O or file data error ;; @@b3e7 280
 18383  b3ea 60                                  rts                                      ; load was successful ;; @@b3ea 280
 18384                           ;; @@b3eb 280
 18385                          ; .page ;; @@b3eb 280
 18386                          ;***************************************************************** ;; @@b3eb 280
 18387                          ;* ;; @@b3eb 280
 18388                          ;*   SAVEIFF "[@]filename" [,U#] [,D#]      [910930] FAB ;; @@b3eb 280
 18389                          ;* ;; @@b3eb 280
 18390                          ;***************************************************************** ;; @@b3eb 280
 18391                           ;; @@b3eb 280
 18392                          saveiff                                                    ;; @@b3eb 280
 18393  b3eb 201caf                              jsr CheckGraphicMode                      ;; @@b3eb 280
 18394  b3ee a966                                lda #$66                                 ; set error flags ;; @@b3ee 280
 18395  b3f0 202074                              jsr dosprs                               ; parse the line ;; @@b3f0 280
 18396  b3f3 20e177                              jsr chk2                                 ; check required parameters ;; @@b3f3 280
 18397  b3f6 a901                                lda #1                                    ;; @@b3f6 280
 18398  b3f8 8d8311                              sta dossa                                ; setup as dsave would (1 = save channel) ;; @@b3f8 280
 18399  b3fb 201d71                              jsr find_la                              ; find an available la to use (cannot use reserved one) ;; @@b3fb 280
 18400  b3fe a009                                ldy #fopn                                 ;; @@b3fe 280
 18401  b400 a204                                ldx #4                                    ;; @@b400 280
 18402  b402 20fd70                              jsr open_file                            ; open the file ;; @@b402 280
 18403  b405 b006                                bcs _local_1279_10                       ; exit if error ;; @@b405 280
 18404                           ;; @@b407 280
 18405  b407 ae8111                              ldx dosla                                 ;; @@b407 280
 18406                          ; stx GKI__parm1 ;; @@b40a 280
 18407  b40a 20c9ff                              jsr _chkout                              ; get output channel ;; @@b40a 280
 18408  b40d b3177f             _local_1279_10   +lbcs list_err                           ; exit if error ;; @@b40d 280
 18409                           ;; @@b410 280
 18410  b410 223a80                              jsr ($803a)                              ; Save it ;; @@b410 280
 18411  b413 80c2                                bra exit_GKI_disk_op                      ;; @@b413 280
 18412                           ;; @@b415 280
 18413                          ; php   ;preserve completion status ;; @@b415 280
 18414                          ; pha ;; @@b415 280
 18415                          ; jsr _clrch ;; @@b415 280
 18416                          ; lda dosla ;; @@b415 280
 18417                          ; jsr close_out  ;close channel ;; @@b415 280
 18418                          ; ;; @@b415 280
 18419                          ; jsr is_stop_key_down ; weed out BREAK error ;; @@b415 280
 18420                          ; plx ;; @@b415 280
 18421                          ; plp ;; @@b415 280
 18422                          ; bcs error  ; must be I/O or file data error ;; @@b415 280
 18423                          ; rts   ; load was successful ;; @@b415 280
 18424                           ;; @@b415 280
 18425                          ;.end ;; @@b415 280
 18426                          ; .page ;; @@b415 280
 18427                          ; .subttl   VIEWPORT Commands ;; @@b415 280
 18428                           ;; @@b415 280
 18429                          ;***************************************************************** ;; @@b415 280
 18430                          ;*   VIEWPORT <CLR | DEF>  x, y, viewport_width, viewport_height ;; @@b415 280
 18431                          ;* ;; @@b415 280
 18432                          ;* assumes SCREEN already opened   910626 FAB ;; @@b415 280
 18433                          ;***************************************************************** ;; @@b415 280
 18434                           ;; @@b415 280
 18435                          C65__Viewport                                              ;; @@b415 281
 18436  b415 48                                  pha                                      ; save secondary command ;; @@b415 281
 18437  b416 208322                              jsr chrget                               ; advance past it ;; @@b416 281
 18438  b419 201caf                              jsr CheckGraphicMode                     ; make sure a screen is open ;; @@b419 281
 18439                           ;; @@b41c 281
 18440  b41c 20e5b7                              jsr sadwrd                               ; get x0 ;; @@b41c 281
 18441  b41f 8c001f                              sty GKI__parm1                            ;; @@b41f 281
 18442  b422 8d011f                              sta GKI__parm2                            ;; @@b422 281
 18443                           ;; @@b425 281
 18444  b425 200879                              jsr comsad                               ; get y0 ;; @@b425 281
 18445  b428 8c021f                              sty GKI__parm3                            ;; @@b428 281
 18446  b42b 8d031f                              sta GKI__parm4                            ;; @@b42b 281
 18447                           ;; @@b42e 281
 18448  b42e 200879                              jsr comsad                               ; get width (delta-x) ;; @@b42e 281
 18449  b431 8c041f                              sty GKI__parm5                            ;; @@b431 281
 18450  b434 8d051f                              sta GKI__parm6                            ;; @@b434 281
 18451                           ;; @@b437 281
 18452  b437 200879                              jsr comsad                               ; get height (delta-y) ;; @@b437 281
 18453  b43a 8c061f                              sty GKI__parm7                            ;; @@b43a 281
 18454  b43d 8d071f                              sta GKI__parm8                            ;; @@b43d 281
 18455                           ;; @@b440 281
 18456  b440 68                                  pla                                      ; dispatch per secondary token... ;; @@b440 281
 18457  b441 c99c                                cmp #clr_token                            ;; @@b441 281
 18458  b443 f008                                beq _local_1280_10                        ;; @@b443 281
 18459  b445 c996                                cmp #def_token                            ;; @@b445 281
 18460  b447 d3007a                              +lbne snerr                              ; error ;; @@b447 281
 18461                           ;; @@b44a 281
 18462  b44a 6c3080                              jmp ($8030)                              ; define viewport & return ;; @@b44a 281
 18463                           ;; @@b44d 281
 18464  b44d 6c2280             _local_1280_10   jmp ($8022)                              ; clear viewport (???? make this a box command) ;; @@b44d 281
 18465                           ;; @@b450 281
 18466                          ; .page ;; @@b450 281
 18467                          C65__copy                                                  ;; @@b450 282
 18468                          C65__cut                                                   ;; @@b450 282
 18469                          C65__paste                                                 ;; @@b450 282
 18470  b450 4c3b2e                              jmp bad_command                           ;; @@b450 282
 18471                           ;; @@b453 282
 18472                          ; .page ;; @@b453 282
 18473                          ; .subttl  GENLOCK ;; @@b453 282
 18474                           ;; @@b453 282
 18475                          ;***************************************************************** ;; @@b453 282
 18476                          ;* GENLOCK  set/reset genlock mode & color registers ;; @@b453 282
 18477                          ;* ;; @@b453 282
 18478                          ;*  Syntax: GENLOCK <ON[,color#[,...]] | OFF[,color#,R,G,B]> ;; @@b453 282
 18479                          ;***************************************************************** ;; @@b453 282
 18480                           ;; @@b453 282
 18481  b453 8d001f             genlock          sta GKI__parm1                           ; save token as flag for set palette   [910107] ;; @@b453 282
 18482  b456 c991                                cmp #on_token                             ;; @@b456 282
 18483  b458 f028                                beq _local_1281_20                        ;; @@b458 282
 18484  b45a 2016b5                              jsr chkesc                                ;; @@b45a 282
 18485  b45d c924                                cmp #off_token                            ;; @@b45d 282
 18486  b45f d3e879                              +lbne snerr                               ;; @@b45f 282
 18487                          ;TURN GENLOCK OFF ;; @@b462 282
 18488  b462 ad31d0                              lda vic+49                               ; any interlaced bitplanes on? ;; @@b462 282
 18489  b465 2919                                and #%00011001                            ;; @@b465 282
 18490  b467 c919                                cmp #%00011001                            ;; @@b467 282
 18491  b469 f005                                beq _local_1281_10                       ; yes, leave interlace mode on ;; @@b469 282
 18492                           ;; @@b46b 282
 18493  b46b a901                                lda #%00000001                            ;; @@b46b 282
 18494  b46d 1c31d0                              trb vic+49                               ; no, turn interlace off ;; @@b46d 282
 18495  b470 a902               _local_1281_10   lda #%00000010                            ;; @@b470 282
 18496  b472 1c30d0                              trb vic+48                               ; reset external sync mode ;; @@b472 282
 18497                          ; beq _local_1281_12   ;       [910114] ;; @@b475 282
 18498                          ; lda vic+63  ;       [910111] ;; @@b475 282
 18499                          ; inc a   ;  adjust vert. position (chip bug ????) ;; @@b475 282
 18500                          ; inc a   ;  (to be handled by a custom C65 genlock board) ;; @@b475 282
 18501                          ; inc a ;; @@b475 282
 18502                          ; sta vic+63 ;; @@b475 282
 18503                           ;; @@b475 282
 18504  b475 208322             _local_1281_12   jsr chrget                               ; eat token ;; @@b475 282
 18505  b478 202679                              jsr optbyt                               ; get (optional) color reg# in .X ;; @@b478 282
 18506  b47b 8e011f                              stx GKI__parm2                           ; save it ;; @@b47b 282
 18507  b47e b3effb                              +lbcs set_palette                        ; if present, go do it & exit ;; @@b47e 282
 18508  b481 60                 _local_1281_15   rts                                      ; if not present (eol), exit ;; @@b481 282
 18509                           ;; @@b482 282
 18510                           ;; @@b482 282
 18511  b482 a901               _local_1281_20   lda #%00000001                           ; TURN GENLOCK ON ;; @@b482 282
 18512  b484 0c31d0                              tsb vic+49                               ; set interlace mode ;; @@b484 282
 18513  b487 0a                                  asl                                       ;; @@b487 282
 18514  b488 0c30d0                              tsb vic+48                               ; set external sync mode ;; @@b488 282
 18515                          ; bne _local_1281_22   ;       [910114] ;; @@b48b 282
 18516                          ; lda vic+63  ;       [910111] ;; @@b48b 282
 18517                          ; dec a   ;  adjust vert. position (chip bug ????) ;; @@b48b 282
 18518                          ; dec a   ;  (to be handled by a custom C65 genlock board) ;; @@b48b 282
 18519                          ; dec a ;; @@b48b 282
 18520                          ; sta vic+63 ;; @@b48b 282
 18521                           ;; @@b48b 282
 18522  b48b 208322             _local_1281_22   jsr chrget                               ; eat token ;; @@b48b 282
 18523  b48e 202679             _local_1281_25   jsr optbyt                               ; get (optional) color reg# in .X ;; @@b48e 282
 18524  b491 90ee                                bcc _local_1281_15                       ; if not present (eol), exit ;; @@b491 282
 18525  b493 a910                                lda #%00010000                           ; if present, set FGBG bit in red palette ;; @@b493 282
 18526  b495 9d00d1                              sta _red,x                                ;; @@b495 282
 18527  b498 80f4                                bra _local_1281_25                       ; loop ;; @@b498 282
 18528                           ;; @@b49a 282
 18529                          ; .page ;; @@b49a 282
 18530                          ; .subttl  COLOR Control ;; @@b49a 282
 18531                           ;; @@b49a 282
 18532                          ;***************************************************************** ;; @@b49a 282
 18533                          ;* COLOR       <ON | OFF> Enable|Disable SW & HW color ;; @@b49a 282
 18534                          ;* FOREGROUND  color# Set Foreground color (text) ;; @@b49a 282
 18535                          ;* HIGHLIGHT   color# Set Highlight color (text) ;; @@b49a 282
 18536                          ;* BACKGROUND  color# Set VIC Background color ;; @@b49a 282
 18537                          ;* BORDER      color# Set VIC Border color ;; @@b49a 282
 18538                          ;***************************************************************** ;; @@b49a 282
 18539                           ;; @@b49a 282
 18540  b49a c92c               color            cmp #','                                 ; optional first arg ;; @@b49a 283
 18541  b49c f01f                                beq _local_1282_20                        ;; @@b49c 283
 18542  b49e c991                                cmp #on_token                            ; SOFTWARE (Editor) color mode ;; @@b49e 283
 18543  b4a0 f00b                                beq _local_1282_10                        ;; @@b4a0 283
 18544  b4a2 2016b5                              jsr chkesc                                ;; @@b4a2 283
 18545  b4a5 c924                                cmp #off_token                            ;; @@b4a5 283
 18546  b4a7 d3a079             _local_1282_5    +lbne snerr                               ;; @@b4a7 283
 18547                           ;; @@b4aa 283
 18548  b4aa a05b                                ldy #'['                                 ; OFF (color & attributes) ;; @@b4aa 283
 18549  b4ac 2c                                  !text $2c                                 ;; @@b4ac 283
 18550  b4ad a05d               _local_1282_10   ldy #']'                                 ; ON ;; @@b4ad 283
 18551  b4af a91b                                lda #esc                                  ;; @@b4af 283
 18552  b4b1 20d2ff                              jsr _bsout                               ; do it ;; @@b4b1 283
 18553  b4b4 98                                  tya                                       ;; @@b4b4 283
 18554  b4b5 20d2ff                              jsr _bsout                                ;; @@b4b5 283
 18555  b4b8 208322                              jsr chrget                               ; eat token ;; @@b4b8 283
 18556  b4bb f01d                                beq _local_1282_40                       ; eol- exit ;; @@b4bb 283
 18557                           ;; @@b4bd 283
 18558  b4bd 205b4e             _local_1282_20   jsr chkcom                               ; else must be comma, eat & get next ;; @@b4bd 283
 18559                          ; jsr chrgot  ;      [910930] ;; @@b4c0 283
 18560  b4c0 c991                                cmp #on_token                            ; HARDWARE (Vic) color mode ;; @@b4c0 283
 18561  b4c2 f00e                                beq _local_1282_30                        ;; @@b4c2 283
 18562  b4c4 2016b5                              jsr chkesc                                ;; @@b4c4 283
 18563  b4c7 c924                                cmp #off_token                            ;; @@b4c7 283
 18564  b4c9 d0dc                                bne _local_1282_5                         ;; @@b4c9 283
 18565                           ;; @@b4cb 283
 18566  b4cb a902                                lda #%00000010                           ; OFF (monochrome) ;; @@b4cb 283
 18567  b4cd 0c31d0                              tsb vic+49                                ;; @@b4cd 283
 18568  b4d0 8005                                bra _local_1282_35                        ;; @@b4d0 283
 18569                           ;; @@b4d2 283
 18570  b4d2 a902               _local_1282_30   lda #%00000010                           ; ON ;; @@b4d2 283
 18571  b4d4 1c31d0                              trb vic+49                                ;; @@b4d4 283
 18572  b4d7 83a96d             _local_1282_35   +lbra chrget                             ; exit after eating last token ;; @@b4d7 283
 18573                           ;; @@b4da 283
 18574  b4da 60                 _local_1282_40   rts                                      ; exit after encountering eol ;; @@b4da 283
 18575                           ;; @@b4db 283
 18576                          ; .page ;; @@b4db 283
 18577                          foreground                                                 ;; @@b4db 284
 18578  b4db 200db5                              jsr getnyb                               ; Set text foreground color ;; @@b4db 284
 18579  b4de 86f1                                stx _color                                ;; @@b4de 284
 18580  b4e0 60                                  rts                                       ;; @@b4e0 284
 18581                           ;; @@b4e1 284
 18582                           ;; @@b4e1 284
 18583                           ;; @@b4e1 284
 18584                          highlight                                                  ;; @@b4e1 284
 18585  b4e1 f36679                              +lbeq snerr                              ; missing args??     [911017] ;; @@b4e1 284
 18586  b4e4 c92c                                cmp #','                                  ;; @@b4e4 284
 18587  b4e6 f006                                beq _local_1283_10                       ; options byte only ;; @@b4e6 284
 18588                           ;; @@b4e8 284
 18589  b4e8 206c5d                              jsr getbyt                               ; Set text highlight color ;; @@b4e8 284
 18590  b4eb 8ed802                              stx highlight_color                       ;; @@b4eb 284
 18591                           ;; @@b4ee 284
 18592  b4ee 202479             _local_1283_10   jsr optzer                               ; set options:     [911001] ;; @@b4ee 284
 18593  b4f1 9008                                bcc _local_1283_20                       ; comma but no value not given?? ;; @@b4f1 284
 18594  b4f3 8a                                  txa                                       ;; @@b4f3 284
 18595  b4f4 2903                                and #3                                   ; 0= error msgs only ;; @@b4f4 284
 18596  b4f6 0a                                  asl                                      ; 1= REMs ;; @@b4f6 284
 18597  b4f7 0a                                  asl                                      ; 2= tokens ;; @@b4f7 284
 18598  b4f8 0a                                  asl                                       ;; @@b4f8 284
 18599  b4f9 8555                                sta helper                                ;; @@b4f9 284
 18600  b4fb 60                 _local_1283_20   rts                                       ;; @@b4fb 284
 18601                           ;; @@b4fc 284
 18602                           ;; @@b4fc 284
 18603                           ;; @@b4fc 284
 18604                          background                                                 ;; @@b4fc 285
 18605  b4fc 200db5                              jsr getnyb                               ; Set Vic background color ;; @@b4fc 285
 18606  b4ff 8e21d0                              stx vic+33                                ;; @@b4ff 285
 18607  b502 60                                  rts                                       ;; @@b502 285
 18608                           ;; @@b503 285
 18609                           ;; @@b503 285
 18610                           ;; @@b503 285
 18611                          border                                                     ;; @@b503 285
 18612  b503 200db5                              jsr getnyb                               ; Set Vic border color ;; @@b503 285
 18613  b506 8e20d0                              stx vic+32                                ;; @@b506 285
 18614  b509 60                                  rts                                       ;; @@b509 285
 18615                           ;; @@b50a 285
 18616                          ; .page ;; @@b50a 285
 18617                          getcomnyb                                                  ;; @@b50a 285
 18618  b50a 205b4e                              jsr chkcom                               ; check for comma ;; @@b50a 285
 18619                          getnyb                                                     ;; @@b50d 285
 18620  b50d 206c5d                              jsr getbyt                               ; Get a nybble, check range (0-15) ;; @@b50d 285
 18621                          chknyb                                                     ;; @@b510 285
 18622  b510 e010                                cpx #16                                   ;; @@b510 285
 18623  b512 b3e99c                              +lbcs fcerr                               ;; @@b512 285
 18624  b515 60                                  rts                                       ;; @@b515 285
 18625                           ;; @@b516 285
 18626                           ;; @@b516 285
 18627                           ;; @@b516 285
 18628                          chkesc                                                    ; Check for escape token, error if not, else get next token ;; @@b516 285
 18629  b516 c9fe                                cmp #esc_command_token                    ;; @@b516 285
 18630  b518 d32f79                              +lbne snerr                               ;; @@b518 285
 18631  b51b 208322                              jsr chrget                                ;; @@b51b 285
 18632  b51e f32979                              +lbeq snerr                              ; eos? report error if so ;; @@b51e 285
 18633  b521 60                                  rts                                       ;; @@b521 285
 18634                           ;; @@b522 285
 18635                           ;; @@b522 285
 18636                           ;; @@b522 285
 18637                          chkeos                                                    ; Check for next byte = end of statement, error if not ;; @@b522 285
 18638  b522 208322                              jsr chrget                                ;; @@b522 285
 18639  b525 d32279                              +lbne snerr                              ; eos? report error if not ;; @@b525 285
 18640  b528 60                                  rts                                       ;; @@b528 285
 18641                           ;; @@b529 285
 18642                           ;; @@b529 285
 18643                          ;.end ;; @@b529 285
 18644                          ; .page ;; @@b529 285
 18645                          ; .subttl SPRITE Commands and Functions ;; @@b529 285
 18646                           ;; @@b529 285
 18647                          ;************************************************************************************ ;; @@b529 285
 18648                          ; SPRITE CLR ;; @@b529 285
 18649                          ; SPRITE {LOAD|SAVE} "filename" [,Ddrive] [,Udevice] ;; @@b529 285
 18650                          ; SPRITE sprite [,enable [,color [,priority [,xexp [,yexp [,resolution] ]]]]] ;; @@b529 285
 18651                          ; ;; @@b529 285
 18652                          ; where: sprite  :== sprite number (1-8) ;; @@b529 285
 18653                          ;  enable  :== enable  (0=off, 1=on) ;; @@b529 285
 18654                          ;  color  :== color  (0-15) ;; @@b529 285
 18655                          ;  priority :== sprite/bgnd  (0=sprite, 1=bgnd) ;; @@b529 285
 18656                          ;  xexp  :== expand x direction (0=no, 1=yes) ;; @@b529 285
 18657                          ;  yexp  :== expand y direction (0=no, 1=yes) ;; @@b529 285
 18658                          ;  resolution :== resolution  (0=hires, 1=multicolor) ;; @@b529 285
 18659                          ;************************************************************************************ ;; @@b529 285
 18660                           ;; @@b529 285
 18661  b529 c99c               sprite           cmp #clr_token                           ; SPRITE CLR: init environment   [910717] ;; @@b529 285
 18662  b52b f3a609                              +lbeq Sprite_CLR                         ; yes ;; @@b52b 285
 18663  b52e c994                                cmp #save_token                          ; SPRITE SAVE: save sprite data   [911001] ;; @@b52e 285
 18664  b530 f048                                beq Sprite_Save                          ; yes ;; @@b530 285
 18665  b532 c993                                cmp #load_token                          ; SPRITE LOAD: load sprite data   [911001] ;; @@b532 285
 18666  b534 f057                                beq Sprite_Load                          ; yes ;; @@b534 285
 18667                           ;; @@b536 285
 18668  b536 20b5b5                              jsr get_sprite_number                    ; get sprite number in z_p_temp_1 ;; @@b536 285
 18669  b539 202679                              jsr optbyt                               ; look for (optional) enable ;; @@b539 285
 18670  b53c 9005                                bcc _local_1284_10                       ; none here, don't change ;; @@b53c 285
 18671  b53e a015                                ldy #21                                   ;; @@b53e 285
 18672  b540 209fb5                              jsr sprbit                               ; set/clear sprite bit ;; @@b540 285
 18673                           ;; @@b543 285
 18674  b543 202679             _local_1284_10   jsr optbyt                               ; get (optional) color ;; @@b543 285
 18675  b546 9009                                bcc _local_1284_20                       ; branch if no arg ;; @@b546 285
 18676  b548 2010b5                              jsr chknyb                               ; [910109] ;; @@b548 285
 18677  b54b 8a                                  txa                                       ;; @@b54b 285
 18678  b54c a676                                ldx z_p_temp_1                           ; get back sprite number ;; @@b54c 285
 18679                          ; jsr put_io_in_map ;; @@b54e 285
 18680  b54e 9d27d0                              sta vic+39,x                              ;; @@b54e 285
 18681                           ;; @@b551 285
 18682  b551 202679             _local_1284_20   jsr optbyt                               ; look for (optional) priority ;; @@b551 285
 18683  b554 9005                                bcc _local_1284_30                        ;; @@b554 285
 18684  b556 a01b                                ldy #27                                   ;; @@b556 285
 18685  b558 209fb5                              jsr sprbit                                ;; @@b558 285
 18686                           ;; @@b55b 285
 18687  b55b 202679             _local_1284_30   jsr optbyt                               ; look for (optional) x expansion ;; @@b55b 285
 18688  b55e 9005                                bcc _local_1284_40                        ;; @@b55e 285
 18689  b560 a01d                                ldy #29                                   ;; @@b560 285
 18690  b562 209fb5                              jsr sprbit                                ;; @@b562 285
 18691                           ;; @@b565 285
 18692  b565 202679             _local_1284_40   jsr optbyt                               ; look for (optional) y expansion ;; @@b565 285
 18693  b568 9005                                bcc _local_1284_50                        ;; @@b568 285
 18694  b56a a017                                ldy #23                                   ;; @@b56a 285
 18695  b56c 209fb5                              jsr sprbit                                ;; @@b56c 285
 18696                           ;; @@b56f 285
 18697  b56f 202679             _local_1284_50   jsr optbyt                               ; look for (optional) resolution ;; @@b56f 285
 18698  b572 9005                                bcc _local_1284_60                        ;; @@b572 285
 18699  b574 a01c                                ldy #28                                   ;; @@b574 285
 18700  b576 209fb5                              jsr sprbit                                ;; @@b576 285
 18701                           ;; @@b579 285
 18702  b579 60                 _local_1284_60   rts                                       ;; @@b579 285
 18703                           ;; @@b57a 285
 18704                          ; .page ;; @@b57a 285
 18705                          Sprite_Save                                               ; Just like Key_Save     [911001] ;; @@b57a 286
 18706  b57a 202e47                              jsr GetSaveChannel                        ;; @@b57a 286
 18707  b57d a95a                                lda #highds                              ; set starting & ending addresses ;; @@b57d 286
 18708  b57f a006                                ldy #>sprite_base                        ; start address & pointer to it ;; @@b57f 286
 18709  b581 a200                                ldx #<sprite_base                         ;; @@b581 286
 18710  b583 845b                                sty highds+1                              ;; @@b583 286
 18711  b585 865a                                stx highds                                ;; @@b585 286
 18712  b587 c8                                  iny                                      ; end address = start address + 512 + 1 ;; @@b587 286
 18713  b588 c8                                  iny                                       ;; @@b588 286
 18714  b589 e8                                  inx                                       ;; @@b589 286
 18715  b58a 83deb2                              +lbra savenb                             ; [910925] ;; @@b58a 286
 18716                           ;; @@b58d 286
 18717                           ;; @@b58d 286
 18718                           ;; @@b58d 286
 18719                          Sprite_Load                                                ;; @@b58d 286
 18720  b58d 20c946                              jsr GetLoadChannel                       ; get a channel      [911001] ;; @@b58d 286
 18721  b590 a006                                ldy #>sprite_base                         ;; @@b590 286
 18722  b592 a900                                lda #<sprite_base                         ;; @@b592 286
 18723  b594 20fa46                              jsr LoadBlock                            ; load first block ;; @@b594 286
 18724  b597 e65b                                inc highds+1                              ;; @@b597 286
 18725  b599 20fe46                              jsr LoadBlockNext                        ; load second block ;; @@b599 286
 18726  b59c 83887d                              +lbra list_err                           ; release channel, close file, return to main ;; @@b59c 286
 18727                           ;; @@b59f 286
 18728                          ; .page ;; @@b59f 286
 18729                          ;  Set or clear a bit in a VIC register ;; @@b59f 286
 18730                          ; ;; @@b59f 286
 18731                          ; .X = 1 to set, 0 to clear ;; @@b59f 286
 18732                          ; .Y = register in VIC to operate opon ;; @@b59f 286
 18733                           ;; @@b59f 286
 18734  b59f 8a                 sprbit           txa                                       ;; @@b59f 286
 18735  b5a0 4a                                  lsr                                      ; put lsb in .C (0 clear, 1 set sprite bit) ;; @@b5a0 286
 18736  b5a1 d35a9c                              +lbne fcerr                              ; only 0 or 1, please. ;; @@b5a1 286
 18737                          ; jsr put_io_in_map ;; @@b5a4 286
 18738  b5a4 a676                                ldx z_p_temp_1                           ; get sprite number ;; @@b5a4 286
 18739  b5a6 bd6579                              lda sbits,x                               ;; @@b5a6 286
 18740  b5a9 1900d0                              ora vic,y                                 ;; @@b5a9 286
 18741  b5ac b003                                bcs _local_1285_10                        ;; @@b5ac 286
 18742  b5ae 5d6579                              eor sbits,x                               ;; @@b5ae 286
 18743  b5b1 9900d0             _local_1285_10   sta vic,y                                 ;; @@b5b1 286
 18744  b5b4 60                                  rts                                       ;; @@b5b4 286
 18745                           ;; @@b5b5 286
 18746                           ;; @@b5b5 286
 18747                          get_sprite_number                                           ;; @@b5b5 287
 18748  b5b5 206c5d                              jsr getbyt                                ;; @@b5b5 287
 18749                          ; dex        [910221] ;; @@b5b8 287
 18750  b5b8 e008                                cpx #8                                    ;; @@b5b8 287
 18751  b5ba b3419c                              +lbcs fcerr                               ;; @@b5ba 287
 18752  b5bd 8676                                stx z_p_temp_1                            ;; @@b5bd 287
 18753  b5bf 60                                  rts                                       ;; @@b5bf 287
 18754                           ;; @@b5c0 287
 18755                          ;.end ;; @@b5c0 287
 18756                          ; .page ;; @@b5c0 287
 18757                          ; .subttl MOVSPR Command ;; @@b5c0 287
 18758                           ;; @@b5c0 287
 18759                          ;**************************************************************** ;; @@b5c0 287
 18760                          ; Move Sprite.  Position sprite and optionally animate it. ;; @@b5c0 287
 18761                          ; ;; @@b5c0 287
 18762                          ;   MOVSPR n, [ p | x#y ]   or   MOVSPR n, p1 TO p2, speed ;; @@b5c0 287
 18763                          ; ;; @@b5c0 287
 18764                          ;  n = Sprite number (0-7) ;; @@b5c0 287
 18765                          ; p = (x,y) coordinate. ;; @@b5c0 287
 18766                          ;  Relative and angular distances  are relative to ;; @@b5c0 287
 18767                          ;  current sprite position and scaled if scaling is on. ;; @@b5c0 287
 18768                          ; x#y = Constant movement at an angle-x with speed-y. ;; @@b5c0 287
 18769                          ;**************************************************************** ;; @@b5c0 287
 18770                           ;; @@b5c0 287
 18771  b5c0 a900               movspr           lda #0                                   ; flag 'movspr' initial coord   [910808] ;; @@b5c0 287
 18772  b5c2 8587                                sta op                                   ; (0=movspr, $80=movspr_to, $7f=mouse) ;; @@b5c2 287
 18773  b5c4 20b5b5                              jsr get_sprite_number                    ; get sprite # ;; @@b5c4 287
 18774  b5c7 20c3b7                              jsr sprcor                               ; get first coordinate (y,a) ;; @@b5c7 287
 18775                          movspr_1                                                  ; entry to eval destination coordinate  [910808] ;; @@b5ca 287
 18776  b5ca 2cf411                              bit numcnt                               ; test coordinate type ;; @@b5ca 287
 18777  b5cd 737a78                              +lbvs snerr                              ; syntax error ;; @@b5cd 287
 18778  b5d0 8cf011                              sty xdest                                ; save coordinate value ;; @@b5d0 287
 18779  b5d3 8cf211                              sty xdest+2                               ;; @@b5d3 287
 18780  b5d6 8df111                              sta xdest+1                               ;; @@b5d6 287
 18781  b5d9 8df311                              sta xdest+3                               ;; @@b5d9 287
 18782                           ;; @@b5dc 287
 18783  b5dc 20c3b7                              jsr sprcor                               ; get second coordinate (y,a) ;; @@b5dc 287
 18784  b5df 2cf411                              bit numcnt                               ; test coordinate type & dispatch accordingly ;; @@b5df 287
 18785  b5e2 5060                                bvc movspr_normal                        ; normal coordinates ;; @@b5e2 287
 18786  b5e4 3040                                bmi movspr_angle                         ; angular coordinates ;; @@b5e4 287
 18787                           ;; @@b5e6 287
 18788  b5e6 2487                                bit op                                   ; angle#speed, test if allowed ;; @@b5e6 287
 18789  b5e8 335f78                              +lbmi snerr                              ; ng- movspr_to call ;; @@b5e8 287
 18790  b5eb 5a                                  phy                                      ; ok- save speed value ;; @@b5eb 287
 18791  b5ec a004                                ldy #xdest-vwork                          ;; @@b5ec 287
 18792  b5ee 20b5ba                              jsr getang                               ; get angle of movement ;; @@b5ee 287
 18793  b5f1 a676                                ldx z_p_temp_1                           ; get sprite number ;; @@b5f1 287
 18794  b5f3 bcfeb7                              ldy sproff,x                             ; get offset to speed data ;; @@b5f3 287
 18795  b5f6 a900                                lda #0                                    ;; @@b5f6 287
 18796  b5f8 990512                              sta sprite_data,y                        ; turn off sprite speed ;; @@b5f8 287
 18797  b5fb c8                                  iny                                       ;; @@b5fb 287
 18798                           ;; @@b5fc 287
 18799  b5fc a203                                ldx #3                                    ;; @@b5fc 287
 18800  b5fe 5efb11             _local_1286_20   lsr sinval,x                              ;; @@b5fe 287
 18801  b601 ca                                  dex                                       ;; @@b601 287
 18802  b602 7efb11                              ror sinval,x                              ;; @@b602 287
 18803  b605 ca                                  dex                                       ;; @@b605 287
 18804  b606 10f6                                bpl _local_1286_20                        ;; @@b606 287
 18805                           ;; @@b608 287
 18806  b608 78                 _local_1286_30   sei                                       ;; @@b608 287
 18807  b609 e8                                  inx                                      ; x=0 ;; @@b609 287
 18808  b60a bdfa11                              lda angsgn,x                             ; move angle data to speed data ;; @@b60a 287
 18809  b60d c8                                  iny                                       ;; @@b60d 287
 18810  b60e 990512                              sta sprite_data,y                         ;; @@b60e 287
 18811  b611 e004                                cpx #4                                    ;; @@b611 287
 18812  b613 d0f3                                bne _local_1286_30                        ;; @@b613 287
 18813                           ;; @@b615 287
 18814  b615 a900                                lda #0                                   ; clear speed angle counts ;; @@b615 287
 18815  b617 c8                 _local_1286_40   iny                                       ;; @@b617 287
 18816  b618 990512                              sta sprite_data,y                         ;; @@b618 287
 18817  b61b ca                                  dex                                       ;; @@b61b 287
 18818  b61c d0f9                                bne _local_1286_40                        ;; @@b61c 287
 18819                           ;; @@b61e 287
 18820  b61e 68                                  pla                                      ; restore speed value ;; @@b61e 287
 18821  b61f 293f                                and #$3f                                 ; limit range (0-63) ????  [910806] ;; @@b61f 287
 18822  b621 99fb11                              sta sprite_data-10,y                     ; start sprite movement ;; @@b621 287
 18823  b624 58                                  cli                                       ;; @@b624 287
 18824  b625 60                                  rts                                       ;; @@b625 287
 18825                           ;; @@b626 287
 18826                          movspr_angle                                               ;; @@b626 288
 18827                          ; jsr swapxy  ;swap y and a (eventually) : y ==> x ;; @@b626 288
 18828                          ; tay   ;        a ==> y ;; @@b626 288
 18829                          ; txa   ;        x ==> a ;; @@b626 288
 18830  b626 48                                  pha                                       ;; @@b626 288
 18831  b627 98                                  tya                                       ;; @@b627 288
 18832  b628 7a                                  ply                                       ;; @@b628 288
 18833                           ;; @@b629 288
 18834  b629 20b8ba                              jsr gtang1                               ; get angle values ;; @@b629 288
 18835                          ; ldx #xdest-vwork ;; @@b62c 288
 18836                          ; jsr scalxy  ;scale lengths ;; @@b62c 288
 18837  b62c a204                                ldx #xdest-vwork                          ;; @@b62c 288
 18838  b62e 18                                  clc                                       ;; @@b62e 288
 18839                           ;; @@b62f 288
 18840  b62f 2011bb             _local_1287_60   jsr angmlt                               ; multiply lengths*angles for x and y ;; @@b62f 288
 18841  b632 9dec11                              sta vwork,x                               ;; @@b632 288
 18842  b635 98                                  tya                                       ;; @@b635 288
 18843  b636 9ded11                              sta vwork+1,x                             ;; @@b636 288
 18844  b639 e8                                  inx                                       ;; @@b639 288
 18845  b63a e8                                  inx                                       ;; @@b63a 288
 18846  b63b e006                                cpx #ydest-vwork                          ;; @@b63b 288
 18847  b63d f0f0                                beq _local_1287_60                       ; loop to do y-position ;; @@b63d 288
 18848                           ;; @@b63f 288
 18849  b63f 6ef411                              ror numcnt                               ; shift in carry to set msb ;; @@b63f 288
 18850  b642 8006                                bra movspr_position                      ; go place sprite ;; @@b642 288
 18851                           ;; @@b644 288
 18852                           ;; @@b644 288
 18853                          movspr_normal                                             ; [910122] ;; @@b644 289
 18854  b644 8cf211                              sty xdest+2                              ; save second coordinate (y,a) ;; @@b644 289
 18855  b647 8df311                              sta xdest+3                               ;; @@b647 289
 18856                          ; ldx #xdest-vwork ;; @@b64a 289
 18857                          ; jsr scalxy  ;scale the coordinates ;; @@b64a 289
 18858                           ;; @@b64a 289
 18859                           ;; @@b64a 289
 18860                          movspr_position                                            ;; @@b64a 289
 18861  b64a 78                                  sei                                      ; [910123] ;; @@b64a 289
 18862  b64b a576                                lda z_p_temp_1                           ; get sprite number ;; @@b64b 289
 18863  b64d aa                                  tax                                      ; use as an index ;; @@b64d 289
 18864  b64e 0a                                  asl                                       ;; @@b64e 289
 18865  b64f a8                                  tay                                      ; get sprite-number * 2 as another index ;; @@b64f 289
 18866                           ;; @@b650 289
 18867  b650 7f8701                              bbr7 op,_local_1288_10                    ;; @@b650 289
 18868  b653 60                                  rts                                      ; >>>exit here if movspr_to call   [910808] ;; @@b653 289
 18869                           ;; @@b654 289
 18870  b654 adf211             _local_1288_10   lda xdest+2                              ; get y-coordinate ;; @@b654 289
 18871  b657 0ef411                              asl numcnt                               ; test if relative ;; @@b657 289
 18872  b65a 9009                                bcc _local_1288_80                       ; skip if absolute ;; @@b65a 289
 18873  b65c 18                                  clc                                       ;; @@b65c 289
 18874  b65d 1003                                bpl _local_1288_75                       ; skip if normal coordinates ;; @@b65d 289
 18875  b65f 49ff                                eor #$ff                                  ;; @@b65f 289
 18876  b661 38                                  sec                                      ; invert to subtract if angular ;; @@b661 289
 18877  b662 7901d0             _local_1288_75   adc vic+1,y                              ; add to current sprite y-value  ???vic_save ;; @@b662 289
 18878                           ;; @@b665 289
 18879  b665 9901d0             _local_1288_80   sta vic+1,y                              ; save new sprite y-position  ???vic_save ;; @@b665 289
 18880  b668 adf011                              lda xdest                                ; get low byte of x-coordinate ;; @@b668 289
 18881  b66b 0ef411                              asl numcnt                               ; test if relative ;; @@b66b 289
 18882  b66e 1011                                bpl _local_1288_95                       ; skip if absolute ;; @@b66e 289
 18883  b670 18                                  clc                                       ;; @@b670 289
 18884  b671 7900d0                              adc vic,y                                ; add current sprite x-position  ???vic_save ;; @@b671 289
 18885  b674 9900d0                              sta vic,y                                ; save sprite x-position   ???vic_save ;; @@b674 289
 18886  b677 b003                                bcs _local_1288_90                       ; skip if carry ;; @@b677 289
 18887  b679 eef111                              inc xdest+1                              ; invert lsb ;; @@b679 289
 18888                           ;; @@b67c 289
 18889  b67c ad10d0             _local_1288_90   lda vic+16                               ; get x-position msb bits  ???vic_save ;; @@b67c 289
 18890  b67f 8009                                bra _local_1288_98                       ; test if need to invert msb bit ;; @@b67f 289
 18891                           ;; @@b681 289
 18892  b681 9900d0             _local_1288_95   sta vic,y                                ; save new sprite x-position  ???vic_save ;; @@b681 289
 18893  b684 ad10d0                              lda vic+16                               ; ???vic_save ;; @@b684 289
 18894  b687 1d6579                              ora sbits,x                              ; set x-position msb bit ;; @@b687 289
 18895                           ;; @@b68a 289
 18896  b68a 4ef111             _local_1288_98   lsr xdest+1                              ; match to lsb of x-coordinate high byte ;; @@b68a 289
 18897  b68d b003                                bcs _local_1288_100                      ; skip if should be set ;; @@b68d 289
 18898  b68f 5d6579                              eor sbits,x                              ; reset bit ;; @@b68f 289
 18899                           ;; @@b692 289
 18900  b692 8d10d0             _local_1288_100  sta vic+16                               ; save position msb bits   ???vic_save ;; @@b692 289
 18901                          ; cli ;; @@b695 289
 18902                          ;1_local_1288_10 rts   ; mouse or movspr_to ;; @@b695 289
 18903                           ;; @@b695 289
 18904                          ; .page ;; @@b695 289
 18905                          movspr_to                                                 ; setup for moving sprite to a particular position ;; @@b695 290
 18906                          ;we have already positioned the sprite onscreen ;; @@b695 290
 18907  b695 208522                              jsr chrgot                               ; reget terminating character ;; @@b695 290
 18908  b698 c9a4                                cmp #to_token                             ;; @@b698 290
 18909  b69a f002                                beq _local_1289_5                        ; not our call ;; @@b69a 290
 18910  b69c 58                                  cli                                       ;; @@b69c 290
 18911  b69d 60                                  rts                                       ;; @@b69d 290
 18912                           ;; @@b69e 290
 18913  b69e f787               _local_1289_5    smb7 op                                  ; it's for us- let everybody else know we're in charge ;; @@b69e 290
 18914  b6a0 208322                              jsr chrget                               ; move to next non-space character ;; @@b6a0 290
 18915  b6a3 18                                  clc                                       ;; @@b6a3 290
 18916  b6a4 20c6b7                              jsr sprcor_1                             ; go get & evaluate destination coordinate ;; @@b6a4 290
 18917  b6a7 20cab5                              jsr movspr_1                             ; returns with sprite# in .x, VIC sprite index in .y, ;; @@b6a7 290
 18918                          ;P1 in VIC sprite regs, and P2 in x,ydest ;; @@b6aa 290
 18919  b6aa 0ef411                              asl numcnt                               ; Y: handle specific coordinate types ;; @@b6aa 290
 18920  b6ad 900f                                bcc _local_1289_20                       ; skip if absolute ;; @@b6ad 290
 18921  b6af 18                                  clc                                       ;; @@b6af 290
 18922  b6b0 adf211                              lda xdest+2                              ; get y-coordinate ;; @@b6b0 290
 18923  b6b3 1003                                bpl _local_1289_10                       ; skip if normal coordinates ;; @@b6b3 290
 18924  b6b5 49ff                                eor #$ff                                  ;; @@b6b5 290
 18925  b6b7 38                                  sec                                      ; invert to subtract if angular ;; @@b6b7 290
 18926  b6b8 7901d0             _local_1289_10   adc vic+1,y                              ; add to current sprite y-value ???vic_save ;; @@b6b8 290
 18927  b6bb 8df211                              sta xdest+2                              ; save sprite destination y-position ;; @@b6bb 290
 18928                           ;; @@b6be 290
 18929  b6be 0ef411             _local_1289_20   asl numcnt                               ; X: handle specific coordinate types ;; @@b6be 290
 18930  b6c1 100f                                bpl _local_1289_30                       ; skip if absolute ;; @@b6c1 290
 18931  b6c3 18                                  clc                                       ;; @@b6c3 290
 18932  b6c4 adf011                              lda xdest                                ; get low byte of x-coordinate ;; @@b6c4 290
 18933  b6c7 7900d0                              adc vic,y                                ; add current sprite x-position  ???vic_save ;; @@b6c7 290
 18934  b6ca 8df011                              sta xdest                                ; save sprite destination x-position ;; @@b6ca 290
 18935  b6cd 9003                                bcc _local_1289_30                        ;; @@b6cd 290
 18936  b6cf eef111                              inc xdest+1                               ;; @@b6cf 290
 18937                           ;; @@b6d2 290
 18938  b6d2 5a                 _local_1289_30   phy                                       ;; @@b6d2 290
 18939  b6d3 20825d                              jsr combyt                               ; get speed parameter ;; @@b6d3 290
 18940  b6d6 8a                                  txa                                       ;; @@b6d6 290
 18941  b6d7 293f                                and #$3f                                 ; limit range (0-63) ???? ;; @@b6d7 290
 18942  b6d9 0980                                ora #$80                                  ;; @@b6d9 290
 18943  b6db 8d8411                              sta xcnt                                 ; save in temp. ;; @@b6db 290
 18944  b6de 7a                                  ply                                       ;; @@b6de 290
 18945                           ;; @@b6df 290
 18946  b6df b900d0                              lda vic,y                                ; copy current sprite pos'n to line vars ;; @@b6df 290
 18947  b6e2 8dec11                              sta xpos                                 ; in preparation for line calculations ;; @@b6e2 290
 18948  b6e5 b901d0                              lda vic+1,y                               ;; @@b6e5 290
 18949  b6e8 8dee11                              sta ypos                                  ;; @@b6e8 290
 18950  b6eb a900                                lda #0                                    ;; @@b6eb 290
 18951  b6ed 8ded11                              sta xpos+1                                ;; @@b6ed 290
 18952  b6f0 8def11                              sta ypos+1                                ;; @@b6f0 290
 18953  b6f3 98                                  tya                                       ;; @@b6f3 290
 18954  b6f4 4a                                  lsr                                       ;; @@b6f4 290
 18955  b6f5 a8                                  tay                                       ;; @@b6f5 290
 18956  b6f6 b96579                              lda sbits,y                               ;; @@b6f6 290
 18957  b6f9 2d10d0                              and vic+16                                ;; @@b6f9 290
 18958  b6fc f003                                beq _local_1289_40                        ;; @@b6fc 290
 18959  b6fe eeed11                              inc xpos+1                                ;; @@b6fe 290
 18960                          _local_1289_40                                             ;; @@b701 290
 18961                          ; .page ;; @@b701 290
 18962                          ;****************************************************************** ;; @@b701 290
 18963                          ;  MOVSPR n, p1 TO p2 - move a sprite along line from p1 to p2 ;; @@b701 290
 18964                          ; ;; @@b701 290
 18965                          ; The following is performed now: ;; @@b701 290
 18966                          ; ;; @@b701 290
 18967                          ;           absx    = abs(destx-posx) : absy = abs(desty-posy) ;; @@b701 290
 18968                          ;           sgnx    = sgn(destx-posx) : sgny = sgn(desty-posy) ;; @@b701 290
 18969                          ;                     ( sgn=(1,0,-1) if (+,0,-) ) ;; @@b701 290
 18970                          ;           greatr  = index to the greatr of absx,absy ;; @@b701 290
 18971                          ;           lesser  = index to the smaller of absx,absy ;; @@b701 290
 18972                          ; ;; @@b701 290
 18973                          ;           fct1    = 2*min(absx,absy) ;; @@b701 290
 18974                          ;           fct2    = fct1 - 2*max(absx,absy) ;; @@b701 290
 18975                          ;           error   = fct1 - max(absx,absy) ;; @@b701 290
 18976                          ; ;; @@b701 290
 18977                          ; The following is performed during IRQ: ;; @@b701 290
 18978                          ; ;; @@b701 290
 18979                          ;           for i:= 1 to max(absx,absy) do begin ;; @@b701 290
 18980                          ;                 movspr n, posx, posy ;; @@b701 290
 18981                          ;                 if error > 0 then begin ;; @@b701 290
 18982                          ;                      pos(lesser):= pos(lesser) + sgn(lesser) ;; @@b701 290
 18983                          ;                      error:= error + fct2 ;; @@b701 290
 18984                          ;                      end ;; @@b701 290
 18985                          ;                      else error:= error + fct1 ;; @@b701 290
 18986                          ;                 pos(greatr):= pos(greatr) + sgn(greatr) ;; @@b701 290
 18987                          ;           end; ;; @@b701 290
 18988                          ; ;; @@b701 290
 18989                          ; (modification of C128 Bresenham DrawLn algorithm 910808 F.Bowen) ;; @@b701 290
 18990                          ;****************************************************************** ;; @@b701 290
 18991                           ;; @@b701 290
 18992                          movspr_line                                                ;; @@b701 291
 18993  b701 a202                                ldx #ypos-vwork                           ;; @@b701 291
 18994  b703 a006                                ldy #ydest-vwork                          ;; @@b703 291
 18995  b705 a900               _local_1290_10   lda #0                                    ;; @@b705 291
 18996  b707 9d9511                              sta xsgn,x                               ; init direction pointers ;; @@b707 291
 18997  b70a 9d9611                              sta xsgn+1,x                              ;; @@b70a 291
 18998  b70d 207fbb                              jsr abstwo                               ; get absolute value of coordinate differences ;; @@b70d 291
 18999  b710 1008                                bpl _local_1290_20                       ; and determine direction ;; @@b710 291
 19000  b712 de9511                              dec xsgn,x                               ; negative direction ;; @@b712 291
 19001  b715 de9611                              dec xsgn+1,x                              ;; @@b715 291
 19002  b718 800b                                bra _local_1290_40                        ;; @@b718 291
 19003                           ;; @@b71a 291
 19004  b71a c900               _local_1290_20   cmp #0                                    ;; @@b71a 291
 19005  b71c d004                                bne _local_1290_30                        ;; @@b71c 291
 19006  b71e c000                                cpy #0                                    ;; @@b71e 291
 19007  b720 f003                                beq _local_1290_40                       ; zero direction ;; @@b720 291
 19008  b722 fe9511             _local_1290_30   inc xsgn,x                               ; positive direction ;; @@b722 291
 19009  b725 9d9111             _local_1290_40   sta xabs,x                                ;; @@b725 291
 19010  b728 0a                                  asl                                       ;; @@b728 291
 19011  b729 9d9911                              sta fct,x                                ; fct(x,y) = 2*abs(x,y) ;; @@b729 291
 19012  b72c 98                                  tya                                       ;; @@b72c 291
 19013  b72d 9d9211                              sta xabs+1,x                              ;; @@b72d 291
 19014  b730 2a                                  rol                                       ;; @@b730 291
 19015  b731 9d9a11                              sta fct+1,x                               ;; @@b731 291
 19016  b734 ca                                  dex                                       ;; @@b734 291
 19017  b735 ca                                  dex                                       ;; @@b735 291
 19018  b736 a004                                ldy #xdest-vwork                         ; loop to do in x-direction ;; @@b736 291
 19019  b738 e000                                cpx #xpos-vwork                           ;; @@b738 291
 19020  b73a f0c9                                beq _local_1290_10                        ;; @@b73a 291
 19021                           ;; @@b73c 291
 19022  b73c a202                                ldx #yabs-savram                         ; determine max(xabs,yabs) ;; @@b73c 291
 19023  b73e a000                                ldy #xabs-savram                          ;; @@b73e 291
 19024  b740 205cbb                              jsr subtwo_savram                         ;; @@b740 291
 19025  b743 a900                                lda #0                                    ;; @@b743 291
 19026  b745 2a                                  rol                                       ;; @@b745 291
 19027  b746 2a                                  rol                                      ; a = c * 2 ;; @@b746 291
 19028  b747 8d0312                              sta lesser                               ; index to smaller delta ;; @@b747 291
 19029  b74a 4902                                eor #2                                    ;; @@b74a 291
 19030  b74c 8d0412                              sta greatr                               ; index to greater delta ;; @@b74c 291
 19031                           ;; @@b74f 291
 19032  b74f 18                                  clc                                       ;; @@b74f 291
 19033  b750 a908                                lda #fct-savram                           ;; @@b750 291
 19034  b752 6d0312                              adc lesser                                ;; @@b752 291
 19035  b755 48                                  pha                                       ;; @@b755 291
 19036  b756 a8                                  tay                                       ;; @@b756 291
 19037  b757 4902                                eor #2                                    ;; @@b757 291
 19038  b759 aa                                  tax                                       ;; @@b759 291
 19039  b75a 205cbb                              jsr subtwo_savram                        ; fct(greatr) = fct(lesser)-fct(greatr) ;; @@b75a 291
 19040  b75d 9d9111                              sta savram,x                              ;; @@b75d 291
 19041  b760 8b9211                              sty savram+1,x                            ;; @@b760 291
 19042                           ;; @@b763 291
 19043  b763 7a                                  ply                                      ; fct(lesser) ;; @@b763 291
 19044  b764 18                                  clc                                       ;; @@b764 291
 19045  b765 a900                                lda #xabs-savram                          ;; @@b765 291
 19046  b767 6d0412                              adc greatr                                ;; @@b767 291
 19047  b76a aa                                  tax                                       ;; @@b76a 291
 19048  b76b 205cbb                              jsr subtwo_savram                        ; error = fct(lesser) - abs(greatr) ;; @@b76b 291
 19049  b76e 8d9d11                              sta errval                                ;; @@b76e 291
 19050  b771 8c9e11                              sty errval+1                              ;; @@b771 291
 19051                           ;; @@b774 291
 19052                          ; At this point, we've positioned the sprite at the start position, and have ;; @@b774 291
 19053                          ; calculated everything we need to move it along a line towards the destination ;; @@b774 291
 19054                          ; position.  All that's left is to copy the working vars into the sprite_data ;; @@b774 291
 19055                          ; tables where the IRQ routine can find & diddle with our data. ;; @@b774 291
 19056                          ; ;; @@b774 291
 19057                          ;    move ang/dist move line ;; @@b774 291
 19058                          ;  offset= 0 b7=0+speed b7=1+speed ;; @@b774 291
 19059                          ;   1 counter  counter lo ;; @@b774 291
 19060                          ;   2 angle sign         hi ;; @@b774 291
 19061                          ;   3,4 delta-X  dir+min/max ;; @@b774 291
 19062                          ;   5,6 delta-Y  fct1 ;; @@b774 291
 19063                          ;   7,8 total-X  fct2 ;; @@b774 291
 19064                          ;   9,10 total-Y  error ;; @@b774 291
 19065                           ;; @@b774 291
 19066  b774 a476                                ldy z_p_temp_1                           ; sprite # ;; @@b774 291
 19067  b776 befeb7                              ldx sproff,y                             ; sprite IRQ table offset ;; @@b776 291
 19068                           ;; @@b779 291
 19069  b779 ad8411                              lda xcnt                                 ; set speed factor ;; @@b779 291
 19070  b77c 9d0512                              sta sprite_data,x                         ;; @@b77c 291
 19071  b77f ac0412                              ldy greatr                                ;; @@b77f 291
 19072  b782 b99111                              lda xabs,y                               ; set counter = max(xyabs) ;; @@b782 291
 19073  b785 9d0612                              sta sprite_data+1,x                       ;; @@b785 291
 19074  b788 b99211                              lda xabs+1,y                              ;; @@b788 291
 19075  b78b 9d0712                              sta sprite_data+2,x                       ;; @@b78b 291
 19076  b78e b99511                              lda xsgn,y                               ; set dir(max) and max ;; @@b78e 291
 19077  b791 199611                              ora xsgn+1,y                              ;; @@b791 291
 19078  b794 2903                                and #3                                    ;; @@b794 291
 19079  b796 4a                                  lsr                                       ;; @@b796 291
 19080  b797 6a                                  ror                                       ;; @@b797 291
 19081  b798 0d0412                              ora greatr                                ;; @@b798 291
 19082  b79b 6a                                  ror                                       ;; @@b79b 291
 19083  b79c 9d0912                              sta sprite_data+4,x                       ;; @@b79c 291
 19084  b79f ac0312                              ldy lesser                                ;; @@b79f 291
 19085  b7a2 b99511                              lda xsgn,y                               ; set dir(min) and min ;; @@b7a2 291
 19086  b7a5 199611                              ora xsgn+1,y                              ;; @@b7a5 291
 19087  b7a8 2903                                and #3                                    ;; @@b7a8 291
 19088  b7aa 4a                                  lsr                                       ;; @@b7aa 291
 19089  b7ab 6a                                  ror                                       ;; @@b7ab 291
 19090  b7ac 0d0312                              ora lesser                                ;; @@b7ac 291
 19091  b7af 6a                                  ror                                       ;; @@b7af 291
 19092  b7b0 9d0812                              sta sprite_data+3,x                       ;; @@b7b0 291
 19093  b7b3 a000                                ldy #0                                   ; set f1, f2, and e ;; @@b7b3 291
 19094  b7b5 b99911             _local_1290_50   lda fct,y                                 ;; @@b7b5 291
 19095  b7b8 9d0a12                              sta sprite_data+5,x                       ;; @@b7b8 291
 19096  b7bb e8                                  inx                                       ;; @@b7bb 291
 19097  b7bc c8                                  iny                                       ;; @@b7bc 291
 19098  b7bd c006                                cpy #6                                    ;; @@b7bd 291
 19099  b7bf 90f4                                bcc _local_1290_50                        ;; @@b7bf 291
 19100                           ;; @@b7c1 291
 19101  b7c1 58                                  cli                                       ;; @@b7c1 291
 19102  b7c2 60                                  rts                                      ; done! ;; @@b7c2 291
 19103                           ;; @@b7c3 291
 19104                          ; .page ;; @@b7c3 291
 19105                          ;  SPRCOR  -- Get sprite position coordinate ;; @@b7c3 291
 19106                          ; ;; @@b7c3 291
 19107                           ;; @@b7c3 291
 19108  b7c3 20ebb7             sprcor           jsr chkcom_1                             ; check for a comma ;; @@b7c3 292
 19109                          sprcor_1                                                   ;; @@b7c6 292
 19110  b7c6 6ef411                              ror numcnt                               ; reset msb if comma else set msb ;; @@b7c6 292
 19111  b7c9 100b                                bpl _local_1291_10                       ; skip if got a comma ;; @@b7c9 292
 19112  b7cb c93b                                cmp #';'                                 ; test if angular data ;; @@b7cb 292
 19113  b7cd f013                                beq _local_1291_30                       ; skip if yes - 2 msb's = 1 1 ;; @@b7cd 292
 19114  b7cf c923                                cmp #'#'                                 ; test if speed type ;; @@b7cf 292
 19115  b7d1 f00e                                beq _local_1291_20                       ; skip if yes - 2 msb's = 0 1 ;; @@b7d1 292
 19116  b7d3 837476                              +lbra snerr                              ; syntax error if none of above ;; @@b7d3 292
 19117                           ;; @@b7d6 292
 19118  b7d6 208522             _local_1291_10   jsr chrgot                               ; test for relative coordinate ;; @@b7d6 292
 19119  b7d9 c9aa                                cmp #plus_token                          ; test if plus sign ;; @@b7d9 292
 19120  b7db f005                                beq _local_1291_30                       ; skip if yes - show relative ;; @@b7db 292
 19121  b7dd c9ab                                cmp #minus_token                         ; test if minus sign ;; @@b7dd 292
 19122  b7df f001                                beq _local_1291_30                       ; skip if yes - show relative ;; @@b7df 292
 19123  b7e1 18                 _local_1291_20   clc                                      ; reset to show absolute ;; @@b7e1 292
 19124  b7e2 6ef411             _local_1291_30   ror numcnt                               ; shift in second flag bit ;; @@b7e2 292
 19125                           ;; @@b7e5 292
 19126  b7e5 20d84c             sadwrd           jsr frmnum                               ; get number     label [910307] ;; @@b7e5 293
 19127  b7e8 83a7a5                              +lbra getsad                             ; get signed 2 byte coordinate,do rts ;; @@b7e8 293
 19128                           ;; @@b7eb 293
 19129                          ; .page ;; @@b7eb 293
 19130                          ;************************************************************* ;; @@b7eb 293
 19131                          ; CHKCOM_1  --  Check for a comma ;; @@b7eb 293
 19132                          ; ;; @@b7eb 293
 19133                          ;  carry set & eq = end of string ;; @@b7eb 293
 19134                          ;  carry set & neq = not a comma ;; @@b7eb 293
 19135                          ;  carry clear = a comma ;; @@b7eb 293
 19136                          ;************************************************************* ;; @@b7eb 293
 19137                           ;; @@b7eb 293
 19138                          chkcom_1                                                   ;; @@b7eb 293
 19139  b7eb 208522                              jsr chrgot                               ; get character in input stream ;; @@b7eb 293
 19140  b7ee f00d                                beq _local_1292_20                       ; skip if end of string ;; @@b7ee 293
 19141  b7f0 c92c                                cmp #','                                 ; check if a comma ;; @@b7f0 293
 19142  b7f2 18                                  clc                                       ;; @@b7f2 293
 19143  b7f3 f001                                beq _local_1292_10                       ; skip if yes ;; @@b7f3 293
 19144  b7f5 38                                  sec                                      ; set carry if not ;; @@b7f5 293
 19145  b7f6 08                 _local_1292_10   php                                       ;; @@b7f6 293
 19146  b7f7 48                                  pha                                       ;; @@b7f7 293
 19147  b7f8 208322                              jsr chrget                               ; move to next non-space character ;; @@b7f8 293
 19148  b7fb 68                                  pla                                       ;; @@b7fb 293
 19149  b7fc 28                                  plp                                       ;; @@b7fc 293
 19150  b7fd 60                 _local_1292_20   rts                                       ;; @@b7fd 293
 19151                           ;; @@b7fe 293
 19152                           ;; @@b7fe 293
 19153  b7fe 000b16212c37424d   sproff           !text 0,11,22,33,44,55,66,77             ; sprite offsets into speed table ;; @@b7fe 294
 19154                           ;; @@b806 294
 19155                          ;.end ;; @@b806 294
 19156                          ; .page ;; @@b806 294
 19157                          ; .subttl SPRCOLOR Command ;; @@b806 294
 19158                           ;; @@b806 294
 19159                          ;************************************************************** ;; @@b806 294
 19160                          ;* ;; @@b806 294
 19161                          ;*   SPRCOLOR - Set sprite multicolor registers ;; @@b806 294
 19162                          ;* ;; @@b806 294
 19163                          ;* syntax : SPRCOLOR [multicolor_1] [,multicolor_2] ;; @@b806 294
 19164                          ;* ;; @@b806 294
 19165                          ;************************************************************** ;; @@b806 294
 19166                           ;; @@b806 294
 19167                          sprcolor                                                   ;; @@b806 294
 19168  b806 c92c                                cmp #','                                 ; is there a first arg? ;; @@b806 294
 19169  b808 f006                                beq _local_1293_10                       ; nope, skip to second ;; @@b808 294
 19170                           ;; @@b80a 294
 19171  b80a 200db5                              jsr getnyb                               ; get 1 byte arg in .X, range 0-15 ;; @@b80a 294
 19172                          ; jsr put_io_in_map ;; @@b80d 294
 19173  b80d 8e25d0                              stx vic+37                                ;; @@b80d 294
 19174                           ;; @@b810 294
 19175  b810 202679             _local_1293_10   jsr optbyt                               ; get (optional) 1 byte arg in .X ;; @@b810 294
 19176  b813 9006                                bcc _local_1293_20                        ;; @@b813 294
 19177  b815 2010b5                              jsr chknyb                               ; range 0-15 ;; @@b815 294
 19178                          ; jsr put_io_in_map ;; @@b818 294
 19179  b818 8e26d0                              stx vic+38                                ;; @@b818 294
 19180                           ;; @@b81b 294
 19181  b81b 60                 _local_1293_20   rts                                       ;; @@b81b 294
 19182                           ;; @@b81c 294
 19183                          ;.end ;; @@b81c 294
 19184                          ; .page ;; @@b81c 294
 19185                          ; .subttl SPRSAV Command ;; @@b81c 294
 19186                           ;; @@b81c 294
 19187                          ;*************************************************************** ;; @@b81c 294
 19188                          ;  SPRSAV ( n1 / s1$ ) , ( n2 / s2$ ) ;; @@b81c 294
 19189                          ;   - move string(s1) or sprite(n1) to string(s2) or sprite(n2) ;; @@b81c 294
 19190                          ;               n1 & n2 = a sprite number (1-8) ;; @@b81c 294
 19191                          ;                   s1$ = a string variable or expression ;; @@b81c 294
 19192                          ;                   s2$ = a string variable ;; @@b81c 294
 19193                          ;*************************************************************** ;; @@b81c 294
 19194                           ;; @@b81c 294
 19195  b81c 20a9b8             sprsav           jsr savinp                               ; evaluate 1st expression ;; @@b81c 295
 19196  b81f b02f                                bcs _local_1294_20                       ; skip if source is a string ;; @@b81f 295
 19197  b821 854b                                sta forpnt                                ;; @@b821 295
 19198  b823 844c                                sty forpnt+1                             ; save sprite address ;; @@b823 295
 19199  b825 a03e                                ldy #62                                   ;; @@b825 295
 19200                           ;; @@b827 295
 19201  b827 b14b               _local_1294_10   lda (forpnt),y                           ; move sprite def to save area ;; @@b827 295
 19202  b829 999111                              sta savram,y                              ;; @@b829 295
 19203  b82c 88                                  dey                                       ;; @@b82c 295
 19204  b82d 10f8                                bpl _local_1294_10                        ;; @@b82d 295
 19205                           ;; @@b82f 295
 19206  b82f c8                                  iny                                      ; (0) ;; @@b82f 295
 19207  b830 8cd111                              sty savram+64                            ; save sprite column length ;; @@b830 295
 19208  b833 8cd311                              sty savram+66                            ; save sprite row length ;; @@b833 295
 19209  b836 a917                                lda #23                                   ;; @@b836 295
 19210  b838 8dd011                              sta savram+63                             ;; @@b838 295
 19211  b83b a914                                lda #20                                   ;; @@b83b 295
 19212  b83d 8dd211                              sta savram+65                             ;; @@b83d 295
 19213  b840 a291                                ldx #<savram                             ; set ptr to start of sprite def ;; @@b840 295
 19214  b842 a011                                ldy #>savram                              ;; @@b842 295
 19215  b844 8670                                stx strng1                               ; ** ;; @@b844 295
 19216  b846 8471                                sty strng1+1                             ; ** ;; @@b846 295
 19217                           ;; @@b848 295
 19218  b848 a943                                lda #67                                  ; set sprite length including lengths ;; @@b848 295
 19219  b84a 20b75a                              jsr strlit_1                             ; **get string space, copy savram to it ;; @@b84a 295
 19220  b84d 20c2b8                              jsr desc_free                            ; **free up temp descriptor ;; @@b84d 295
 19221                           ;; @@b850 295
 19222  b850 8eff11             _local_1294_20   stx savsiz                               ; save source length ;; @@b850 295
 19223  b853 8d0012                              sta savsiz+1                              ;; @@b853 295
 19224  b856 8c0112                              sty savsiz+2                             ; save source start address ;; @@b856 295
 19225                           ;; @@b859 295
 19226  b859 205b4e                              jsr chkcom                               ; check for a comma ;; @@b859 295
 19227  b85c a53d                                lda txtptr                               ; save basic text pointer ;; @@b85c 295
 19228  b85e 8d0312                              sta sprtmp_1                              ;; @@b85e 295
 19229  b861 a53e                                lda txtptr+1                              ;; @@b861 295
 19230  b863 8d0412                              sta sprtmp_2                              ;; @@b863 295
 19231  b866 20a9b8                              jsr savinp                               ; get next destination parameter ;; @@b866 295
 19232  b869 b022                                bcs savs50                               ; skip if string ;; @@b869 295
 19233                           ;; @@b86b 295
 19234  b86b 8587                                sta grapnt                                ;; @@b86b 295
 19235  b86d 8488                                sty grapnt+1                             ; save sprite address ;; @@b86d 295
 19236  b86f ad0012                              lda savsiz+1                              ;; @@b86f 295
 19237  b872 854b                                sta forpnt                               ; get source address ;; @@b872 295
 19238  b874 ad0112                              lda savsiz+2                              ;; @@b874 295
 19239  b877 854c                                sta forpnt+1                              ;; @@b877 295
 19240  b879 a000                                ldy #0                                    ;; @@b879 295
 19241  b87b ccff11             _local_1294_40   cpy savsiz                               ; test index vs source length ;; @@b87b 295
 19242  b87e f00c                                beq _local_1294_45                       ; exit if source depleted ;; @@b87e 295
 19243  b880 a94b                                lda #forpnt                              ; move source byte to sprite ;; @@b880 295
 19244  b882 20d722                              jsr lda_far_ram1                         ; (from ram bank 1) ;; @@b882 295
 19245                          ; sta sw_rom_ram0 ;; @@b885 295
 19246  b885 9187                                sta (grapnt),y                           ; (to sprite area in bank 0)???? ;; @@b885 295
 19247  b887 c8                                  iny                                       ;; @@b887 295
 19248  b888 c03f                                cpy #63                                   ;; @@b888 295
 19249  b88a d0ef                                bne _local_1294_40                        ;; @@b88a 295
 19250  b88c 60                 _local_1294_45   rts                                       ;; @@b88c 295
 19251                           ;; @@b88d 295
 19252                           ;; @@b88d 295
 19253  b88d ad0312             savs50           lda sprtmp_1                             ; restore basic text pointer ;; @@b88d 296
 19254  b890 853d                                sta txtptr                                ;; @@b890 296
 19255  b892 ad0412                              lda sprtmp_2                              ;; @@b892 296
 19256  b895 853e                                sta txtptr+1                              ;; @@b895 296
 19257  b897 207c4f                              jsr ptrget                               ; get symbol table descriptor for string dest. ;; @@b897 296
 19258  b89a 854b                                sta forpnt                                ;; @@b89a 296
 19259  b89c 844c                                sty forpnt+1                             ; save symbol table address ;; @@b89c 296
 19260  b89e a9ff                                lda #<savsiz                              ;; @@b89e 296
 19261  b8a0 8566                                sta facmo                                ; save descriptor address of source ;; @@b8a0 296
 19262  b8a2 a911                                lda #>savsiz                              ;; @@b8a2 296
 19263  b8a4 8567                                sta facmo+1                               ;; @@b8a4 296
 19264  b8a6 830c7e                              +lbra inpcom                             ; move source to dest, do rts (snerr if not eol) ;; @@b8a6 296
 19265                           ;; @@b8a9 296
 19266                          ; .page ;; @@b8a9 296
 19267  b8a9 20ef4c             savinp           jsr frmevl                               ; evaluate expression ;; @@b8a9 296
 19268  b8ac ff0f13                              bbs7 valtyp,desc_free                    ; exit if a string ;; @@b8ac 296
 19269  b8af 206f5d                              jsr conint                               ; get one byte integer in .X ;; @@b8af 296
 19270                          ; dex    ;adjust sprite 1..8 to 0..7  [910220] ;; @@b8b2 296
 19271  b8b2 e008                                cpx #8                                    ;; @@b8b2 296
 19272  b8b4 b34799                              +lbcs fcerr                              ; bad value ;; @@b8b4 296
 19273  b8b7 8a                                  txa                                      ; move sprite number to .A ;; @@b8b7 296
 19274  b8b8 4a                                  lsr                                       ;; @@b8b8 296
 19275  b8b9 6a                                  ror                                       ;; @@b8b9 296
 19276  b8ba 6a                                  ror                                      ; get sprite address ;; @@b8ba 296
 19277  b8bb a006                                ldy #>sprite_base                         ;; @@b8bb 296
 19278  b8bd 9001                                bcc _local_1295_5                         ;; @@b8bd 296
 19279  b8bf c8                                  iny                                       ;; @@b8bf 296
 19280  b8c0 18                 _local_1295_5    clc                                      ; flag 'sprite' (as opposed to 'string') ;; @@b8c0 296
 19281  b8c1 60                                  rts                                       ;; @@b8c1 296
 19282                           ;; @@b8c2 296
 19283                           ;; @@b8c2 296
 19284                          desc_free                                                 ; free temporary descriptor, set up pointers to string. ;; @@b8c2 297
 19285  b8c2 a566                                lda facmo                                ; get address of temp descriptor ;; @@b8c2 297
 19286  b8c4 a467                                ldy facmo+1                               ;; @@b8c4 297
 19287  b8c6 20cc5b                              jsr fretms                                ;; @@b8c6 297
 19288  b8c9 a000                                ldy #0                                   ; get len, addr of string ;; @@b8c9 297
 19289  b8cb 20a922                              jsr indfmo                                ;; @@b8cb 297
 19290  b8ce aa                                  tax                                       ;; @@b8ce 297
 19291  b8cf c8                                  iny                                       ;; @@b8cf 297
 19292  b8d0 20a922                              jsr indfmo                                ;; @@b8d0 297
 19293  b8d3 48                                  pha                                       ;; @@b8d3 297
 19294  b8d4 c8                                  iny                                       ;; @@b8d4 297
 19295  b8d5 20a922                              jsr indfmo                                ;; @@b8d5 297
 19296  b8d8 a8                                  tay                                       ;; @@b8d8 297
 19297  b8d9 68                                  pla                                       ;; @@b8d9 297
 19298  b8da 38                                  sec                                      ; flag 'string found' ;; @@b8da 297
 19299  b8db 60                                  rts                                      ; return w/ x=len, (a,y)==> string ;; @@b8db 297
 19300                           ;; @@b8dc 297
 19301                          ;.end ;; @@b8dc 297
 19302                          ; .page ;; @@b8dc 297
 19303                          ; .subttl COLLISION Command ;; @@b8dc 297
 19304                           ;; @@b8dc 297
 19305                          ;***************************************************************** ;; @@b8dc 297
 19306                          ; COLLISION Command ;; @@b8dc 297
 19307                          ; ;; @@b8dc 297
 19308                          ; Syntax:  COLLISION n [,address] ;; @@b8dc 297
 19309                          ; ;; @@b8dc 297
 19310                          ; Where:   n= 1 ==> sprite / sprite ;; @@b8dc 297
 19311                          ;   2 ==> sprite / background ;; @@b8dc 297
 19312                          ;   3 ==> light pen ;; @@b8dc 297
 19313                          ; ;; @@b8dc 297
 19314                          ; Address ==> BASIC line number to trap to on interrupt ;; @@b8dc 297
 19315                          ;      (no address ==> disable trapping) ;; @@b8dc 297
 19316                          ;***************************************************************** ;; @@b8dc 297
 19317                           ;; @@b8dc 297
 19318                          collision                                                  ;; @@b8dc 297
 19319  b8dc 206c5d                              jsr getbyt                               ; get type in .X ;; @@b8dc 297
 19320  b8df ca                                  dex                                      ; adjust 1..3 to 0..2 ;; @@b8df 297
 19321  b8e0 e003                                cpx #3                                    ;; @@b8e0 297
 19322  b8e2 b31999                              +lbcs fcerr                              ; value error ;; @@b8e2 297
 19323                           ;; @@b8e5 297
 19324  b8e5 da                                  phx                                      ; save collision type ;; @@b8e5 297
 19325  b8e6 20f278                              jsr optwrd                               ; get address (line number) in .Y,.A (optional) ;; @@b8e6 297
 19326  b8e9 fa                                  plx                                       ;; @@b8e9 297
 19327                          ; php   ;save .C (.C == 1 ==> real value) ;; @@b8ea 297
 19328  b8ea 9de302                              sta int_adr_hi,x                         ; save address given ;; @@b8ea 297
 19329  b8ed 8be002                              sty int_adr_lo,x                          ;; @@b8ed 297
 19330                           ;; @@b8f0 297
 19331  b8f0 addc02                              lda intval                               ; this records valid interrupts ;; @@b8f0 297
 19332  b8f3 1d6579                              ora sbits,x                              ; set correct bit ;; @@b8f3 297
 19333                          ; plp ;; @@b8f6 297
 19334  b8f6 b003                                bcs _local_1296_10                       ; ..unless this is a 'clear', ;; @@b8f6 297
 19335  b8f8 5d6579                              eor sbits,x                              ; ..in which case we'll reset bit ;; @@b8f8 297
 19336  b8fb 8ddc02             _local_1296_10   sta intval                                ;; @@b8fb 297
 19337  b8fe 60                                  rts                                       ;; @@b8fe 297
 19338                           ;; @@b8ff 297
 19339                          ;.end ;; @@b8ff 297
 19340                          ; .page ;; @@b8ff 297
 19341                          ; .subttl  RCOLOR Function ;; @@b8ff 297
 19342                           ;; @@b8ff 297
 19343                          ;************************************************************************ ;; @@b8ff 297
 19344                          ;  RCOLOR (source)  --  return current color assigned to source ;; @@b8ff 297
 19345                          ;   0  :  Background color ;; @@b8ff 297
 19346                          ;   1  :  Foreground color ;; @@b8ff 297
 19347                          ;   2  :  Highlight color ;; @@b8ff 297
 19348                          ;   3  :  Border color ;; @@b8ff 297
 19349                          ;************************************************************************ ;; @@b8ff 297
 19350                           ;; @@b8ff 297
 19351  b8ff 206f5d             rcolor           jsr conint                               ; evaluate integer argument, put in .X ;; @@b8ff 298
 19352                          ; jsr put_io_in_map ;; @@b902 298
 19353                           ;; @@b902 298
 19354  b902 e004                                cpx #4                                    ;; @@b902 298
 19355  b904 b3f798                              +lbcs fcerr                              ; illegal qty ;; @@b904 298
 19356  b907 8a                                  txa                                       ;; @@b907 298
 19357  b908 0a                                  asl                                      ; make into word pointer ;; @@b908 298
 19358  b909 aa                                  tax                                       ;; @@b909 298
 19359  b90a bd1eb9                              lda color_source,x                       ; get address of source ;; @@b90a 298
 19360  b90d 8587                                sta grapnt                                ;; @@b90d 298
 19361  b90f bd1fb9                              lda color_source+1,x                      ;; @@b90f 298
 19362  b912 8588                                sta grapnt+1                              ;; @@b912 298
 19363  b914 a000                                ldy #0                                    ;; @@b914 298
 19364  b916 b187                                lda (grapnt),y                           ; read source (aways system space or I/O????) ;; @@b916 298
 19365  b918 290f                                and #$0f                                 ; mask unused bits ;; @@b918 298
 19366  b91a a8                                  tay                                       ;; @@b91a 298
 19367                          ; iny   ; make color match keytops ;; @@b91b 298
 19368  b91b 83b49f                              +lbra sngflt                             ; float 1 byte in .Y ;; @@b91b 298
 19369                           ;; @@b91e 298
 19370                          color_source                                               ;; @@b91e 298
 19371  b91e 21d0f100d80220d0                    !word vic+33,_color,highlight_color,vic+32  ;; @@b91e 298
 19372                           ;; @@b926 298
 19373                          ; .page ;; @@b926 298
 19374                          ; .subttl Graphic Functions ;; @@b926 298
 19375                           ;; @@b926 298
 19376                          ; Return graphic screen status & parameters      [910826] ;; @@b926 298
 19377                          ; RGRAPHIC (screen, param) where param = 0 open (1), closed (0), or invalid (>1) ;; @@b926 298
 19378                          ;            1 width  (0=320, 1=640, 2=1280) ;; @@b926 298
 19379                          ;            2 height (0=200, 1=400) ;; @@b926 298
 19380                          ;            3 depth (1-8 bitplanes) ;; @@b926 298
 19381                          ;            4 bitplanes used  (bitmask) ;; @@b926 298
 19382                          ;            5 bank A blocks used (bitmask) ;; @@b926 298
 19383                          ;            6 bank B blocks used (bitmask) ;; @@b926 298
 19384                          ;            7 drawscreen # (0-3) ;; @@b926 298
 19385                          ;            8 viewscreen # (0-3) ;; @@b926 298
 19386                          ;            9 drawmodes  (bitmask) ;; @@b926 298
 19387                          ;           10 pattern type  (bitmask) ;; @@b926 298
 19388                          ; ;; @@b926 298
 19389                          ; Requires a kludge, because RGR used to be a normal 1-arg function in the C128 ;; @@b926 298
 19390                          ; but now it takes two args. ;; @@b926 298
 19391                           ;; @@b926 298
 19392                          rgraphic                                                   ;; @@b926 298
 19393                          ; jsr CheckGraphicMode ;verify screen open ;; @@b926 298
 19394  b926 68                                  pla                                      ; remove token from stack ;; @@b926 298
 19395  b927 20e8b9                              jsr PushParms                            ; preserve Graphics parameters & LINNUM  [910820] ;; @@b927 298
 19396                           ;; @@b92a 298
 19397  b92a 20584e                              jsr chkopn                               ; check for open paren ;; @@b92a 298
 19398  b92d 206c5d                              jsr getbyt                               ; get screen # in .X ;; @@b92d 298
 19399  b930 8e001f                              stx GKI__parm1                            ;; @@b930 298
 19400  b933 20825d                              jsr combyt                               ; get param # in .X ;; @@b933 298
 19401  b936 e00b                                cpx #10+1                                ; [911028] ;; @@b936 298
 19402  b938 b007                                bcs _local_1297_1                        ; illegal param # ;; @@b938 298
 19403  b93a da                                  phx                                       ;; @@b93a 298
 19404  b93b 20554e                              jsr chkcls                               ; check for closing parens ;; @@b93b 298
 19405                           ;; @@b93e 298
 19406  b93e 223880                              jsr ($8038)                              ; read screen params ;; @@b93e 298
 19407  b941 b3ba98             _local_1297_1    +lbcs fcerr                              ; bad input???? ;; @@b941 298
 19408                           ;; @@b944 298
 19409  b944 ad011f                              lda GKI__parm2                            ;; @@b944 298
 19410  b947 fa                                  plx                                      ; get back desired param # ;; @@b947 298
 19411  b948 ca                                  dex                                       ;; @@b948 298
 19412  b949 1006                                bpl _local_1297_10                        ;; @@b949 298
 19413  b94b 4980                                eor #$80                                 ; make 0=closed, 1=open, >1=invalid ;; @@b94b 298
 19414  b94d 4a                                  lsr                                       ;; @@b94d 298
 19415  b94e 4a                                  lsr                                       ;; @@b94e 298
 19416  b94f 8003                                bra _local_1297_12                       ; return screen open status ;; @@b94f 298
 19417                           ;; @@b951 298
 19418  b951 ca                 _local_1297_10   dex                                       ;; @@b951 298
 19419  b952 1008                                bpl _local_1297_20                        ;; @@b952 298
 19420  b954 4a                 _local_1297_12   lsr                                       ;; @@b954 298
 19421  b955 4a                 _local_1297_15   lsr                                       ;; @@b955 298
 19422  b956 4a                                  lsr                                       ;; @@b956 298
 19423  b957 4a                                  lsr                                       ;; @@b957 298
 19424  b958 2903                                and #3                                    ;; @@b958 298
 19425  b95a 8012                                bra _local_1297_40                       ; return width, height ;; @@b95a 298
 19426                           ;; @@b95c 298
 19427  b95c ca                 _local_1297_20   dex                                       ;; @@b95c 298
 19428  b95d 1004                                bpl _local_1297_25                        ;; @@b95d 298
 19429  b95f 2908                                and #8                                    ;; @@b95f 298
 19430  b961 80f2                                bra _local_1297_15                        ;; @@b961 298
 19431  b963 ca                 _local_1297_25   dex                                       ;; @@b963 298
 19432  b964 1005                                bpl _local_1297_30                        ;; @@b964 298
 19433  b966 2907                                and #7                                   ; return depth ;; @@b966 298
 19434  b968 1a                                  inc                                      ; make depth 1-8 ;; @@b968 298
 19435  b969 8003                                bra _local_1297_40                        ;; @@b969 298
 19436                           ;; @@b96b 298
 19437  b96b bd021f             _local_1297_30   lda GKI__parm3,x                         ; return bp bask, banks, etc. ;; @@b96b 298
 19438  b96e a8                 _local_1297_40   tay                                       ;; @@b96e 298
 19439  b96f 20d258                              jsr sngflt                               ; float 1 byte arg in .y ;; @@b96f 298
 19440                           ;; @@b972 298
 19441  b972 20f9b9                              jsr PopParms                             ; restore Graphics parameters & LINNUM ;; @@b972 298
 19442  b975 60                                  rts                                       ;; @@b975 298
 19443                           ;; @@b976 298
 19444                          ; .page ;; @@b976 298
 19445                          ; Return the color of a given X,Y pixel location on the drawscreen  [910801] ;; @@b976 298
 19446                          ;  PIXEL (x,y) ;; @@b976 298
 19447                           ;; @@b976 298
 19448  b976 201caf             pixel            jsr CheckGraphicMode                     ; verify screen open ;; @@b976 299
 19449  b979 20e8b9                              jsr PushParms                            ; preserve Graphics parameters & LINNUM  [910820] ;; @@b979 299
 19450                           ;; @@b97c 299
 19451  b97c 20925d                              jsr getsad                               ; get x ;; @@b97c 299
 19452  b97f 8c001f                              sty GKI__parm1                            ;; @@b97f 299
 19453  b982 8d011f                              sta GKI__parm2                            ;; @@b982 299
 19454  b985 200879                              jsr comsad                               ; get y ;; @@b985 299
 19455  b988 8c021f                              sty GKI__parm3                            ;; @@b988 299
 19456  b98b 8d031f                              sta GKI__parm4                            ;; @@b98b 299
 19457  b98e 20554e                              jsr chkcls                               ; check for closing parens ;; @@b98e 299
 19458                           ;; @@b991 299
 19459  b991 223280                              jsr ($8032)                              ; get Bitplane data at pixel (x,y), returned in .y ;; @@b991 299
 19460  b994 20d258                              jsr sngflt                               ; go float 1 byte arg in .Y ;; @@b994 299
 19461                           ;; @@b997 299
 19462  b997 20f9b9                              jsr PopParms                             ; restore graphics parameters ;; @@b997 299
 19463  b99a 60                                  rts                                       ;; @@b99a 299
 19464                           ;; @@b99b 299
 19465                          ; .page ;; @@b99b 299
 19466                          ; Return the color of a drawscreen's PEN      [910820] ;; @@b99b 299
 19467                          ;  RPEN (pen#) where pen# = 0,1,2 ;; @@b99b 299
 19468                           ;; @@b99b 299
 19469  b99b 201caf             rpen             jsr CheckGraphicMode                     ; verify screen open ;; @@b99b 299
 19470  b99e 20e8b9                              jsr PushParms                            ; preserve Graphics parameters & LINNUM  [910820] ;; @@b99e 299
 19471                           ;; @@b9a1 299
 19472  b9a1 206f5d                              jsr conint                               ; get 1 byte arg in .x (old style single arg function) ;; @@b9a1 299
 19473  b9a4 e003                                cpx #3                                    ;; @@b9a4 299
 19474  b9a6 b006                                bcs _local_1298_10                       ; illegal pen #? ;; @@b9a6 299
 19475  b9a8 8e001f                              stx GKI__parm1                            ;; @@b9a8 299
 19476                           ;; @@b9ab 299
 19477  b9ab 223680                              jsr ($8036)                              ; convert to logical color# (palette index#) ;; @@b9ab 299
 19478  b9ae b34d98             _local_1298_10   +lbcs fcerr                              ; drawscreen not set or illegal quantity somewhere ;; @@b9ae 299
 19479                           ;; @@b9b1 299
 19480  b9b1 20d258                              jsr sngflt                               ; go float 1 byte arg in .Y ;; @@b9b1 299
 19481                           ;; @@b9b4 299
 19482  b9b4 20f9b9                              jsr PopParms                             ; restore graphics parameters ;; @@b9b4 299
 19483  b9b7 60                                  rts                                       ;; @@b9b7 299
 19484                           ;; @@b9b8 299
 19485                          ; .page ;; @@b9b8 299
 19486                          ; Return the R,G, or B component of a color     [910820] ;; @@b9b8 299
 19487                          ; RPALETTE (screen#, color#, rgb) ;; @@b9b8 299
 19488                           ;; @@b9b8 299
 19489                          rpalette                                                   ;; @@b9b8 300
 19490  b9b8 201caf                              jsr CheckGraphicMode                     ; verify screen open ;; @@b9b8 300
 19491  b9bb 20e8b9                              jsr PushParms                            ; Save graphics parameters ;; @@b9bb 300
 19492                           ;; @@b9be 300
 19493  b9be 206f5d                              jsr conint                               ; get screen# in .x ;; @@b9be 300
 19494  b9c1 e004                                cpx #4                                    ;; @@b9c1 300
 19495  b9c3 b013                                bcs _local_1299_10                       ; illegal screen# ;; @@b9c3 300
 19496  b9c5 8e001f                              stx GKI__parm1                            ;; @@b9c5 300
 19497                           ;; @@b9c8 300
 19498  b9c8 20825d                              jsr combyt                               ; get color# in .x ????check for legal color# ;; @@b9c8 300
 19499  b9cb 8e011f                              stx GKI__parm2                            ;; @@b9cb 300
 19500                           ;; @@b9ce 300
 19501  b9ce 223480                              jsr ($8034)                              ; get RGB components of color# in PARM3,4,5 ;; @@b9ce 300
 19502  b9d1 b005                                bcs _local_1299_10                       ; something is wrong???? ;; @@b9d1 300
 19503                           ;; @@b9d3 300
 19504  b9d3 20825d                              jsr combyt                               ; get r,g,b component# ;; @@b9d3 300
 19505  b9d6 e003                                cpx #3                                    ;; @@b9d6 300
 19506  b9d8 b32398             _local_1299_10   +lbcs fcerr                              ; illegal value ;; @@b9d8 300
 19507                           ;; @@b9db 300
 19508  b9db bc021f                              ldy GKI__parm3,x                         ; get r,g,b value ;; @@b9db 300
 19509  b9de 20d258                              jsr sngflt                               ; float 1 byte arg in .y ;; @@b9de 300
 19510                           ;; @@b9e1 300
 19511  b9e1 20554e                              jsr chkcls                               ; check for closing paren ;; @@b9e1 300
 19512  b9e4 20f9b9                              jsr PopParms                             ; restore graphics parameters ;; @@b9e4 300
 19513  b9e7 60                                  rts                                       ;; @@b9e7 300
 19514                           ;; @@b9e8 300
 19515                          ; .page ;; @@b9e8 300
 19516                          PushParms                                                 ; [910820] ;; @@b9e8 301
 19517  b9e8 7a                                  ply                                      ; Grab return address ;; @@b9e8 301
 19518  b9e9 fb                                  plz                                       ;; @@b9e9 301
 19519                           ;; @@b9ea 301
 19520  b9ea fc1600                              phw linnum                               ; Save 'poker' value ;; @@b9ea 301
 19521                           ;; @@b9ed 301
 19522  b9ed a210                                ldx #17-1                                 ;; @@b9ed 301
 19523  b9ef bd001f             _local_1300_10   lda GKI__parm1,x                         ; Save Graphics parameters ;; @@b9ef 301
 19524  b9f2 48                                  pha                                      ; [eg: CHAR x,y,1,1,2,str$(PIXEL(x,y))] ;; @@b9f2 301
 19525  b9f3 ca                                  dex                                       ;; @@b9f3 301
 19526  b9f4 10f9                                bpl _local_1300_10                        ;; @@b9f4 301
 19527                           ;; @@b9f6 301
 19528  b9f6 db                                  phz                                      ; Restore return address ;; @@b9f6 301
 19529  b9f7 5a                                  phy                                       ;; @@b9f7 301
 19530  b9f8 60                                  rts                                       ;; @@b9f8 301
 19531                           ;; @@b9f9 301
 19532                           ;; @@b9f9 301
 19533                          PopParms                                                  ; [910820] ;; @@b9f9 302
 19534  b9f9 7a                                  ply                                      ; Grab return address ;; @@b9f9 302
 19535  b9fa fb                                  plz                                       ;; @@b9fa 302
 19536                           ;; @@b9fb 302
 19537  b9fb a200                                ldx #0                                    ;; @@b9fb 302
 19538  b9fd 68                 _local_1301_10   pla                                      ; Restore Graphics parameters ;; @@b9fd 302
 19539  b9fe 9d001f                              sta GKI__parm1,x                          ;; @@b9fe 302
 19540  ba01 e8                                  inx                                       ;; @@ba01 302
 19541  ba02 e011                                cpx #17                                   ;; @@ba02 302
 19542  ba04 90f7                                bcc _local_1301_10                        ;; @@ba04 302
 19543                           ;; @@ba06 302
 19544  ba06 68                                  pla                                      ; Restore 'poker' value ;; @@ba06 302
 19545  ba07 8517                                sta linnum+1                              ;; @@ba07 302
 19546  ba09 68                                  pla                                       ;; @@ba09 302
 19547  ba0a 8516                                sta linnum                                ;; @@ba0a 302
 19548                           ;; @@ba0c 302
 19549  ba0c db                                  phz                                      ; Restore return address ;; @@ba0c 302
 19550  ba0d 5a                                  phy                                       ;; @@ba0d 302
 19551  ba0e 60                                  rts                                       ;; @@ba0e 302
 19552                           ;; @@ba0f 302
 19553                          ;.end ;; @@ba0f 302
 19554                          ; .page ;; @@ba0f 302
 19555                          ; .subttl RSPRITE Function ;; @@ba0f 302
 19556                           ;; @@ba0f 302
 19557                          ;****************************************************************** ;; @@ba0f 302
 19558                          ;* RSPRITE - Return sprite information ;; @@ba0f 302
 19559                          ;* ;; @@ba0f 302
 19560                          ;* Syntax : RSPRITE (sprite_number, argument) ;; @@ba0f 302
 19561                          ;* ;; @@ba0f 302
 19562                          ;* Where  : sprite_number = [0..7] ;; @@ba0f 302
 19563                          ;*   argument = [0..5] ;; @@ba0f 302
 19564                          ;*   0 : enabled?   (y(1)/n(0)) ;; @@ba0f 302
 19565                          ;*   1 : color?     (0-15) ;; @@ba0f 302
 19566                          ;*   2 : priority over background? (y(1)/n(0)) ;; @@ba0f 302
 19567                          ;*   3 : expand in x direction? (y(1)/n(0)) ;; @@ba0f 302
 19568                          ;*   4 : expand in Y direction? (y(1)/n(0)) ;; @@ba0f 302
 19569                          ;*   5 : multicolor sprite?  (y(1)/n(0)) ;; @@ba0f 302
 19570                          ;****************************************************************** ;; @@ba0f 302
 19571                           ;; @@ba0f 302
 19572  ba0f 206f5d             rsprite          jsr conint                               ; get first arg, sprite #, in .X ;; @@ba0f 303
 19573                          ; dex  ;adjust [1..8] to [0..7]   [910220] ;; @@ba12 303
 19574  ba12 e008                                cpx #8  ; (318018-03 mod                 ; fab) ;; @@ba12 303
 19575  ba14 b00a                                bcs _local_1302_1                        ; value error ;; @@ba14 303
 19576  ba16 8a                                  txa                                       ;; @@ba16 303
 19577  ba17 48                                  pha                                      ; save sprite number ;; @@ba17 303
 19578                           ;; @@ba18 303
 19579                          ; jsr chkcom ;check for proper delimiter ;; @@ba18 303
 19580                          ; jsr getbyt ;do frmevl, get 1 byte arg (arg) in .X ;; @@ba18 303
 19581  ba18 20825d                              jsr combyt                               ; [910820] ;; @@ba18 303
 19582  ba1b 20554e                              jsr chkcls                               ; look for closing paren ;; @@ba1b 303
 19583  ba1e e006                                cpx #6                                    ;; @@ba1e 303
 19584  ba20 b3db97             _local_1302_1    +lbcs fcerr                              ; value error ;; @@ba20 303
 19585                           ;; @@ba23 303
 19586  ba23 7a                                  ply                                      ; sprite number ;; @@ba23 303
 19587                          ; jsr put_io_in_map ;; @@ba24 303
 19588  ba24 b927d0                              lda vic+39,y                             ; assume 'color' ;; @@ba24 303
 19589  ba27 290f                                and #$0f                                 ; range 0-15 ;; @@ba27 303
 19590                          ; inc a  ;adjust to 'keyboard' colors   [910724] ;; @@ba29 303
 19591  ba29 e001                                cpx #1                                    ;; @@ba29 303
 19592  ba2b f00e                                beq _local_1302_10                       ; it was color. set up for float ;; @@ba2b 303
 19593                           ;; @@ba2d 303
 19594  ba2d bd3fba                              lda rspmod,x                             ; get index for this function ;; @@ba2d 303
 19595  ba30 aa                                  tax                                       ;; @@ba30 303
 19596  ba31 b96579                              lda sbits,y                              ; get mask for this sprite number ;; @@ba31 303
 19597  ba34 3d00d0                              and vic,x                                 ;; @@ba34 303
 19598  ba37 f002                                beq _local_1302_10                        ;; @@ba37 303
 19599  ba39 a901                                lda #1                                   ; return all non-zeros as '1' ;; @@ba39 303
 19600                           ;; @@ba3b 303
 19601  ba3b a8                 _local_1302_10   tay                                       ;; @@ba3b 303
 19602  ba3c 83939e                              +lbra sngflt                             ; go float 1 byte arg in .Y ;; @@ba3c 303
 19603                           ;; @@ba3f 303
 19604                           ;; @@ba3f 303
 19605  ba3f 15271b1d171c       rspmod           !text 21,39,27,29,23,28                  ; VIC registers associated with arg# ;; @@ba3f 304
 19606                           ;; @@ba45 304
 19607                          ;.end ;; @@ba45 304
 19608                          ; .page ;; @@ba45 304
 19609                          ; .subttl RSPCOLOR Function ;; @@ba45 304
 19610                           ;; @@ba45 304
 19611                          ;****************************************************************** ;; @@ba45 304
 19612                          ;* RSPCOLOR - return sprite multicolor reg's ;; @@ba45 304
 19613                          ;* ;; @@ba45 304
 19614                          ;* Syntax : RSPCOLOR (argument) ;; @@ba45 304
 19615                          ;* ;; @@ba45 304
 19616                          ;* Where  : argument = [1..2] ;; @@ba45 304
 19617                          ;*   1 : return multicolor #1 ;; @@ba45 304
 19618                          ;*   2 : return multicolor #2 ;; @@ba45 304
 19619                          ;****************************************************************** ;; @@ba45 304
 19620                           ;; @@ba45 304
 19621                          rspcolor                                                   ;; @@ba45 304
 19622  ba45 20554e                              jsr chkcls                               ; check for closing paren ;; @@ba45 304
 19623  ba48 206f5d                              jsr conint                               ; get arg in .X ;; @@ba48 304
 19624  ba4b ca                                  dex                                      ; adjust [1..2] to [0..1 ;; @@ba4b 304
 19625  ba4c e002                                cpx #2                                    ;; @@ba4c 304
 19626  ba4e b3ad97                              +lbcs fcerr                              ; value error ;; @@ba4e 304
 19627                           ;; @@ba51 304
 19628                          ; jsr put_io_in_map ;; @@ba51 304
 19629  ba51 bd25d0                              lda vic+37,x                              ;; @@ba51 304
 19630  ba54 290f                                and #$0f                                  ;; @@ba54 304
 19631  ba56 a8                                  tay                                       ;; @@ba56 304
 19632                          ; iny  ;range 0-15     [910724] ;; @@ba57 304
 19633  ba57 83789e                              +lbra sngflt                             ; float 1 byte arg in .Y ;; @@ba57 304
 19634                           ;; @@ba5a 304
 19635                          ;.end ;; @@ba5a 304
 19636                          ; .page ;; @@ba5a 304
 19637                          ; .subttl RSPPOS Function ;; @@ba5a 304
 19638                           ;; @@ba5a 304
 19639                          ;****************************************************************** ;; @@ba5a 304
 19640                          ;* RSPPOS - Return sprite location / speed data ;; @@ba5a 304
 19641                          ;* ;; @@ba5a 304
 19642                          ;* Syntax:  RSPPOS (sprite_number, argument) ;; @@ba5a 304
 19643                          ;* ;; @@ba5a 304
 19644                          ;* Where:   sprite_number = [0..7] ;; @@ba5a 304
 19645                          ;*    argument = [0..2] ;; @@ba5a 304
 19646                          ;*   0 : return X position ;; @@ba5a 304
 19647                          ;*   1 : return Y position ;; @@ba5a 304
 19648                          ;*   2 : return current speed ;; @@ba5a 304
 19649                          ;****************************************************************** ;; @@ba5a 304
 19650                           ;; @@ba5a 304
 19651  ba5a 206f5d             rsppos           jsr conint                               ; get first arg, sprite #, in .X ;; @@ba5a 304
 19652                          ; dex  ;adjust [1..8] to [0..7]   [910220] ;; @@ba5d 304
 19653  ba5d e008                                cpx #8  ; (318018-03 mod                 ; fab) ;; @@ba5d 304
 19654  ba5f b009                                bcs _local_1303_1                        ; value error ;; @@ba5f 304
 19655                           ;; @@ba61 304
 19656  ba61 da                                  phx                                      ; save sprite number ;; @@ba61 304
 19657                          ; jsr chkcom ;check for proper delimiter ;; @@ba62 304
 19658                          ; jsr getbyt ;do frmevl, get 1 byte arg (arg) in .X ;; @@ba62 304
 19659  ba62 20825d                              jsr combyt                               ; [910820] ;; @@ba62 304
 19660  ba65 20554e                              jsr chkcls                               ; look for closing paren ;; @@ba65 304
 19661  ba68 e003                                cpx #3                                    ;; @@ba68 304
 19662  ba6a b39197             _local_1303_1    +lbcs fcerr                              ; value error ;; @@ba6a 304
 19663                           ;; @@ba6d 304
 19664  ba6d 7a                                  ply                                      ; sprite number ;; @@ba6d 304
 19665  ba6e e002                                cpx #2                                    ;; @@ba6e 304
 19666  ba70 d009                                bne _local_1303_10                       ; branch if x or y position ;; @@ba70 304
 19667                           ;; @@ba72 304
 19668  ba72 befeb7                              ldx sproff,y                             ; get offset into speed data ;; @@ba72 304
 19669  ba75 bc0512                              ldy sprite_data,x                        ; get speed data ;; @@ba75 304
 19670  ba78 83579e                              +lbra sngflt                             ; go float 1 byte arg in .Y ;; @@ba78 304
 19671                           ;; @@ba7b 304
 19672                          ; Get msb of sprite position (in case this is for x position) ;; @@ba7b 304
 19673                           ;; @@ba7b 304
 19674  ba7b 78                 _local_1303_10   sei                                       ;; @@ba7b 304
 19675  ba7c b96579                              lda sbits,y                              ; get bit mask for this sprite ;; @@ba7c 304
 19676  ba7f 2d10d0                              and vic+16                               ; ???vic_save ;; @@ba7f 304
 19677  ba82 f002                                beq _local_1303_20                        ;; @@ba82 304
 19678  ba84 a901                                lda #1                                   ; change any non-zero to a '1' ;; @@ba84 304
 19679  ba86 48                 _local_1303_20   pha                                      ; save msb ;; @@ba86 304
 19680                           ;; @@ba87 304
 19681  ba87 98                                  tya                                      ; y = sprite# * 2 ;; @@ba87 304
 19682  ba88 0a                                  asl                                       ;; @@ba88 304
 19683  ba89 a8                                  tay                                       ;; @@ba89 304
 19684  ba8a 8a                                  txa                                      ; see if this is y position ;; @@ba8a 304
 19685  ba8b 4a                                  lsr                                      ; .C = 0 for x pos'n, 1 for y pos'n ;; @@ba8b 304
 19686  ba8c 9005                                bcc _local_1303_30                       ; branch if x pos'n ;; @@ba8c 304
 19687                           ;; @@ba8e 304
 19688  ba8e c8                                  iny                                      ; adjust pointer to point to y pos'n in register data ;; @@ba8e 304
 19689  ba8f 68                                  pla                                       ;; @@ba8f 304
 19690  ba90 a900                                lda #0                                   ; ..and force 'msb' to be zero ;; @@ba90 304
 19691  ba92 48                                  pha                                       ;; @@ba92 304
 19692                           ;; @@ba93 304
 19693  ba93 b900d0             _local_1303_30   lda vic,y                                ; get correct location lsb   ???vic_save ;; @@ba93 304
 19694  ba96 58                                  cli                                       ;; @@ba96 304
 19695  ba97 a8                                  tay                                       ;; @@ba97 304
 19696  ba98 68                                  pla                                      ; ..and get msb, ;; @@ba98 304
 19697  ba99 832b9e                              +lbra nosflt                             ; ..and go float 2 byte value in y,a ;; @@ba99 304
 19698                           ;; @@ba9c 304
 19699                          ;.end ;; @@ba9c 304
 19700                          ; .page ;; @@ba9c 304
 19701                          ; .subttl BUMP Function ;; @@ba9c 304
 19702                           ;; @@ba9c 304
 19703                          ;****************************************************************** ;; @@ba9c 304
 19704                          ;* BUMP - read sprite collision ;; @@ba9c 304
 19705                          ;* ;; @@ba9c 304
 19706                          ;* Syntax : BUMP (argument) ;; @@ba9c 304
 19707                          ;* ;; @@ba9c 304
 19708                          ;* Where  : argument = [1..2] ;; @@ba9c 304
 19709                          ;*   1 : sprite/sprite collision ;; @@ba9c 304
 19710                          ;*   2 : sprite/background collision ;; @@ba9c 304
 19711                          ;****************************************************************** ;; @@ba9c 304
 19712                           ;; @@ba9c 304
 19713  ba9c 20554e             bump             jsr chkcls                                ;; @@ba9c 305
 19714  ba9f 206f5d                              jsr conint                               ; get arg in .X ;; @@ba9f 305
 19715  baa2 ca                                  dex                                      ; adjust [1..2] to [0..1] ;; @@baa2 305
 19716  baa3 e002                                cpx #2                                    ;; @@baa3 305
 19717  baa5 b35697                              +lbcs fcerr                              ; value error ;; @@baa5 305
 19718                           ;; @@baa8 305
 19719  baa8 78                                  sei                                       ;; @@baa8 305
 19720  baa9 bce602                              ldy collisions,x                         ; get recorded collisions ;; @@baa9 305
 19721  baac a900                                lda #0                                   ; reset them ;; @@baac 305
 19722  baae 9de602                              sta collisions,x                          ;; @@baae 305
 19723  bab1 58                                  cli                                       ;; @@bab1 305
 19724  bab2 831d9e                              +lbra sngflt                             ; float 1 byte arg in .Y ;; @@bab2 305
 19725                           ;; @@bab5 305
 19726                          ;.end ;; @@bab5 305
 19727                          ; .page ;; @@bab5 305
 19728                          ; .subttl Sprite Support Routines ;; @@bab5 305
 19729                           ;; @@bab5 305
 19730                          ; GRAPHIC3.SRC ;; @@bab5 305
 19731                          ;**************************************************************** ;; @@bab5 305
 19732                          ;  getang  -  set cosine & sine values ;; @@bab5 305
 19733                          ;             results in sinval & cosval based as a fraction ;; @@bab5 305
 19734                          ;             - over 65536 ;; @@bab5 305
 19735                          ;             angsgn = angle phase (0-3) ;; @@bab5 305
 19736                          ;    on input vwork+y = 2 byte angle ;; @@bab5 305
 19737                          ;*************************************************************** ;; @@bab5 305
 19738                           ;; @@bab5 305
 19739                          getang                                                     ;; @@bab5 305
 19740  bab5 2075bb                              jsr settwo                               ; move angle value into y/a ;; @@bab5 305
 19741                           ;; @@bab8 305
 19742  bab8 a200               gtang1           ldx #0                                   ; init count of phase ;; @@bab8 305
 19743                           ;; @@baba 305
 19744  baba e8                 _local_1304_10   inx                                       ;; @@baba 305
 19745  babb 38                                  sec                                       ;; @@babb 305
 19746  babc e95a                                sbc #90                                  ; subtract 90 until less than 0 ;; @@babc 305
 19747  babe b0fa                                bcs _local_1304_10                        ;; @@babe 305
 19748  bac0 88                                  dey                                       ;; @@bac0 305
 19749  bac1 10f7                                bpl _local_1304_10                        ;; @@bac1 305
 19750  bac3 8efa11                              stx angsgn                               ; save phase (here it is 1-4) ;; @@bac3 305
 19751  bac6 48                                  pha                                       ;; @@bac6 305
 19752  bac7 695a                                adc #90                                  ; make positive ;; @@bac7 305
 19753  bac9 20d5ba                              jsr _local_1304_20                       ; do division by 10 ;; @@bac9 305
 19754  bacc 68                                  pla                                      ; get 2's comp of angle ;; @@bacc 305
 19755  bacd 18                                  clc                                       ;; @@bacd 305
 19756  bace 49ff                                eor #$ff                                  ;; @@bace 305
 19757  bad0 6901                                adc #1                                   ; make positive ;; @@bad0 305
 19758  bad2 cefa11                              dec angsgn                               ; correct phase ;; @@bad2 305
 19759                           ;; @@bad5 305
 19760  bad5 a2ff               _local_1304_20   ldx #$ff                                  ;; @@bad5 305
 19761  bad7 e8                 _local_1304_30   inx                                      ; do division by 10 ;; @@bad7 305
 19762  bad8 38                                  sec                                       ;; @@bad8 305
 19763  bad9 e90a                                sbc #10                                   ;; @@bad9 305
 19764  badb b0fa                                bcs _local_1304_30                        ;; @@badb 305
 19765  badd 690a                                adc #10                                  ; make positive ;; @@badd 305
 19766  badf 8df511                              sta vtemp1                               ; save remainder ;; @@badf 305
 19767  bae2 8a                                  txa                                       ;; @@bae2 305
 19768  bae3 0a                                  asl                                      ; get quotient*2 as index ;; @@bae3 305
 19769  bae4 aa                                  tax                                       ;; @@bae4 305
 19770  bae5 bda2bc                              lda angval+1,x                           ; get low byte base ;; @@bae5 305
 19771  bae8 bca1bc                              ldy angval,x                             ; get high byte value ;; @@bae8 305
 19772                           ;; @@baeb 305
 19773  baeb 18                 _local_1304_40   clc                                       ;; @@baeb 305
 19774  baec cef511                              dec vtemp1                                ;; @@baec 305
 19775  baef 300c                                bmi _local_1304_50                       ; done - remainder = 0 ;; @@baef 305
 19776  baf1 7db6bc                              adc incval+1,x                           ; add low byte increment ;; @@baf1 305
 19777  baf4 48                                  pha                                       ;; @@baf4 305
 19778  baf5 98                                  tya                                       ;; @@baf5 305
 19779  baf6 7db5bc                              adc incval,x                             ; add high byte increment ;; @@baf6 305
 19780  baf9 a8                                  tay                                       ;; @@baf9 305
 19781  bafa 68                                  pla                                       ;; @@bafa 305
 19782  bafb 90ee                                bcc _local_1304_40                       ; ...always ;; @@bafb 305
 19783                           ;; @@bafd 305
 19784  bafd 48                 _local_1304_50   pha                                      ; save low byte of result ;; @@bafd 305
 19785  bafe a200                                ldx #0                                   ; point to sinval ;; @@bafe 305
 19786  bb00 adfa11                              lda angsgn                                ;; @@bb00 305
 19787  bb03 4a                                  lsr                                       ;; @@bb03 305
 19788  bb04 b002                                bcs _local_1304_60                       ; skip if sine value ;; @@bb04 305
 19789  bb06 a202                                ldx #2                                   ; point to cosval ;; @@bb06 305
 19790                           ;; @@bb08 305
 19791  bb08 68                 _local_1304_60   pla                                       ;; @@bb08 305
 19792  bb09 9dfb11                              sta sinval,x                             ; save low byte result ;; @@bb09 305
 19793  bb0c 98                                  tya                                       ;; @@bb0c 305
 19794  bb0d 9dfc11                              sta sinval+1,x                           ; save high byte result ;; @@bb0d 305
 19795  bb10 60                                  rts                                       ;; @@bb10 305
 19796                           ;; @@bb11 305
 19797                          ; .page ;; @@bb11 305
 19798                          ;************************************************************* ;; @@bb11 305
 19799                          ;  angmlt  -  multiple 2-byte integer times angle ;; @@bb11 305
 19800                          ;       carry set/reset = cosine/sine ;; @@bb11 305
 19801                          ; ;; @@bb11 305
 19802                          ;       vwork+x = 2-byte integer ;; @@bb11 305
 19803                          ;       result left in y/a ;; @@bb11 305
 19804                          ;************************************************************* ;; @@bb11 305
 19805                           ;; @@bb11 305
 19806                          angmlt                                                     ;; @@bb11 306
 19807  bb11 a00f                                ldy #sinval-vwork                        ; get offset to angle value ;; @@bb11 306
 19808  bb13 9002                                bcc _local_1305_10                       ; get cosine/sine offset ;; @@bb13 306
 19809  bb15 a011                                ldy #cosval-vwork                         ;; @@bb15 306
 19810                           ;; @@bb17 306
 19811  bb17 adfa11             _local_1305_10   lda angsgn                                ;; @@bb17 306
 19812  bb1a 6902                                adc #2                                   ; correct phase for cosine to look as sine ;; @@bb1a 306
 19813  bb1c 4a                                  lsr                                       ;; @@bb1c 306
 19814  bb1d 4a                                  lsr                                       ;; @@bb1d 306
 19815  bb1e 08                                  php                                      ; save if carry - means negative angle value ;; @@bb1e 306
 19816  bb1f 2075bb                              jsr settwo                               ; get angle fraction in y/a ;; @@bb1f 306
 19817  bb22 c0ff                                cpy #$ff                                 ; test if value should be 1 ;; @@bb22 306
 19818  bb24 9007                                bcc _local_1305_20                       ; skip if not ;; @@bb24 306
 19819  bb26 8a                                  txa                                       ;; @@bb26 306
 19820  bb27 a8                                  tay                                      ; get offset to integer ;; @@bb27 306
 19821  bb28 2075bb                              jsr settwo                               ; just get integer - multiplied by 1 ;; @@bb28 306
 19822  bb2b b003                                bcs _local_1305_30                        ;; @@bb2b 306
 19823                           ;; @@bb2d 306
 19824  bb2d 2094bb             _local_1305_20   jsr twobyt                               ; multiply integer times angle value ;; @@bb2d 306
 19825  bb30 28                 _local_1305_30   plp                                      ; get sign of angle ;; @@bb30 306
 19826  bb31 9051                                bcc invert                               ; invert result if negative,do rts ;; @@bb31 306
 19827  bb33 60                                  rts                                       ;; @@bb33 306
 19828                           ;; @@bb34 306
 19829                          ; .page ;; @@bb34 306
 19830                          ;************************************************************* ;; @@bb34 306
 19831                          ;  angdst  -  set up values for distance * angles ;; @@bb34 306
 19832                          ;       vwork+x = x & y distances ;; @@bb34 306
 19833                          ;       a = angles : ang1,ang2,ang3,ang4,0,0,0,0 ;; @@bb34 306
 19834                          ;       get  xdist1 = xdist1 * angle-1 ;; @@bb34 306
 19835                          ;     ydist1 = ydist1 * angle-2 ;; @@bb34 306
 19836                          ;     xdist2 = xdist2 * angle-3 ;; @@bb34 306
 19837                          ;     ydist2 = ydist2 * angle-4 ;; @@bb34 306
 19838                          ;************************************************************* ;; @@bb34 306
 19839                          ; ;; @@bb34 306
 19840                          ;angdst ;; @@bb34 306
 19841                          ; sta angcnt      ;save angles ;; @@bb34 306
 19842                          ; ldx #xdist1-vwork ;; @@bb34 306
 19843                          ;angd10 ;; @@bb34 306
 19844                          ; asl angcnt ;; @@bb34 306
 19845                          ; jsr angmlt      ;multiply angle * distance ;; @@bb34 306
 19846                          ; sta vwork,x ;; @@bb34 306
 19847                          ; tya  ;save results ;; @@bb34 306
 19848                          ; sta vwork+1,x ;; @@bb34 306
 19849                          ; inx  ;point to next distance ;; @@bb34 306
 19850                          ; inx ;; @@bb34 306
 19851                          ; cpx #disend-vwork ;; @@bb34 306
 19852                          ; bcc angd10 ;loop 4 times ;; @@bb34 306
 19853                          ;angd20 rts ;; @@bb34 306
 19854                           ;; @@bb34 306
 19855                          ;.end ;; @@bb34 306
 19856                          ; .page ;; @@bb34 306
 19857                          ; GRAPHIC8.SRC ;; @@bb34 306
 19858                          ;**************************************************************** ;; @@bb34 306
 19859                          ;  docolr  --  set up color for 8x8 charcater cell ;; @@bb34 306
 19860                          ;   x = row number  --  y = column number ;; @@bb34 306
 19861                          ;**************************************************************** ;; @@bb34 306
 19862                          ; ;; @@bb34 306
 19863                          ;docolr lda _ldtb2,x      ;put address of video ram into grapnt ;; @@bb34 306
 19864                          ; sta grapnt ;; @@bb34 306
 19865                          ; lda graphic_ldtb1,x ;point to bit mapped color area ;; @@bb34 306
 19866                          ; sta grapnt+1 ;; @@bb34 306
 19867                          ; ;; @@bb34 306
 19868                          ; lda colsel  ;get current color source selected ;; @@bb34 306
 19869                          ; ;; @@bb34 306
 19870                          ; bne _local_1305_10   ;branch if NOT background ;; @@bb34 306
 19871                          ; lda fg_bg ;; @@bb34 306
 19872                          ; bit _graphm  ;test if mode = hires ;; @@bb34 306
 19873                          ; bpl 25$   ;if so, go set up byte ;; @@bb34 306
 19874                          ; rts   ;else exit ;; @@bb34 306
 19875                          ; ;; @@bb34 306
 19876                          ;_local_1305_10 cmp #2 ;; @@bb34 306
 19877                          ; bne _local_1305_30   ;branch if NOT multi-color 1 ;; @@bb34 306
 19878                          ; ;; @@bb34 306
 19879                          ;_local_1305_20 lda fg_mc1  ;get correct packed colors for multicolor mode. ;; @@bb34 306
 19880                          ;25$ and #$0f ;; @@bb34 306
 19881                          ; sta z_p_temp_1 ;; @@bb34 306
 19882                          ; lda (grapnt),y ;; @@bb34 306
 19883                          ; and #$f0 ;; @@bb34 306
 19884                          ; ora z_p_temp_1 ;; @@bb34 306
 19885                          ; sta (grapnt),y ;; @@bb34 306
 19886                          ; rts ;; @@bb34 306
 19887                          ; ;; @@bb34 306
 19888                          ;_local_1305_30 bcs 40$   ;branch if multicolor 2 ;; @@bb34 306
 19889                          ; ;; @@bb34 306
 19890                          ; lda fg_bg  ;here for foreground. get packed colors. ;; @@bb34 306
 19891                          ; and #$f0 ;; @@bb34 306
 19892                          ; sta z_p_temp_1 ;; @@bb34 306
 19893                          ; lda (grapnt),y  ;do foreground ;; @@bb34 306
 19894                          ; and #$0f ;; @@bb34 306
 19895                          ; ora z_p_temp_1 ;; @@bb34 306
 19896                          ; sta (grapnt),y ;; @@bb34 306
 19897                          ; rts ;; @@bb34 306
 19898                          ; ;; @@bb34 306
 19899                          ;40$ lda grapnt+1  ;do multicolor 2 ;; @@bb34 306
 19900                          ; and #3 ;; @@bb34 306
 19901                          ; ora #>color_ram_hi ;set up to point to high color area ;; @@bb34 306
 19902                          ; sta grapnt+1 ;; @@bb34 306
 19903                          ; ;; @@bb34 306
 19904                          ; lda #0   ;put i/o in map ;; @@bb34 306
 19905                          ; sta mmu_config_reg ;; @@bb34 306
 19906                          ; ;; @@bb34 306
 19907                          ; sei ;; @@bb34 306
 19908                          ; lda _6510_data_reg ;; @@bb34 306
 19909                          ; pha ;; @@bb34 306
 19910                          ; and #%11111110  ;point cpu at correct nybble bank ;; @@bb34 306
 19911                          ; sta _6510_data_reg ;; @@bb34 306
 19912                          ; lda multicolor_2 ;; @@bb34 306
 19913                          ; sta (grapnt),y ;; @@bb34 306
 19914                          ; pla ;; @@bb34 306
 19915                          ; sta _6510_data_reg ;; @@bb34 306
 19916                          ; cli ;; @@bb34 306
 19917                          ; rts ;; @@bb34 306
 19918                          ; ;; @@bb34 306
 19919                          ; ;; @@bb34 306
 19920                          ; ;; @@bb34 306
 19921                          ;graphic_ldtb1   ;_ldtb1 adjusted for an org at color_ram_lo ;; @@bb34 306
 19922                          ;99$=color_ram_lo ;; @@bb34 306
 19923                          ;1$=color_ram_lo+40*1 ;; @@bb34 306
 19924                          ;2$=color_ram_lo+40*2 ;; @@bb34 306
 19925                          ;3$=color_ram_lo+40*3 ;; @@bb34 306
 19926                          ;4$=color_ram_lo+40*4 ;; @@bb34 306
 19927                          ;5$=color_ram_lo+40*5 ;; @@bb34 306
 19928                          ;6$=color_ram_lo+40*6 ;; @@bb34 306
 19929                          ;7$=color_ram_lo+40*7 ;; @@bb34 306
 19930                          ;8$=color_ram_lo+40*8 ;; @@bb34 306
 19931                          ;9$=color_ram_lo+40*9 ;; @@bb34 306
 19932                          ;_local_1305_10=color_ram_lo+40*10 ;; @@bb34 306
 19933                          ;11$=color_ram_lo+40*11 ;; @@bb34 306
 19934                          ;12$=color_ram_lo+40*12 ;; @@bb34 306
 19935                          ;13$=color_ram_lo+40*13 ;; @@bb34 306
 19936                          ;14$=color_ram_lo+40*14 ;; @@bb34 306
 19937                          ;15$=color_ram_lo+40*15 ;; @@bb34 306
 19938                          ;16$=color_ram_lo+40*16 ;; @@bb34 306
 19939                          ;17$=color_ram_lo+40*17 ;; @@bb34 306
 19940                          ;18$=color_ram_lo+40*18 ;; @@bb34 306
 19941                          ;19$=color_ram_lo+40*19 ;; @@bb34 306
 19942                          ;_local_1305_20=color_ram_lo+40*20 ;; @@bb34 306
 19943                          ;21$=color_ram_lo+40*21 ;; @@bb34 306
 19944                          ;22$=color_ram_lo+40*22 ;; @@bb34 306
 19945                          ;23$=color_ram_lo+40*23 ;; @@bb34 306
 19946                          ;24$=color_ram_lo+40*24 ;; @@bb34 306
 19947                          ; ;; @@bb34 306
 19948                          ; .byte >99$,>1$,>2$,>3$,>4$,>5$,>6$,>7$,>8$,>9$,>_local_1305_10 ;; @@bb34 306
 19949                          ; .byte >11$,>12$,>13$,>14$,>15$,>16$,>17$,>18$,>19$ ;; @@bb34 306
 19950                          ; .byte >_local_1305_20,>21$,>22$,>23$,>24$ ;; @@bb34 306
 19951                           ;; @@bb34 306
 19952                          ; .page ;; @@bb34 306
 19953                          ;****************************************************************** ;; @@bb34 306
 19954                          ;  getpos - get address in graphic bit map into grapnt ;; @@bb34 306
 19955                          ;      x = bit offset into byte specified (0-7) ;; @@bb34 306
 19956                          ;      y = offset to byte within 8x8 character cell ;; @@bb34 306
 19957                          ;      a = bit mask to the bit (or bits if multicolor mode) ;; @@bb34 306
 19958                          ;****************************************************************** ;; @@bb34 306
 19959                          ; ;; @@bb34 306
 19960                          ;getpos jsr divpos      ;get xpos/ypos to column/row position ;; @@bb34 306
 19961                          ; bcs grprts      ;abort if position too large ;; @@bb34 306
 19962                          ; ;; @@bb34 306
 19963                          ;getps1 tya  ;get addr for row (X) and col (Y) in grapnt ;; @@bb34 306
 19964                          ; clc ;; @@bb34 306
 19965                          ; adc _ldtb2,x ;add column position to low byte offset ;; @@bb34 306
 19966                          ; sta grapnt ;; @@bb34 306
 19967                          ; lda _ldtb1,x ;get high byte screen address ;; @@bb34 306
 19968                          ; adc #0  ;add any carry ;; @@bb34 306
 19969                          ; asl grapnt ;; @@bb34 306
 19970                          ; rol a ;; @@bb34 306
 19971                          ; asl grapnt ;mult by 8 to get offset into 8k area ;; @@bb34 306
 19972                          ; rol a ;; @@bb34 306
 19973                          ; asl grapnt ;; @@bb34 306
 19974                          ; rol a ;; @@bb34 306
 19975                          ; sta grapnt+1 ;; @@bb34 306
 19976                          ; ;; @@bb34 306
 19977                          ; lda ypos ;; @@bb34 306
 19978                          ; and #07 ;; @@bb34 306
 19979                          ; tay  ;get byte offset into 8x8 char cell ;; @@bb34 306
 19980                          ; lda xpos ;; @@bb34 306
 19981                          ; bit _graphm ;; @@bb34 306
 19982                          ; php ;; @@bb34 306
 19983                          ; bpl grpos3 ;skip if not multicolor mode ;; @@bb34 306
 19984                          ; asl a  ;shift x-pos for multicolor mode ;; @@bb34 306
 19985                          ; ;; @@bb34 306
 19986                          ;grpos3 and #07 ;; @@bb34 306
 19987                          ; tax ;; @@bb34 306
 19988                          ; lda rbits,x ;get bit mask ;; @@bb34 306
 19989                          ; plp ;; @@bb34 306
 19990                          ; bpl grprts ;done if not multicolor mode ;; @@bb34 306
 19991                          ; inx ;; @@bb34 306
 19992                          ; ora rbits,x ;mask for 2 bits if multicolor mode ;; @@bb34 306
 19993                          ;grprts rts ;; @@bb34 306
 19994                          ; ;; @@bb34 306
 19995                          ;rbits .byte   $80,$40,$20,$10,$08,$04,$02,$01 ;; @@bb34 306
 19996                           ;; @@bb34 306
 19997                          ; .page ;; @@bb34 306
 19998                          ;************************************************************** ;; @@bb34 306
 19999                          ;  divpos  --  convert xpos to column number ;; @@bb34 306
 20000                          ;  convert ypos to row number ;; @@bb34 306
 20001                          ;  return carry set if either above limits ;; @@bb34 306
 20002                          ;************************************************************** ;; @@bb34 306
 20003                          ; ;; @@bb34 306
 20004                          ;divpos lda xpos+1 ;; @@bb34 306
 20005                          ; lsr a ;; @@bb34 306
 20006                          ; bne _local_1305_20       ;out of bounds if greater than 1 ;; @@bb34 306
 20007                          ; lda xpos ;; @@bb34 306
 20008                          ; ror a ;; @@bb34 306
 20009                          ; lsr a  ;get column position = xpos/8 ;; @@bb34 306
 20010                          ; bit _graphm ;; @@bb34 306
 20011                          ; bmi _local_1305_10  ;skip if multicolor mode ;; @@bb34 306
 20012                          ; lsr a  ;divide by 8 if a hires or text mode ;; @@bb34 306
 20013                          ;_local_1305_10 tay ;; @@bb34 306
 20014                          ; cpy #llen ;; @@bb34 306
 20015                          ; bcs _local_1305_20  ;error exit if out of bounds ;; @@bb34 306
 20016                          ; lda ypos+1 ;; @@bb34 306
 20017                          ; bne _local_1305_20  ;out of bounds error if not = 0 ;; @@bb34 306
 20018                          ; lda ypos ;; @@bb34 306
 20019                          ; lsr a ;; @@bb34 306
 20020                          ; lsr a  ;get row number = ypos/8 ;; @@bb34 306
 20021                          ; lsr a ;; @@bb34 306
 20022                          ; tax ;; @@bb34 306
 20023                          ; cmp #nlines ;compare to max number of rows ;; @@bb34 306
 20024                          ; rts  ;carry clr if okay ;; @@bb34 306
 20025                          ;_local_1305_20 sec ;; @@bb34 306
 20026                          ; rts ;; @@bb34 306
 20027                           ;; @@bb34 306
 20028                          ; .page ;; @@bb34 306
 20029                          ;*************************************************************** ;; @@bb34 306
 20030                          ;   SCALXY  - Scale the x & y coordinates found in vwork+x ;; @@bb34 306
 20031                          ;*************************************************************** ;; @@bb34 306
 20032                          ; ;; @@bb34 306
 20033                          ;scalxy lda scalem ;; @@bb34 306
 20034                          ; beq sclrts      ;do nothing if scaling off ;; @@bb34 306
 20035                          ; ;; @@bb34 306
 20036                          ; lda scale_x ;; @@bb34 306
 20037                          ; ldy scale_x+1 ;; @@bb34 306
 20038                          ; jsr doscal      ;scale in the x-direction ;; @@bb34 306
 20039                          ; ;; @@bb34 306
 20040                          ; lda scale_y ;; @@bb34 306
 20041                          ; ldy scale_y+1 ;scale in the y direction ;; @@bb34 306
 20042                          ; ;; @@bb34 306
 20043                          ;doscal jsr twobyt ;multiply * coordinate ;; @@bb34 306
 20044                          ; sta vwork,x ;; @@bb34 306
 20045                          ; tya ;; @@bb34 306
 20046                          ; inx  ;store back into original position ;; @@bb34 306
 20047                          ; sta vwork,x ;; @@bb34 306
 20048                          ; inx ;; @@bb34 306
 20049                          ;sclrts ;; @@bb34 306
 20050                          ; rts ;; @@bb34 306
 20051                           ;; @@bb34 306
 20052                          ;.end ;; @@bb34 306
 20053                          ; .page ;; @@bb34 306
 20054                          ;GRAPHICS9.SRC ;; @@bb34 306
 20055                          ;*************************************************************** ;; @@bb34 306
 20056                          ;   DOTWO  - Add      two 2-byte values if carry clear ;; @@bb34 306
 20057                          ;  Subtract two 2-byte values if carry set ;; @@bb34 306
 20058                          ;*************************************************************** ;; @@bb34 306
 20059                           ;; @@bb34 306
 20060                          dotwo2                                                     ;; @@bb34 307
 20061  bb34 9007                                bcc addtw2                               ; go do addition ;; @@bb34 307
 20062  bb36 b014                                bcs subtw2                               ; go do subtraction ;; @@bb36 307
 20063                          dotwo                                                      ;; @@bb38 307
 20064  bb38 b00f                                bcs subtwo                               ; go do subtraction ;; @@bb38 307
 20065                           ;; @@bb3a 307
 20066                          ;*************************************************************** ;; @@bb3a 307
 20067                          ;  ADDTWO  - Add vwork+y and vwork+x  Result in y/a ;; @@bb3a 307
 20068                          ;*************************************************************** ;; @@bb3a 307
 20069                           ;; @@bb3a 307
 20070                          addtwo                                                     ;; @@bb3a 307
 20071  bb3a 2075bb                              jsr settwo                               ; put vwrok+y into y/a ;; @@bb3a 307
 20072                           ;; @@bb3d 307
 20073                          addtw2                                                    ; enter here to add y/a to vwork+x ;; @@bb3d 307
 20074  bb3d 18                                  clc                                       ;; @@bb3d 307
 20075  bb3e 7dec11                              adc vwork,x                               ;; @@bb3e 307
 20076  bb41 48                                  pha                                       ;; @@bb41 307
 20077  bb42 98                                  tya                                       ;; @@bb42 307
 20078  bb43 7ded11                              adc vwork+1,x                             ;; @@bb43 307
 20079  bb46 a8                                  tay                                       ;; @@bb46 307
 20080  bb47 68                                  pla                                       ;; @@bb47 307
 20081  bb48 60                                  rts                                       ;; @@bb48 307
 20082                           ;; @@bb49 307
 20083                          ; .page ;; @@bb49 307
 20084                          ;**************************************************************** ;; @@bb49 307
 20085                          ;  SUBTWO  - Subtract vwork+y - vwork+x Result in y/a ;; @@bb49 307
 20086                          ;**************************************************************** ;; @@bb49 307
 20087                           ;; @@bb49 307
 20088                          subtwo                                                     ;; @@bb49 307
 20089  bb49 2075bb                              jsr settwo                               ; move vwork+y into y/a ;; @@bb49 307
 20090                           ;; @@bb4c 307
 20091                          subtw2                                                    ; enter here with 1st value in y/a ;; @@bb4c 307
 20092  bb4c 38                                  sec                                       ;; @@bb4c 307
 20093  bb4d fdec11                              sbc vwork,x                               ;; @@bb4d 307
 20094  bb50 8559                                sta tempf1                                ;; @@bb50 307
 20095  bb52 98                                  tya                                       ;; @@bb52 307
 20096  bb53 fded11                              sbc vwork+1,x                             ;; @@bb53 307
 20097  bb56 a8                                  tay                                       ;; @@bb56 307
 20098  bb57 08                                  php                                       ;; @@bb57 307
 20099  bb58 a559                                lda tempf1                                ;; @@bb58 307
 20100  bb5a 28                                  plp                                       ;; @@bb5a 307
 20101  bb5b 60                                  rts                                       ;; @@bb5b 307
 20102                           ;; @@bb5c 307
 20103                           ;; @@bb5c 307
 20104                          subtwo_savram                                              ;; @@bb5c 307
 20105  bb5c b99111                              lda savram,y                             ; load value into y,a ;; @@bb5c 307
 20106  bb5f 48                                  pha                                       ;; @@bb5f 307
 20107  bb60 b99211                              lda savram+1,y                            ;; @@bb60 307
 20108  bb63 a8                                  tay                                       ;; @@bb63 307
 20109  bb64 68                                  pla                                       ;; @@bb64 307
 20110  bb65 38                                  sec                                       ;; @@bb65 307
 20111  bb66 fd9111                              sbc savram,x                              ;; @@bb66 307
 20112  bb69 8559                                sta tempf1                                ;; @@bb69 307
 20113  bb6b 98                                  tya                                       ;; @@bb6b 307
 20114  bb6c fd9211                              sbc savram+1,x                            ;; @@bb6c 307
 20115  bb6f a8                                  tay                                       ;; @@bb6f 307
 20116  bb70 08                                  php                                       ;; @@bb70 307
 20117  bb71 a559                                lda tempf1                                ;; @@bb71 307
 20118  bb73 28                                  plp                                       ;; @@bb73 307
 20119  bb74 60                                  rts                                       ;; @@bb74 307
 20120                           ;; @@bb75 307
 20121                          ; .page ;; @@bb75 307
 20122                          ;************************************************************ ;; @@bb75 307
 20123                          ;  SETTWO  - Move value in vwork+y into y/a ;; @@bb75 307
 20124                          ;************************************************************ ;; @@bb75 307
 20125                           ;; @@bb75 307
 20126                          settwo                                                     ;; @@bb75 307
 20127  bb75 b9ec11                              lda vwork,y                               ;; @@bb75 307
 20128  bb78 48                                  pha                                       ;; @@bb78 307
 20129  bb79 b9ed11                              lda vwork+1,y                             ;; @@bb79 307
 20130  bb7c a8                                  tay                                       ;; @@bb7c 307
 20131  bb7d 68                                  pla                                       ;; @@bb7d 307
 20132  bb7e 60                                  rts                                       ;; @@bb7e 307
 20133                           ;; @@bb7f 307
 20134                          ;****************************************************************** ;; @@bb7f 307
 20135                          ;  ABSTWO  - Get absolute value of vwork+y - vwork+x ;; @@bb7f 307
 20136                          ;  Result in y/a  -  carry === vwork+y >= vwork+x ;; @@bb7f 307
 20137                          ;****************************************************************** ;; @@bb7f 307
 20138                           ;; @@bb7f 307
 20139                          abstwo                                                    ; movspr_to [910809] ;; @@bb7f 307
 20140  bb7f 2049bb                              jsr subtwo                               ; subtract vwork+y - vwork+x ;; @@bb7f 307
 20141                          abstw2                                                    ; entrance with vwork+y in y/a ;; @@bb82 307
 20142  bb82 100f                                bpl absrts                               ; done if result is positive ;; @@bb82 307
 20143  bb84 08                 invert           php                                       ;; @@bb84 307
 20144  bb85 18                                  clc                                       ;; @@bb85 307
 20145  bb86 49ff                                eor #$ff                                 ; invert low byte result and add 1 ;; @@bb86 307
 20146  bb88 6901                                adc #1                                    ;; @@bb88 307
 20147  bb8a 48                                  pha                                       ;; @@bb8a 307
 20148  bb8b 98                                  tya                                       ;; @@bb8b 307
 20149  bb8c 49ff                                eor #$ff                                 ; invert high byte result ;; @@bb8c 307
 20150  bb8e 6900                                adc #0                                   ; add back any carry ;; @@bb8e 307
 20151  bb90 a8                                  tay                                       ;; @@bb90 307
 20152  bb91 68                                  pla                                       ;; @@bb91 307
 20153  bb92 28                                  plp                                       ;; @@bb92 307
 20154  bb93 60                 absrts           rts                                       ;; @@bb93 307
 20155                           ;; @@bb94 307
 20156                          ; .page ;; @@bb94 307
 20157                          ;**************************************************************** ;; @@bb94 307
 20158                          ;  TWOBYT  - Multiply 2 byte fraction in y/a times 2 bytes ;; @@bb94 307
 20159                          ;  Integer found in vwork+x-reg.  Result = y/a ;; @@bb94 307
 20160                          ;**************************************************************** ;; @@bb94 307
 20161                           ;; @@bb94 307
 20162                          twobyt                                                     ;; @@bb94 307
 20163  bb94 8cf511                              sty vtemp1                               ; save fraction ;; @@bb94 307
 20164  bb97 8df611                              sta vtemp2                                ;; @@bb97 307
 20165  bb9a bdec11                              lda vwork,x                               ;; @@bb9a 307
 20166  bb9d bced11                              ldy vwork+1,x                             ;; @@bb9d 307
 20167  bba0 08                                  php                                      ; save sign of integer ;; @@bba0 307
 20168  bba1 2082bb                              jsr abstw2                               ; absolute value ;; @@bba1 307
 20169  bba4 9dec11                              sta vwork,x                               ;; @@bba4 307
 20170  bba7 98                                  tya                                       ;; @@bba7 307
 20171  bba8 9ded11                              sta vwork+1,x                             ;; @@bba8 307
 20172  bbab a900                                lda #0                                    ;; @@bbab 307
 20173  bbad 8df711                              sta vtemp3                               ; initialize result to zero ;; @@bbad 307
 20174                           ;; @@bbb0 307
 20175  bbb0 a010                                ldy #16                                  ; initialize count ;; @@bbb0 307
 20176  bbb2 4ef511             _local_1306_10   lsr vtemp1                                ;; @@bbb2 307
 20177  bbb5 6ef611                              ror vtemp2                                ;; @@bbb5 307
 20178  bbb8 900f                                bcc _local_1306_20                       ; skip if no bit set ;; @@bbb8 307
 20179  bbba 18                                  clc                                       ;; @@bbba 307
 20180  bbbb 7dec11                              adc vwork,x                              ; add integer low byte ;; @@bbbb 307
 20181  bbbe 48                                  pha                                       ;; @@bbbe 307
 20182  bbbf adf711                              lda vtemp3                                ;; @@bbbf 307
 20183  bbc2 7ded11                              adc vwork+1,x                            ; add integer high byte to total ;; @@bbc2 307
 20184  bbc5 8df711                              sta vtemp3                                ;; @@bbc5 307
 20185  bbc8 68                                  pla                                       ;; @@bbc8 307
 20186                           ;; @@bbc9 307
 20187  bbc9 4ef711             _local_1306_20   lsr vtemp3                               ; divide by 2 ;; @@bbc9 307
 20188  bbcc 6a                                  ror                                       ;; @@bbcc 307
 20189  bbcd 88                                  dey                                       ;; @@bbcd 307
 20190  bbce d0e2                                bne _local_1306_10                       ; loop 16 times - test all bits in 2 bytes ;; @@bbce 307
 20191                           ;; @@bbd0 307
 20192  bbd0 6900                                adc #0                                   ; add back round factor ;; @@bbd0 307
 20193  bbd2 acf711                              ldy vtemp3                                ;; @@bbd2 307
 20194  bbd5 9001                                bcc _local_1306_30                        ;; @@bbd5 307
 20195  bbd7 c8                                  iny                                       ;; @@bbd7 307
 20196  bbd8 28                 _local_1306_30   plp                                      ; pop sign ;; @@bbd8 307
 20197  bbd9 80a7                                bra abstw2                               ; return with signed product in y/a ;; @@bbd9 307
 20198                           ;; @@bbdb 307
 20199                          ; .page ;; @@bbdb 307
 20200                          ;****************************************************************** ;; @@bbdb 307
 20201                          ;  dstpos  -  move xdest/ydest to xpos/ypos ;; @@bbdb 307
 20202                          ;****************************************************************** ;; @@bbdb 307
 20203                          ; ;; @@bbdb 307
 20204                          ;dstpos ;; @@bbdb 307
 20205                          ; ldy #0 ;; @@bbdb 307
 20206                          ; jsr dstmov ;; @@bbdb 307
 20207                          ; ldy #2 ;; @@bbdb 307
 20208                          ;dstmov ;; @@bbdb 307
 20209                          ; lda xdest,y ;; @@bbdb 307
 20210                          ; sta xpos,y ;; @@bbdb 307
 20211                          ; lda xdest+1,y ;; @@bbdb 307
 20212                          ; sta xpos+1,y ;; @@bbdb 307
 20213                          ; rts ;; @@bbdb 307
 20214                           ;; @@bbdb 307
 20215                          ;.end ;; @@bbdb 307
 20216                          ; .page ;; @@bbdb 307
 20217                          ;GRAPHICS10.SRC ;; @@bbdb 307
 20218                          ;************************************************************ ;; @@bbdb 307
 20219                          ;   incolr  --  get color selection parameter into colsel ;; @@bbdb 307
 20220                          ;************************************************************ ;; @@bbdb 307
 20221                          ; ;; @@bbdb 307
 20222                          ;incolr ;; @@bbdb 307
 20223                          ; ldx #1   ;get an optional 1 byte val, def=fg(1) ;; @@bbdb 307
 20224                          ; jsr chrgot ;; @@bbdb 307
 20225                          ;incol1 ;; @@bbdb 307
 20226                          ; beq incol2       ;eol, use default ;; @@bbdb 307
 20227                          ; cmp #',' ;; @@bbdb 307
 20228                          ; beq incol2       ;just ',', use default ;; @@bbdb 307
 20229                          ; jsr getbyt ;; @@bbdb 307
 20230                          ; cpx #4   ;must be 0-3 ;; @@bbdb 307
 20231                          ; bcs illval       ;..else illegal value ;; @@bbdb 307
 20232                          ; cpx #2 ;; @@bbdb 307
 20233                          ; bit _graphm       ;if hires, must be 0 or 1 ;; @@bbdb 307
 20234                          ; bmi incol2 ;; @@bbdb 307
 20235                          ; bcs illval ;; @@bbdb 307
 20236                          ;incol2 ;; @@bbdb 307
 20237                          ; stx colsel ;; @@bbdb 307
 20238                          ; rts ;; @@bbdb 307
 20239                          ; ;; @@bbdb 307
 20240                          ;illval ;; @@bbdb 307
 20241                          ; jmp fcerr  ;illegal value ;; @@bbdb 307
 20242                           ;; @@bbdb 307
 20243                          ; .page ;; @@bbdb 307
 20244                          ;****************************************************************** ;; @@bbdb 307
 20245                          ;  INCORD  ---  Get X,Y coordinate from input stream into vwork+x ;; @@bbdb 307
 20246                          ; ;; @@bbdb 307
 20247                          ;  Coordinate may have any of the forms: ;; @@bbdb 307
 20248                          ;    x,y  = absolute xpos & absolute ypos ;; @@bbdb 307
 20249                          ; +/-x,y  = relative xpos & absolute ypos ;; @@bbdb 307
 20250                          ;    x,+/-y = absolute xpos & relative ypos ;; @@bbdb 307
 20251                          ; +/-x,+/-y = relative xpos & relative ypos ;; @@bbdb 307
 20252                          ;    x;y  = x-distance at an angle y ;; @@bbdb 307
 20253                          ; ;; @@bbdb 307
 20254                          ;  Relative and angle distances are relative to current x,ypos. ;; @@bbdb 307
 20255                          ;  Values are scaled to current mode parameters if required. ;; @@bbdb 307
 20256                          ;****************************************************************** ;; @@bbdb 307
 20257                           ;; @@bbdb 307
 20258                           ;; @@bbdb 307
 20259                          incor2                                                    ; enter here for optional argument ;; @@bbdb 308
 20260  bbdb 208522                              jsr chrgot                               ; end of line? ;; @@bbdb 308
 20261  bbde f007                                beq _local_1307_10                       ; yes, use defaults ;; @@bbde 308
 20262  bbe0 205b4e                              jsr chkcom                                ;; @@bbe0 308
 20263  bbe3 c92c                                cmp #','                                 ; is there really an arg? ;; @@bbe3 308
 20264  bbe5 d00f                                bne incord                               ; yes, let'er rip ;; @@bbe5 308
 20265                           ;; @@bbe7 308
 20266  bbe7 a000               _local_1307_10   ldy #0                                   ; set default pos = current pos ;; @@bbe7 308
 20267  bbe9 b9ec11             _local_1307_20   lda xpos,y                                ;; @@bbe9 308
 20268  bbec 9dec11                              sta vwork,x                               ;; @@bbec 308
 20269  bbef e8                                  inx                                       ;; @@bbef 308
 20270  bbf0 c8                                  iny                                       ;; @@bbf0 308
 20271  bbf1 c004                                cpy #4                                    ;; @@bbf1 308
 20272  bbf3 90f4                                bcc _local_1307_20                        ;; @@bbf3 308
 20273  bbf5 60                                  rts                                       ;; @@bbf5 308
 20274                           ;; @@bbf6 308
 20275                          ; .page ;; @@bbf6 308
 20276                          ;incor3    ;enter here for non-optional arg preceded by a comma ;; @@bbf6 308
 20277                          ; jsr chkcom ;; @@bbf6 308
 20278                          incord                                                     ;; @@bbf6 309
 20279  bbf6 8ef811                              stx vtemp4                               ; save offset to destination ;; @@bbf6 309
 20280  bbf9 2081bc                              jsr cordsb                               ; get 2-byte x-parameter ;; @@bbf9 309
 20281  bbfc 208522                              jsr chrgot                                ;; @@bbfc 309
 20282  bbff c92c                                cmp #','                                  ;; @@bbff 309
 20283  bc01 f051                                beq docord                               ; skip ahead if have comma ;; @@bc01 309
 20284                           ;; @@bc03 309
 20285  bc03 c93b                                cmp #';'                                 ; check for semi-colon ;; @@bc03 309
 20286  bc05 d34272                              +lbne snerr                              ; missing angle param- show syntax message ;; @@bc05 309
 20287  bc08 208322                              jsr chrget       ;skip over '            ; ' ;; @@bc08 309
 20288  bc0b 208a5d                              jsr getwrd                               ; get 2-byte angle in a,y ;; @@bc0b 309
 20289  bc0e 8576                                sta z_p_temp_1                           ; swap a,y ;; @@bc0e 309
 20290  bc10 98                                  tya                                       ;; @@bc10 309
 20291  bc11 a476                                ldy z_p_temp_1                            ;; @@bc11 309
 20292  bc13 20b8ba                              jsr gtang1                               ; get sine & cosine values for the angle ;; @@bc13 309
 20293  bc16 aef811                              ldx vtemp4                                ;; @@bc16 309
 20294  bc19 bdec11                              lda vwork,x                               ;; @@bc19 309
 20295  bc1c 9dee11                              sta vwork+2,x                            ; move length to y-parameter ;; @@bc1c 309
 20296  bc1f bded11                              lda vwork+1,x                             ;; @@bc1f 309
 20297  bc22 9def11                              sta vwork+3,x                             ;; @@bc22 309
 20298                          ; jsr scalxy       ;scale the values ;; @@bc25 309
 20299  bc25 a90e                                lda #$0e                                  ;; @@bc25 309
 20300  bc27 8df911                              sta vtemp5                                ;; @@bc27 309
 20301  bc2a 18                                  clc                                       ;; @@bc2a 309
 20302  bc2b aef811                              ldx vtemp4                                ;; @@bc2b 309
 20303                           ;; @@bc2e 309
 20304  bc2e 2011bb             _local_1308_10   jsr angmlt                               ; multiply length * angle ;; @@bc2e 309
 20305  bc31 9dec11                              sta vwork,x                              ; save angle result ;; @@bc31 309
 20306  bc34 98                                  tya                                       ;; @@bc34 309
 20307  bc35 9ded11                              sta vwork+1,x                             ;; @@bc35 309
 20308  bc38 a000                                ldy #xpos-vwork                           ;; @@bc38 309
 20309  bc3a 4ef911                              lsr vtemp5                                ;; @@bc3a 309
 20310  bc3d 9002                                bcc _local_1308_20                        ;; @@bc3d 309
 20311  bc3f a002                                ldy #ypos-vwork                           ;; @@bc3f 309
 20312                           ;; @@bc41 309
 20313  bc41 2038bb             _local_1308_20   jsr dotwo                                ; add/subtract value to current position ;; @@bc41 309
 20314  bc44 9dec11                              sta vwork,x                               ;; @@bc44 309
 20315  bc47 98                                  tya                                      ; save result in destination ;; @@bc47 309
 20316  bc48 9ded11                              sta vwork+1,x                             ;; @@bc48 309
 20317  bc4b e8                                  inx                                       ;; @@bc4b 309
 20318  bc4c e8                                  inx                                       ;; @@bc4c 309
 20319  bc4d 4ef911                              lsr vtemp5                                ;; @@bc4d 309
 20320  bc50 d0dc                                bne _local_1308_10                       ; do y-coordinate ;; @@bc50 309
 20321  bc52 18                                  clc                                       ;; @@bc52 309
 20322  bc53 60                                  rts                                       ;; @@bc53 309
 20323                           ;; @@bc54 309
 20324                          ; .page ;; @@bc54 309
 20325  bc54 208322             docord           jsr chrget                               ; skip over comma ;; @@bc54 310
 20326  bc57 eef811                              inc vtemp4                               ; point to y-destination ;; @@bc57 310
 20327  bc5a eef811                              inc vtemp4                                ;; @@bc5a 310
 20328  bc5d 2081bc                              jsr cordsb                               ; get y-paramter ;; @@bc5d 310
 20329                          ; ldx vtemp4 ;; @@bc60 310
 20330                          ; dex ;; @@bc60 310
 20331                          ; dex ;; @@bc60 310
 20332                          ; jsr scalxy       ;scale the values ;; @@bc60 310
 20333  bc60 a002                                ldy #ypos-vwork                           ;; @@bc60 310
 20334  bc62 aef811                              ldx vtemp4                                ;; @@bc62 310
 20335  bc65 e8                                  inx                                       ;; @@bc65 310
 20336  bc66 e8                                  inx                                       ;; @@bc66 310
 20337                           ;; @@bc67 310
 20338  bc67 ca                 docor1           dex                                       ;; @@bc67 310
 20339  bc68 ca                                  dex                                       ;; @@bc68 310
 20340  bc69 4ef911                              lsr vtemp5                                ;; @@bc69 310
 20341  bc6c 900a                                bcc docor2                               ; skip if not relative ;; @@bc6c 310
 20342  bc6e 203abb                              jsr addtwo                               ; add to current position ;; @@bc6e 310
 20343  bc71 9dec11                              sta vwork,x                               ;; @@bc71 310
 20344  bc74 98                                  tya                                       ;; @@bc74 310
 20345  bc75 9ded11                              sta vwork+1,x                             ;; @@bc75 310
 20346                           ;; @@bc78 310
 20347  bc78 a000               docor2           ldy #xpos-vwork                           ;; @@bc78 310
 20348  bc7a ecf811                              cpx vtemp4                                ;; @@bc7a 310
 20349  bc7d f0e8                                beq docor1                               ; loop to do x-coordinate ;; @@bc7d 310
 20350  bc7f 18                                  clc                                       ;; @@bc7f 310
 20351  bc80 60                                  rts                                       ;; @@bc80 310
 20352                           ;; @@bc81 310
 20353                          ; ;; @@bc81 310
 20354                          ; CORDSB -- Get the next 2-byte parameter ;; @@bc81 310
 20355                          ; ;; @@bc81 310
 20356                           ;; @@bc81 310
 20357  bc81 208522             cordsb           jsr chrgot                               ; read character ;; @@bc81 310
 20358  bc84 c9aa                                cmp #plus_token                          ; check if relative - plus sign ;; @@bc84 310
 20359  bc86 f005                                beq _local_1309_10                       ; skip if yes ;; @@bc86 310
 20360  bc88 c9ab                                cmp #minus_token                          ;; @@bc88 310
 20361  bc8a f001                                beq _local_1309_10                       ; skip if relative - minus sign ;; @@bc8a 310
 20362  bc8c 18                                  clc                                      ; .c=1 if relative coord, .c=0 if absolute ;; @@bc8c 310
 20363  bc8d 2ef911             _local_1309_10   rol vtemp5                               ; save coord type for later ;; @@bc8d 310
 20364  bc90 20d84c                              jsr frmnum                                ;; @@bc90 310
 20365  bc93 20925d                              jsr getsad                               ; get signed 2 byte coordinate (y,a), do rts ;; @@bc93 310
 20366  bc96 aef811                              ldx vtemp4                                ;; @@bc96 310
 20367  bc99 9ded11                              sta vwork+1,x                            ; save 2-byte parameter ;; @@bc99 310
 20368  bc9c 98                                  tya                                       ;; @@bc9c 310
 20369  bc9d 9dec11                              sta vwork,x                               ;; @@bc9d 310
 20370  bca0 60                                  rts                                       ;; @@bca0 310
 20371                           ;; @@bca1 310
 20372                          ;.end ;; @@bca1 310
 20373                          ; .page ;; @@bca1 310
 20374                          ;GRAPHICS11.SRC ;; @@bca1 310
 20375                           ;; @@bca1 310
 20376                          ;  ANGVAL  -- Table of angle values on 10 degree boundaries ;; @@bca1 310
 20377                          ;  Values based as fraction of 65536 ;; @@bca1 310
 20378                           ;; @@bca1 310
 20379                          angval                                                     ;; @@bca1 311
 20380  bca1 0000                                !text $00,$00                            ; sine 00 degrees -  .0000 ;; @@bca1 311
 20381  bca3 2c71                                !text $2c,$71                            ; sine 10 degrees -  .1736 ;; @@bca3 311
 20382  bca5 578d                                !text $57,$8d                            ; sine 20 degrees -  .3420 ;; @@bca5 311
 20383  bca7 8000                                !text $80,$00                            ; sine 30 degrees -  .5000 ;; @@bca7 311
 20384  bca9 a48f                                !text $a4,$8f                            ; sine 40 degrees -  .6428 ;; @@bca9 311
 20385  bcab c419                                !text $c4,$19                            ; sine 50 degrees -  .7660 ;; @@bcab 311
 20386  bcad ddb2                                !text $dd,$b2                            ; sine 60 degrees -  .8660 ;; @@bcad 311
 20387  bcaf f090                                !text $f0,$90                            ; sine 70 degrees -  .9397 ;; @@bcaf 311
 20388  bcb1 fc1c                                !text $fc,$1c                            ; sine 80 degrees -  .9848 ;; @@bcb1 311
 20389  bcb3 ffff                                !text $ff,$ff                            ; sine 90 degrees - 1.0000 ;; @@bcb3 311
 20390                           ;; @@bcb5 311
 20391                          ;  INCVAL  -- Table of incremental values between 10 degrees ;; @@bcb5 311
 20392                          ;  Values based on fraction of 65536 ;; @@bcb5 311
 20393                           ;; @@bcb5 311
 20394                          incval                                                     ;; @@bcb5 311
 20395  bcb5 0472                                !text $04,$72                            ; 01 - 09 degrees -  .01739 ;; @@bcb5 311
 20396  bcb7 0450                                !text $04,$50                            ; 11 - 19 degrees -  .01692 ;; @@bcb7 311
 20397  bcb9 040b                                !text $04,$0b                            ; 21 - 29 degrees -  .01592 ;; @@bcb9 311
 20398  bcbb 03a8                                !text $03,$a8                            ; 31 - 39 degrees -  .01443 ;; @@bcbb 311
 20399  bcbd 0328                                !text $03,$28                            ; 41 - 49 degrees -  .01252 ;; @@bcbd 311
 20400  bcbf 0290                                !text $02,$90                            ; 51 - 59 degrees -  .01023 ;; @@bcbf 311
 20401  bcc1 01e3                                !text $01,$e3                            ; 61 - 69 degrees -  .00762 ;; @@bcc1 311
 20402  bcc3 0128                                !text $01,$28                            ; 71 - 79 degrees -  .00477 ;; @@bcc3 311
 20403  bcc5 0063                                !text $00,$63                            ; 81 - 89 degrees -  .00179 ;; @@bcc5 311
 20404                           ;; @@bcc7 311
 20405                          ;.end ;; @@bcc7 311
 20406                          ; .page ;; @@bcc7 311
 20407                          ; .subttl  EDIT Mode ;; @@bcc7 311
 20408                           ;; @@bcc7 311
 20409                          ; Edit mode is simply a poor man's word processor.  Text is entered normally ;; @@bcc7 311
 20410                          ; as if the user were typing in a program, but tokenization is turned off. ;; @@bcc7 311
 20411                          ; This affects only that text which follows a line number.  CRUNCH and QPLOP ;; @@bcc7 311
 20412                          ; test for this mode, and deal with the text accordingly.  RUN, GOTO, etc. ;; @@bcc7 311
 20413                          ; test for this mode and error-out if it's enabled.  LOADing a text file ;; @@bcc7 311
 20414                          ; will automatically add line numbers, SAVEing a text file will remove them. ;; @@bcc7 311
 20415                          ; ;; @@bcc7 311
 20416                          ; Syntax:  EDIT < ON | OFF > ;; @@bcc7 311
 20417                          ; ;; @@bcc7 311
 20418                          ; F. Bowen        [910620] ;; @@bcc7 311
 20419                           ;; @@bcc7 311
 20420  bcc7 20ed58             edit             jsr errind                               ; direct mode only command ;; @@bcc7 311
 20421  bcca c991                                cmp #on_token                             ;; @@bcca 311
 20422  bccc d004                                bne _local_1310_10                        ;; @@bccc 311
 20423  bcce a910                                lda #%00010000                           ; EDIT ON ;; @@bcce 311
 20424  bcd0 800a                                bra _local_1310_30                       ; (this kills trace mode, too) ;; @@bcd0 311
 20425                           ;; @@bcd2 311
 20426  bcd2 2016b5             _local_1310_10   jsr chkesc                               ; [910930] ;; @@bcd2 311
 20427                          ; cmp #esc_command_token ;; @@bcd5 311
 20428                          ; bne _local_1310_20 ;; @@bcd5 311
 20429                          ; jsr chrget ;; @@bcd5 311
 20430  bcd5 c924                                cmp #off_token                            ;; @@bcd5 311
 20431  bcd7 d37071             _local_1310_20   +lbne snerr                               ;; @@bcd7 311
 20432  bcda a900                                lda #0                                   ; EDIT OFF ;; @@bcda 311
 20433  bcdc 857e               _local_1310_30   sta runmod                                ;; @@bcdc 311
 20434  bcde 4c8322                              jmp chrget                               ; exit ;; @@bcde 311
 20435                           ;; @@bce1 311
 20436                           ;; @@bce1 311
 20437                          edit_crunch                                               ; Edit mode only, find end of plain text in input buffer ;; @@bce1 312
 20438  bce1 fc3d00                              phw txtptr                               ; save current position in input buffer ;; @@bce1 312
 20439  bce4 205635                              jsr rem                                  ; find the end of the line ;; @@bce4 312
 20440  bce7 a63d                                ldx txtptr                                ;; @@bce7 312
 20441  bce9 68                                  pla                                      ; restore buffer pointer ;; @@bce9 312
 20442  bcea 853e                                sta txtptr+1                              ;; @@bcea 312
 20443  bcec 68                                  pla                                       ;; @@bcec 312
 20444  bced 853d                                sta txtptr                                ;; @@bced 312
 20445  bcef 38                                  sec                                      ; compute length of line ;; @@bcef 312
 20446  bcf0 8a                                  txa                                       ;; @@bcf0 312
 20447  bcf1 e53d                                sbc txtptr                                ;; @@bcf1 312
 20448  bcf3 a8                                  tay                                       ;; @@bcf3 312
 20449  bcf4 c8                                  iny                                       ;; @@bcf4 312
 20450  bcf5 60                                  rts                                      ; done ;; @@bcf5 312
 20451                           ;; @@bcf6 312
 20452                           ;; @@bcf6 312
 20453                          edit_p1line                                               ; Edit mode only, list a line of plain text ;; @@bcf6 312
 20454  bcf6 207f64                              jsr linprt                               ; print line number in (a,x) ;; @@bcf6 312
 20455  bcf9 a920                                lda #' '                                 ; print a space ;; @@bcf9 312
 20456                           ;; @@bcfb 312
 20457  bcfb a003                                ldy #3                                   ; start printing at text following line number ;; @@bcfb 312
 20458  bcfd 203d68             _local_1311_10   jsr outch                                ; print character ;; @@bcfd 312
 20459  bd00 c8                                  iny                                       ;; @@bd00 312
 20460  bd01 5f5503                              bbr5 helper,_local_1311_20               ; if called from FIND/CHANGE check for highlighting ;; @@bd01 312
 20461  bd04 20963c                              jsr helpsb                                ;; @@bd04 312
 20462  bd07 20ad22             _local_1311_20   jsr indlow                               ; get next character ;; @@bd07 312
 20463  bd0a d0f1                                bne _local_1311_10                       ; loop until eol ;; @@bd0a 312
 20464  bd0c 60                                  rts                                      ; done ;; @@bd0c 312
 20465                           ;; @@bd0d 312
 20466                           ;; @@bd0d 312
 20467                          ;.end ;; @@bd0d 312
 20468                          ; .page ;; @@bd0d 312
 20469                          ; EDIT LOAD/SAVE  Load or Save a plain text SEQ file in memory ;; @@bd0d 312
 20470                           ;; @@bd0d 312
 20471                          edit_load                                                 ; Called by DLOAD/DVERIFY when in EDIT mode ;; @@bd0d 313
 20472  bd0d a301                                ldz #1                                    ;; @@bd0d 313
 20473  bd0f 20196f                              jsr open_SEQ_file                        ; Open the file just like TYPE: filename [,U#] [,D#] ;; @@bd0f 313
 20474  bd12 200e78                              jsr Check_DS                             ; check current disk error message ;; @@bd12 313
 20475  bd15 a000                                ldy #0                                    ;; @@bd15 313
 20476  bd17 a97a                                lda #dsdesc+1                             ;; @@bd17 313
 20477  bd19 20d722                              jsr lda_far_ram1                         ; lda (dsdesc+1),y peek at first character ;; @@bd19 313
 20478  bd1c c932                                cmp #'2'                                  ;; @@bd1c 313
 20479  bd1e b3ba00                              +lbcs _local_1312_30                     ; exit if error ;; @@bd1e 313
 20480  bd21 208278                              jsr Clear_DS                             ; else zap 'ok' message so user gets fresh one ;; @@bd21 313
 20481  bd24 ae8111                              ldx dosla                                 ;; @@bd24 313
 20482  bd27 20c6ff                              jsr _chkin                               ; get input channel ;; @@bd27 313
 20483  bd2a b3ae00                              +lbcs _local_1312_30                     ; error ;; @@bd2a 313
 20484                           ;; @@bd2d 313
 20485  bd2d 8f0c0e                              bbs0 verck,_local_1312_1                  ;; @@bd2d 313
 20486  bd30 207dff                              jsr _primm                                ;; @@bd30 313
 20487  bd33 0d4c4f4144494e47...                 !text cr,"LOADING",0                      ;; @@bd33 313
 20488  bd3c 800e                                bra _local_1312_2                         ;; @@bd3c 313
 20489  bd3e 207dff             _local_1312_1    jsr _primm                                ;; @@bd3e 313
 20490  bd41 0d56455249465949...                 !text cr,"VERIFYING",0                    ;; @@bd41 313
 20491                           ;; @@bd4c 313
 20492  bd4c a9e8               _local_1312_2    lda #<1000                               ; default starting line # ;; @@bd4c 313
 20493  bd4e a203                                ldx #>1000                                ;; @@bd4e 313
 20494  bd50 8516                                sta linnum                                ;; @@bd50 313
 20495  bd52 8617                                stx linnum+1                              ;; @@bd52 313
 20496                           ;; @@bd54 313
 20497  bd54 a52d                                lda txttab                               ; load address ;; @@bd54 313
 20498  bd56 a62e                                ldx txttab+1                              ;; @@bd56 313
 20499  bd58 8524                                sta index                                 ;; @@bd58 313
 20500  bd5a 8625                                stx index+1                               ;; @@bd5a 313
 20501                           ;; @@bd5c 313
 20502  bd5c a000               _local_1312_10   ldy #0                                   ; Input one line of text ;; @@bd5c 313
 20503  bd5e 20e1ff                              jsr _stop                                ; check stop key ;; @@bd5e 313
 20504  bd61 f072                                beq _local_1312_28                       ; exit if down ;; @@bd61 313
 20505  bd63 20b7ff                              jsr _readst                              ; check channel status ;; @@bd63 313
 20506  bd66 d06d                                bne _local_1312_28                       ; exit if eof or error ;; @@bd66 313
 20507                           ;; @@bd68 313
 20508  bd68 0f0c04                              bbr0 verck,_local_1312_15                 ;; @@bd68 313
 20509  bd6b a003                                ldy #3                                    ;; @@bd6b 313
 20510  bd6d 8020                                bra _local_1312_20                       ; skip ahead if verify op ;; @@bd6d 313
 20511                           ;; @@bd6f 313
 20512  bd6f a901               _local_1312_15   lda #1                                   ; install fake line links for this line ;; @@bd6f 313
 20513  bd71 200623                              jsr sta_far_in1                           ;; @@bd71 313
 20514  bd74 c8                                  iny                                      ; 1 ;; @@bd74 313
 20515  bd75 200623                              jsr sta_far_in1                           ;; @@bd75 313
 20516  bd78 c8                                  iny                                      ; 2 ;; @@bd78 313
 20517  bd79 a516                                lda linnum                               ; install line number for this line ;; @@bd79 313
 20518  bd7b 200623                              jsr sta_far_in1                           ;; @@bd7b 313
 20519  bd7e c8                                  iny                                      ; 3 ;; @@bd7e 313
 20520  bd7f a517                                lda linnum+1                              ;; @@bd7f 313
 20521  bd81 200623                              jsr sta_far_in1                           ;; @@bd81 313
 20522  bd84 18                                  clc                                       ;; @@bd84 313
 20523  bd85 a516                                lda linnum                               ; generate next line number ;; @@bd85 313
 20524  bd87 690a                                adc #10                                   ;; @@bd87 313
 20525  bd89 8516                                sta linnum                                ;; @@bd89 313
 20526  bd8b 9002                                bcc _local_1312_20                        ;; @@bd8b 313
 20527  bd8d e617                                inc linnum+1                              ;; @@bd8d 313
 20528                           ;; @@bd8f 313
 20529                          ; .page ;; @@bd8f 313
 20530  bd8f c8                 _local_1312_20   iny                                      ; bump buffer pointer ;; @@bd8f 313
 20531  bd90 c0a1                                cpy #buflen                              ; check buffer (160 max. input buffer size to edit) ;; @@bd90 313
 20532  bd92 f01e                                beq _local_1312_25                       ; split long lines into two???? ;; @@bd92 313
 20533  bd94 20cfff                              jsr _basin                               ; read file data ;; @@bd94 313
 20534  bd97 f019                                beq _local_1312_25                       ; CR or null terminates line ;; @@bd97 313
 20535  bd99 c90d                                cmp #cr                                   ;; @@bd99 313
 20536  bd9b f015                                beq _local_1312_25                        ;; @@bd9b 313
 20537                          ; cmp #$20  ;adjust invisible characters less than space ;; @@bd9d 313
 20538                          ; bcc _local_1312_21   ; ????make them appear in reverse field, but note ;; @@bd9d 313
 20539                          ; ora #$80  ; that these lines can't be edited without losing them. ;; @@bd9d 313
 20540                           ;; @@bd9d 313
 20541  bd9d 0f0c0d             _local_1312_21   bbr0 verck,_local_1312_22                 ;; @@bd9d 313
 20542  bda0 201723                              jsr indcmp_in1                           ; Compare to memory ;; @@bda0 313
 20543  bda3 f0ea                                beq _local_1312_20                       ; ok ;; @@bda3 313
 20544  bda5 202033                              jsr list_exit                             ;; @@bda5 313
 20545  bda8 a21c                                ldx #ervfy                               ; verify error ;; @@bda8 313
 20546  bdaa 83a270                              +lbra error                               ;; @@bdaa 313
 20547                           ;; @@bdad 313
 20548  bdad 200623             _local_1312_22   jsr sta_far_in1                          ; Load into memory ;; @@bdad 313
 20549  bdb0 80dd                                bra _local_1312_20                       ; loop until eol or error (kernel returns CR in case of error) ;; @@bdb0 313
 20550                           ;; @@bdb2 313
 20551  bdb2 8f0c05             _local_1312_25   bbs0 verck,_local_1312_26                 ;; @@bdb2 313
 20552  bdb5 a900                                lda #0                                    ;; @@bdb5 313
 20553  bdb7 200623                              jsr sta_far_in1                          ; terminate line with null (replaces CR) ;; @@bdb7 313
 20554  bdba c8                 _local_1312_26   iny                                       ;; @@bdba 313
 20555  bdbb 98                                  tya                                       ;; @@bdbb 313
 20556  bdbc 18                                  clc                                       ;; @@bdbc 313
 20557  bdbd 6524                                adc index                                 ;; @@bdbd 313
 20558  bdbf 8524                                sta index                                 ;; @@bdbf 313
 20559  bdc1 9002                                bcc _local_1312_27                        ;; @@bdc1 313
 20560  bdc3 e625                                inc index+1                               ;; @@bdc3 313
 20561  bdc5 a525               _local_1312_27   lda index+1                               ;; @@bdc5 313
 20562  bdc7 cdd002                              cmp max_mem_0+1                          ; out of memory???? ;; @@bdc7 313
 20563  bdca 9090                                bcc _local_1312_10                       ; no, continue until eof ;; @@bdca 313
 20564  bdcc 631000                              bsr edit_load_done                       ; yes, patch things up best we can ;; @@bdcc 313
 20565  bdcf 202033                              jsr list_exit                            ; close disk ;; @@bdcf 313
 20566  bdd2 836c70                              +lbra omerr                              ; report error & exit ;; @@bdd2 313
 20567                           ;; @@bdd5 313
 20568  bdd5 8f0c03             _local_1312_28   bbs0 verck,_local_1312_30                 ;; @@bdd5 313
 20569  bdd8 20debd                              jsr edit_load_done                       ; EOF: terminate memory with a pair of nulls ;; @@bdd8 313
 20570  bddb 834275             _local_1312_30   +lbra list_exit                          ; release channel, close file, etc. ;; @@bddb 313
 20571                           ;; @@bdde 313
 20572                          ; bbr0 verck,40$ ;; @@bdde 313
 20573                          ; jsr verify_ok  ;if Verify, report 'ok' ;; @@bdde 313
 20574                          ;40$ lda #0   ;exit directly to main???? ;; @@bdde 313
 20575                          ; bra end ;; @@bdde 313
 20576                          ; .page ;; @@bdde 313
 20577                          edit_load_done                                             ;; @@bdde 314
 20578  bdde a900                                lda #0                                   ; EOF: terminate memory with a pair of nulls ;; @@bdde 314
 20579  bde0 a8                                  tay                                       ;; @@bde0 314
 20580  bde1 200623                              jsr sta_far_in1                           ;; @@bde1 314
 20581  bde4 c8                                  iny                                       ;; @@bde4 314
 20582  bde5 200623                              jsr sta_far_in1                           ;; @@bde5 314
 20583  bde8 e324                                inw index                                 ;; @@bde8 314
 20584  bdea e324                                inw index                                 ;; @@bdea 314
 20585  bdec a624                                ldx index                                ; set top ;; @@bdec 314
 20586  bdee a425                                ldy index+1                               ;; @@bdee 314
 20587  bdf0 8682                                stx text_top                              ;; @@bdf0 314
 20588  bdf2 8483                                sty text_top+1                            ;; @@bdf2 314
 20589  bdf4 83c272                              +lbra link_program                       ; relink & RTS ;; @@bdf4 314
 20590                           ;; @@bdf7 314
 20591                          ; .page ;; @@bdf7 314
 20592                          edit_save                                                  ;; @@bdf7 314
 20593  bdf7 a9e6                                lda #$e6                                 ; parse:  filename [,U#] [,D#] ;; @@bdf7 314
 20594  bdf9 202074                              jsr dosprs                               ; (like dopen:      0 0 0 *  * 0 0 1 ) ;; @@bdf9 314
 20595  bdfc 20dc77                              jsr chk1                                 ; check parameters ;; @@bdfc 314
 20596  bdff 201d71                              jsr find_la                              ; find an available LA ;; @@bdff 314
 20597  be02 200d71                              jsr find_sa                              ; find an available SA ;; @@be02 314
 20598  be05 a017                                ldy #fsavseq                              ;; @@be05 314
 20599  be07 a208                                ldx #8                                    ;; @@be07 314
 20600  be09 20fd70                              jsr open_file                            ; open the file ;; @@be09 314
 20601  be0c b31875                              +lbcs list_err                           ; exit if error ;; @@be0c 314
 20602  be0f ae8111                              ldx dosla                                 ;; @@be0f 314
 20603  be12 20c9ff                              jsr _chkout                              ; get output channel ;; @@be12 314
 20604  be15 b03b                                bcs _local_1313_30                       ; error ;; @@be15 314
 20605                           ;; @@be17 314
 20606  be17 a52d                                lda txttab                               ; save address ;; @@be17 314
 20607  be19 a62e                                ldx txttab+1                              ;; @@be19 314
 20608  be1b 8524                                sta index                                 ;; @@be1b 314
 20609  be1d 8625                                stx index+1                               ;; @@be1d 314
 20610                           ;; @@be1f 314
 20611  be1f 20e1ff             _local_1313_10   jsr _stop                                ; check stop key ;; @@be1f 314
 20612  be22 f02e                                beq _local_1313_30                       ; exit if down ;; @@be22 314
 20613  be24 20b7ff                              jsr _readst                              ; check channel status ;; @@be24 314
 20614  be27 d029                                bne _local_1313_30                       ; exit if eof or error???? ;; @@be27 314
 20615                           ;; @@be29 314
 20616  be29 a003                                ldy #3                                   ; save a line, starting past links & line# ;; @@be29 314
 20617  be2b c8                 _local_1313_20   iny                                      ; bump buffer pointer ;; @@be2b 314
 20618                          ; cpy #buflen  ;check buffer (160 max. input buffer size to edit) ;; @@be2c 314
 20619                          ; beq ??$   ; split long lines into two???? ;; @@be2c 314
 20620  be2c 20c122                              jsr indin1                                ;; @@be2c 314
 20621  be2f aa                                  tax                                      ; save character for eol check ;; @@be2f 314
 20622  be30 d002                                bne _local_1313_21                        ;; @@be30 314
 20623  be32 a90d                                lda #cr                                  ; eol: substitute CR ???? allow some other terminator ;; @@be32 314
 20624  be34 20d2ff             _local_1313_21   jsr _bsout                               ; write file data ;; @@be34 314
 20625  be37 8a                                  txa                                       ;; @@be37 314
 20626  be38 d0f1                                bne _local_1313_20                       ; loop until eol ;; @@be38 314
 20627                           ;; @@be3a 314
 20628  be3a c8                                  iny                                      ; advance text index to start of next line ;; @@be3a 314
 20629  be3b 98                                  tya                                       ;; @@be3b 314
 20630  be3c 18                                  clc                                       ;; @@be3c 314
 20631  be3d 6524                                adc index                                 ;; @@be3d 314
 20632  be3f 8524                                sta index                                 ;; @@be3f 314
 20633  be41 9002                                bcc _local_1313_26                        ;; @@be41 314
 20634  be43 e625                                inc index+1                               ;; @@be43 314
 20635                           ;; @@be45 314
 20636  be45 a000               _local_1313_26   ldy #0                                   ; check for EOF: a pair of null links ;; @@be45 314
 20637  be47 20c122                              jsr indin1                                ;; @@be47 314
 20638  be4a d0d3                                bne _local_1313_10                        ;; @@be4a 314
 20639  be4c c8                                  iny                                       ;; @@be4c 314
 20640  be4d 20c122                              jsr indin1                                ;; @@be4d 314
 20641  be50 d0cd                                bne _local_1313_10                       ; loop until end of text ;; @@be50 314
 20642                           ;; @@be52 314
 20643  be52 83cb74             _local_1313_30   +lbra list_exit                          ; release channel, close file, exit ;; @@be52 314
 20644                           ;; @@be55 314
 20645                          ;.end ;; @@be55 314
 20646                          ; .page ;; @@be55 314
 20647                          ; .subttl  ETC. ;; @@be55 314
 20648                          Sound_CLR                                                  ;; @@be55 315
 20649  be55 2022b5                              jsr chkeos                               ; eat CLR token, check eos   [910717] new ;; @@be55 315
 20650                          Sound_CLR_1                                                ;; @@be58 315
 20651  be58 08                                  php                                       ;; @@be58 315
 20652  be59 78                                  sei                                       ;; @@be59 315
 20653                          ; jsr go_slow  ;      [910716] 4567R7A ;; @@be5a 315
 20654  be5a a900                                lda #0                                    ;; @@be5a 315
 20655  be5c a217                                ldx #24-1                                 ;; @@be5c 315
 20656  be5e 9d00d4             _local_1314_40   sta sid1,x                               ; initialize SID chips ;; @@be5e 315
 20657  be61 9d20d4                              sta sid2,x                                ;; @@be61 315
 20658  be64 ca                                  dex                                       ;; @@be64 315
 20659  be65 10f7                                bpl _local_1314_40                        ;; @@be65 315
 20660                           ;; @@be67 315
 20661  be67 8d7a12                              sta filters1+2                           ; set filters off ;; @@be67 315
 20662  be6a 8d7e12                              sta filters2+2                            ;; @@be6a 315
 20663                           ;; @@be6d 315
 20664  be6d a908                                lda #8                                   ; set default volume ;; @@be6d 315
 20665  be6f 8d7b12                              sta filters1+3                            ;; @@be6f 315
 20666  be72 8d7f12                              sta filters2+3                           ; [910612] ;; @@be72 315
 20667                          ; sta filters+4  ;why?      [910612] ;; @@be75 315
 20668  be75 8d18d4                              sta sid1+24                               ;; @@be75 315
 20669  be78 8d38d4                              sta sid2+24                               ;; @@be78 315
 20670                           ;; @@be7b 315
 20671                          ; jsr go_fast  ;      [910716] 4567R7A ;; @@be7b 315
 20672                           ;; @@be7b 315
 20673  be7b 2c0311                              bit _pal_ntsc                            ; determine if PAL or NTSC system  [910724] ;; @@be7b 315
 20674  be7e 3006                                bmi _local_1314_1                        ; ...branch if PAL ;; @@be7e 315
 20675  be80 a968                                lda #<beats_ntsc/4                       ; set beat to quarter note (4/4 time = .5 sec) ;; @@be80 315
 20676  be82 a001                                ldy #>beats_ntsc/4                        ;; @@be82 315
 20677  be84 8004                                bra _local_1314_2                         ;; @@be84 315
 20678  be86 a92c               _local_1314_1    lda #<beats_pal/4                         ;; @@be86 315
 20679  be88 a001                                ldy #>beats_pal/4                         ;; @@be88 315
 20680  be8a 8d7612             _local_1314_2    sta ntime                                 ;; @@be8a 315
 20681  be8d 8c7712                              sty ntime+1                               ;; @@be8d 315
 20682                           ;; @@be90 315
 20683  be90 a904                                lda #4                                   ; set default octave ;; @@be90 315
 20684  be92 8d7012                              sta octave                                ;; @@be92 315
 20685  be95 a90c                                lda #12                                  ; set default tempo    [910220] ;; @@be95 315
 20686  be97 8d7312                              sta tempo_rate                           ; 12 makes whole note in 4/4 time last 2 seconds ;; @@be97 315
 20687                           ;; @@be9a 315
 20688  be9a a01d                                ldy #30-1                                ; initialize music tables ;; @@be9a 315
 20689  be9c b9d849             _local_1314_10   lda atkmus,y                              ;; @@be9c 315
 20690  be9f 998912                              sta atktab,y                              ;; @@be9f 315
 20691  bea2 88                                  dey                                       ;; @@bea2 315
 20692  bea3 10f7                                bpl _local_1314_10                        ;; @@bea3 315
 20693                           ;; @@bea5 315
 20694  bea5 a209                                ldx #10-1                                ; initialize pulse widths ;; @@bea5 315
 20695  bea7 bdf649             _local_1314_20   lda pwhmus,x                              ;; @@bea7 315
 20696  beaa 9db112                              sta pulshi,x                              ;; @@beaa 315
 20697  bead ca                                  dex                                       ;; @@bead 315
 20698  beae 10f7                                bpl _local_1314_20                        ;; @@beae 315
 20699                           ;; @@beb0 315
 20700  beb0 8a                                  txa                                      ; $ff ;; @@beb0 315
 20701  beb1 a205                                ldx #6-1                                 ; stereo SIDs   (save space) [911119] ;; @@beb1 315
 20702  beb3 a001                                ldy #1                                    ;; @@beb3 315
 20703  beb5 9dc412             _local_1314_25   sta sound_time_hi,x                      ; turn all SOUND counters off ;; @@beb5 315
 20704  beb8 995d12                              sta voices,y                             ; turn all PLAY counters off ;; @@beb8 315
 20705  bebb c8                                  iny                                       ;; @@bebb 315
 20706  bebc c8                                  iny                                       ;; @@bebc 315
 20707  bebd ca                                  dex                                       ;; @@bebd 315
 20708  bebe 10f5                                bpl _local_1314_25                        ;; @@bebe 315
 20709                           ;; @@bec0 315
 20710  bec0 a005                                ldy #6-1                                 ; set default envelope (piano) for all voices (6) ;; @@bec0 315
 20711  bec2 8c6f12                              sty voice                                 ;; @@bec2 315
 20712  bec5 a200               _local_1314_30   ldx #0                                    ;; @@bec5 315
 20713  bec7 200748                              jsr set_envelope_1                        ;; @@bec7 315
 20714  beca ce6f12                              dec voice                                 ;; @@beca 315
 20715  becd 10f6                                bpl _local_1314_30                        ;; @@becd 315
 20716  becf ee6f12                              inc voice                                ; set default voice (0) ;; @@becf 315
 20717                           ;; @@bed2 315
 20718  bed2 28                                  plp                                       ;; @@bed2 315
 20719  bed3 60                                  rts                                       ;; @@bed3 315
 20720                           ;; @@bed4 315
 20721                          ; .page ;; @@bed4 315
 20722                          Sprite_CLR                                                 ;; @@bed4 316
 20723  bed4 2022b5                              jsr chkeos                               ; eat CLR token, check eos   [910717] new ;; @@bed4 316
 20724                          Sprite_CLR_1                                               ;; @@bed7 316
 20725  bed7 08                                  php                                       ;; @@bed7 316
 20726  bed8 78                                  sei                                       ;; @@bed8 316
 20727  bed9 a900                                lda #0                                    ;; @@bed9 316
 20728  bedb 8d15d0                              sta vic+21                               ; Turn off all sprites ;; @@bedb 316
 20729  bede 8d17d0                              sta vic+23                               ; Unexpand them     [910828] ;; @@bede 316
 20730  bee1 8d1bd0                              sta vic+27                               ; Sprite priority ;; @@bee1 316
 20731  bee4 8d1cd0                              sta vic+28                               ; Hires sprites ;; @@bee4 316
 20732  bee7 8d1dd0                              sta vic+29                                ;; @@bee7 316
 20733                           ;; @@beea 316
 20734  beea a257                                ldx #init_as_0                           ; Init sprite tables ;; @@beea 316
 20735  beec 9d0512             _local_1315_40   sta sprite_data,x                         ;; @@beec 316
 20736  beef ca                                  dex                                       ;; @@beef 316
 20737  bef0 10fa                                bpl _local_1315_40                        ;; @@bef0 316
 20738                           ;; @@bef2 316
 20739  bef2 a91f                                lda #sprite_base/64+7                    ; Set up sprite pointers ;; @@bef2 316
 20740  bef4 a007                                ldy #7                                    ;; @@bef4 316
 20741  bef6 7fd705             _local_1315_10   bbr7 _mode,_local_1315_20                 ;; @@bef6 316
 20742  bef9 99f80b                              sta sprite_ptrs_40,y                     ; 40 col screen ;; @@bef9 316
 20743  befc 8003                                bra _local_1315_30                        ;; @@befc 316
 20744  befe 99f80f             _local_1315_20   sta sprite_ptrs_80,y                     ; 80 col screen ;; @@befe 316
 20745  bf01 3a                 _local_1315_30   dec                                       ;; @@bf01 316
 20746  bf02 88                                  dey                                       ;; @@bf02 316
 20747  bf03 10f1                                bpl _local_1315_10                        ;; @@bf03 316
 20748                           ;; @@bf05 316
 20749  bf05 28                                  plp                                       ;; @@bf05 316
 20750                          ; rts ;; @@bf06 316
 20751                           ;; @@bf06 316
 20752                          ;.end ;; @@bf06 316
 20753                          ; .page ;; @@bf06 316
 20754                          ; .subttl BASIC NMI Handler ;; @@bf06 316
 20755                           ;; @@bf06 316
 20756                          basic_nmi                                                 ; removed [910826] ;; @@bf06 317
 20757                          ; lda nmi_wrap_flag ;filter out wrapped NMI calls   [910523] audio ;; @@bf06 317
 20758                          ; beq 1$   ; it's ok ;; @@bf06 317
 20759                          ; rts   ; exit- we're already handling one interrupt ;; @@bf06 317
 20760                          ; ;; @@bf06 317
 20761                          ;1$ inc nmi_wrap_flag ;shut the door to NMI ;; @@bf06 317
 20762                          ; ;; @@bf06 317
 20763                          ;basic_nmi_end ;; @@bf06 317
 20764                          ; dec nmi_wrap_flag ;open the door to NMI ;; @@bf06 317
 20765  bf06 60                                  rts                                       ;; @@bf06 317
 20766                           ;; @@bf07 317
 20767                          ; .ifgt *-$c000 ;; @@bf07 317
 20768                          ; .messg ***ROM OVERFLOW: $C000 ;; @@bf07 317
 20769                          ; .endif ;; @@bf07 317
 20770                          ;.end ;; @@bf07 317
 20771                          ; .page ;; @@bf07 317
 20772                          ; .subttl C65 BASIC Jump Table ;; @@bf07 317
 20773                           ;; @@bf07 317
 20774                                           * = $7f00                                 ;; @@bf07 317
 20775                           ;; @@7f00 317
 20776                           ;; @@7f00 317
 20777                          ; Format Conversions     [6] ;; @@7f00 317
 20778                           ;; @@7f00 317
 20779  7f00 83b1d9                              +lbra ayint                              ; convert floating point to integer ;; @@7f00 317
 20780  7f03 8339cf                              +lbra givayf                             ; convert integer to floating point ;; @@7f03 317
 20781  7f06 8386e5                              +lbra fout                               ; convert floating point to PETSCII string ;; @@7f06 317
 20782  7f09 8340d6                              +lbra val_1                              ; convert PETSCII string to floating point ;; @@7f09 317
 20783  7f0c 837ede                              +lbra getadr                             ; convert floating point to an address ;; @@7f0c 317
 20784  7f0f 83cde3                              +lbra floatc                             ; convert address to floating point ;; @@7f0f 317
 20785                           ;; @@7f12 317
 20786                          ; Math Functions     [24] ;; @@7f12 317
 20787                           ;; @@7f12 317
 20788  7f12 8390de                              +lbra fsub                               ; MEM - FACC ;; @@7f12 317
 20789  7f15 8390de                              +lbra fsubt                              ; ARG - FACC ;; @@7f15 317
 20790  7f18 83a0de                              +lbra fadd                               ; MEM + FACC ;; @@7f18 317
 20791  7f1b 83fee4                              +lbra faddt_c65                          ; ARG - FACC      [910402] ;; @@7f1b 317
 20792  7f1e 834ce1                              +lbra fmult                              ; MEM * FACC ;; @@7f1e 317
 20793  7f21 833fe1                              +lbra fmultt_c65                         ; ARG * FACC      [910402] ;; @@7f21 317
 20794  7f24 835be2                              +lbra fdiv                               ; MEM / FACC ;; @@7f24 317
 20795  7f27 834ee2                              +lbra fdivt_c65                          ; ARG / FACC      [910402] ;; @@7f27 317
 20796  7f2a 83e1e0                              +lbra log                                ; compute natural log of FACC ;; @@7f2a 317
 20797  7f2d 8333e4                              +lbra int                                ; perform BASIC INT() on FACC ;; @@7f2d 317
 20798  7f30 8389e6                              +lbra sqr                                ; compute square root of FACC ;; @@7f30 317
 20799  7f33 83c6e6                              +lbra negop                              ; negate FACC ;; @@7f33 317
 20800  7f36 838ae6                              +lbra fpwr                               ; raise ARG to the MEM power ;; @@7f36 317
 20801  7f39 838ae6                              +lbra fpwrt                              ; raise ARG to the FACC power ;; @@7f39 317
 20802  7f3c 83c8e6                              +lbra exp                                ; compute EXP of FACC ;; @@7f3c 317
 20803  7f3f 835ce7                              +lbra cos                                ; compute COS of FACC ;; @@7f3f 317
 20804  7f42 8360e7                              +lbra sin                                ; compute SIN of FACC ;; @@7f42 317
 20805  7f45 83a6e7                              +lbra tan                                ; compute TAN of FACC ;; @@7f45 317
 20806  7f48 83d4e7                              +lbra atn                                ; compute ATN of FACC ;; @@7f48 317
 20807  7f4b 8364e3                              +lbra round                              ; round FACC ;; @@7f4b 317
 20808  7f4e 839de3                              +lbra abs                                ; absolute value of FACC ;; @@7f4e 317
 20809  7f51 836de3                              +lbra sign                               ; test sign of FACC ;; @@7f51 317
 20810  7f54 839ae3                              +lbra fcomp                              ; compare FACC with MEM ;; @@7f54 317
 20811  7f57 83ccd8                              +lbra rnd_0                              ; generate random floating point number ;; @@7f57 317
 20812                           ;; @@7f5a 317
 20813                          ; Movement      [22] ;; @@7f5a 317
 20814                           ;; @@7f5a 317
 20815  7f5a 839ae1                              +lbra conupk                             ; move RAM MEM to ARG ;; @@7f5a 317
 20816  7f5d 836ce1                              +lbra romupk                             ; move ROM MEM to ARG ;; @@7f5d 317
 20817  7f60 83efcf                              +lbra movfrm                             ; move RAM MEM to FACC ;; @@7f60 317
 20818  7f63 83a8e2                              +lbra movfm                              ; move ROM MEM to FACC ;; @@7f63 317
 20819  7f66 83d1e2                              +lbra movmf                              ; move FACC to MEM ;; @@7f66 317
 20820  7f69 8327e3                              +lbra movfa                              ; move ARG to FACC ;; @@7f69 317
 20821  7f6c 8334e3                              +lbra movaf                              ; move FACC to ARG ;; @@7f6c 317
 20822                           ;; @@7f6f 317
 20823                          ; bra optab ;????not executable ;; @@7f6f 317
 20824                          ; bra drawln ;; @@7f6f 317
 20825                          ; bra gplot ;; @@7f6f 317
 20826                          ; bra cirsub ;; @@7f6f 317
 20827  7f6f 8342be                              +lbra run                                 ;; @@7f6f 317
 20828  7f72 832cb5                              +lbra runc                                ;; @@7f72 317
 20829  7f75 8353b5                              +lbra clearc                             ; [910410] ;; @@7f75 317
 20830  7f78 83dab4                              +lbra new                                 ;; @@7f78 317
 20831  7f7b 833bb1                              +lbra link_program                        ;; @@7f7b 317
 20832  7f7e 839ea3                              +lbra crunch                              ;; @@7f7e 317
 20833  7f81 8376b2                              +lbra FindLine                            ;; @@7f81 317
 20834  7f84 8386ac                              +lbra newstt                              ;; @@7f84 317
 20835  7f87 8358ce                              +lbra eval                                ;; @@7f87 317
 20836  7f8a 8362cd                              +lbra frmevl                              ;; @@7f8a 317
 20837  7f8d 8333be                              +lbra run_a_program                       ;; @@7f8d 317
 20838  7f90 8308be                              +lbra setexc                              ;; @@7f90 317
 20839  7f93 8398b2                              +lbra linget                              ;; @@7f93 317
 20840  7f96 839adc                              +lbra garba2                              ;; @@7f96 317
 20841  7f99 8375af                              +lbra execute_a_line                      ;; @@7f99 317
 20842                           ;; @@7f9c 317
 20843                          ; Temporaries for C65 development (???? used by graphics) [12] ;; @@7f9c 317
 20844                           ;; @@7f9c 317
 20845  7f9c 83e4a2                              +lbra chrget                              ;; @@7f9c 317
 20846  7f9f 83e3a2                              +lbra chrgot                              ;; @@7f9f 317
 20847  7fa2 83b6ce                              +lbra chkcom                              ;; @@7fa2 317
 20848  7fa5 8330cd                              +lbra frmnum                              ;; @@7fa5 317
 20849  7fa8 83e2dd                              +lbra getadr                              ;; @@7fa8 317
 20850  7fab 83cedd                              +lbra getnum                              ;; @@7fab 317
 20851  7fae 83bbdd                              +lbra getbyt                              ;; @@7fae 317
 20852  7fb1 8371e9                              +lbra plsv                                ;; @@7fb1 317
 20853                           ;; @@7fb4 317
 20854  7fb4 8310a3                              +lbra lda_far_ram0                       ; lda (.x),y from BASIC text bank [910716] ;; @@7fb4 317
 20855  7fb7 831da3                              +lbra lda_far_ram1                       ; lda (.x),y from BASIC variable bank [910716] ;; @@7fb7 317
 20856  7fba 834fa3                              +lbra sta_far_ram0                       ; sta (.x),y to   BASIC text bank [910716] ;; @@7fba 317
 20857  7fbd 8330a3                              +lbra sta_far_ram1                       ; sta (.x),y to   BASIC variable bank [910716] ;; @@7fbd 317
 20858                           ;; @@7fc0 317
 20859                          ; .page ;; @@7fc0 317
 20860                          ; Graphic Kernel Call. (Temporary for C65 development ????) ;; @@7fc0 317
 20861                          ; ;; @@7fc0 317
 20862                          ;  syntax:  GRAPHIC command# [,args] ;; @@7fc0 317
 20863                          ; ;; @@7fc0 317
 20864                          ; Basically this is a modified C64-type SYS command, minus the address. ;; @@7fc0 317
 20865                          ; In the final C65 system, this will represent the ML interface, not the ;; @@7fc0 317
 20866                          ; BASIC 10.0 interface which is implemented here in the development system. ;; @@7fc0 317
 20867                           ;; @@7fc0 317
 20868                           ;; @@7fc0 317
 20869                          graphic                                                    ;; @@7fc0 317
 20870  7fc0 c99c                                cmp #clr_token                           ; GRAPHIC CLR (graphic system initialize) ;; @@7fc0 317
 20871  7fc2 d006                                bne _local_1316_10                       ; no ;; @@7fc2 317
 20872  7fc4 208322                              jsr chrget                               ; yes advance past token ;; @@7fc4 317
 20873  7fc7 6c0080                              jmp ($8000)                              ; go initialize graphic kernel ;; @@7fc7 317
 20874                           ;; @@7fca 317
 20875                          _local_1316_10                                             ;; @@7fca 317
 20876                          ; tax ;; @@7fca 317
 20877                          ; bmi snerr  ;Syntax error if any other secondary token ;; @@7fca 317
 20878                          ; ;; @@7fca 317
 20879                          ; ;; @@7fca 317
 20880  7fca 6cfe02                              jmp (graphic_vector)                     ; Else, call the Graphics Kernel's Parser... ;; @@7fca 317
 20881                          ; ;; @@7fcd 317
 20882                          ; ;; @@7fcd 317
 20883                          graphic_kernel                                            ; ...via indirect ;; @@7fcd 318
 20884  7fcd 6c0280                              jmp ($8002)                               ;; @@7fcd 318
 20885                           ;; @@7fd0 318
 20886                          ; .page ;; @@7fd0 318
 20887                          ; C65 Graphic Kernel Jump Table      [910826] ;; @@7fd0 318
 20888                          ; ;; @@7fd0 318
 20889                          ; 8000 init   ;sets up graphic vars ;; @@7fd0 318
 20890                          ; 8002 parser   ;GRAPHIC ML Parser???? ;; @@7fd0 318
 20891                          ; ;; @@7fd0 318
 20892                          ; 8004 kg65.start-1  ;0 commands ;; @@7fd0 318
 20893                          ; 8006 kg65.screendef-1 ;1 ;; @@7fd0 318
 20894                          ; 8008 kg65.screenopen-1 ;2 ;; @@7fd0 318
 20895                          ; 800a kg65.screenclose-1 ;3 ;; @@7fd0 318
 20896                          ; 800c kg65.screenclear-1 ;4 ;; @@7fd0 318
 20897                          ; 800e kg65.screen-1  ;5 ;; @@7fd0 318
 20898                          ; 8010 kg65.setpen-1  ;6 ;; @@7fd0 318
 20899                          ; 8012 kg65.setpalette-1 ;7 ;; @@7fd0 318
 20900                          ; 8014 kg65.setdmode-1  ;8 ;; @@7fd0 318
 20901                          ; 8016 kg65.setdpat-1  ;9 ;; @@7fd0 318
 20902                          ; 8018 kg65.line-1  ;10 ;; @@7fd0 318
 20903                          ; 801a kg65.box-1  ;11 ;; @@7fd0 318
 20904                          ; 801c kg65.circle-1  ;12 ;; @@7fd0 318
 20905                          ; 801e kg65.polygon-1  ;13 ;; @@7fd0 318
 20906                          ; 8020 kg65.ellipse-1  ;14 ;; @@7fd0 318
 20907                          ; 8022 kg65.viewpclr-1  ;15 ;; @@7fd0 318
 20908                          ; 8024 kg65.copy-1  ;16 ;; @@7fd0 318
 20909                          ; 8026 kg65.cut-1  ;17 ;; @@7fd0 318
 20910                          ; 8028 kg65.paste-1  ;18 ;; @@7fd0 318
 20911                          ; 802a kg65.load-1  ;19 ;; @@7fd0 318
 20912                          ; 802c kg65.char-1  ;20 ;; @@7fd0 318
 20913                          ; 802e kg65.paint-1  ;21 ;; @@7fd0 318
 20914                          ; 8030 kg65.viewpdef-1  ;22 ;; @@7fd0 318
 20915                          ; 8032 kg65.f.pixel-1  ;23 ;; @@7fd0 318
 20916                          ; 8034 kg65.f.rpalette-1 ;24 ;; @@7fd0 318
 20917                          ; 8036 kg65.f.index2color-1 ;25 ;; @@7fd0 318
 20918                          ; 8038 kg65.f.rgraphic  ;26 ;; @@7fd0 318
 20919                           ;; @@7fd0 318
 20920                          ; .ifgt *-$8000 ;; @@7fd0 318
 20921                          ; .messg ***ROM OVERFLOW: $8000 ;; @@7fd0 318
 20922                          ; .endif ;; @@7fd0 318
 20923                          ; .end ;; @@7fd0 318

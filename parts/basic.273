background 
 jsr getnyb  ;Set Vic background color 
 stx vic+33 
 rts 
 
 
 
border 
 jsr getnyb  ;Set Vic border color 
 stx vic+32 
 rts 
 
 .page 
getcomnyb 
 jsr chkcom  ;check for comma 
getnyb 
 jsr getbyt  ;Get a nybble, check range (0-15) 
chknyb 
 cpx #16 
 bcs fcerr 
 rts 
 
 
 
chkesc    ;Check for escape token, error if not, else get next token 
 cmp #esc_command_token 
 bne snerr 
 jsr chrget 
 beq snerr  ; eos? report error if so 
 rts 
 
 
 
chkeos    ;Check for next byte = end of statement, error if not 
 jsr chrget 
 bne snerr  ; eos? report error if not 
 rts 
 
 
;.end 
 .page 
 .subttl SPRITE Commands and Functions 
 
;************************************************************************************ 
; SPRITE CLR 
; SPRITE {LOAD|SAVE} "filename" [,Ddrive] [,Udevice] 
; SPRITE sprite [,enable [,color [,priority [,xexp [,yexp [,resolution] ]]]]] 
; 
; where: sprite  :== sprite number (1-8) 
;  enable  :== enable  (0=off, 1=on) 
;  color  :== color  (0-15) 
;  priority :== sprite/bgnd  (0=sprite, 1=bgnd) 
;  xexp  :== expand x direction (0=no, 1=yes) 
;  yexp  :== expand y direction (0=no, 1=yes) 
;  resolution :== resolution  (0=hires, 1=multicolor) 
;************************************************************************************ 
 
sprite cmp #clr_token  ;SPRITE CLR: init environment   [910717] 
 beq Sprite_CLR  ; yes 
 cmp #save_token  ;SPRITE SAVE: save sprite data   [911001] 
 beq Sprite_Save  ; yes 
 cmp #load_token  ;SPRITE LOAD: load sprite data   [911001] 
 beq Sprite_Load  ; yes 
 
 jsr get_sprite_number ;get sprite number in z_p_temp_1 
 jsr optbyt  ;look for (optional) enable 
 bcc 10$   ;none here, don't change 
 ldy #21 
 jsr sprbit  ;set/clear sprite bit 
 
10$ jsr optbyt  ;get (optional) color 
 bcc 20$   ;branch if no arg 
 jsr chknyb  ;       [910109] 
 txa 
 ldx z_p_temp_1  ;get back sprite number 
; jsr put_io_in_map 
 sta vic+39,x 
 
20$ jsr optbyt  ;look for (optional) priority 
 bcc 30$ 
 ldy #27 
 jsr sprbit 
 
30$ jsr optbyt  ;look for (optional) x expansion 
 bcc 40$ 
 ldy #29 
 jsr sprbit 
 
40$ jsr optbyt  ;look for (optional) y expansion 
 bcc 50$ 
 ldy #23 
 jsr sprbit 
 
50$ jsr optbyt  ;look for (optional) resolution 
 bcc 60$ 
 ldy #28 
 jsr sprbit 
 
60$ rts 
 
 .page 
Sprite_Save   ;Just like Key_Save     [911001] 
 jsr GetSaveChannel 
 lda #highds  ;set starting & ending addresses 
 ldy #>sprite_base ; start address & pointer to it 
 ldx #<sprite_base 
 sty highds+1 
 stx highds 
 iny   ; end address = start address + 512 + 1 
 iny 
 inx 
 bra savenb  ;       [910925] 
 
 
 
Sprite_Load 
 jsr GetLoadChannel ;get a channel      [911001] 
 ldy #>sprite_base 
 lda #<sprite_base 
 jsr LoadBlock  ; load first block 
 inc highds+1 
 jsr LoadBlockNext ; load second block 
 bra list_err  ;release channel, close file, return to main 
 
 .page 
;  Set or clear a bit in a VIC register 
; 
; .X = 1 to set, 0 to clear 
; .Y = register in VIC to operate opon 
 
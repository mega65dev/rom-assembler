bad_command 
 ldx #err_bad_command  ;unimplemented command 
   .byte $2c 
 
userr ldx #errus   ;undefined statement 
   .byte $2c 
 
omerr ldx #errom   ;out of memory 
   .byte $2c 
 
doverr ldx #errdvo   ;division by zero 
   .byte $2c 
 
overr ldx #errov   ;overflow 
   .byte $2c 
 
snerr ldx #errsn   ;syntax error 
   .byte $2c 
 
ready ldx #$80   ;no error 
 
error jmp (ierror) 
 
nerror txa 
 bmi ready_1  ;...branch if no error (from 'ready') 
 stx errnum  ;save error # for 'er' 
 bbr7 runmod,errisd ;branch if direct mode- always display error 
 
 ldy #1   ;copy curlin to errlin, oldtxt to errtxt 
10$ lda curlin,y 
 sta errlin,y  ; line# where error occurred 
 lda oldtxt,y 
 sta errtxt,y  ; statement where error occured 
 dey 
 bpl 10$ 
 inc errtxt  ; point to a token, not ':' for HELP 
 bne 20$ 
 inc errtxt+1 
 
20$ ldy trapno+1  ;is trap set? 
 cpy #$ff 
 beq errisd  ; no 
 sty linnum+1 
 sty tmptrp  ;save until a resume is executed 
 ldy trapno 
 sty linnum 
 
 ldx #$ff 
 stx trapno+1  ;flag no more traps 
 ldx #tempst  ;clear any accumulated string temps 
 stx temppt 
 ldx oldstk 
 txs 
 jsr luk4it 
 bra newstt 
 
 .page 
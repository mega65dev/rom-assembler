movspr_to   ;setup for moving sprite to a particular position 
    ;we have already positioned the sprite onscreen 
 jsr chrgot  ;reget terminating character 
 cmp #to_token 
 beq 5$   ; not our call 
 cli 
 rts 
 
5$ smb7 op   ;it's for us- let everybody else know we're in charge 
 jsr chrget       ;move to next non-space character 
 clc 
 jsr sprcor_1  ;go get & evaluate destination coordinate 
 jsr movspr_1  ;returns with sprite# in .x, VIC sprite index in .y, 
    ;P1 in VIC sprite regs, and P2 in x,ydest 
 asl numcnt  ;Y: handle specific coordinate types 
 bcc 20$   ; skip if absolute 
 clc 
 lda xdest+2  ;get y-coordinate 
 bpl 10$   ; skip if normal coordinates 
 eor #$ff 
 sec   ; invert to subtract if angular 
10$ adc vic+1,y  ;  add to current sprite y-value ???vic_save 
 sta xdest+2  ;  save sprite destination y-position 
 
20$ asl numcnt  ;X: handle specific coordinate types 
 bpl 30$   ; skip if absolute 
 clc 
 lda xdest  ;get low byte of x-coordinate 
 adc vic,y  ;add current sprite x-position  ???vic_save 
 sta xdest  ;save sprite destination x-position 
 bcc 30$ 
 inc xdest+1 
 
30$ phy 
 jsr combyt  ;get speed parameter 
 txa 
 and #$3f  ; limit range (0-63) ???? 
 ora #$80 
 sta xcnt  ; save in temp. 
 ply 
 
 lda vic,y  ;copy current sprite pos'n to line vars 
 sta xpos  ;in preparation for line calculations 
 lda vic+1,y 
 sta ypos 
 lda #0 
 sta xpos+1 
 sta ypos+1 
 tya 
 lsr a 
 tay 
 lda sbits,y 
 and vic+16 
 beq 40$ 
 inc xpos+1 
40$ 
 .page 
;****************************************************************** 
;  MOVSPR n, p1 TO p2 - move a sprite along line from p1 to p2 
; 
; The following is performed now: 
; 
;           absx    = abs(destx-posx) : absy = abs(desty-posy) 
;           sgnx    = sgn(destx-posx) : sgny = sgn(desty-posy) 
;                     ( sgn=(1,0,-1) if (+,0,-) ) 
;           greatr  = index to the greatr of absx,absy 
;           lesser  = index to the smaller of absx,absy 
; 
;           fct1    = 2*min(absx,absy) 
;           fct2    = fct1 - 2*max(absx,absy) 
;           error   = fct1 - max(absx,absy) 
; 
; The following is performed during IRQ: 
; 
;           for i:= 1 to max(absx,absy) do begin 
;                 movspr n, posx, posy 
;                 if error > 0 then begin 
;                      pos(lesser):= pos(lesser) + sgn(lesser) 
;                      error:= error + fct2 
;                      end 
;                      else error:= error + fct1 
;                 pos(greatr):= pos(greatr) + sgn(greatr) 
;           end; 
; 
; (modification of C128 Bresenham DrawLn algorithm 910808 F.Bowen) 
;****************************************************************** 
 
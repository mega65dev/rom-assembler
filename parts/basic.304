rspmod .byte 21,39,27,29,23,28  ;VIC registers associated with arg# 
 
;.end 
 .page 
 .subttl RSPCOLOR Function 
 
;****************************************************************** 
;* RSPCOLOR - return sprite multicolor reg's 
;* 
;* Syntax : RSPCOLOR (argument) 
;* 
;* Where  : argument = [1..2] 
;*   1 : return multicolor #1 
;*   2 : return multicolor #2 
;****************************************************************** 
 
rspcolor 
 jsr chkcls ;check for closing paren 
 jsr conint ;get arg in .X 
 dex  ;adjust [1..2] to [0..1 
 cpx #2 
 bcs fcerr ;value error 
 
; jsr put_io_in_map 
 lda vic+37,x 
 and #$0f 
 tay 
; iny  ;range 0-15     [910724] 
 bra sngflt ;float 1 byte arg in .Y 
 
;.end 
;[[function.rsppos]] 
 .page 
 .subttl RSPPOS Function 
 
;****************************************************************** 
;* RSPPOS - Return sprite location / speed data 
;* 
;* Syntax:  RSPPOS (sprite_number, argument) 
;* 
;* Where:   sprite_number = [0..7] 
;*    argument = [0..2] 
;*   0 : return X position 
;*   1 : return Y position 
;*   2 : return current speed 
;****************************************************************** 
 
rsppos jsr conint ;get first arg, sprite #, in .X 
; dex  ;adjust [1..8] to [0..7]   [910220] 
 cpx #8  ; (318018-03 mod; fab) 
 bcs 1$  ;value error 
 
 phx  ;save sprite number 
; jsr chkcom ;check for proper delimiter 
; jsr getbyt ;do frmevl, get 1 byte arg (arg) in .X 
 jsr combyt ;      [910820] 
 jsr chkcls ;look for closing paren 
 cpx #3 
1$ bcs fcerr ;value error 
 
 ply  ;sprite number 
 cpx #2 
 bne 10$  ;branch if x or y position 
 
 ldx sproff,y ;get offset into speed data 
 ldy sprite_data,x ;get speed data 
 bra sngflt ;go float 1 byte arg in .Y 
 
; Get msb of sprite position (in case this is for x position) 
 
10$ sei 
 lda sbits,y ;get bit mask for this sprite 
 and vic+16 ;      ???vic_save 
 beq 20$ 
 lda #1  ;change any non-zero to a '1' 
20$ pha  ;save msb 
 
 tya  ;y = sprite# * 2 
 asl a 
 tay 
 txa  ;see if this is y position 
 lsr a  ;.C = 0 for x pos'n, 1 for y pos'n 
 bcc 30$  ; branch if x pos'n 
 
 iny  ;adjust pointer to point to y pos'n in register data 
 pla 
 lda #0  ;..and force 'msb' to be zero 
 pha 
 
30$ lda vic,y ;get correct location lsb   ???vic_save 
 cli 
 tay 
 pla  ;..and get msb, 
 bra nosflt ;..and go float 2 byte value in y,a 
 
;.end 
;[[function.bump]] 
 .page 
 .subttl BUMP Function 
 
;****************************************************************** 
;* BUMP - read sprite collision 
;* 
;* Syntax : BUMP (argument) 
;* 
;* Where  : argument = [1..2] 
;*   1 : sprite/sprite collision 
;*   2 : sprite/background collision 
;****************************************************************** 
 
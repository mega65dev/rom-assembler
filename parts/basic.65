tron   ;trace mode on 
 smb5 runmod ;trcflg 
 rts 
 
 
troff   ;trace mode off 
 rmb5 runmod ;trcflg 
 rts 
 
 
;.end 
 .page 
 .subttl  RREG 
 
; RREG - Return values of 6502 registers following a SYS call. 
; 
; Syntax : RREG [.A variable [,[.X[...Z] variable] [,[.S variable] ]]] 
 
rreg lda #0 
 sta count 
 
10$ jsr chrgot 
 beq 50$   ;reached end of statement- done 
 cmp #','  ;skip this arg? 
 beq 30$   ;branch if so 
 jsr ptrget  ;get pointer to target variable 
 sta forpnt  ;a little bit of set up so we can share LET code 
 sty forpnt+1 
 lda valtyp  ;what kind of variable name did ptrget find? 
 bne chkerr  ; type mismatch error if string 
 
 ldy count  ;which register's value are we looking for? 
 lda _a_reg,y  ;.A, .X, .Y, & .Z are contiguious 
 cpy #4 
 bne 20$ 
 lda _s_reg  ;but .S isn't 
 
20$ tay   ;low byte in .Y 
 lda #0   ;high byte of zero 
 jsr givayf  ;go float it 
 lda intflg  ;set conditions for type of var (int/float) 
 jsr qintgr  ;..and use part of LET to do the work 
 
30$ inc count  ;5 registers to do 
 lda count 
 cmp #5 
 bcs 50$ 
 jsr chrgot  ;was this e-o-statement? 
 beq 50$ 
 jsr chrget  ;not e-o-s, skip over comma, 
 bne 10$   ;..and go do next 
 
50$ rts 
 
;.end 
 .page 
 .subttl MID$ 
 
; Alternate use of the MID$ function, as the target of an assignment. 
; 
; MID$(string_var,starting_position [,length]) = string_expression 
 
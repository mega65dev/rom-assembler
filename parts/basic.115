sound cmp #clr_token  ;SOUND CLR: init sound/music environment [910717] 
 beq Sound_CLR  ; yes 
 
 jsr getbyt  ;get voice number in .X 
 dex   ;adjust 1..3 to 0..2 
 cpx #6   ;      [910612] 
98$ bcs fcerr  ;illegal value 
 
10$ stx sound_voice 
 
; Get frequency 
 
 jsr comwrd  ;eat comma, get frequency in y,a 
 sty temp_max_lo  ;save our copy of max, also set up as current 
 sta temp_max_hi 
 sty temp_freq_lo 
 sta temp_freq_hi 
 
; Get duration 
 
 jsr comwrd  ;eat comma, get number of jiffys to play 
 cmp #$80 
 bcs 98$ 
 sty temp_time_lo 
 sta temp_time_hi 
 
; Get sweep direction 
 
 jsr optzer  ;get optional sweep (default = 0, up) 
 cpx #3 
 bcs 98$ 
 txa 
 sta temp_direction 
 and #1   ;set .Z if sweep up or oscillate 
 php   ;save .Z for step (below) 
 
; Get minimum frequency value (sweep lo) 
 
 jsr optwrd 
 sty temp_min_lo 
 sta temp_min_hi 
 
; Get step value for sweep 
 
 jsr optwrd  ;get optional step, default is zero 
 plp   ;get flags from direction 
 beq 75$   ;branch if 'up' or oscillate 
 pha   ;if 'down', make step 2's complement 
 tya 
 eor #$ff 
 clc 
 adc #1 
 tay 
 pla 
 eor #$ff 
 adc #0 
75$ sta temp_step_hi 
 tya 
 sta temp_step_lo 
 
; Get waveform 
 
 ldx #2   ;get waveform. default is square (2) 
 jsr optbyt 
 cpx #4 
 bcs 98$   ;illegal value 
 lda sbits+4,x  ;get bit pattern for selected waveform 
 ora #1   ;add in the gate bit 
 sta temp_waveform 
 
; Get pulse width 
 
 jsr optwrd  ;get optional pulse width in y,a 
 bcs 80$ 
 lda #8   ;no arg's given, use default pulse width 
 ldy #0 
80$ cmp #16 
 bcs 98$ 
 sty temp_pulse_lo 
 sta temp_pulse_hi 
 
; All arg's in, time to get to work 
 
 lda temp_time_lo 
 ora temp_time_hi 
 beq 100$  ;special case: time=0 means 'kill it NOW' 
 
; Wait for all current uses of this voice to time out 
 
 ldx sound_voice  ;first test 'PLAY' 
 txa   ;make an index into PLAY's tables 
 asl a 
 tay 
60$ lda voices+1,y 
 bpl 60$ 
 
70$ lda sound_time_hi,x ;now test 'SOUND' 
 bpl 70$ 
 
; All clear, now set up for current effect 
 
 ldy #0   ;download max freq l&h, min freq l&h, 
90$ lda temp_max_lo,y ;..sweep direction, step value l&h, & freq l&h 
 sta sound_max_lo,x 
 inx 
 inx 
 inx 
 inx   ;      [910612] stereo 
 inx 
 inx 
 iny 
 cpy #9 
 bcc 90$ 
 
; Now set up SID 
 
 ldx sound_voice 
 ldy SID_offset,x ;get index to SID voices 
; jsr put_io_in_map 
; jsr go_slow  ;      [910716] 4567R7A 
 
 lda #$08  ;turn off SID gate 
 sta sid1+4,y 
 
 lda #0   ;set up attack & decay, 
 sta sid1+5,y 
 lda #$f0  ;..and sustain & release 
 sta sid1+6,y 
 
 ldx #0   ;set up freq (l&h), pulse width (l&h), & waveform 
95$ lda temp_freq_lo,x 
 sta sid1,y 
 iny 
 inx 
 cpx #5 
 bne 95$ 
; jsr go_fast  ;      [910716] 4567R7A 
 
; Now set up time to play 
 
100$ ldx sound_voice 
 ldy temp_time_lo 
 lda temp_time_hi 
 
 sei 
 sta sound_time_hi,x 
 tya 
 sta sound_time_lo,x 
 cli 
 
 rts 
 
;.end 
;[[command.window]] 
 .page 
 .subttl  WINDOW 
 
;**************************************************************** 
;* 
;*  WINDOW Command 
;* 
;*  Syntax : WINDOW upper-left col, upper-left row, 
;*      lower-left col, lower-right row [,clear] 
;* 
;*  Where  :  0 <= row <= 24 
;*       0 <= column <= (80/40) 
;*       clear : 0 (no) or 1 (yes) 
;* 
;**************************************************************** 
 
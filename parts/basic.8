sta_far_in1  ;      [910624] 
 ldx #index1 
 bra sta_far_ram0 
 
sta_far_txt 
 ldx #txtptr 
 
sta_far_ram0 
 php  ;save registers 
 phz 
 ldz text_bank ;RAM0 
 jsr _sta_far ;STA (.x),Y to bank .z 
 plz 
 plp 
 rts 
 
 
indcmp_in1  ;       [910620] 
 ldx #index1 
 ldz text_bank ;RAM0 
 jmp _cmp_far ;STA (.x),Y to bank .z 
 
;.end 
 .page 
 .subttl Crunch - Tokenization Routine 
 
;[[system.tokeniser]] 
;        CRUNCH 
; 
;  Entry:  TXTPTR points to start of text to crunch 
;  Exit:   TXTPTR points to start of crunched text 
; 
;  Calls:  CHRGET 
;          CHRGOT 
;          RESER 
;          KLOOP 
;          REM 
;          DATA 
; 
;  CRUNCH collapses all reserved words into tokens.  It removes all graphic 
;  characters (characters with msb set) not in quoted strings, DATA or REM 
;  statements. 
; 
;  An escape token is implemented as follows: 
; 
; As each character on a line of text to be crunched is scanned, an 
; indirect jump is performed.  Anyone wishing to scan for their own 
; commands should grab off this vector, saving the return vector. 
; On entry, if the carry flag is set, it is still up for grabs. 
; The current text pointer is at TXTPTR.  If the escape routine 
; recognizes the command, it should: 
; 
;  ) put the length of the reserved word in .y 
;  ) put the desired 'second' token in .a 
;  ) clear the carry flag 
;  ) put type of token in x: 0==>command, ff==>function 
; 
; If it is not your command, leave .a and the carry flag intact. 
; NOTE:  The reserved word must be >= 2 characters long.  Exit through 
; the old vector (for daisy chaining).  If the carry flag is clear on 
; entry it means someone else before you recognized this command.  In 
; this case, just pass control through the old vector. 
 
 
crunch jmp (icrnch) 
 
 
ncrnch phw txtptr  ;save old text pointer 
 
crun05 jsr chrgot 
 bra crun20 
 
crun10 jsr chrget 
 
 
crun20 bcc crun10  ;don't crunch numbers 
 jmp (iesclk)  ;give others a chance at this.  (carry is set) 
 
nesclk 
 bcc 130$  ;carry clear if someone wanted it 
 cmp #0   ;end of line? 
 beq 110$  ; yes 
 cmp #':'  ;multi-stmt char? 
 beq crun10  ; yes 
 cmp #'?'  ;print ('?') abreviation? 
 bne 20$   ; no 
 lda #print_token  ; yes- substitute print token 
 bra 90$ 
 
20$ cmp #$80  ;graphics? 
 bcc 30$   ; no 
 cmp #pi   ;pi? (special case) 
 beq crun10  ; yes, leave alone 
 ldy #1 
 jsr kloop  ;crunch out graphics 
 bra crun05 
 
 
30$ cmp #'"'  ;quote string? 
 bne 50$   ; no- try escape token 
 
40$ jsr chrget 
 cmp #0   ;end of line? 
 beq 110$  ; yes 
 cmp #'"'  ;close quote? 
 beq crun10  ; yes 
 bra 40$   ; no, continue skipping characters 
 
 
; Crunch escape token 
 
50$ lda #>esc_command_list ;look for token in escape-command list 
 ldy #<esc_command_list 
 jsr reser 
 bcc 60$   ; not found 
 lda #first_esc_command_token+$80-1 ;set up for common escape routine 
 ldx #0   ;..flag 'cmd' type escape 
 bra 120$  ;..and go to it. 
 
60$ lda #>esc_function_list ;look for token in escape-function list 
 ldy #<esc_function_list 
 jsr reser 
 bcc 70$   ; not found 
 lda #first_esc_function_token+$80-1 ;set up for common escape routine 
 ldx #$ff  ;..flag 'function' type escape 
 bra 120$  ;..and go to it 
 
70$ lda #>keyword_list ;look for token in normal list 
 ldy #<keyword_list 
 jsr reser 
 bcc crun10  ; not found 
 cpy #0   ;anything to move? 
 beq 80$   ; no 
 jsr kloop  ;crunch it out 
80$ lda count 
 
90$ ldy #0 
 jsr sta_far_txt  ;put token into text  (bleed-thru) 
 cmp #rem_token 
 beq 100$ 
 cmp #data_token 
 bne crun10 
 jsr chrget 
 jsr data 
 bra crun05 
 
100$ jsr chrget 
 jsr rem 
 
 
;  No other statements can follow a REM 
 
110$ ldx txtptr 
 pla 
 sta txtptr+1 
 pla 
 sta txtptr 
 sec   ;compute length of line 
 txa 
 sbc txtptr 
 tay 
 iny 
 rts 
 
 
; Crunch out old text, install an escape token 
 
120$ adc count  ;make pointer into a token 
130$ pha   ;save second token 
 dey   ;waste (# of chars) - 1 
 jsr kloop 
 
; See if this is function (x=ff) or command (x=0) 
 
 lda #esc_command_token ;assume command 
 inx 
 bne 140$  ;branch if command 
 lda #esc_function_token ;..else get correct token 
 
140$ ldy #0 
 jsr sta_far_txt  ;install escape token... (bleed-thru) 
 iny 
 pla 
 jsr sta_far_txt  ;..and second token  (bleed-thru) 
 jsr chrget  ;skip over token, 
 bra crun10  ;..and continue with line. 
 
 .page 
;      KLOOP 
; 
;  Crunch loop.  Moves offset .y characters from txtptr to end of line. 
;  .x is preserved 
 
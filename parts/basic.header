 .nam C65 Development BASIC 10.0 (C)1991 CBM 
 .subttl *** Copyright (C) 1991  by  Commodore Business Machines, Inc. *** 
 
;  *************************************************************************** 
;  *                               //                                        * 
;  *              CCCCCCC         //    6666666     555555555                * 
;  *             CCC   CCC       //    666   666    555                      * 
;  *            CCC             //    666           555                      * 
;  *            CCC            //     666 6666      55555555                 * 
;  *            CCC           //      6666   666          555                * 
;  *            CCC          //       666     666          555               * 
;  *             CCC   CCC  //         666   666    555   555                * 
;  *              CCCCCCC  //           6666666      5555555                 * 
;  *                      //                                                 * 
;  *                                                                         * 
;  *          BBBBBBBBB      AAAA      SSSSSSSS   III    CCCCCCC             * 
;  *          BBB    BBB   AAA  AAA   SSS    SSS  III   CCC   CCC            * 
;  *          BBB    BBB  AAA    AAA  SSS         III  CCC                   * 
;  *          BBBBBBBBB   AAAAAAAAAA   SSSSSSSS   III  CCC                   * 
;  *          BBB    BBB  AAA    AAA         SSS  III  CCC                   * 
;  *          BBB    BBB  AAA    AAA  SSS    SSS  III   CCC   CCC            * 
;  *          BBBBBBBBB   AAA    AAA   SSSSSSSS   III    CCCCCCC             * 
;  *                                                                         * 
;  *                       V E R S I O N   1 0 . 0                           * 
;  *              * 
;  *        Copyright (C)1991  by   Commodore Business Machines, Inc.        * 
;  *              * 
;  *       All  Rights  Reserved        * 
;  *              * 
;  *************************************************************************** 
 
;   ROM VERSION  911115  (ver 0.9B) 
 
; ****************************************************************** 
; *                                                                * 
; * This listing contains confidential and proprietary information * 
; * of CBM, Inc.  The reproduction, dissemination or disclosure to * 
; * others without express written permission is prohibited.  This * 
; * software is for use in prototype Commodore C/65 systems only.  * 
; *                                                                * 
; *  The information in this document will change without notice.  * 
; *                                                                * 
; *  No  responsibility  is  assumed  for the reliability of this  * 
; *                          software.                             * 
; *                                                                * 
; ****************************************************************** 
 
   .STORE $2000,$a000,"b65.rom" 
 
; This version written and assembled by Fred Bowen using BSO format. 
 .page 
; Adapted from the following C128 files, ROM part numbers 318018-04, 3180194-04: 
; 
; disclaim  resume   hexfunc 
; declare   doloop   rgr 
; entries   key   rclr 
; header   paint   joy 
; init   box   penpot 
; indjumps  sshape   pointer 
; crunch   gshape   rsprite 
; tokens1   circle   rspcolor 
; tokens2   draw   bump 
; disptable  char   rsppos 
; errmsgs   locate   xor 
; errprint  scale   rwindow 
; execute   color   rnd 
; functions  scnclr   code12 
; code0   graphic   stringfns 
; rtstack   bank   code17 
; findline  sleep   code18 
; lineget   wait   code19 
; list   sprite   code21 
; newclr   movspr   code22 
; return   play   code23 
; remdata   filter   code24 
; if   envelope  code26 
; ongoto   collision  grbcol 
; let   sprcolor  trig 
; print   width   using 
; input   volume   instring 
; next   sound   graphic3 
; dim   window   rdot 
; sys   boot   graphic7 
; trontroff  sprdef   graphic8 
; rreg   sprsav   graphic9 
; midequal  fast   graphic10 
; auto   slow   graphic11 
; help   checkval  sethires 
; gosubgoto  formeval  clrhires 
; go   variables  dos1 
; continue  getpointr  dos2 
; run   array   dos3 
; restore   patcheslo  dos4 
; renumber  fre   overflow 
; for   val   irq 
; delete   dec   stash 
; pudef   peekpoke  fetch 
; trap   errfunc   swap 
; patcheshi  jumptable  def 
; strings 
 .page 
 .subttl C65 BASIC 10.0 Macro Definitions 
 
 .blist 
 
 .page 
 .subttl C65 BASIC 10.0 Declarations 
 
; General assignments and equates 
 
doslfn  = 0  ;DOS' private logical file number 
dosffn  = 8  ;DOS' default drive number 
 
strsiz  = 3  ;string descriptor size in temps. and arrays 
lengos  = 5  ;length of a GOSUB entry on the runtime stack 
lenfor  = 18  ;length of a FOR entry in the runtime stack 
 
; maxchr = 80  ;misc. command equates 
; llen  = 40 
; nlines = 25 
column_width = 10  ;print comma spacing 
 
beats_pal = 1200  ;whole note (4/4 time = 2sec.)    [910724] 
beats_ntsc = 1440  ; 
 
lf  = $0a  ;line feed 
cr  = $0d  ;carriage return 
esc  = $1b  ;escape 
pi  = $ff 
 
basbgn  = $2000  ;bottom of BASIC text bank 
baswrk  = basbgn+1 ;where BASIC text starts 
varbgn  = $2000  ;bottom of BASIC data bank (C65: DOS RAM below $12000) 
bank_0_top = $8000  ;top of BASIC text bank ($FF00)    [910528] 
bank_1_top = $8000  ;top of BASIC data bank ($f800, VIC attributes)  [910528] 
 
; graphic_base = $2000 
; color_ram_lo = $1c00 
; color_ram_hi = $d800 
 
vic  = $d000  ;Video controller 
 
fdc  = $d080  ;Built-in floppy disk controller 
 
sid1  = $d400  ;Audio processors (right) 
sid2  = $d420  ;   (left) 
 
d1_6526  = $dc00  ;Ports, peripheral control 
d1pra  = d1_6526 
d2_6526  = $dd00 
d2pra  = d2_6526 
 
dma_ctlr = $d700  ;DMA Controller 
 
 .page 
;  BASIC base page storage 
 
  * = $0000 
 
  *=*+2  ;'4510' registers (not used in C65 mode) 
srchtk  *=*+1  ;token 'search' looks for (run-time stack) / SYS 'bank#' 
 
  * = $000a ;skip over SYS address, status, a/x/y/z registers 
 
integr    ;used by math routines (this & following location) 
charac  *=*+1 
endchr  *=*+1 
verck  *=*+1  ;LOAD/VERIFY flag 
count  *=*+1  ;temp used all over 
dimflg  *=*+1  ;DIM flag used by variable search 
valtyp  *=*+1  ;0=numeric, $FF=string 
intflg  *=*+1  ;b7: (0=float,1=integer), b6: (1=get flag) 
garbfl    ;garbage collection temporary 
dores  *=*+1  ;b7: P1LINE quote flag 
subflg  *=*+1  ;b7: subscript flag (set to disallow subscripts() & integers%) 
input_flag *=*+1  ;READ($98), GET($40), or INPUT($00) 
domask 
tansgn  *=*+1 
channl  *=*+1  ;active I/O channel 
poker    ;temp used all over 
linnum  *=*+2  ;line number 
 
temppt  *=*+1  ;pointer to next temporary descriptor in tempst 
lastpt  *=*+2  ;pointer to last used temporary string 
tempst  *=*+9  ;temporary descriptor pointers (3 at 3 bytes each) 
 
index 
index1  *=*+2 
index2  *=*+2 
 
multiplicand   ;2 bytes wide, for unsigned integer multiply 
resho  *=*+1 
resmoh  *=*+1 
product    ;3 bytes wide, for unsigned integer multiply 
addend 
resmo  *=*+1 
reslo  *=*+1 
  *=*+1 
txttab  *=*+2  ;where BASIC program begins   (text_bank) 
vartab  *=*+2  ;where variable descriptors begin  (var_bank) 
arytab  *=*+2  ;where array table begins   (var_bank) 
strend  *=*+2  ;where arrays table ends   (var_bank) 
fretop  *=*+2  ;bottom of string storage   (var_bank) 
frespc  *=*+2  ;where temporary strings begin   (var_bank) 
max_mem_1 *=*+2  ;highest address available to BASIC in RAM 1 (var_bank) 
curlin  *=*+2 
txtptr  *=*+2  ;pointer to BASIC text used by CHRGET, etc. 
form    ;used by print using 
fndpnt  *=*+2  ;pointer to item found by search 
datlin  *=*+2 
datptr  *=*+2 
inpptr  *=*+2 
varnam  *=*+2 
fdecpt 
varpnt  *=*+2 
lstpnt 
andmsk 
forpnt  *=*+2 
eormsk  =forpnt+1 
vartxt 
opptr  *=*+2 
opmask  *=*+1 
grbpnt 
tempf3 
defpnt  *=*+2 
dscpnt  *=*+2 
token_saver   ;temp used by P1LINE/HELPSB (was spare????) [910628] 
trmpos  *=*+1  ;temp used by SPC(), TAB()   [910628] 
 
helper  *=*+1  ;P1LINE flag b7: HELP vs. LIST 
    ;  b6: memory vs. file 
    ;  b5: FIND/CHANGE 
    ;  b4: highlight tokens 
    ;  b3: highlight REM 
    ;  b1: LINGET flag for AUTOSCROLL 
    ;  b0: token in progress 
 
jmper  *=*+1  ;3 locations used by Function handler 
  *=*+1  ; 
oldov  *=*+1  ; 
 
tempf1  *=*+1  ;used by math routines 
ptarg1  =tempf1  ;multiply defined for INSTR thru FACexp 
ptarg2  =tempf1+2 ; (also used by Monitor Utility, thru lowtr) 
str1  =tempf1+4 
str2  =tempf1+7 
positn  =tempf1+10 
match  =tempf1+11 
 
arypnt 
highds  *=*+2 
hightr  *=*+2 
 
tempf2  *=*+1  ;used by math routines 
deccnt  *=*+2 
tenexp  = deccnt+1 
grbtop 
dptflg 
lowtr  *=*+1 
expsgn  *=*+1 
 
fac    ;Floating point accumulator (primary) FAC1 
dsctmp 
facexp  *=*+1 
facho  *=*+1 
facmoh  *=*+1 
indice 
facmo  *=*+1 
faclo  *=*+1 
facsgn  *=*+1 
degree 
sgnflg  *=*+1 
 
argexp  *=*+1  ;Floating point accumulator (secondary) FAC2 
argho  *=*+1 
argmoh  *=*+1 
argmo  *=*+1 
arglo  *=*+1 
argsgn  *=*+1 
 
strng1 
arisgn  *=*+1 
facov  *=*+1 
 
strng2 
polypt 
curtol 
fbufpt  *=*+2 
 
autinc  *=*+2  ;incremental value for AUTO (0=off) 
 
z_p_temp_1 *=*+1  ;USING's leading zero counter 
    ;GET, RENUMBER, KEY temporary 
    ;MOVSPR, SPRITE, PLAY, VOL temporary 
    ;MID$= temporary 
 
hulp    ;counter 
keysiz  *=*+1 
 
syntmp  *=*+1  ;used as temp all over the place 
dsdesc  *=*+3  ;descriptor for DS$ 
tos  *=*+2  ;top of run time stack 
runmod  *=*+1  ;flags run/direct(b7), load(b6), trace(b5), edit(b4) modes 
    ; autoboot wedge (b0) 
point    ;USING's pointer to decimal point, 2 bytes used by AutoScroll 
parsts  *=*+1  ;DOS parser status word 
parstx  *=*+1  ;DOS parser status extensions 
 
oldstk  *=*+1  ;BASIC saves uP stack pointer here 
 
text_top *=*+2  ;top of BASIC text pointer  (in text_bank) 
text_bank *=*+1  ;where BASIC text lives   (RAM0 default) 
var_bank *=*+1  ;where BASIC vars live   (RAM1 default) 
sys_bank = 0  ;where system space is  ???? (RAM0, make this a var?) 
 
sid_speed_flag *=*+1  ;saves system speed during SID ops (used during IRQ) 
 
time    ;temporaries for TI, TI$, SLEEP (4 bytes) 
grapnt    ;used by SPRSAV, RMOUSE, RCOLOR 
op 
column  *=*+1  ;temporaries for FIND/CHANGE, [L]INPUT, [L]READ, CURSOR 
srow 
fstr1  *=*+3  ; 
fstr2  *=*+3  ; 
 
 .page 
  * = $00ff 
 
lofbuf  *=*+1 
fbuffr  *=*+16  ;MathPack builds numbers here, USING, RENUMBER 
 
;  Kernel MAP configurations & DMA lists 
 
  *=*+16+36 ;(4 configs + 3 DMA lists) 
 
;  BASIC DMA lists  (2 @ 12bytes each = 24 bytes) 
 
dma1_cmd *=*+1  ;This list is used by BASIC OS 
dma1_cnt_lo *=*+1 
dma1_cnt_hi *=*+1 
dma1_src_lo *=*+1 
dma1_src_hi *=*+1 
dma1_src_bank *=*+1 
dma1_dest_lo *=*+1 
dma1_dest_hi *=*+1 
dma1_dest_bank *=*+1 
dma1_subcmd *=*+1  ;  (from here on not supported until F018A) [910520] F018A 
dma1_mod_lo *=*+1 
dma1_mod_hi *=*+1 
 
dma2_cmd *=*+1  ;This list is used by DMA command & Graphics 
dma2_cnt_lo *=*+1 
dma2_cnt_hi *=*+1 
dma2_src_lo *=*+1 
dma2_src_hi *=*+1 
dma2_src_bank *=*+1 
dma2_dest_lo *=*+1 
dma2_dest_hi *=*+1 
dma2_dest_bank *=*+1 
dma2_subcmd *=*+1  ;   (from here on not supported until F018A) [910520] F018A 
dma2_mod_lo *=*+1 
dma2_mod_hi *=*+1 
 
  *=*+1  ;Kernel's dma_byte 
 
sysstk    ;bottom of system stack 
stkend  = $1fb  ;top of system stack 
 
 .page 
  * = $0200 
 
buflen  = 161  ;input buffer size (2 80-column lines + 1) 
buf  *=*+buflen ;BASIC/Monitor line input buffer 
buf_txtptr = buf-1 
 
 .page 
  * = $02c0 
; BASIC RAM code  (RAM code not needed- following moved to ROM) 
; 
; chrget *=*+42  ;get byte from text bank after incrementing TXTPTR 
; chrgot = chrget+2 ;get byte from text bank at TXTPTR 
; qnum  = chrget+27 ;evaluate byte as a number & set flags accordingly 
 
adray1  *=*+2  ;ptr to routine:  convert float -> integer ???? why keep 
adray2  *=*+2  ;ptr to routine:  convert integer -> float ???? why keep 
zero  *=*+3  ;numeric constant for BASIC, downloaded from ROM 
 
errnum  *=*+1  ;used by error trapping routine-last error number 
errlin  *=*+2  ;line # of last error ($FFFF if no error) 
trapno  *=*+2  ;line to go to on error ($FFxx if none set) 
tmptrp  *=*+1  ;hold trap # temporary 
errtxt  *=*+2  ;pointer to statement causing last error 
max_mem_0 *=*+2  ;highest address available to BASIC in RAM 0 (text bank) 
 
current_bank *=*+1  ;context for PEEK,POKE,BOOT,SYS,WAIT,BLOAD/SAVE set by BANK. 
fin_bank *=*+1  ;bank pointer for string->number conversion routine FIN 
tmpdes  *=*+4  ;pointers to temporary descriptors for INSTR 
bits  *=*+1  ;flag for math bit/byte shifter 
highlight_color *=*+1  ;color for highlighting text 
highlight_save *=*+1  ;saves normal color during highlighting, msb=flag 
find_count *=*+1  ;count for LIST to highlight FIND text 
 
; Interrupt stuff 
 
irq_wrap_flag *=*+1  ;used by BASIC_IRQ to block all but one IRQ call 
intval  *=*+1  ;BASIC interrupts enabled (via collision command) 
int_trip_flag *=*+3  ;flags which interrupts occurred 
int_adr_lo *=*+3  ;where to go for each type of collision (line number) 
int_adr_hi *=*+3  ; 
collisions *=*+2  ;sprite collisions, s/s and s/bgnd, recorded during IRQ 
lightpen_xpos *=*+1  ;lightpen position recorded during IRQ 
lightpen_ypos *=*+1 
 
; dejavu *=*+1  ;'cold' or 'warm' reset status (must be in page 5!)???? 
 
; nmi_wrap_flag *=*+1  ;used by BASIC_NMI to block all but one NMI call [910523] 
;    ; (removed)      [910826] 
    ;(leaving 12 bytes) 
 .page 
; BASIC indirect vectors 
 
  * = $02f7 
 
usrpok  *=*+3  ;USR vector (must be set by application) 
 
vectors_begin 
iAutoScroll *=*+2  ;AutoScroll vector 
esc_fn_vec *=*+2  ;Escape Function vector 
graphic_vector *=*+2  ;Graphic Kernel vector (was 'bnkvec') 
ierror  *=*+2  ;indirect error (output error in .x) 
imain  *=*+2  ;indirect main (system direct loop) 
icrnch  *=*+2  ;indirect crunch (tokenization routine) 
iqplop  *=*+2  ;indirect list (char list) 
igone  *=*+2  ;indirect gone (char dispatch) 
ieval  *=*+2  ;indirect eval (symbol evaluation) 
iesclk  *=*+2  ;escape token crunch 
iescpr  *=*+2  ;escape token list 
iescex  *=*+2  ;escape token execute 
itime  *=*+2  ;60Hz interrupt vector (before jiffy) 
cinv  *=*+2  ;IRQ RAM vector 
cbinv  *=*+2  ;BRK RAM vector 
 
; Remainder of this area reserved for Kernel indirects & Kernel RAM code 
 
 .page 
  * = $0400 ;BASIC's run-time stack (2 pages) 
stktop    ; (also used by BOOT SYS and Monitor) 
stkbot    = $05ff 
 
 
  * = $0600 ;Sprite definitions (2 pages, must be below $1000) 
sprite_base 
 
 
  * = $0800 
screen_start   ;Text display screen 
  * = *+2000 
 
sprite_ptrs_40 = screen_start+$3f8 
sprite_ptrs_80 = screen_start+$7f8 
 
 .page 
  * = $1170 ;previous to this used by Kernel 
 
oldlin  *=*+2  ;BASIC storage 
oldtxt  *=*+2  ;BASIC storage 
rndx  *=*+5  ;Floating Point representation of last random # 
 
 
; Yet more temporaries shared by various routines 
 
window_temp   ;window  (4 bytes) 
t3    ;dcat  (1 byte) 
renum_tmp_1   ;renumber (2 bytes) 
tmptxt  *=*+2  ;do/loop (2 bytes) 
 
t4    ;dcat  (2 bytes) 
renum_tmp_2   ;renumber (2 bytes) 
tmplin  *=*+2  ;do/loop (2 bytes) 
 
 
;  BASIC/DOS interface vars  (20 bytes) 
 
dosofl  *=*+2  ;BLOAD/BSAVE starting addr 
dosofh  *=*+2  ;BSAVE ending addr 
dosla  *=*+1  ;DOS logical addr 
dosfa  *=*+1  ;DOS physical addr 
dossa  *=*+1  ;DOS secondary addr 
 
xcnt  *=*+1  ;DOS loop counter------ this area zeroed-out each DOS call ----- 
dosf1l  *=*+1  ;DOS filename 1 len 
dosds1  *=*+1  ;DOS disk drive 1 
dosf2l  *=*+1  ;DOS filename 2 len 
dosds2  *=*+1  ;DOS disk drive 2 
dosf2a  *=*+2  ;DOS filename 2 addr 
dosrcl  *=*+1  ;DOS record length 
dosbnk  *=*+1  ;DOS load/save bank 
dosdid  *=*+2  ;DOS ID identifier 
dosflags *=*+1  ;DOS flags  7:ID,  6:recover 
dossa_temp *=*+1  ;temp storage for file's sa during RECORD command 
dosspc  = *-xcnt ;space used by DOS routines------------------------------------- 
 
savram  *=*+67  ;buffer used by MOVSPR, SPRDEF, SAVSPR, and DOS parser 
 
xabs  = savram ;movspr_line calculations   [910809] 
yabs  = savram+2 
xsgn  = savram+4 
ysgn  = savram+6 
fct  = savram+8 
errval  = savram+12 
 
 .page 
; PRINT USING definitions & storage  (24 bytes) 
 
puchrs    ;Declarations for PRINT USING... 
pufill  *=*+1  ;print using fill symbol 
pucoma  *=*+1  ;print using comma symbol 
pudot  *=*+1  ;print using decimal point symbol 
pumony  *=*+1  ;print using monetary symbol 
 
bnr  *=*+1  ;pointer to begin # 
enr  *=*+1  ;pointer to end # 
dolr  *=*+1  ;dollar flag 
flag  *=*+1  ;comma flag (also used by PLAY)???? 
swe  *=*+1  ;counter 
usgn  *=*+1  ;sign exponent 
uexp  *=*+1  ;pointer to exponent 
vn  *=*+1  ;# of digits before decimal point 
chsn  *=*+1  ;justify flag 
vf  *=*+1  ;# of positions before decimal point (field) 
nf  *=*+1  ;# of positions after decimal point (field) 
posp  *=*+1  ;+/- flag (field) 
fesp  *=*+1  ;exponent flag (field) 
etof  *=*+1  ;switch 
cform  *=*+1  ;char counter (field) 
sno  *=*+1  ;sign no 
blfd  *=*+1  ;blank/star flag 
begfd  *=*+1  ;pointer to begin of field 
lfor  *=*+1  ;length of format 
endfd  *=*+1  ;pointer to end of field 
 
 .page 
;  * = $1200 ;BASIC Graphic, Sprite, Music, & Sound storage 
 
;  The following 24 bytes are multiply defined... 
; 
; params = * 
 
;  Circle drawing variables  (multiply defined). 
; 
; xcircl *=*+2  ;circle center, x coordinate 
; ycircl *=*+2  ;circle center, y coordinate 
; xradus *=*+2  ;x radius 
; yradus *=*+2  ;y radius 
; rotang *=*+4  ;rotation angle 
; angbeg *=*+2  ;arc angle start 
; angend *=*+2  ;arc angle end 
; xrcos  *=*+2  ;x radius * cos(rotation angle) 
; yrsin  *=*+2  ;y radius * sin(rotation angle) 
; xrsin  *=*+2  ;x radius * sin(rotation angle) 
; yrcos  *=*+2  ;y radius * cos(rotation angle) 
 
; parend = * 
 
;  Box drawing variables  (multiply defined). 
; 
;  *=params 
; xcord1 *=*+2  ;point 1 x-coord. 
; ycord1 *=*+2  ;point 1 y-coord. 
; boxang *=*+2  ;rotation angle 
; xcount *=*+2 
; ycount *=*+2 
; bxleng *=*+2  ;length of a side 
; xcord2 *=*+2 
; ycord2 *=*+2 
 
 .page 
;  Shape variables  (multiply defined). 
; 
;  *=params 
;  *=*+1  ;placeholder 
; keylen *=*+1 
; keynxt *=*+1 
; strsz  *=*+1  ;string len 
; gettyp *=*+1  ;replace shape mode 
; strptr *=*+1  ;string pos'n counter 
; oldbyt *=*+1  ;old bit map byte 
; newbyt *=*+1  ;new string or bit map byte 
;  *=*+1  ;placeholder 
; xsize  *=*+2  ;shape column length 
; ysize  *=*+2  ;shape row length 
; xsave  *=*+2  ;temp for column length 
; stradr *=*+2  ;save shape string descriptor 
; bitidx *=*+1  ;bit index into byte 
 
;  General use parameters  (multiply defined). 
; 
;  *=params 
; xcentr *=*+2 
; ycentr *=*+2 
; xdist1 *=*+2 
; ydist1 *=*+2 
; xdist2 *=*+2 
; ydist2 *=*+2 
; disend 
;  *=*+2  ;placeholder 
; colcnt *=*+1  ;char's col. counter 
; rowcnt *=*+1 
; strcnt *=*+1 
 
 .page 
;  General  graphic & sound  buffers & assignments 
; 
;  * = parend 
 
;  General graphic storage (used by C128-type sprite routines in C65) 
 
vwork    ;graphics & sprite vars 
xpos  *=*+2  ;current x position 
ypos  *=*+2  ;current y position 
xdest  *=*+2  ;x-coordinate destination 
ydest  *=*+2  ;y-coordinate destination 
 
numcnt  *=*+1  ;temp, usually coordinate type 
vtemp1  *=*+1  ;used by sprite math stuff ????was base page 
vtemp2  *=*+1  ;      ????was base page 
vtemp3  *=*+1  ;misc. graphic temp storage 
vtemp4  *=*+1 
vtemp5  *=*+1 
 
; mvdflg *=*+1  ;flag if 10k hires allocated ???? this stuff was base page 
; colsel *=*+1  ;current color selected 
; multicolor_1 *=*+1 
; multicolor_2 *=*+1 
; foreground *=*+1 
; scalem *=*+1  ;scale mode flag 
; scale_x *=*+2  ;scale factor in x 
; scale_y *=*+2  ;scale factor in y 
; stopnb *=*+1  ;stop paint if not background/not same color 
; fg_bg  *=*+1  ;packed foreground/background color nybbles 
; fg_mc1 *=*+1  ;packed foreground/multicolor 1 color nybbles 
 
; bitcnt *=*+1  ;temp for gshape 
; width  *=*+1  ;double width flag 
; filflg *=*+1  ;box fill flag 
; circle_segment *=*+1  ;degrees per circle segment 
; bitmsk *=*+1  ;temp for bit mask 
 
; character_rom *=*+1  ;high byte of address of char rom for 'char' command 
; upper_lower *=*+1  ;pointer to upper/lower case for char command 
; upper_graphic *=*+1  ;   "       upper/graphic 
 
;  DrawLine stuff 
; 
; xabs  *=*+2  ;16 bytes 
; yabs  *=*+2 
; xsgn  *=*+2 
; ysgn  *=*+2 
; fct  *=*+4 
; errval *=*+2 
; lesser *=*+1 
; greatr *=*+1 
 .page 
;  Angle stuff (used by sprites) 
 
angsgn  *=*+1  ;sign of angle 
sinval  *=*+2  ;sine of value of angle 
cosval  *=*+2  ;cosine of value of angle 
; angcnt *=*+2  ;temps for angle distance routines 
 
 
; Sprite stuff 
 
savsiz  *=*+4  ;temp work locations for SSHAPE, SPRSAV, MOVSPR_TO 
lesser 
sprtmp_1 *=*+1  ;temp for SPRSAV 
greatr 
sprtmp_2 *=*+1 
 
sprite_data *=*+88  ;speed/direction tables for 8 sprites, 11 bytes each 
    ;   move ang/dist move line 
    ; offset= 0 b7=0+speed b7=1+speed 
    ;  1 counter  counter lo 
    ;  2 angle sign         hi 
    ;  3,4 delta-X  dir+min/max 
    ;  5,6 delta-Y  fct1 
    ;  7,8 total-X  fct2 
    ;  9,10 total-Y  error 
 
init_as_0 = *-sprite_data-1 
 
; vic_save *=*+21  ;copy of VIC reg's, used to update chip during retrace 
 
; defmod *=*+1  ;for SPRDEF 
; lincnt *=*+1  ; " 
; sprite_number *=*+1  ; " 
 
 .page 
; Music stuff driving stereo SIDs, 3 voices each 
 
voices  *=*+12  ;Voice counters (activity flags)  [910612] stereo 
waveform *=*+6  ;Waveforms for each voice   [910612] stereo 
 
voice  *=*+1  ;Play note parameters 
octave  *=*+1 
sharp  *=*+1 
dnote  *=*+1 
tempo_rate *=*+1  ; duration of whole note 4/4 time = 24/rate 
pitch  *=*+2 
ntime  *=*+2 
 
filters1 *=*+4  ;Volume & Filter parameters   [910612] was 5 
filters2 *=*+4  ;      [910612] stereo 
fltsav  *=*+4  ;temps 
fltflg  *=*+1  ;temp 
 
tonnum  *=*+1  ;Tune Envelope stuff 
tonval  *=*+3 
 
atktab  *=*+10  ;Tune Envelopes 
sustab  *=*+10 
wavtab  *=*+10 
pulslw  *=*+10 
pulshi  *=*+10 
 
parcnt  *=*+1  ;temp: envelope 
nibble  *=*+1  ;temp: envelope, filter 
 
 .page 
; SOUND command stuff 
 
sound_voice *=*+1 
sound_time_lo *=*+3+3  ;     [910612] stereo 
sound_time_hi *=*+3+3  ;     [910612] stereo 
sound_max_lo *=*+3+3  ;     [910612] stereo 
sound_max_hi *=*+3+3  ;     [910612] stereo 
sound_min_lo *=*+3+3  ;     [910612] stereo 
sound_min_hi *=*+3+3  ;     [910612] stereo 
sound_direction *=*+3+3  ;     [910612] stereo 
sound_step_lo *=*+3+3  ;     [910612] stereo 
sound_step_hi *=*+3+3  ;     [910612] stereo 
sound_freq_lo *=*+3+3  ;     [910612] stereo 
sound_freq_hi *=*+3+3  ;     [910612] stereo 
 
    ;above must end before $1300 
  * = $1160 
    ;below must end before $1170 
 
temp_time_lo *=*+1 
temp_time_hi *=*+1 
temp_max_lo *=*+1 
temp_max_hi *=*+1 
temp_min_lo *=*+1 
temp_min_hi *=*+1 
temp_direction *=*+1 
temp_step_lo *=*+1 
temp_step_hi *=*+1 
temp_freq_lo *=*+1 
temp_freq_hi *=*+1 
temp_pulse_lo *=*+1 
temp_pulse_hi *=*+1 
temp_waveform *=*+1 
 
pot_temp_1 *=*+1  ;temporaries for 'POT' function 
pot_temp_2 *=*+1 
 
 .page 
  * = $1300 
 
dosstr  *=*+256  ;DOS input/output string buffer 
 
 .page 
  * = $1f00 ;Graphics Kernel Interface 
 
GKI__parm1 *=*+1  ;ml interface parm values 
GKI__parm2 *=*+1 
GKI__parm3 *=*+1 
GKI__parm4 *=*+1 
GKI__parm5 *=*+1 
GKI__parm6 *=*+1 
GKI__parm7 *=*+1 
GKI__parm8 *=*+1 
GKI__parm9 *=*+1 
GKI__parm10 *=*+1 
GKI__parm11 *=*+1 
GKI__parm12 *=*+1 
GKI__parm13 *=*+1 
GKI__parm14 *=*+1 
GKI__parm15 *=*+1 
GKI__parm16 *=*+1 
GKI__parm17 *=*+1 
 
GKI__subparm1 *=*+1  ;subroutine parm values 
GKI__subparm2 *=*+1 
GKI__subparm3 *=*+1 
GKI__subparm4 *=*+1 
GKI__subparm5 *=*+1 
 
GKI__temp1 *=*+1  ;local variables within subroutines 
GKI__temp2 *=*+1 
GKI__temp3 *=*+1 
GKI__temp4 *=*+1 
GKI__temp5 *=*+1 
GKI__temp6 *=*+1 
GKI__temp7 *=*+1 
GKI__temp8 *=*+1 
GKI__temp9 *=*+1 
GKI__temp10 *=*+1 
GKI__temp11 *=*+1 
GKI__temp12 *=*+1 
GKI__temp13 *=*+1 
GKI__temp14 *=*+1 
GKI__temp15 *=*+1 
GKI__temp16 *=*+1 
GKI__temp17 *=*+1 
 
;.end 
 .page 
 .subttl C65 Kernal Entry Points 
 
; Addresses of OS parameters referenced by BASIC: 
 
_6510_data_reg = $01 
_bank  = $02  ;reg's for Kernel xxx_FAR routines (used by SYS) 
_pchi  = $03 
_pclo  = $04 
_s_reg  = $05 
_a_reg  = $06 
_x_reg  = $07 
_y_reg  = $08 
_z_reg  = $09 
 
_vicIRQ  = $a0  ;VIC IRQ flag register at time of IRQ 
_starting_addr = $ac  ;address BLOAD loaded to 
_sa  = $b9  ;I/O channel secondary address 
_fa  = $ba  ;I/O channel device number 
_ndx  = $d0  ;number of characters in keyboard buffer 
_kyndx  = $d1  ;fkey active flag 
_mode  = $d7  ;40/80 mode 
_graphm  = $d8  ;graphic mode switch (multi/hires/split) 
_pnt  = $e0  ;Editor screen address at cursor 
 
_screen_bottom = $e4  ;these describe the current window 
_screen_top = $e5 
_screen_left = $e6 
_screen_right = $e7 
 
_color  = $f1  ;text color      [910722] 
_autoinsert = $f6  ;enable/disable auto insert mode 
_locks  = $f7  ;Editor keyboard locks     [910722] 
 
_keyd  = $02b0  ;keyboard buffer     [910710] 
 ;_split = $0a34  ;line to start split at 
 
number_fkeys = 16  ;max of 14 prog. fn. keys 
_pky_lengths = $1000  ;table of prog. fn. key sizes 
_pky_buffer = _pky_lengths+number_fkeys ;actual buffer 
 
_restart_vector = $1100  ;Kernel restart vector 
_pal_ntsc = $1103  ;PAL=$ff, NTSC=$00 indicator    [910107] 
_init_status = $1104  ;msb set tells Kernel to let BASIC have IRQs 
_default_drive = $1106  ;system default disk drive 
_expansion = $1107  ;expansion RAM (# banks????)    [910107] 
_sleep_counter = $110c  ;binary frame counter maintained by Kernel  [910730] 
_mouse_enable = $1135  ;port# used by mouse (b7=port2, b6=port1, or both) [910107] 
_mouse_pointer = $1136  ;sprite pointer (sprite*2) by Kernel mouse driver " 
_mouse_top = $113b  ;margins for mouse pointer    " 
_mouse_bottom = $113c  ;       " 
_mouse_left = $113d  ;       " 
_mouse_right = $113e  ;       " 
 
; Addresses of I/O areas referenced by BASIC: 
 
_red  = $d100  ;VIC palette (I/O block) 
_green  = $d200 
_blue  = $d300 
 
; Addresses of Kernel entry points referenced by BASIC: 
 
_print  = $e00c 
_mouse  = $e01b  ;       [910122] 
_set_window = $e02d 
_palette_init = $e027 
_cursor  = $e030  ;       [910228] 
 ;_ldtb2 = $e033 
 ;_ldtb1 = $e04c 
 
_close_all = $ff50  ;close all channels assigned to device .a 
_go_64  = $ff53  ;C64 mode 
_monitor = $ff56  ;ML Monitor 
_bootsys = $ff59  ;Boot alternate OS     [910110] 
_phoenix = $ff5c  ;jump to 'post-BASIC initialize' routine 
_lkupla  = $ff5f  ;find an available Logical Address 
_lkupsa  = $ff62  ;find an available Secondary Address 
_swapper = $ff65  ;switch 80/40 column 
_doakey  = $ff68  ;add/remove a definition from the p.f. key table 
_setbank = $ff6b  ;set bank for load/save/verify/open 
_jsr_far = $ff6e  ;call a subroutine in any bank 
_jmp_far = $ff71  ;jump to code in any bank 
_lda_far = $ff74  ;write a byte to any bank 
_sta_far = $ff77  ;read a byte from any bank 
_cmp_far = $ff7a  ;compare a byte to any bank 
_primm  = $ff7d  ;print immediate 
 
_setmsg  = $ff90 
_readst  = $ffb7 
_setlfs  = $ffba 
_setnam  = $ffbd 
_open  = $ffc0 
_close  = $ffc3 
_chkin  = $ffc6 
_chkout  = $ffc9 
_clrch  = $ffcc 
_basin  = $ffcf 
_bsout  = $ffd2 
_loadsp  = $ffd5 
_savesp  = $ffd8 
_SetTime = $ffdb 
_ReadTime = $ffde 
_stop  = $ffe1 
_getin  = $ffe4 
_clall  = $ffe7 
_screen_org = $ffed 
_plot  = $fff0 
 
;.end 
 .page 
 .subttl C65 BASIC 10.0 Initilaization 
 
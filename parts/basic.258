negate_step 
 lda sound_step_lo,y 
 eor #$ff 
 clc 
 adc #1 
 sta sound_step_lo,y 
 lda sound_step_hi,y 
 eor #$ff 
 adc #0 
 sta sound_step_hi,y 
 rts 
 
 
 .page 
; Here is where BASIC_IRQ exits 
 
basic_irq_end 
 dec irq_wrap_flag ;open the door to IRQ 
 cli 
 rts 
 
 .page 
; Update sprite position subroutine 
 
sprsub pha   ;save angle phase 
 clc 
 lda sprite_data+3,x ;add low bytes 
 adc sprite_data+7,x 
 sta sprite_data+7,x 
 lda sprite_data+4,x ;add high bytes 
 adc sprite_data+8,x 
 sta sprite_data+8,x 
 pla   ;get angle sign 
 bcc 30$   ;skip if no carry - do not update position 
 lsr a 
 lsr a   ;test if positive or negative 
 lda vic,y  ;    ???vic_save 
 bcs 10$   ;skip if negative 
 adc #1   ;increment position 
 bra 20$ 
 
10$ sbc #1   ;decrement position 
 cmp #$ff  ;set carry if underflow 
20$ sta vic,y  ;decrement position  ???vic_save 
30$ rts 
 
;.end 
;[[command.mouse]] 
 .page 
 .subttl  MOUSE 
 
;*********************************************************************** 
;*   MOUSE  ON  [,[port] [,[sprite] [,[hotspot] [,X/Yposition] ]]] 
;*   MOUSE  OFF 
;*    where: port     = (1...3) for joyport 1, 2, or either (both) 
;*  sprite   = (0...7) sprite pointer 
;*  hotspot  = x,y offset in sprite, default 0,0 
;*  position = normal, relative, or angluar coordinates 
;* 
;*      (defaults to sprite 0, port 2, last hotspot & position) 
;*********************************************************************** 
 
collision_irq 
; sei 
 lda _vicIRQ  ;check VIC IRQ flags 
 and #%00001110  ; mask all but lp, s/s, and s/bgnd flags 
 beq 40$   ; exit if none set 
 trb _vicIRQ  ; else reset flags we're going to handle 
 lsr a   ;shift out raster interrupt bit (not used) 
 
; Test for 3 types of collision interrupts : sprite/sprite, sprite/bgnd, & light pen 
 
 ldy #1   ;loop for sprite/bgnd and sprite/sprite collision check 
10$ lsr a 
 bcc 30$   ;bit not set ==> not source of interrupt 
 
 pha 
 lda vic+30,y  ;accumulate collision data (resets register) 
 ora collisions,y 
 sta collisions,y 
 
 lda intval  ;allowable interrupts 
 cpy #0   ;examine selected bit 
 beq 20$ 
 lsr a 
20$ lsr a 
 bcc 25$   ;BASIC doesn't want this interrupt 
 lda #$ff 
 sta int_trip_flag,y ;turn on trip flag 
 
25$ pla 
 
30$ dey 
 bpl 10$ 
 
 .page 
; Check light pen latch 
 
 lsr a 
 bcc 40$   ;LightPen latch not valid 
 
 ldx vic+49  ;4567R7 bug- must read LP_latches in Slow mode???? 
 lda #%01000000  ;      [910618] 
 trb vic+49 
 ldy vic+19  ;save latched x position 
 sty lightpen_xpos 
 ldy vic+20  ;save latched y position 
 sty lightpen_ypos 
 stx vic+49  ;restore speed     [910618] 
 
 lda intval  ;is BASIC interested in our little find? 
 and #4 
 beq 40$   ; no, move on to next IRQ task 
 lda #$ff 
 sta int_trip_flag+2 ; yes- let BASIC know we caught one 
 
40$ 
 .page 
; Update moving sprites 
 
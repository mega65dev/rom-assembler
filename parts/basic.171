rolshf ror 2,x 
 ror 3,x 
 ror 4,x  ;one more time 
 ror a 
 iny 
 bne shftr3 ;$$$ (most expensive!!!) 
 
shftrt clc  ;clear output of FACOV 
 rts 
 
;.end 
 .page 
 .subttl Floating Point Math Package (CODE19) 
 
; Constants used by LOG, EXP, TRIG, and others. 
 
fr4 .byte @177,@000,@000,@000,@000 ; 1/4 
neghlf .byte @200,@200,@000,@000,@000 ;-0.5 
fhalf .byte @200,@000,@000,@000,@000 ; 0.5 
tenc .byte @204,@040,@000,@000,@000 ;10.0 
pival .byte @202,@111,@017,@332,@241 ;pi 
pi2 .byte @201,@111,@017,@332,@242 ;pi/2 
twopi .byte @203,@111,@017,@332,@242 ;pi*2 
 
n0999 .byte $9b,$3e,$bc,$1f,$fd 
n9999 .byte $9e,$6e,$6b,$27,$fd 
nmil .byte $9e,$6e,$6b,$28,$00 
 
foutbl     ;powers of 10 
 .byte @372,@012,@037,@000 ;-100,000,000 
 .byte @000,@230,@226,@200 ;  10,000,000 
 .byte @377,@360,@275,@300 ;  -1,000,000 
 .byte @000,@001,@206,@240 ;     100,000 
 .byte @377,@377,@330,@360 ;     -10,000 
 .byte @000,@000,@003,@350 ;       1,000 
 .byte @377,@377,@377,@234 ;        -100 
 .byte @000,@000,@000,@012 ;          10 
 .byte @377,@377,@377,@377 ;          -1 
fdcend 
 
; .byte @377,@337,@012,@200 ;-2,160,000 for time converter removed [901014] 
; .byte @000,@003,@113,@300 ;   216,000 
; .byte @377,@377,@163,@140 ;   -36,000 
; .byte @000,@000,@016,@020 ;     3,600 
; .byte @377,@377,@375,@250 ;      -600 
; .byte @000,@000,@000,@074 ;        60 
;timend 
 
logcn2 .byte 3    ;degree-1 
 .byte @177,@136,@126,@313,@171 ;0.43425594188 
 .byte @200,@023,@233,@013,@144 ;0.57658454134 
 .byte @200,@166,@070,@223,@026 ;0.96180075921 
 .byte @202,@070,@252,@073,@040 ;2.8853900728 
 
expcon .byte 7    ;degree-1 
 .byte @161,@064,@130,@076,@126 ;0.000021498763697 
 .byte @164,@026,@176,@263,@033 ;0.00014352314036 
 .byte @167,@057,@356,@343,@205 ;0.0013422634824 
 .byte @172,@035,@204,@034,@052 ;0.0096140170199 
 .byte @174,@143,@131,@130,@012 ;0.055505126860 
 .byte @176,@165,@375,@347,@306 ;0.24022638462 
 .byte @200,@061,@162,@030,@020 ;0.69314718600 
fone .byte @201,@000,@000,@000,@000 ;1.0 
 
logeb2 .byte @201,@070,@252,@073,@051 ;  log(e) base 2 
sqr05 .byte @200,@065,@004,@363,@064 ;0.707106781 sqr(0.5) 
sqr20 .byte @201,@065,@004,@363,@064 ;1.41421356 sqr(2.0) 
log2 .byte @200,@061,@162,@027,@370 ;0.693147181 ln(2) 
 
 
sincon .byte 5    ;degree-1 trig 
 .byte @204,@346,@032,@055,@033 
 .byte @206,@050,@007,@373,@370 
 .byte @207,@231,@150,@211,@001 
 .byte @207,@043,@065,@337,@341 
 .byte @206,@245,@135,@347,@050 
 .byte @203,@111,@017,@332,@242 
 
atncon .byte 11   ;degree-1 
 .byte @166,@263,@203,@275,@323 
 .byte @171,@036,@364,@246,@365 
 .byte @173,@203,@374,@260,@020 
 .byte @174,@014,@037,@147,@312 
 .byte @174,@336,@123,@313,@301 
 .byte @175,@024,@144,@160,@114 
 .byte @175,@267,@352,@121,@172 
 .byte @175,@143,@060,@210,@176 
 .byte @176,@222,@104,@231,@072 
 .byte @176,@114,@314,@221,@307 
 .byte @177,@252,@252,@252,@023 
 .byte @201,@000,@000,@000,@000 
 
 .page 
; Natural Log Function 
; 
; Calculation is by   LN(f*2^n) = (n+LOG2(f))*LN(2) 
; An approximation polynomial is used to calculate LOG2(f). 
 
 
log jsr sign ;is it positive? 
 beq fcerr ;can't tolerate neg or zero 
 
 lda facexp ;get exponent into (a) 
 sbc #$7f ;remove bias (carry is off) 
 pha  ;save exponent a while 
 lda #$80 
 sta facexp ;result is FAC in range (0.5,1) 
 lda #<sqr05 ;get pointer to sqr(0.5) 
 ldy #>sqr05 
 jsr romadd 
 lda #<sqr20 
 ldy #>sqr20 
 jsr romdiv 
 lda #<fone 
 ldy #>fone 
 jsr romsub 
 lda #<logcn2 
 ldy #>logcn2 
 jsr polyx ;evaluate approximation polynomial 
 lda #<neghlf ;add in last constant 
 ldy #>neghlf 
 jsr romadd 
 pla  ;get exponent back 
 jsr finlog 
 lda #<log2 ;multiply result by ln(2) 
 ldy #>log2 
 
 
rommlt jsr romupk 
 bra fmultt ;multiply together 
 
 
faddh lda #<fhalf 
 ldy #>fhalf 
 
romadd jsr romupk 
 bra faddt 
 
 
romsub jsr romupk 
 bra fsubt 
 
 
romdiv jsr romupk 
 bra fdivt 
 
 .page 
; Multiplication        FAC = ARG*FAC 
 
fmultt_c65  ;     [910402] 
 lda argsgn 
 eor facsgn 
 sta arisgn ;resultant sign 
 ldx facexp ;set signs on thing to multiply 
 bra fmultt ;go multiply 
 
fmult jsr conupk ;unpack the constant into arg for use 
 
fmultt beq multrt ;if FAC=0, return.  FAC is set 
 jsr muldiv ;fix up the exponents 
 lda #0  ;to clear result 
 sta resho 
 sta resmoh 
 sta resmo 
 sta reslo 
 lda facov 
 jsr mltpl1 ;*** THIS fixes the DBL-0 bug without causing other grief!  C128-04 FAB 
 lda faclo ;multiply arg by faclo 
 jsr mltply 
 lda facmo ;multiply arg by facmo 
 jsr mltply 
 lda facmoh 
 jsr mltpl1 ;*** THIS fixes the DBL-0 bug without causing other grief!  C128-04 FAB 
 lda facho ;multiply arg by facho 
 jsr mltpl1 
 bra movfr ;move result into FAC 
 
 .page 
mltply beq mulshf ;normalize result and return. shift result right 1 byte.  exits with .c=0 
mltpl1 lsr a 
 ora #$80 ;will flag end of shifting 
 
10$ tay 
 bcc 20$  ;if mult bit=0, just shift 
 clc 
 lda reslo 
 adc arglo 
 sta reslo 
 lda resmo 
 adc argmo 
 sta resmo 
 lda resmoh 
 adc argmoh 
 sta resmoh 
 lda resho 
 adc argho 
 sta resho 
 
20$ ror resho 
 ror resmoh 
 ror resmo 
 ror reslo 
 ror facov ;save for rounding 
 tya 
 lsr a  ;clear msb so we get a closer to 0 
 bne 10$  ;slow as a turtle 
 
dcat4 jsr _readst  ;get status 
 bne dcat10  ; if bad status 
 jsr _basin  ;get char 
 beq dcat5  ; if eol 
 jsr _bsout  ;echo char 
 bra dcat4  ;continue to process name until eol or err 
 
; Here on end of name 
 
dcat5 jsr crdo  ;output new line 
 jsr _stop  ;check stop key 
 beq dcat11  ; exit if stop request 
 
; Process next 
 
 ldy #2   ;perform 2 times 
 bra dcat3 
 
 
; Exit directory 
 
dcat10 jsr crdo  ;flush current line 
dcat11 jsr release_channels ;release cmd channel, restore terminal 
 lda #doslfn 
 bra close_out  ;     [900725] 
 
;[[command.ldir]] 
 .page 
; LDIR  same as DIR, except it buffers each line to reduce 
;       talker/listener turnaround time.  Even so, it is still 
; unacceptably slow for normal screen output, which is 
; why it was split out from the original DIRECTORY routine. 
; 
 
; Read block count 
 
ldir 
 lda #$c0  ;serial bus kludge for open4,4:cmd4:dir ???? 
 and $d609 
 trb $d609  ; disable fast serial bus 
 sta sid_speed_flag ; but save enables so we can restore them 
 
 ldy #3   ;loop counter (3=skip fake load adr & link bytes) 
1$ sty t3   ;save counter 
 ldx #doslfn 
 jsr _chkin 
 bcs ldir_end  ;problem?? 
 
10$ jsr _readst  ;check status 
 bne ldir_end  ; exit if bad status 
 jsr _basin  ;get block count 
 sta dosstr  ; buffer it 
 jsr _basin 
 sta dosstr+1 
 dec t3 
 bne 10$   ; continue eating bytes until we have block count 
 
; Read filename 
 
 ldx #1   ;buffer index-1 
20$ inx 
 jsr _readst  ;check status 
 bne ldir_end  ; exit if eof or bad status 
 jsr _basin  ;buffer next character 
 sta dosstr,x 
 bne 20$   ; loop until eol (null terminator) 
 
; Print one line of directory 
 
 jsr dcato  ;get output channel 
 ldx dosstr 
 lda dosstr+1 
 jsr linprt  ;print blocks 
 
 lda #' ' 
 jsr _bsout  ;print space 
 
 ldx #2 
30$ lda dosstr,x 
 beq 40$ 
 jsr _bsout  ;print filename (null terminated) 
 inx 
 bne 30$ 
 
40$ jsr crdo  ;print return 
 jsr _clrch 
 jsr _stop  ;check stop key 
 beq ldir_end  ; exit if stop request 
 
; Continue with next line 
 
 ldy #2   ;set to skip fake link bytes 
 bra 1$   ;loop 
 
 
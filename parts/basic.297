desc_free    ;free temporary descriptor, set up pointers to string. 
 lda facmo   ;get address of temp descriptor 
 ldy facmo+1 
 jsr fretms 
 ldy #0    ;get len, addr of string 
 jsr indfmo 
 tax 
 iny 
 jsr indfmo 
 pha 
 iny 
 jsr indfmo 
 tay 
 pla 
 sec    ;flag 'string found' 
 rts    ;return w/ x=len, (a,y)==> string 
 
;.end 
;[[command.collision]] 
 .page 
 .subttl COLLISION Command 
 
;***************************************************************** 
; COLLISION Command 
; 
; Syntax:  COLLISION n [,address] 
; 
; Where:   n= 1 ==> sprite / sprite 
;   2 ==> sprite / background 
;   3 ==> light pen 
; 
; Address ==> BASIC line number to trap to on interrupt 
;      (no address ==> disable trapping) 
;***************************************************************** 
 
collision 
 jsr getbyt  ;get type in .X 
 dex   ;adjust 1..3 to 0..2 
 cpx #3 
 bcs fcerr  ;value error 
 
 phx   ;save collision type 
 jsr optwrd  ;get address (line number) in .Y,.A (optional) 
 plx 
; php   ;save .C (.C == 1 ==> real value) 
 sta int_adr_hi,x ;save address given 
 sty int_adr_lo,x 
 
 lda intval  ;this records valid interrupts 
 ora sbits,x  ;set correct bit 
; plp 
 bcs 10$   ;..unless this is a 'clear', 
 eor sbits,x  ;..in which case we'll reset bit 
10$ sta intval 
 rts 
 
;.end 
;[[function.rcolor]] 
 .page 
 .subttl  RCOLOR Function 
 
;************************************************************************ 
;  RCOLOR (source)  --  return current color assigned to source 
;   0  :  Background color 
;   1  :  Foreground color 
;   2  :  Highlight color 
;   3  :  Border color 
;************************************************************************ 
 
negate_step                                                ;; @@7bab 258
                 lda sound_step_lo,y                       ;; @@7bab 258
                 eor #$ff                                  ;; @@7bae 258
                 clc                                       ;; @@7bb0 258
                 adc #1                                    ;; @@7bb1 258
                 sta sound_step_lo,y                       ;; @@7bb3 258
                 lda sound_step_hi,y                       ;; @@7bb6 258
                 eor #$ff                                  ;; @@7bb9 258
                 adc #0                                    ;; @@7bbb 258
                 sta sound_step_hi,y                       ;; @@7bbd 258
                 rts                                       ;; @@7bc0 258
 ;; @@7bc1 258
 ;; @@7bc1 258
; .page ;; @@7bc1 258
; Here is where BASIC_IRQ exits ;; @@7bc1 258
 ;; @@7bc1 258
basic_irq_end                                              ;; @@7bc1 258
                 dec irq_wrap_flag                        ; open the door to IRQ ;; @@7bc1 258
                 cli                                       ;; @@7bc4 258
                 rts                                       ;; @@7bc5 258
 ;; @@7bc6 258
; .page ;; @@7bc6 258
; Update sprite position subroutine ;; @@7bc6 258
 ;; @@7bc6 258
sprsub           pha                                      ; save angle phase ;; @@7bc6 258
                 clc                                       ;; @@7bc7 258
                 lda sprite_data+3,x                      ; add low bytes ;; @@7bc8 258
                 adc sprite_data+7,x                       ;; @@7bcb 258
                 sta sprite_data+7,x                       ;; @@7bce 258
                 lda sprite_data+4,x                      ; add high bytes ;; @@7bd1 258
                 adc sprite_data+8,x                       ;; @@7bd4 258
                 sta sprite_data+8,x                       ;; @@7bd7 258
                 pla                                      ; get angle sign ;; @@7bda 258
                 bcc _local_1257_30                       ; skip if no carry - do not update position ;; @@7bdb 258
                 lsr a                                     ;; @@7bdd 258
                 lsr a                                    ; test if positive or negative ;; @@7bde 258
                 lda vic,y                                ; ???vic_save ;; @@7bdf 258
                 bcs _local_1257_10                       ; skip if negative ;; @@7be2 258
                 adc #1                                   ; increment position ;; @@7be4 258
                 bra _local_1257_20                        ;; @@7be6 258
 ;; @@7be8 258
_local_1257_10   sbc #1                                   ; decrement position ;; @@7be8 258
                 cmp #$ff                                 ; set carry if underflow ;; @@7bea 258
_local_1257_20   sta vic,y                                ; decrement position  ???vic_save ;; @@7bec 258
_local_1257_30   rts                                       ;; @@7bef 258
 ;; @@7bf0 258
;.end ;; @@7bf0 258
; .page ;; @@7bf0 258
; .subttl  MOUSE ;; @@7bf0 258
 ;; @@7bf0 258
;*********************************************************************** ;; @@7bf0 258
;*   MOUSE  ON  [,[port] [,[sprite] [,[hotspot] [,X/Yposition] ]]] ;; @@7bf0 258
;*   MOUSE  OFF ;; @@7bf0 258
;*    where: port     = (1...3) for joyport 1, 2, or either (both) ;; @@7bf0 258
;*  sprite   = (0...7) sprite pointer ;; @@7bf0 258
;*  hotspot  = x,y offset in sprite, default 0,0 ;; @@7bf0 258
;*  position = normal, relative, or angluar coordinates ;; @@7bf0 258
;* ;; @@7bf0 258
;*      (defaults to sprite 0, port 2, last hotspot & position) ;; @@7bf0 258
;*********************************************************************** ;; @@7bf0 258
 ;; @@7bf0 258

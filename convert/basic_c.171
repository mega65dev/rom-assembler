rolshf           ror 2,x                                   ;; 5efe 171
                 ror 3,x                                   ;; 5f00 171
                 ror 4,x                                  ; one more time ;; 5f02 171
                 ror a                                     ;; 5f04 171
                 iny                                       ;; 5f05 171
                 bne shftr3                               ; $$$ (most expensive!!!) ;; 5f06 171
 ;; 5f08 171
shftrt           clc                                      ; clear output of FACOV ;; 5f08 171
                 rts                                       ;; 5f09 171
 ;; 5f0a 171
;.end ;; 5f0a 171
; .page ;; 5f0a 171
; .subttl Floating Point Math Package (CODE19) ;; 5f0a 171
 ;; 5f0a 171
; Constants used by LOG, EXP, TRIG, and others. ;; 5f0a 171
 ;; 5f0a 171
fr4              !byte @177,@000,@000,@000,@000           ; 1/4 ;; 5f0a 171
neghlf           !byte @200,@200,@000,@000,@000           ; -0.5 ;; 5f0f 171
fhalf            !byte @200,@000,@000,@000,@000           ; 0.5 ;; 5f14 171
tenc             !byte @204,@040,@000,@000,@000           ; 10.0 ;; 5f19 171
pival            !byte @202,@111,@017,@332,@241           ; pi ;; 5f1e 171
pi2              !byte @201,@111,@017,@332,@242           ; pi/2 ;; 5f23 171
twopi            !byte @203,@111,@017,@332,@242           ; pi*2 ;; 5f28 171
 ;; 5f2d 171
n0999            !byte $9b,$3e,$bc,$1f,$fd                 ;; 5f2d 171
n9999            !byte $9e,$6e,$6b,$27,$fd                 ;; 5f32 171
nmil             !byte $9e,$6e,$6b,$28,$00                 ;; 5f37 171
 ;; 5f3c 171
foutbl                                                    ; powers of 10 ;; 5f3c 171
                 !byte @372,@012,@037,@000                ; -100,000,000 ;; 5f3c 171
                 !byte @000,@230,@226,@200                ; 10,000,000 ;; 5f40 171
                 !byte @377,@360,@275,@300                ; -1,000,000 ;; 5f44 171
                 !byte @000,@001,@206,@240                ; 100,000 ;; 5f48 171
                 !byte @377,@377,@330,@360                ; -10,000 ;; 5f4c 171
                 !byte @000,@000,@003,@350                ; 1,000 ;; 5f50 171
                 !byte @377,@377,@377,@234                ; -100 ;; 5f54 171
                 !byte @000,@000,@000,@012                ; 10 ;; 5f58 171
                 !byte @377,@377,@377,@377                ; -1 ;; 5f5c 171
fdcend                                                     ;; 5f60 171
 ;; 5f60 171
; .byte @377,@337,@012,@200 ;-2,160,000 for time converter removed [901014] ;; 5f60 171
; .byte @000,@003,@113,@300 ;   216,000 ;; 5f60 171
; .byte @377,@377,@163,@140 ;   -36,000 ;; 5f60 171
; .byte @000,@000,@016,@020 ;     3,600 ;; 5f60 171
; .byte @377,@377,@375,@250 ;      -600 ;; 5f60 171
; .byte @000,@000,@000,@074 ;        60 ;; 5f60 171
;timend ;; 5f60 171
 ;; 5f60 171
logcn2           !byte 3                                  ; degree-1 ;; 5f60 171
                 !byte @177,@136,@126,@313,@171           ; 0.43425594188 ;; 5f61 171
                 !byte @200,@023,@233,@013,@144           ; 0.57658454134 ;; 5f66 171
                 !byte @200,@166,@070,@223,@026           ; 0.96180075921 ;; 5f6b 171
                 !byte @202,@070,@252,@073,@040           ; 2.8853900728 ;; 5f70 171
 ;; 5f75 171
expcon           !byte 7                                  ; degree-1 ;; 5f75 171
                 !byte @161,@064,@130,@076,@126           ; 0.000021498763697 ;; 5f76 171
                 !byte @164,@026,@176,@263,@033           ; 0.00014352314036 ;; 5f7b 171
                 !byte @167,@057,@356,@343,@205           ; 0.0013422634824 ;; 5f80 171
                 !byte @172,@035,@204,@034,@052           ; 0.0096140170199 ;; 5f85 171
                 !byte @174,@143,@131,@130,@012           ; 0.055505126860 ;; 5f8a 171
                 !byte @176,@165,@375,@347,@306           ; 0.24022638462 ;; 5f8f 171
                 !byte @200,@061,@162,@030,@020           ; 0.69314718600 ;; 5f94 171
fone             !byte @201,@000,@000,@000,@000           ; 1.0 ;; 5f99 171
 ;; 5f9e 171
logeb2           !byte @201,@070,@252,@073,@051           ; log(e) base 2 ;; 5f9e 171
sqr05            !byte @200,@065,@004,@363,@064           ; 0.707106781 sqr(0.5) ;; 5fa3 171
sqr20            !byte @201,@065,@004,@363,@064           ; 1.41421356 sqr(2.0) ;; 5fa8 171
log2             !byte @200,@061,@162,@027,@370           ; 0.693147181 ln(2) ;; 5fad 171
 ;; 5fb2 171
 ;; 5fb2 171
sincon           !byte 5                                  ; degree-1 trig ;; 5fb2 171
                 !byte @204,@346,@032,@055,@033            ;; 5fb3 171
                 !byte @206,@050,@007,@373,@370            ;; 5fb8 171
                 !byte @207,@231,@150,@211,@001            ;; 5fbd 171
                 !byte @207,@043,@065,@337,@341            ;; 5fc2 171
                 !byte @206,@245,@135,@347,@050            ;; 5fc7 171
                 !byte @203,@111,@017,@332,@242            ;; 5fcc 171
 ;; 5fd1 171
atncon           !byte 11                                 ; degree-1 ;; 5fd1 171
                 !byte @166,@263,@203,@275,@323            ;; 5fd2 171
                 !byte @171,@036,@364,@246,@365            ;; 5fd7 171
                 !byte @173,@203,@374,@260,@020            ;; 5fdc 171
                 !byte @174,@014,@037,@147,@312            ;; 5fe1 171
                 !byte @174,@336,@123,@313,@301            ;; 5fe6 171
                 !byte @175,@024,@144,@160,@114            ;; 5feb 171
                 !byte @175,@267,@352,@121,@172            ;; 5ff0 171
                 !byte @175,@143,@060,@210,@176            ;; 5ff5 171
                 !byte @176,@222,@104,@231,@072            ;; 5ffa 171
                 !byte @176,@114,@314,@221,@307            ;; 5fff 171
                 !byte @177,@252,@252,@252,@023            ;; 6004 171
                 !byte @201,@000,@000,@000,@000            ;; 6009 171
 ;; 600e 171
; .page ;; 600e 171
; Natural Log Function ;; 600e 171
; ;; 600e 171
; Calculation is by   LN(f*2^n) = (n+LOG2(f))*LN(2) ;; 600e 171
; An approximation polynomial is used to calculate LOG2(f). ;; 600e 171
 ;; 600e 171
 ;; 600e 171
log              jsr sign                                 ; is it positive? ;; 600e 171
                 beq fcerr                                ; can't tolerate neg or zero ;; 6011 171
 ;; 6014 171
                 lda facexp                               ; get exponent into (a) ;; 6014 171
                 sbc #$7f                                 ; remove bias (carry is off) ;; 6016 171
                 pha                                      ; save exponent a while ;; 6018 171
                 lda #$80                                  ;; 6019 171
                 sta facexp                               ; result is FAC in range (0.5,1) ;; 601b 171
                 lda #<sqr05                              ; get pointer to sqr(0.5) ;; 601d 171
                 ldy #>sqr05                               ;; 601f 171
                 jsr romadd                                ;; 6021 171
                 lda #<sqr20                               ;; 6024 171
                 ldy #>sqr20                               ;; 6026 171
                 jsr romdiv                                ;; 6028 171
                 lda #<fone                                ;; 602b 171
                 ldy #>fone                                ;; 602d 171
                 jsr romsub                                ;; 602f 171
                 lda #<logcn2                              ;; 6032 171
                 ldy #>logcn2                              ;; 6034 171
                 jsr polyx                                ; evaluate approximation polynomial ;; 6036 171
                 lda #<neghlf                             ; add in last constant ;; 6039 171
                 ldy #>neghlf                              ;; 603b 171
                 jsr romadd                                ;; 603d 171
                 pla                                      ; get exponent back ;; 6040 171
                 jsr finlog                                ;; 6041 171
                 lda #<log2                               ; multiply result by ln(2) ;; 6044 171
                 ldy #>log2                                ;; 6046 171
 ;; 6048 171
 ;; 6048 171
rommlt           jsr romupk                                ;; 6048 171
                 bra fmultt                               ; multiply together ;; 604b 171
 ;; 604d 171
 ;; 604d 171
faddh            lda #<fhalf                               ;; 604d 171
                 ldy #>fhalf                               ;; 604f 171
 ;; 6051 171
romadd           jsr romupk                                ;; 6051 171
                 bra faddt                                 ;; 6054 171
 ;; 6057 171
 ;; 6057 171
romsub           jsr romupk                                ;; 6057 171
                 bra fsubt                                 ;; 605a 171
 ;; 605d 171
 ;; 605d 171
romdiv           jsr romupk                                ;; 605d 171
                 bra fdivt                                 ;; 6060 171
 ;; 6063 171
; .page ;; 6063 171
; Multiplication        FAC = ARG*FAC ;; 6063 171
 ;; 6063 171
fmultt_c65                                                ; [910402] ;; 6063 171
                 lda argsgn                                ;; 6063 171
                 eor facsgn                                ;; 6065 171
                 sta arisgn                               ; resultant sign ;; 6067 171
                 ldx facexp                               ; set signs on thing to multiply ;; 6069 171
                 bra fmultt                               ; go multiply ;; 606b 171
 ;; 606d 171
fmult            jsr conupk                               ; unpack the constant into arg for use ;; 606d 171
 ;; 6070 171
fmultt           beq multrt                               ; if FAC=0, return.  FAC is set ;; 6070 171
                 jsr muldiv                               ; fix up the exponents ;; 6072 171
                 lda #0                                   ; to clear result ;; 6075 171
                 sta resho                                 ;; 6077 171
                 sta resmoh                                ;; 6079 171
                 sta resmo                                 ;; 607b 171
                 sta reslo                                 ;; 607d 171
                 lda facov                                 ;; 607f 171
                 jsr mltpl1                               ; *** THIS fixes the DBL-0 bug without causing other grief!  C128-04 FAB ;; 6081 171
                 lda faclo                                ; multiply arg by faclo ;; 6084 171
                 jsr mltply                                ;; 6086 171
                 lda facmo                                ; multiply arg by facmo ;; 6089 171
                 jsr mltply                                ;; 608b 171
                 lda facmoh                                ;; 608e 171
                 jsr mltpl1                               ; *** THIS fixes the DBL-0 bug without causing other grief!  C128-04 FAB ;; 6090 171
                 lda facho                                ; multiply arg by facho ;; 6093 171
                 jsr mltpl1                                ;; 6095 171
                 bra movfr                                ; move result into FAC ;; 6098 171
 ;; 609b 171
; .page ;; 609b 171
mltply           beq mulshf                               ; normalize result and return. shift result right 1 byte.  exits with .c=0 ;; 609b 171
mltpl1           lsr a                                     ;; 609e 171
                 ora #$80                                 ; will flag end of shifting ;; 609f 171
 ;; 60a1 171
_local_1170_10   tay                                       ;; 60a1 171
                 bcc _local_1170_20                       ; if mult bit=0, just shift ;; 60a2 171
                 clc                                       ;; 60a4 171
                 lda reslo                                 ;; 60a5 171
                 adc arglo                                 ;; 60a7 171
                 sta reslo                                 ;; 60a9 171
                 lda resmo                                 ;; 60ab 171
                 adc argmo                                 ;; 60ad 171
                 sta resmo                                 ;; 60af 171
                 lda resmoh                                ;; 60b1 171
                 adc argmoh                                ;; 60b3 171
                 sta resmoh                                ;; 60b5 171
                 lda resho                                 ;; 60b7 171
                 adc argho                                 ;; 60b9 171
                 sta resho                                 ;; 60bb 171
 ;; 60bd 171
_local_1170_20   ror resho                                 ;; 60bd 171
                 ror resmoh                                ;; 60bf 171
                 ror resmo                                 ;; 60c1 171
                 ror reslo                                 ;; 60c3 171
                 ror facov                                ; save for rounding ;; 60c5 171
                 tya                                       ;; 60c7 171
                 lsr a                                    ; clear msb so we get a closer to 0 ;; 60c8 171
                 bne _local_1170_10                       ; slow as a turtle ;; 60c9 171
 ;; 60cb 171

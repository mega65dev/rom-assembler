rolshf          ror     2,x                             
                ror     3,x                             
                ror     4,x                             ; one more time
                ror                                     
                iny                                     
                bne     shftr3                          ; $$$ (most expensive!!!)

shftrt          clc                                     ; clear output of FACOV
                rts                                     

;.end
;[[math.const]]



; Constants used by LOG, EXP, TRIG, and others.

fr4             !text 127,0,0,0,0                       ; 1/4
neghlf          !text 128,128,0,0,0                     ; -0.5
fhalf           !text 128,0,0,0,0                       ; 0.5
tenc            !text 132,32,0,0,0                      ; 10.0
pival           !text 130,73,15,218,161                 ; pi
pi2             !text 129,73,15,218,162                 ; pi/2
twopi           !text 131,73,15,218,162                 ; pi*2

n0999           !text $9b,$3e,$bc,$1f,$fd               
n9999           !text $9e,$6e,$6b,$27,$fd               
nmil            !text $9e,$6e,$6b,$28,$00               

foutbl                                                  ; powers of 10
                !text 250,10,31,0                       ; -100,000,000
                !text 0,152,150,128                     ; 10,000,000
                !text 255,240,189,192                   ; -1,000,000
                !text 0,1,134,160                       ; 100,000
                !text 255,255,216,240                   ; -10,000
                !text 0,0,3,232                         ; 1,000
                !text 255,255,255,156                   ; -100
                !text 0,0,0,10                          ; 10
                !text 255,255,255,255                   ; -1
fdcend                                                  

; .byte @377,@337,@012,@200 ;-2,160,000 for time converter removed [901014]
; .byte @000,@003,@113,@300 ;   216,000
; .byte @377,@377,@163,@140 ;   -36,000
; .byte @000,@000,@016,@020 ;     3,600
; .byte @377,@377,@375,@250 ;      -600
; .byte @000,@000,@000,@074 ;        60
;timend

logcn2          !text 3                                 ; degree-1
                !text 127,94,86,203,121                 ; 0.43425594188
                !text 128,19,155,11,100                 ; 0.57658454134
                !text 128,118,56,147,22                 ; 0.96180075921
                !text 130,56,170,59,32                  ; 2.8853900728

expcon          !text 7                                 ; degree-1
                !text 113,52,88,62,86                   ; 0.000021498763697
                !text 116,22,126,179,27                 ; 0.00014352314036
                !text 119,47,238,227,133                ; 0.0013422634824
                !text 122,29,132,28,42                  ; 0.0096140170199
                !text 124,99,89,88,10                   ; 0.055505126860
                !text 126,117,253,231,198               ; 0.24022638462
                !text 128,49,114,24,16                  ; 0.69314718600
fone            !text 129,0,0,0,0                       ; 1.0

logeb2          !text 129,56,170,59,41                  ; log(e) base 2
sqr05           !text 128,53,4,243,52                   ; 0.707106781 sqr(0.5)
sqr20           !text 129,53,4,243,52                   ; 1.41421356 sqr(2.0)
log2            !text 128,49,114,23,248                 ; 0.693147181 ln(2)


sincon          !text 5                                 ; degree-1 trig
                !text 132,230,26,45,27                  
                !text 134,40,7,251,248                  
                !text 135,153,104,137,1                 
                !text 135,35,53,223,225                 
                !text 134,165,93,231,40                 
                !text 131,73,15,218,162                 

atncon          !text 11                                ; degree-1
                !text 118,179,131,189,211               
                !text 121,30,244,166,245                
                !text 123,131,252,176,16                
                !text 124,12,31,103,202                 
                !text 124,222,83,203,193                
                !text 125,20,100,112,76                 
                !text 125,183,234,81,122                
                !text 125,99,48,136,126                 
                !text 126,146,68,153,58                 
                !text 126,76,204,145,199                
                !text 127,170,170,170,19                
                !text 129,0,0,0,0                       

;[[math.log]]

; Natural Log Function
;
; Calculation is by   LN(f*2^n) = (n+LOG2(f))*LN(2)
; An approximation polynomial is used to calculate LOG2(f).


log             jsr     sign                            ; is it positive?
                +lbeq   fcerr                           ; can't tolerate neg or zero

                lda     facexp                          ; get exponent into (a)
                sbc     #$7f                            ; remove bias (carry is off)
                pha                                     ; save exponent a while
                lda     #$80                            
                sta     facexp                          ; result is FAC in range (0.5,1)
                lda     #<sqr05                         ; get pointer to sqr(0.5)
                ldy     #>sqr05                         
                jsr     romadd                          
                lda     #<sqr20                         
                ldy     #>sqr20                         
                jsr     romdiv                          
                lda     #<fone                          
                ldy     #>fone                          
                jsr     romsub                          
                lda     #<logcn2                        
                ldy     #>logcn2                        
                jsr     polyx                           ; evaluate approximation polynomial
                lda     #<neghlf                        ; add in last constant
                ldy     #>neghlf                        
                jsr     romadd                          
                pla                                     ; get exponent back
                jsr     finlog                          
                lda     #<log2                          ; multiply result by ln(2)
                ldy     #>log2                          


rommlt          jsr     romupk                          
                bra     fmultt                          ; multiply together


faddh           lda     #<fhalf                         
                ldy     #>fhalf                         

romadd          jsr     romupk                          
                +lbra   faddt                           


romsub          jsr     romupk                          
                +lbra   fsubt                           


romdiv          jsr     romupk                          
                +lbra   fdivt                           

;[[math.multiply]]

; Multiplication        FAC = ARG*FAC

fmultt_c65                                              ; [910402]
                lda     argsgn                          
                eor     facsgn                          
                sta     arisgn                          ; resultant sign
                ldx     facexp                          ; set signs on thing to multiply
                bra     fmultt                          ; go multiply

fmult           jsr     conupk                          ; unpack the constant into arg for use

fmultt          beq     multrt                          ; if FAC=0, return.  FAC is set
                jsr     muldiv                          ; fix up the exponents
                lda     #0                              ; to clear result
                sta     resho                           
                sta     resmoh                          
                sta     resmo                           
                sta     reslo                           
                lda     facov                           
                jsr     mltpl1                          ; *** THIS fixes the DBL-0 bug without causing other grief!  C128-04 FAB
                lda     faclo                           ; multiply arg by faclo
                jsr     mltply                          
                lda     facmo                           ; multiply arg by facmo
                jsr     mltply                          
                lda     facmoh                          
                jsr     mltpl1                          ; *** THIS fixes the DBL-0 bug without causing other grief!  C128-04 FAB
                lda     facho                           ; multiply arg by facho
                jsr     mltpl1                          
                +lbra   movfr                           ; move result into FAC


mltply          +lbeq   mulshf                          ; normalize result and return. shift result right 1 byte.  exits with .c=0
mltpl1          lsr                                     
                ora     #$80                            ; will flag end of shifting

l171_1          tay                                     
                bcc     l171_2                          ; if mult bit=0, just shift
                clc                                     
                lda     reslo                           
                adc     arglo                           
                sta     reslo                           
                lda     resmo                           
                adc     argmo                           
                sta     resmo                           
                lda     resmoh                          
                adc     argmoh                          
                sta     resmoh                          
                lda     resho                           
                adc     argho                           
                sta     resho                           

l171_2          ror     resho                           
                ror     resmoh                          
                ror     resmo                           
                ror     reslo                           
                ror     facov                           ; save for rounding
                tya                                     
                lsr                                     ; clear msb so we get a closer to 0
                bne     l171_1                          ; slow as a turtle


                 * = $2000                                

basic                                                     
                 jmp hard_reset                           
                 jmp soft_reset                           
                 jmp basic_irq                            
                 jmp basic_nmi                            ; (removed)    [910523] audio

soft_reset                                                ; warm start BASIC...
                 jsr release_channels                     ; restore default terminal I/O channels
                 lda #doslfn                              ; restore reserved disk channel
                 sec                                      ; not a real close
                 jsr _close                               
                 jsr Clear_DS                             ; zap DS$ just in case
; (might have been in Monitor or building DS$)
                 jsr init_sound_sprites                   ; init interrupt & dma stuff   [910523]
                 jsr init_stack                           ; restore stack
                 lda #1                                   
                 tsb _init_status                         ; tell Kernel to give BASIC a call at IRQ time
                 bra go_ready                             ; enable IRQ, print READY, and go MAIN


hard_reset                                                
                 jsr init_vectors                         ; init vectors
                 jsr init_storage                         ; init variables, voices,  & download RAM code
                 jsr signon_message                       ; print initialization message

                 lda #0                                   ; init bank pointers   [900509]
                 sta text_bank                            
                 sta helper                               ; reset all LIST flags
                 lda #1                                   
                 sta var_bank                             
                 lda #2                                   
                 sta highlight_color                      ; set highlight color (2=red)
                 ldx #<basic+3                            
                 stx _restart_vector                      ; point system restart vector at warm start entry
                 jsr init_stack                           ; initialize system stack pointer
                 lda #1                                   
                 tsb _init_status                         ; tell Kernel to give BASIC a call at IRQ time
                 jsr ($8000)                              ; initialize graphics
                 jsr _phoenix                             ; call cartridges, check out expansion card
                 jsr autobootCSG                          ; attempt to boot program from disk

go_ready                                                  
                 cli                                      ; enable IRQ
                 +lbra ready                              

; .page
init_storage                                              
                 lda #76                                  ; 'jmp' opcode
                 sta jmper                                
                 sta usrpok                               

                 lda #<errguf                             ; init USR vector to 'undef'd function'  [910226] FAB
                 ldy #>errguf                             
                 sta usrpok+1                             
                 sty usrpok+2                             

                 lda #<flpint                             ; ???? why keep
                 ldy #>flpint                             
                 sta adray1                               
                 sty adray1+1                             

                 lda #<givayf                             ; ???? why keep
                 ldy #>givayf                             
                 sta adray2                               
                 sty adray2+1                             

; Download CHRGET (and INDSUB code????) to RAM
;
; ldx #endmov-chrget_pattern
;1$ lda chrget_pattern-1,x
; sta chrget-1,x
; dex
; bne 1$

                 ldx #0                                   
                 stx zero                                 ; zero constant
                 stx zero+1                               
                 stx zero+2                               
                 stx bits                                 ; reset bit/byte shifter
                 stx channl                               ; default channels
                 stx runmod                               ; direct mode
                 stx lastpt+1                             
                 stx autinc                               ; turn off auto increment
                 stx autinc+1                             
                 stx rndx                                 ; zero-ing MSB will guarantee a legal value
; stx dosfa  ;zero device number     [910429]

                 stx intval                               ; reset all BASIC IRQ stuff
                 stx int_trip_flag                        ; (BASIC IRQ enabled in init_voices)
                 stx int_trip_flag+1                      
                 stx int_trip_flag+2                      
                 stx lightpen_xpos                        
                 stx lightpen_ypos                        

; stx mvdflg  ;flag '8k graphics screen not allocated'
; stx width  ;init to single-width lines
; stx scalem  ;turn off scaleing
; stx filflg

; inx   ;.x=1 ???? why init stack with $0101 ????
; stx buf-3
; stx buf-4

; ldy #88   ;zero out sprite information area
;2$ sta sprite_data,y ;???? this is done later at init_as_0
; dey
; bpl 2$

; ldx #13
; stx foreground  ;init bit map's fg color to light green
; ldx #1
; stx multicolor_1 ;init mc1 to white
; ldx #2
; stx multicolor_2 ;init mc2 to red
; jsr set_packed_color ;set up packed fg/bg and fg/mc1 bytes

                 ldx _default_drive                       
                 stx dosfa                                ; init device number to system default   [910429]

                 ldx #$80                                 ; bank 0 with I/O????
                 stx current_bank                         ; set default bank for PEEK,POKE,BOOT,SYS,WAIT,BLOAD/SAVE

                 ldx #tempst                              
                 stx temppt                               ; init temp descriptor pointer

                 ldx #<baswrk                             ; set up bottom of bank 0 (text area)
                 ldy #>baswrk                             
                 stx txttab                               
                 sty txttab+1                             

                 lda #<varbgn                             ; set up bottom of bank 1 (storage area)
                 ldy #>varbgn                             
                 sta vartab                               
                 sty vartab+1                             

                 lda #<bank_0_top                         ; set up top of bank 0
                 ldy #>bank_0_top                         
                 sta max_mem_0                            
                 sty max_mem_0+1                          

                 lda #<bank_1_top                         ; set up  top of bank 1
                 ldy #>bank_1_top                         
                 sta max_mem_1                            
                 sty max_mem_1+1                          

                 lda #0                                   ; init text input buffer  (these are for autoboot)
                 sta buf                                  
                 dec                                      
                 sta curlin+1                             ; init line pointer
                 ldx #<buf_txtptr                         ; init txtptr
                 ldy #>buf_txtptr                         
                 stx txtptr                               
                 sty txtptr+1                             

; Set up sprite pointers

                 lda #sprite_base/64+7                    
                 ldy #7                                   
l1_1             bbr7 _mode,l1_2                          
                 sta sprite_ptrs_40,y                     ; 40 col screen
                 bra l1_3                                 
l1_2             sta sprite_ptrs_80,y                     ; 80 col screen
l1_3             dec                                      
                 dey                                      
                 bpl l1_1                                 

; Zero out sprite movement stuff and some VIC stuff too

                 lda #0                                   
                 ldx #init_as_0                           
l1_4             sta sprite_data,x                        
                 dex                                      
                 bpl l1_4                                 

                 jsr init_sound_sprites                   ; init misc. interrupt & dma stuff

; lda #$d0  ;initialize pointers to character ROM
; sta upper_graphic
; lda #$d8
; sta upper_lower

                 +lbra init_text                          ; go to 'new'

; .page

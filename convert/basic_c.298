rcolor           jsr conint                               ; evaluate integer argument, put in .X
; jsr put_io_in_map

                 cpx #4                                   
                 +lbcs fcerr                              ; illegal qty
                 txa                                      
                 asl                                      ; make into word pointer
                 tax                                      
                 lda color_source,x                       ; get address of source
                 sta grapnt                               
                 lda color_source+1,x                     
                 sta grapnt+1                             
                 ldy #0                                   
                 lda (grapnt),y                           ; read source (aways system space or I/O????)
                 and #$0f                                 ; mask unused bits
                 tay                                      
; iny   ; make color match keytops
                 +lbra sngflt                             ; float 1 byte in .Y

color_source                                              
                 !word vic+33,_color,highlight_color,vic+32 

; .page
; .subttl Graphic Functions

; Return graphic screen status & parameters      [910826]
; RGRAPHIC (screen, param) where param = 0 open (1), closed (0), or invalid (>1)
;            1 width  (0=320, 1=640, 2=1280)
;            2 height (0=200, 1=400)
;            3 depth (1-8 bitplanes)
;            4 bitplanes used  (bitmask)
;            5 bank A blocks used (bitmask)
;            6 bank B blocks used (bitmask)
;            7 drawscreen # (0-3)
;            8 viewscreen # (0-3)
;            9 drawmodes  (bitmask)
;           10 pattern type  (bitmask)
;
; Requires a kludge, because RGR used to be a normal 1-arg function in the C128
; but now it takes two args.

rgraphic                                                  
; jsr CheckGraphicMode ;verify screen open
                 pla                                      ; remove token from stack
                 jsr PushParms                            ; preserve Graphics parameters & LINNUM  [910820]

                 jsr chkopn                               ; check for open paren
                 jsr getbyt                               ; get screen # in .X
                 stx GKI__parm1                           
                 jsr combyt                               ; get param # in .X
                 cpx #10+1                                ; [911028]
                 bcs _local_1297_1                        ; illegal param #
                 phx                                      
                 jsr chkcls                               ; check for closing parens

                 jsr ($8038)                              ; read screen params
_local_1297_1    +lbcs fcerr                              ; bad input????

                 lda GKI__parm2                           
                 plx                                      ; get back desired param #
                 dex                                      
                 bpl _local_1297_10                       
                 eor #$80                                 ; make 0=closed, 1=open, >1=invalid
                 lsr                                      
                 lsr                                      
                 bra _local_1297_12                       ; return screen open status

_local_1297_10   dex                                      
                 bpl _local_1297_20                       
_local_1297_12   lsr                                      
_local_1297_15   lsr                                      
                 lsr                                      
                 lsr                                      
                 and #3                                   
                 bra _local_1297_40                       ; return width, height

_local_1297_20   dex                                      
                 bpl _local_1297_25                       
                 and #8                                   
                 bra _local_1297_15                       
_local_1297_25   dex                                      
                 bpl _local_1297_30                       
                 and #7                                   ; return depth
                 inc                                      ; make depth 1-8
                 bra _local_1297_40                       

_local_1297_30   lda GKI__parm3,x                         ; return bp bask, banks, etc.
_local_1297_40   tay                                      
                 jsr sngflt                               ; float 1 byte arg in .y

                 jsr PopParms                             ; restore Graphics parameters & LINNUM
                 rts                                      

; .page
; Return the color of a given X,Y pixel location on the drawscreen  [910801]
;  PIXEL (x,y)


tron                                                      ; trace mode on
                 smb5 runmod                              ; trcflg
                 rts                                      


troff                                                     ; trace mode off
                 rmb5 runmod                              ; trcflg
                 rts                                      


;.end
; .page
; .subttl  RREG

; RREG - Return values of 6502 registers following a SYS call.
;
; Syntax : RREG [.A variable [,[.X[...Z] variable] [,[.S variable] ]]]

rreg             lda #0                                   
                 sta count                                

_local_1064_10   jsr chrgot                               
                 beq _local_1064_50                       ; reached end of statement- done
                 cmp #','                                 ; skip this arg?
                 beq _local_1064_30                       ; branch if so
                 jsr ptrget                               ; get pointer to target variable
                 sta forpnt                               ; a little bit of set up so we can share LET code
                 sty forpnt+1                             
                 lda valtyp                               ; what kind of variable name did ptrget find?
                 +lbne chkerr                             ; type mismatch error if string

                 ldy count                                ; which register's value are we looking for?
                 lda _a_reg,y                             ; .A, .X, .Y, & .Z are contiguious
                 cpy #4                                   
                 bne _local_1064_20                       
                 lda _s_reg                               ; but .S isn't

_local_1064_20   tay                                      ; low byte in .Y
                 lda #0                                   ; high byte of zero
                 jsr givayf                               ; go float it
                 lda intflg                               ; set conditions for type of var (int/float)
                 jsr qintgr                               ; ..and use part of LET to do the work

_local_1064_30   inc count                                ; 5 registers to do
                 lda count                                
                 cmp #5                                   
                 bcs _local_1064_50                       
                 jsr chrgot                               ; was this e-o-statement?
                 beq _local_1064_50                       
                 jsr chrget                               ; not e-o-s, skip over comma,
                 bne _local_1064_10                       ; ..and go do next

_local_1064_50   rts                                      

;.end
; .page
; .subttl MID$

; Alternate use of the MID$ function, as the target of an assignment.
;
; MID$(string_var,starting_position [,length]) = string_expression


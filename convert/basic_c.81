n1_reset                                                
                lda     renum_tmp_1                     
                sta     facho+1                         
                lda     renum_tmp_1+1                   
                sta     facho                           
                +lbra   reset_txtptr                    


;*************************** LINE_ADD **********************************

; Adds n2 (new line increment) to line number stored in facho if the
; current line number (highds) >= n3 (line to start renumbering with).
; The line is then scanned.

line_add                                                
                lda     highds                          ; if line# >= start# then incr new#
                sec                                     
                sbc     hightr                          
                lda     highds+1                        
                sbc     hightr+1                        
                bcc     scan_thru                       

line_inc                                                
                jsr     new_num                         

scan_thru                                               
                jsr     chargt                          ; scan to end of line
                bne     scan_thru                       
                rts                                     


;**************************** NEW_NUM **********************************

; Adds n2 (the new line increment) to the line number stored in facho.

new_num                                                 
                lda     facho+1                         ; increment new line#
                clc                                     
                adc     renum_tmp_2                     
                sta     facho+1                         
                lda     facho                           
                adc     renum_tmp_2+1                   
                sta     facho                           
                rts                                     


;********************** CHARGT & CHARGT_X2 *****************************

; Chargt simulates chrget but doesn't ignore spaces & carry has no
; significance.  Chargt_x2 executes chargt twice.
; Used by Renumber, Find/Change, etc.

chargt_x2                                               
                inw     txtptr                          ; jsr chargt
chargt                                                  
                ldy     #0                              ; increment txtptr
                inw     txtptr                          
                +lbra   indtxt                          


;***********************************************************************
;************************* MEMORY MOVE ROUTINES ************************
;***********************************************************************

;****************************** MOVEINIT *******************************

; Setup for Renumber memory move.

move_init                                               
                lda     txtptr                          ; index1 = txtptr
                sta     index1                          
                lda     txtptr+1                        
                sta     index1+1                        

                lda     text_top                        ; index2 = text_top
                sta     index2                          
                lda     text_top+1                      
                sta     index2+1                        

                lda     #1                              ; move 1 character
                sta     count                           ; lo
                dec                                     
                sta     argmo                           ; hi

                rts                                     


;****************************** MOVEDOWN *******************************

; Move block of BASIC text from INDEX1+COUNT to INDEX2 down to INDEX1.
; Used by commands Renumber, Find/Change.

movedown                                                
                sec                                     ; set up DMA list:   [900524]
                lda     index2                          
                sbc     index1                          
                sta     dma1_cnt_lo                     ; cnt = index2-index1-count
                lda     index2+1                        
                sbc     index1+1                        
                sta     dma1_cnt_hi                     
                sec                                     
                lda     dma1_cnt_lo                     
                sbc     count                           ; lo
                sta     dma1_cnt_lo                     
                lda     dma1_cnt_hi                     
                sbc     argmo                           ; hi
                sta     dma1_cnt_hi                     

                clc                                     
                lda     index1                          
                sta     dma1_dest_lo                    ; dest = index1
                adc     count                           
                sta     dma1_src_lo                     ; src = index1+count
                lda     index1+1                        
                sta     dma1_dest_hi                    
                adc     argmo                           
                sta     dma1_src_hi                     

                lda     text_bank                       ; bank = BASIC text bank
; and #%00001111  ;      [910520] F018A
                sta     dma1_src_bank                   
                sta     dma1_dest_bank                  

execute_DMA1                                            ; [910620] Edit
                lda     #0                              
                sta     dma1_cmd                        ; command = copy from startpoint
                sta     dma1_subcmd                     ; [910520] F018A

                sta     dma_ctlr+2                      ; dma_list bank
                lda     #>dma1_cmd                      
                sta     dma_ctlr+1                      ; dma_list hi
                lda     #<dma1_cmd                      
                sta     dma_ctlr                        ; dma_list lo & trigger
                rts                                     


;******************************* MOVEUP ********************************

; Move block of BASIC text from INDEX1 to INDEX2 up to INDEX2+COUNT.
; Used by commands Renumber, Find/Change.

moveup                                                  
                sec                                     ; set up DMA list:   [900524]
                lda     index2                          
                sbc     index1                          
                sta     dma1_cnt_lo                     ; cnt = index2-index1
                lda     index2+1                        
                sbc     index1+1                        
                sta     dma1_cnt_hi                     

                dew     index2                          ; (index2 = text_top = end+1)
                clc                                     
                lda     index2                          
                sta     dma1_src_lo                     ; src = index2
                adc     count                           
                sta     dma1_dest_lo                    ; dest = index2+count
                lda     index2+1                        
                sta     dma1_src_hi                     
                adc     argmo                           
                sta     dma1_dest_hi                    

; lda dma_ctlr+3  ;dma controller version    [910520] F018A
; and #1
; beq l81_1   ; F018    removed [910808] F018B
                lda     #%00110000                      ; F018A,B
l81_1           sta     dma1_cmd                        ; command=copy, source=start   [910102]
; php
                lda     text_bank                       ; bank = BASIC text bank   [910520] F018A
; plp   ;version?    removed [910808] F018B
; bne l81_2   ; F018A
; and #%00001111  ; F018     [910102]
; ora #%01000000  ;(copy source=endpoint)    [910102]
l81_2           sta     dma1_src_bank                   ; banks
                sta     dma1_dest_bank                  

                lda     #0                              ; [910219]
; sta dma1_cmd  ; command = copy, source=endpoint
                sta     dma1_subcmd                     ; [910520] F018A
; dec a   ;      [910219]
                sta     dma_ctlr+2                      ; dma_list bank
                ldy     #>dma1_cmd                      ; dma_list
                lda     #<dma1_cmd                      
                sty     dma_ctlr+1                      ; dma_list hi
                sta     dma_ctlr                        ; dma_list lo & trigger
                rts                                     

;.end

;[[command.for]]

; FOR
;
; Push the following information on the run-time stack:
;
; (bottom)   highest memory
; =========================
;  txtptr    address of next statement
;  txtptr+1
;  ========
;  curlin+1  current line number
;  curlin
;  ========
;  to lo
;  to mo
;  to moh    'to' value
;  to ho
;  to exp
;  ========
;  step sign
;  step lo
;  step mo
;  step moh  'step' value
;  step ho
;  step exp
;  ========
;  forpnt+1  'for' variable pointer
;  forpnt
;  ========
;  'for' token       <== (tos) top of stack pointer
; ============================
; (top of stack)  lowest memory



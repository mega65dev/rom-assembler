foutim          ldx #$80                                ; first pass through, accb has msb set
fout2           lda faclo                               
                clc                                     
                adc foutbl+3,y                          
                sta faclo                               
                lda facmo                               
                adc foutbl+2,y                          
                sta facmo                               
                lda facmoh                              
                adc foutbl+1,y                          
                sta facmoh                              
                lda facho                               
                adc foutbl,y                            
                sta facho                               
                inx                                     ; it was done yet another time
                bcs l182_1                              
                bpl fout2                               
                bmi l182_2                              

l182_1          bmi fout2                               
l182_2          txa                                     
                bcc l182_3                              ; can use (a) as is
                eor #$ff                                ; find 11.(a)
                adc #10                                 ; c is still on to complete negation, and will always be on after

l182_3          adc #'0'-1                              ; get a character to print
                iny                                     
                iny                                     
                iny                                     
                iny                                     
                sty fdecpt                              
                ldy fbufpt                              
                iny                                     ; point to place to store output
                tax                                     
                and #$7f                                ; get rid of msb
                sta fbuffr-1,y                          
                dec deccnt                              
                bne l182_4                              ; not time for dp yet
                lda #'.'                                
                iny                                     
                sta fbuffr-1,y                          ; store dp

l182_4          sty fbufpt                              ; store pointer for later
                ldy fdecpt                              
                txa                                     ; complement accb
                eor #$ff                                ; complement acca
                and #$80                                ; save only msb
                tax                                     
                cpy #fdcend-foutbl                      
; beq l182_5  ;for time converter ????   removed [901014]
; cpy #timend-foutbl
                bne fout2                               ; continue with output

l182_5          ldy fbufpt                              ; get back output pointer
l182_6          lda fbuffr-1,y                          ; remove trailing blanks
                dey                                     
                cmp #'0'                                
                beq l182_6                              
                cmp #'.'                                
                beq l182_7                              ; ran into dp,  stop
                iny                                     ; something else, save it

l182_7          lda #'+'                                
                ldx tenexp                              
                beq fout17                              ; no exponent to output
                bpl l182_8                              
                lda #0                                  
                sec                                     
                sbc tenexp                              
                tax                                     
                lda #'-'                                ; exponent is negative

l182_8          sta fbuffr+1,y                          ; store sign of exponent
                lda #'E'                                
                sta fbuffr,y                            ; store the 'E' character
                txa                                     

                ldx #'0'-1                              
                sec                                     
l182_9          inx                                     ; move closer to output value
                sbc #10                                 ; subtract 10
                bcs l182_9                              ; not negative yet

                adc #'9'+1                              ; get second output character
                sta fbuffr+3,y                          ; store high digit
                txa                                     
                sta fbuffr+2,y                          ; store low digit
                lda #0                                  ; put in terminator
                sta fbuffr+4,y                          
                bra fout20                              ; return



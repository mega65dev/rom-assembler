rdrt0            dex                                      ; case cdd=sd
rdrt1            +lbra sdp1                               ; get next symbol


; Syntax checker DOS write

chk1             and #$e6                                 ; for HEADER, DLOAD, SCRATCH, TYPE, LIST
                 +lbne snerr                              

chk2             lda parsts                               ; for DSAVE
                 and #1                                   
                 cmp #1                                   ; check required parameters
                 +lbne snerr                              ; error if 1 missing
                 lda parsts                               ; reload for return
                 rts                                      


chk3             and #$e7                                 ; for COLLECT
                 +lbne snerr                              ; check optional parameters
                 rts                                      


chk4             and #$c4                                 ; for COPY, CONCAT
                 +lbne snerr                              ; check optional parameters
                 lda parsts                               
chk5             and #3                                   ; for RENAME
                 cmp #3                                   ; check required parameters
                 +lbne snerr                              
                 lda parsts                               ; reload for return
                 rts                                      


chk6             and #5                                   ; for APPEND, DOPEN
                 cmp #5                                   ; check required parameters
                 +lbne snerr                              
                 lda parsts                               ; reload for rts
                 rts                                      

;.end



; Allocate DS$ if nesessary, but use old DS$ string otherwise
; Called by DS$ and DS

Check_DS                                                  ; chkds.
                 lda dsdesc                               
                 beq Read_DS_1                            ; branch if DS$ is not in memory
                 rts                                      ; else return & use old one


; Allocate DS$ if necessary & Read DOS error channel

Read_DS                                                   ; errchl.
                 lda dsdesc                               ; has DS$ space been allocated?
                 bne Read_DS_2                            ; yes

Read_DS_1                                                 
                 lda #40                                  ; no- get 40 char string
                 sta dsdesc                               
                 jsr getspa                               ; allocate space for DS$
                 stx dsdesc+1                             ; low address of string
                 sty dsdesc+2                             ; high   "    "    "
                 ldx #dsdesc+1                            ; set up string back pointer to dsdesc
                 ldy #40                                  
                 lda #<dsdesc                             
                 jsr sta_far_ram1                         ; sta (dsdesc+1),y
                 iny                                      
                 lda #>dsdesc                             
                 jsr sta_far_ram1                         ; sta (dsdesc+1),y

Read_DS_2                                                 
                 ldx dosfa                                ; fa
                 cpx #2                                   
                 bcs l244_1                               ; if =0 or 1 use default  [910429]
                 ldx _default_drive                       ; (was dosffn)   [900710]
                 stx dosfa                                
l244_1           lda #doslfn                              ; la (reserved la)
                 ldy #$6f                                 ; sa (command channel)
                 jsr _setlfs                              
                 lda #0                                   ; no name (so no setbank)
                 jsr _setnam                              
                 jsr _open                                ; get command channel
                 ldx #doslfn                              
                 jsr _chkin                               
                 bcs l244_4                               ; a problem (file already open??)

                 ldy #$ff                                 
l244_2           iny                                      ; read disk error message
                 jsr _basin                               
                 cmp #cr                                  
                 beq l244_3                               ; if eol
                 ldx #dsdesc+1                            
                 jsr sta_far_ram1                         ; sta (dsdesc+1),y copy to DS$
                 cpy #40                                  
                 bcc l244_2                               ; loop unless too long

l244_3           lda #0                                   ; errend.
                 ldx #dsdesc+1                            ; terminate DS$ with a null
                 jsr sta_far_ram1                         ; sta (dsdesc+1),y

                 jsr _clrch                               ; shut down command channel
                 lda #doslfn                              
                 sec                                      ; not a real close
                 jmp _close                               ; close it and rts

l244_4           pha                                      ; errbad.
                 jsr l244_3                               
                 jsr Clear_DS                             ; flag 'no DS available'
                 plx                                      ; get error
                 +lbra error                              


; Clear_DS subroutine - forget current DS$ message, if any
;


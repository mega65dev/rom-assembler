gtbytc          jsr chrget                              

getbyt          jsr frmnum                              ; read formula into FAC

conint          jsr posint                              ; convert the FAC to a single byte int
                ldx facmo                               
                +lbne fcerr                             ; result must be <= 255
                ldx faclo                               
                jmp chrgot                              ; set condition codes on terminator


getnum                                                  ; get 2-byte value in y,a: check for a comma, get 1 byte val in x
                jsr frmnum                              ; get address
                jsr getadr                              ; get that location

combyt                                                  ; check for a comma, get a 1 byte value in x
                jsr chkcom                              ; check for comma
                bra getbyt                              ; get something to store and return


comwrd          jsr chkcom                              

getwrd          jsr frmnum                              ; get an unsigned 2-byte value in y,a

getadr          lda facsgn                              ; for this entry, value can't be < 0
                +lbmi fcerr                             ; function call error

getsad                                                  ; get a signed 2-byte value in (y,a), ///entry from sprcor
                lda facexp                              ; examine exponent
                cmp #145                                
                +lbcs fcerr                             ; function call error
                jsr qint                                ; integerize it
                lda facmo                               
                ldy facmo+1                             
                sty poker                               
                sta poker+1                             
                rts                                     ; it's all done

;.end
;[[math.ext3]]



; Floating Point Math Package configuration:
;
; Throughout the math package the floating point format is as follows:
;
; the sign of the first bit of the mantissa.
; the mantissa is 24 bits long.
; the binary point is to the left of the msb.
; number = mantissa * 2 ~ exponent.
; the mantissa is positive with a 1 assumed to be where the sign bit is.
; the sign of the exponent is the first bit of the exponent.
; the exponent is stored in excess $80, i.e., with a bias of +$80.
; so, the exponent is a signed 8 bit number with $80 added to it.
; an exponent of zero means the number is zero.
; the other bytes may not be assumed to be zero.
; to keep the same number in the fac while shifting,
; to shift right, exp:=exp+1.
; to shift left,  exp:=exp-1.
;
; In memory the number looks like this:
; the exponent as a signed number +$80.
; the sign bit in 7, bits 2-8 of mantissa are bits 6-0.
;  remember bit 1 of mantissa is always a one.
; bits 9-16 of the mantissa.
; bits 17-24 of the mantisa.
;
; Arithmetic routine calling conventions:
;
;   For one-argument functions:
; the argument is in the fac.
; the result is left in the fac.
;   For two-argument operations:
; the first argument is in arg (argexp,ho,mo,lo and argsgn).
;       the second argument is in the fac.
; the result is left in the fac.
;
; The "t" entry points to the two argument operations have both arguments setup
; in the respective registers. Before calling arg may have been popped off the
; stack and into arg, for example. The other entry point assumes (xreg) points
; to the argument somewhere in memory. it is unpacked into arg by "conupk".
;
; On the stack, the sgn is pushed on first, the lo,mo,ho, and finally exp.
; Note all things are kept unpacked in arg, fac and on the stack.
;
; It is only when something is stored away that it is packed to four bytes,
; the unpacked format has a sn byte reflecting the sign of the ho turned on.
; The exp is the same as stored format. This is done for speed of operation.


fsub            jsr conupk                              

fsubt           lda facsgn                              
                eor #$ff                                ; complement it
                sta facsgn                              
                eor argsgn                              ; complement arisgn
                sta arisgn                              
                lda facexp                              ; set codes on facexp
                bra faddt                               ; (y)=argexp

fadd5           jsr shiftr                              ; do a long shift
                bcc fadd4                               ; continue with addition

fadd            jsr conupk                              
faddt           +lbeq movfa                             ; if fac=0, result is in arg
                ldx facov                               
                stx oldov                               
                ldx #argexp                             ; default is shift argument
                lda argexp                              ; if arg=0, fac is result

faddc           tay                                     ; also copy (a) into (y)
                +lbeq zerrts                            ; return
                sec                                     
                sbc facexp                              
                beq fadd4                               ; no shifting
                bcc fadda                               ; branch if argexp < facexp
                sty facexp                              ; resulting exponent
                ldy argsgn                              ; since arg is bigger, its
                sty facsgn                              ; sign is sign of result
                eor #$ff                                ; shift a negative number of palces
                adc #0                                  ; complete negation, w/ c=1
                ldy #0                                  ; zero oldov
                sty oldov                               
                ldx #fac                                ; shift the FAC instead
                bra fadd1                               

fadda           ldy #0                                  
                sty facov                               

fadd1           cmp #$f9                                ; for speed and necessity.  gets most likely case to
;SHIFTR fastest and allows shifting of neg nums by QUINT
                bmi fadd5                               ; shift big
                tay                                     
                lda facov                               ; set facov
                lsr 1,x                                 ; gets 0 in the MSB
                jsr rolshf                              ; do the rolling

fadd4           bbr7 arisgn,fadd2                       ; get resulting sign and if positive, add. carry is clear
                ldy #facexp                             
                cpx #argexp                             ; fac is bigger
                beq l168_1                              
                ldy #argexp                             ; arg is bigger

l168_1          sec                                     ; subit.
                eor #$ff                                
                adc oldov                               
                sta facov                               
                lda 4,y                                 
                sbc 4,x                                 
                sta faclo                               
                lda 3,y                                 
                sbc 3,x                                 
                sta facmo                               
                lda 2,y                                 
                sbc 2,x                                 
                sta facmoh                              
                lda 1,y                                 
                sbc 1,x                                 
                sta facho                               


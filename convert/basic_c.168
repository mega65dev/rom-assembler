gtbytc           jsr chrget                                ;; 5d69 168
 ;; 5d6c 168
getbyt           jsr frmnum                               ; read formula into FAC ;; 5d6c 168
 ;; 5d6f 168
conint           jsr posint                               ; convert the FAC to a single byte int ;; 5d6f 168
                 ldx facmo                                 ;; 5d72 168
                 bne fcerr                                ; result must be <= 255 ;; 5d74 168
                 ldx faclo                                 ;; 5d77 168
                 jmp chrgot                               ; set condition codes on terminator ;; 5d79 168
 ;; 5d7c 168
 ;; 5d7c 168
getnum                                                    ; get 2-byte value in y,a: check for a comma, get 1 byte val in x ;; 5d7c 168
                 jsr frmnum                               ; get address ;; 5d7c 168
                 jsr getadr                               ; get that location ;; 5d7f 168
 ;; 5d82 168
combyt                                                    ; check for a comma, get a 1 byte value in x ;; 5d82 168
                 jsr chkcom                               ; check for comma ;; 5d82 168
                 bra getbyt                               ; get something to store and return ;; 5d85 168
 ;; 5d87 168
 ;; 5d87 168
comwrd           jsr chkcom                                ;; 5d87 168
 ;; 5d8a 168
getwrd           jsr frmnum                               ; get an unsigned 2-byte value in y,a ;; 5d8a 168
 ;; 5d8d 168
getadr           lda facsgn                               ; for this entry, value can't be < 0 ;; 5d8d 168
                 bmi fcerr                                ; function call error ;; 5d8f 168
 ;; 5d92 168
getsad                                                    ; get a signed 2-byte value in (y,a), ///entry from sprcor ;; 5d92 168
                 lda facexp                               ; examine exponent ;; 5d92 168
                 cmp #145                                  ;; 5d94 168
                 bcs fcerr                                ; function call error ;; 5d96 168
                 jsr qint                                 ; integerize it ;; 5d99 168
                 lda facmo                                 ;; 5d9c 168
                 ldy facmo+1                               ;; 5d9e 168
                 sty poker                                 ;; 5da0 168
                 sta poker+1                               ;; 5da2 168
                 rts                                      ; it's all done ;; 5da4 168
 ;; 5da5 168
;.end ;; 5da5 168
; .page ;; 5da5 168
; .subttl Floating Point Math Package (CODE18) ;; 5da5 168
 ;; 5da5 168
; Floating Point Math Package configuration: ;; 5da5 168
; ;; 5da5 168
; Throughout the math package the floating point format is as follows: ;; 5da5 168
; ;; 5da5 168
; the sign of the first bit of the mantissa. ;; 5da5 168
; the mantissa is 24 bits long. ;; 5da5 168
; the binary point is to the left of the msb. ;; 5da5 168
; number = mantissa * 2 ~ exponent. ;; 5da5 168
; the mantissa is positive with a 1 assumed to be where the sign bit is. ;; 5da5 168
; the sign of the exponent is the first bit of the exponent. ;; 5da5 168
; the exponent is stored in excess $80, i.e., with a bias of +$80. ;; 5da5 168
; so, the exponent is a signed 8 bit number with $80 added to it. ;; 5da5 168
; an exponent of zero means the number is zero. ;; 5da5 168
; the other bytes may not be assumed to be zero. ;; 5da5 168
; to keep the same number in the fac while shifting, ;; 5da5 168
; to shift right, exp:=exp+1. ;; 5da5 168
; to shift left,  exp:=exp-1. ;; 5da5 168
; ;; 5da5 168
; In memory the number looks like this: ;; 5da5 168
; the exponent as a signed number +$80. ;; 5da5 168
; the sign bit in 7, bits 2-8 of mantissa are bits 6-0. ;; 5da5 168
;  remember bit 1 of mantissa is always a one. ;; 5da5 168
; bits 9-16 of the mantissa. ;; 5da5 168
; bits 17-24 of the mantisa. ;; 5da5 168
; ;; 5da5 168
; Arithmetic routine calling conventions: ;; 5da5 168
; ;; 5da5 168
;   For one-argument functions: ;; 5da5 168
; the argument is in the fac. ;; 5da5 168
; the result is left in the fac. ;; 5da5 168
;   For two-argument operations: ;; 5da5 168
; the first argument is in arg (argexp,ho,mo,lo and argsgn). ;; 5da5 168
;       the second argument is in the fac. ;; 5da5 168
; the result is left in the fac. ;; 5da5 168
; ;; 5da5 168
; The "t" entry points to the two argument operations have both arguments setup ;; 5da5 168
; in the respective registers. Before calling arg may have been popped off the ;; 5da5 168
; stack and into arg, for example. The other entry point assumes (xreg) points ;; 5da5 168
; to the argument somewhere in memory. it is unpacked into arg by "conupk". ;; 5da5 168
; ;; 5da5 168
; On the stack, the sgn is pushed on first, the lo,mo,ho, and finally exp. ;; 5da5 168
; Note all things are kept unpacked in arg, fac and on the stack. ;; 5da5 168
; ;; 5da5 168
; It is only when something is stored away that it is packed to four bytes, ;; 5da5 168
; the unpacked format has a sn byte reflecting the sign of the ho turned on. ;; 5da5 168
; The exp is the same as stored format. This is done for speed of operation. ;; 5da5 168
; .page ;; 5da5 168
 ;; 5da5 168
fsub             jsr conupk                                ;; 5da5 168
 ;; 5da8 168
fsubt            lda facsgn                                ;; 5da8 168
                 eor #$ff                                 ; complement it ;; 5daa 168
                 sta facsgn                                ;; 5dac 168
                 eor argsgn                               ; complement arisgn ;; 5dae 168
                 sta arisgn                                ;; 5db0 168
                 lda facexp                               ; set codes on facexp ;; 5db2 168
                 bra faddt                                ; (y)=argexp ;; 5db4 168
 ;; 5db6 168
fadd5            jsr shiftr                               ; do a long shift ;; 5db6 168
                 bcc fadd4                                ; continue with addition ;; 5db9 168
 ;; 5dbb 168
fadd             jsr conupk                                ;; 5dbb 168
faddt            beq movfa                                ; if fac=0, result is in arg ;; 5dbe 168
                 ldx facov                                 ;; 5dc1 168
                 stx oldov                                 ;; 5dc3 168
                 ldx #argexp                              ; default is shift argument ;; 5dc5 168
                 lda argexp                               ; if arg=0, fac is result ;; 5dc7 168
 ;; 5dc9 168
faddc            tay                                      ; also copy (a) into (y) ;; 5dc9 168
                 beq zerrts                               ; return ;; 5dca 168
                 sec                                       ;; 5dcd 168
                 sbc facexp                                ;; 5dce 168
                 beq fadd4                                ; no shifting ;; 5dd0 168
                 bcc fadda                                ; branch if argexp < facexp ;; 5dd2 168
                 sty facexp                               ; resulting exponent ;; 5dd4 168
                 ldy argsgn                               ; since arg is bigger, its ;; 5dd6 168
                 sty facsgn                               ; sign is sign of result ;; 5dd8 168
                 eor #$ff                                 ; shift a negative number of palces ;; 5dda 168
                 adc #0                                   ; complete negation, w/ c=1 ;; 5ddc 168
                 ldy #0                                   ; zero oldov ;; 5dde 168
                 sty oldov                                 ;; 5de0 168
                 ldx #fac                                 ; shift the FAC instead ;; 5de2 168
                 bra fadd1                                 ;; 5de4 168
 ;; 5de6 168
fadda            ldy #0                                    ;; 5de6 168
                 sty facov                                 ;; 5de8 168
 ;; 5dea 168
fadd1            cmp #$f9                                 ; for speed and necessity.  gets most likely case to ;; 5dea 168
;SHIFTR fastest and allows shifting of neg nums by QUINT ;; 5dec 168
                 bmi fadd5                                ; shift big ;; 5dec 168
                 tay                                       ;; 5dee 168
                 lda facov                                ; set facov ;; 5def 168
                 lsr 1,x                                  ; gets 0 in the MSB ;; 5df1 168
                 jsr rolshf                               ; do the rolling ;; 5df3 168
 ;; 5df6 168
fadd4            bbr7 arisgn,fadd2                        ; get resulting sign and if positive, add. carry is clear ;; 5df6 168
                 ldy #facexp                               ;; 5df9 168
                 cpx #argexp                              ; fac is bigger ;; 5dfb 168
                 beq _local_1167_10                        ;; 5dfd 168
                 ldy #argexp                              ; arg is bigger ;; 5dff 168
 ;; 5e01 168
_local_1167_10   sec                                      ; subit. ;; 5e01 168
                 eor #$ff                                  ;; 5e02 168
                 adc oldov                                 ;; 5e04 168
                 sta facov                                 ;; 5e06 168
                 lda 4,y                                   ;; 5e08 168
                 sbc 4,x                                   ;; 5e0b 168
                 sta faclo                                 ;; 5e0d 168
                 lda 3,y                                   ;; 5e0f 168
                 sbc 3,x                                   ;; 5e12 168
                 sta facmo                                 ;; 5e14 168
                 lda 2,y                                   ;; 5e16 168
                 sbc 2,x                                   ;; 5e19 168
                 sta facmoh                                ;; 5e1b 168
                 lda 1,y                                   ;; 5e1d 168
                 sbc 1,x                                   ;; 5e20 168
                 sta facho                                 ;; 5e22 168
 ;; 5e24 168

for              lda #$80                                 
                 sta subflg                               ; no arrays(), no integers%
                 jsr let                                  ; get & set FOR variables
                 lda #for_token                           ; set up for call to see if
                 jsr search                               ; ..this 'for' variable is unique
                 beq _local_1081_10                       ; branch if not

; If the variable is not unique, (fndpnt) will point to last occurance
; in stack, and we will reset the stack to that point.  Otherwise we
; will adjust the pointer by 'lenfor' and start from that point.

                 lda #lenfor                              
                 jsr getstk                               ; updates stack pointer, error if overflow
                 jsr movtos                               ; (tos) => (fndpnt)

_local_1081_10   jsr movfnd                               ; (fndpnt) => (tos)   (redundant for new entries)
                 jsr datan                                ; find address of next statement
                 tya                                      ; offset from (txtptr) in y
                 ldy #lenfor-1                            

                 clc                                      ; Push address of next statement on stack
                 adc txtptr                               
                 sta (tos),y                              ; (common area)
                 lda txtptr+1                             
                 adc #0                                   
                 dey                                      
                 sta (tos),y                              ; (common area)

                 lda curlin+1                             ; Push current line number on stack
                 dey                                      
                 sta (tos),y                              ; (common area)
                 lda curlin                               
                 dey                                      
                 sta (tos),y                              ; (common area)

                 lda #to_token                            ; Look for TO, must appear
                 jsr synchr                               
                 jsr chknum                               ; get TO value
                 jsr frmnum                               
                 lda facsgn                               
                 ora #$7f                                 
                 and facho                                
                 sta facho                                

                 ldx #4                                   
                 ldy #lenfor-5                            
_local_1081_20   lda facexp,x                             ; Push faclo,mo,moh,ho,exp
                 sta (tos),y                              ; (common area)
                 dex                                      
                 dey                                      
                 bpl _local_1081_20                       

                 lda #<fone                               ; Push STEP value
                 ldy #>fone                               ; (point to default 'one' in ROM)
                 jsr movfm                                
                 jsr chrgot                               
                 cmp #step_token                          
                 bne _local_1081_30                       ; branch if no step given
                 jsr chrget                               
                 jsr frmnum                               

_local_1081_30   jsr sign                                 
                 pha                                      ; save sign for a moment
                 jsr round                                
                 pla                                      

                 ldy #lenfor-10                           
                 ldx #5                                   
_local_1081_40   sta (tos),y                              ; (common area)
                 lda facexp-1,x                           
                 dey                                      
                 dex                                      
                 bpl _local_1081_40                       

                 lda forpnt+1                             ; Finally push pointer to 'for' variable, & 'for' token
                 sta (tos),y                              ; (common area)
                 lda forpnt                               
                 dey                                      
                 sta (tos),y                              ; (common area)
                 lda #for_token                           
                 dey                                      
                 sta (tos),y                              ; (common area)
                 rts                                      

;.end
; .page
; .subttl  DELETE

; Delete a range of source   -or-   Delete a disk file
;
; Syntax: DELETE from# - to# (same range parameters as LIST)
;  DELETE "filename" (same parameters as SCRATCH)

; Determine which form of DELETE we have...


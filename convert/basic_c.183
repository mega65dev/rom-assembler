fout19           sta fbuffr-1,y                           ; store the character
fout17           lda #0                                   ; store the terminator
                 sta fbuffr,y                             

fout20           lda #<fbuffr                             
                 ldy #>fbuffr                             
                 rts                                      ; all done


; Exponentiation and Square Root Functions.
;
; square root function - sqr(a)
; use sqr(x) = x^.5

sqr              jsr movaf                                ; move FAC into ARG
                 lda #<fhalf                              
                 ldy #>fhalf                              

fpwr             jsr movfm                                ; put memory into FAC    ARG^MEM


; Last thing fetched is facexp into accx.
;
; Exponentiation --- x^y.
; n.b. 0^0=1
; First check if y=0, and if so the result is one.
; Next  check if x=0, and if so the result is zero.
; Then  check if x>0:
; if not check that y is an integer.
; if so negate x, so that lg doesn't give fcerr.
; If x is negative and y is odd, negate the result returned by exp.
; To compute the result use x^y = EXP((y*LOG(x))


fpwrt            beq exp                                  ; if FAC=0, just exponentiate that  ARG^FAC
                 lda argexp                               ; is x=0?
                 +lbeq zerof1                             ; zero FAC

                 ldx #<tempf3                             ; save it for later in a temp
                 ldy #>tempf3                             
                 jsr movmf                                ; FAC->MEM

                 lda argsgn                               ; note y=0 already. that's good, in case no one calls int.
                 bpl l183_1                               ; no problems if x>0
                 jsr int                                  ; integerize the FAC
                 lda #<tempf3                             ; get addr of comperand
                 ldy #>tempf3                             
                 jsr fcomp                                ; equal?
                 bne l183_1                               ; leave x neg. log will blow him out
;a=-1 and y is irrelavant
                 tya                                      ; negative x. make positive
                 ldy integr                               ; get evenness

l183_1           jsr movfa1                               ; alternate entry point.    ARG->FAC
                 phy                                      ; save evenness for later
                 jsr log                                  ; find log
                 lda #<tempf3                             ; multiply FAC times LOG(x)
                 ldy #>tempf3                             
                 jsr fmult                                
                 jsr exp                                  ; exponentiate the FAC
                 pla                                      
                 lsr                                      ; is it even?
                 bcc negrts                               ; yes. or x>0
;negate the number in FAC



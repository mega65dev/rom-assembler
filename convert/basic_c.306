angmlt                                                     ;; @@bb11 306
                 ldy #sinval-vwork                        ; get offset to angle value ;; @@bb11 306
                 bcc _local_1305_10                       ; get cosine/sine offset ;; @@bb13 306
                 ldy #cosval-vwork                         ;; @@bb15 306
 ;; @@bb17 306
_local_1305_10   lda angsgn                                ;; @@bb17 306
                 adc #2                                   ; correct phase for cosine to look as sine ;; @@bb1a 306
                 lsr a                                     ;; @@bb1c 306
                 lsr a                                     ;; @@bb1d 306
                 php                                      ; save if carry - means negative angle value ;; @@bb1e 306
                 jsr settwo                               ; get angle fraction in y/a ;; @@bb1f 306
                 cpy #$ff                                 ; test if value should be 1 ;; @@bb22 306
                 bcc _local_1305_20                       ; skip if not ;; @@bb24 306
                 txa                                       ;; @@bb26 306
                 tay                                      ; get offset to integer ;; @@bb27 306
                 jsr settwo                               ; just get integer - multiplied by 1 ;; @@bb28 306
                 bcs _local_1305_30                        ;; @@bb2b 306
 ;; @@bb2d 306
_local_1305_20   jsr twobyt                               ; multiply integer times angle value ;; @@bb2d 306
_local_1305_30   plp                                      ; get sign of angle ;; @@bb30 306
                 bcc invert                               ; invert result if negative,do rts ;; @@bb31 306
                 rts                                       ;; @@bb33 306
 ;; @@bb34 306
; .page ;; @@bb34 306
;************************************************************* ;; @@bb34 306
;  angdst  -  set up values for distance * angles ;; @@bb34 306
;       vwork+x = x & y distances ;; @@bb34 306
;       a = angles : ang1,ang2,ang3,ang4,0,0,0,0 ;; @@bb34 306
;       get  xdist1 = xdist1 * angle-1 ;; @@bb34 306
;     ydist1 = ydist1 * angle-2 ;; @@bb34 306
;     xdist2 = xdist2 * angle-3 ;; @@bb34 306
;     ydist2 = ydist2 * angle-4 ;; @@bb34 306
;************************************************************* ;; @@bb34 306
; ;; @@bb34 306
;angdst ;; @@bb34 306
; sta angcnt      ;save angles ;; @@bb34 306
; ldx #xdist1-vwork ;; @@bb34 306
;angd10 ;; @@bb34 306
; asl angcnt ;; @@bb34 306
; jsr angmlt      ;multiply angle * distance ;; @@bb34 306
; sta vwork,x ;; @@bb34 306
; tya  ;save results ;; @@bb34 306
; sta vwork+1,x ;; @@bb34 306
; inx  ;point to next distance ;; @@bb34 306
; inx ;; @@bb34 306
; cpx #disend-vwork ;; @@bb34 306
; bcc angd10 ;loop 4 times ;; @@bb34 306
;angd20 rts ;; @@bb34 306
 ;; @@bb34 306
;.end ;; @@bb34 306
; .page ;; @@bb34 306
; GRAPHIC8.SRC ;; @@bb34 306
;**************************************************************** ;; @@bb34 306
;  docolr  --  set up color for 8x8 charcater cell ;; @@bb34 306
;   x = row number  --  y = column number ;; @@bb34 306
;**************************************************************** ;; @@bb34 306
; ;; @@bb34 306
;docolr lda _ldtb2,x      ;put address of video ram into grapnt ;; @@bb34 306
; sta grapnt ;; @@bb34 306
; lda graphic_ldtb1,x ;point to bit mapped color area ;; @@bb34 306
; sta grapnt+1 ;; @@bb34 306
; ;; @@bb34 306
; lda colsel  ;get current color source selected ;; @@bb34 306
; ;; @@bb34 306
; bne _local_1305_10   ;branch if NOT background ;; @@bb34 306
; lda fg_bg ;; @@bb34 306
; bit _graphm  ;test if mode = hires ;; @@bb34 306
; bpl 25$   ;if so, go set up byte ;; @@bb34 306
; rts   ;else exit ;; @@bb34 306
; ;; @@bb34 306
;_local_1305_10 cmp #2 ;; @@bb34 306
; bne _local_1305_30   ;branch if NOT multi-color 1 ;; @@bb34 306
; ;; @@bb34 306
;_local_1305_20 lda fg_mc1  ;get correct packed colors for multicolor mode. ;; @@bb34 306
;25$ and #$0f ;; @@bb34 306
; sta z_p_temp_1 ;; @@bb34 306
; lda (grapnt),y ;; @@bb34 306
; and #$f0 ;; @@bb34 306
; ora z_p_temp_1 ;; @@bb34 306
; sta (grapnt),y ;; @@bb34 306
; rts ;; @@bb34 306
; ;; @@bb34 306
;_local_1305_30 bcs 40$   ;branch if multicolor 2 ;; @@bb34 306
; ;; @@bb34 306
; lda fg_bg  ;here for foreground. get packed colors. ;; @@bb34 306
; and #$f0 ;; @@bb34 306
; sta z_p_temp_1 ;; @@bb34 306
; lda (grapnt),y  ;do foreground ;; @@bb34 306
; and #$0f ;; @@bb34 306
; ora z_p_temp_1 ;; @@bb34 306
; sta (grapnt),y ;; @@bb34 306
; rts ;; @@bb34 306
; ;; @@bb34 306
;40$ lda grapnt+1  ;do multicolor 2 ;; @@bb34 306
; and #3 ;; @@bb34 306
; ora #>color_ram_hi ;set up to point to high color area ;; @@bb34 306
; sta grapnt+1 ;; @@bb34 306
; ;; @@bb34 306
; lda #0   ;put i/o in map ;; @@bb34 306
; sta mmu_config_reg ;; @@bb34 306
; ;; @@bb34 306
; sei ;; @@bb34 306
; lda _6510_data_reg ;; @@bb34 306
; pha ;; @@bb34 306
; and #%11111110  ;point cpu at correct nybble bank ;; @@bb34 306
; sta _6510_data_reg ;; @@bb34 306
; lda multicolor_2 ;; @@bb34 306
; sta (grapnt),y ;; @@bb34 306
; pla ;; @@bb34 306
; sta _6510_data_reg ;; @@bb34 306
; cli ;; @@bb34 306
; rts ;; @@bb34 306
; ;; @@bb34 306
; ;; @@bb34 306
; ;; @@bb34 306
;graphic_ldtb1   ;_ldtb1 adjusted for an org at color_ram_lo ;; @@bb34 306
;99$=color_ram_lo ;; @@bb34 306
;1$=color_ram_lo+40*1 ;; @@bb34 306
;2$=color_ram_lo+40*2 ;; @@bb34 306
;3$=color_ram_lo+40*3 ;; @@bb34 306
;4$=color_ram_lo+40*4 ;; @@bb34 306
;5$=color_ram_lo+40*5 ;; @@bb34 306
;6$=color_ram_lo+40*6 ;; @@bb34 306
;7$=color_ram_lo+40*7 ;; @@bb34 306
;8$=color_ram_lo+40*8 ;; @@bb34 306
;9$=color_ram_lo+40*9 ;; @@bb34 306
;_local_1305_10=color_ram_lo+40*10 ;; @@bb34 306
;11$=color_ram_lo+40*11 ;; @@bb34 306
;12$=color_ram_lo+40*12 ;; @@bb34 306
;13$=color_ram_lo+40*13 ;; @@bb34 306
;14$=color_ram_lo+40*14 ;; @@bb34 306
;15$=color_ram_lo+40*15 ;; @@bb34 306
;16$=color_ram_lo+40*16 ;; @@bb34 306
;17$=color_ram_lo+40*17 ;; @@bb34 306
;18$=color_ram_lo+40*18 ;; @@bb34 306
;19$=color_ram_lo+40*19 ;; @@bb34 306
;_local_1305_20=color_ram_lo+40*20 ;; @@bb34 306
;21$=color_ram_lo+40*21 ;; @@bb34 306
;22$=color_ram_lo+40*22 ;; @@bb34 306
;23$=color_ram_lo+40*23 ;; @@bb34 306
;24$=color_ram_lo+40*24 ;; @@bb34 306
; ;; @@bb34 306
; .byte >99$,>1$,>2$,>3$,>4$,>5$,>6$,>7$,>8$,>9$,>_local_1305_10 ;; @@bb34 306
; .byte >11$,>12$,>13$,>14$,>15$,>16$,>17$,>18$,>19$ ;; @@bb34 306
; .byte >_local_1305_20,>21$,>22$,>23$,>24$ ;; @@bb34 306
 ;; @@bb34 306
; .page ;; @@bb34 306
;****************************************************************** ;; @@bb34 306
;  getpos - get address in graphic bit map into grapnt ;; @@bb34 306
;      x = bit offset into byte specified (0-7) ;; @@bb34 306
;      y = offset to byte within 8x8 character cell ;; @@bb34 306
;      a = bit mask to the bit (or bits if multicolor mode) ;; @@bb34 306
;****************************************************************** ;; @@bb34 306
; ;; @@bb34 306
;getpos jsr divpos      ;get xpos/ypos to column/row position ;; @@bb34 306
; bcs grprts      ;abort if position too large ;; @@bb34 306
; ;; @@bb34 306
;getps1 tya  ;get addr for row (X) and col (Y) in grapnt ;; @@bb34 306
; clc ;; @@bb34 306
; adc _ldtb2,x ;add column position to low byte offset ;; @@bb34 306
; sta grapnt ;; @@bb34 306
; lda _ldtb1,x ;get high byte screen address ;; @@bb34 306
; adc #0  ;add any carry ;; @@bb34 306
; asl grapnt ;; @@bb34 306
; rol a ;; @@bb34 306
; asl grapnt ;mult by 8 to get offset into 8k area ;; @@bb34 306
; rol a ;; @@bb34 306
; asl grapnt ;; @@bb34 306
; rol a ;; @@bb34 306
; sta grapnt+1 ;; @@bb34 306
; ;; @@bb34 306
; lda ypos ;; @@bb34 306
; and #07 ;; @@bb34 306
; tay  ;get byte offset into 8x8 char cell ;; @@bb34 306
; lda xpos ;; @@bb34 306
; bit _graphm ;; @@bb34 306
; php ;; @@bb34 306
; bpl grpos3 ;skip if not multicolor mode ;; @@bb34 306
; asl a  ;shift x-pos for multicolor mode ;; @@bb34 306
; ;; @@bb34 306
;grpos3 and #07 ;; @@bb34 306
; tax ;; @@bb34 306
; lda rbits,x ;get bit mask ;; @@bb34 306
; plp ;; @@bb34 306
; bpl grprts ;done if not multicolor mode ;; @@bb34 306
; inx ;; @@bb34 306
; ora rbits,x ;mask for 2 bits if multicolor mode ;; @@bb34 306
;grprts rts ;; @@bb34 306
; ;; @@bb34 306
;rbits .byte   $80,$40,$20,$10,$08,$04,$02,$01 ;; @@bb34 306
 ;; @@bb34 306
; .page ;; @@bb34 306
;************************************************************** ;; @@bb34 306
;  divpos  --  convert xpos to column number ;; @@bb34 306
;  convert ypos to row number ;; @@bb34 306
;  return carry set if either above limits ;; @@bb34 306
;************************************************************** ;; @@bb34 306
; ;; @@bb34 306
;divpos lda xpos+1 ;; @@bb34 306
; lsr a ;; @@bb34 306
; bne _local_1305_20       ;out of bounds if greater than 1 ;; @@bb34 306
; lda xpos ;; @@bb34 306
; ror a ;; @@bb34 306
; lsr a  ;get column position = xpos/8 ;; @@bb34 306
; bit _graphm ;; @@bb34 306
; bmi _local_1305_10  ;skip if multicolor mode ;; @@bb34 306
; lsr a  ;divide by 8 if a hires or text mode ;; @@bb34 306
;_local_1305_10 tay ;; @@bb34 306
; cpy #llen ;; @@bb34 306
; bcs _local_1305_20  ;error exit if out of bounds ;; @@bb34 306
; lda ypos+1 ;; @@bb34 306
; bne _local_1305_20  ;out of bounds error if not = 0 ;; @@bb34 306
; lda ypos ;; @@bb34 306
; lsr a ;; @@bb34 306
; lsr a  ;get row number = ypos/8 ;; @@bb34 306
; lsr a ;; @@bb34 306
; tax ;; @@bb34 306
; cmp #nlines ;compare to max number of rows ;; @@bb34 306
; rts  ;carry clr if okay ;; @@bb34 306
;_local_1305_20 sec ;; @@bb34 306
; rts ;; @@bb34 306
 ;; @@bb34 306
; .page ;; @@bb34 306
;*************************************************************** ;; @@bb34 306
;   SCALXY  - Scale the x & y coordinates found in vwork+x ;; @@bb34 306
;*************************************************************** ;; @@bb34 306
; ;; @@bb34 306
;scalxy lda scalem ;; @@bb34 306
; beq sclrts      ;do nothing if scaling off ;; @@bb34 306
; ;; @@bb34 306
; lda scale_x ;; @@bb34 306
; ldy scale_x+1 ;; @@bb34 306
; jsr doscal      ;scale in the x-direction ;; @@bb34 306
; ;; @@bb34 306
; lda scale_y ;; @@bb34 306
; ldy scale_y+1 ;scale in the y direction ;; @@bb34 306
; ;; @@bb34 306
;doscal jsr twobyt ;multiply * coordinate ;; @@bb34 306
; sta vwork,x ;; @@bb34 306
; tya ;; @@bb34 306
; inx  ;store back into original position ;; @@bb34 306
; sta vwork,x ;; @@bb34 306
; inx ;; @@bb34 306
;sclrts ;; @@bb34 306
; rts ;; @@bb34 306
 ;; @@bb34 306
;.end ;; @@bb34 306
; .page ;; @@bb34 306
;GRAPHICS9.SRC ;; @@bb34 306
;*************************************************************** ;; @@bb34 306
;   DOTWO  - Add      two 2-byte values if carry clear ;; @@bb34 306
;  Subtract two 2-byte values if carry set ;; @@bb34 306
;*************************************************************** ;; @@bb34 306
 ;; @@bb34 306

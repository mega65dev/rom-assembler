search          sta     srchtk                          ; save token to search for
                jsr     movtos                          ; tos => fndpnt


; Test if pointer is at bottom of stack.  If so, the item was not found.

l29_1           lda     fndpnt                          
                cmp     #<stkbot                        
                bne     l29_2                           ; (fndpnt) <> bottom, ok
                lda     fndpnt+1                        ; lsb's the same, test msb's
                cmp     #>stkbot                        
                beq     l29_6                           ; stack empty, rts

l29_2           ldy     #0                              
                lda     srchtk                          ; what are we looking for?
                cmp     #for_token                      ; 'for' tokens are special cases
                bne     l29_4                           

; Looking for a 'for' token.  If next token examined is not a 'for' token,
; return with z = 0.  Otherwise, check the pointer to its 'for' variable.
; If the variable pointer = (forpnt) or if (forpnt) = $FFxx, return with z=1.
; Otherwise, set up x with length of a 'for' entry, and use the usual
; mechanisim for examining the next entry.

                cmp     (fndpnt),y                      ; indirect ok- looking at runtime stack????
                bne     l29_7                           ; not 'for', do rts with z = 0
                ldy     #2                              ; point to msb of 'for' variable
                lda     forpnt+1                        
                cmp     #$ff                            
                beq     l29_7                           ; do rts with z = 1
                cmp     (fndpnt),y                      
                bne     l29_3                           ; not right variable, keep looking.
                dey                                     
                lda     forpnt                          ; test lsb
                cmp     (fndpnt),y                      
                beq     l29_7                           ; a hit! rts with z = 1

l29_3           ldx     #lenfor                         
                bra     l29_5                           ; keep looking

l29_4           lda     (fndpnt),y                      
                cmp     srchtk                          ; is this the correct type of entry?
                beq     l29_7                           ; rts with z = 1

; The entry on top of the run-time stack is not the entry we are looking for.
; Find out what is there, and advance temp. pointer past it.

                ldx     #lenfor                         ; is it a 'for' entry?
                cmp     #for_token                      
                beq     l29_5                           
                ldx     #5                              ; must be gosub or do by default

l29_5           txa                                     
                clc                                     
                adc     fndpnt                          
                sta     fndpnt                          
                bcc     l29_1                           
                inc     fndpnt+1                        
                bra     l29_1                           ; always

l29_6           ldy     #1                              ; clear z flag
l29_7           rts                                     


; GETSTK
;
; Add (.A) elements to top of run-time stack.  Error if result exceeds tos.


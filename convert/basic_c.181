inprt           jsr _primm                              
                !text " IN ",0                          

curprt          lda curlin+1                            
                ldx curlin                              

linprt          sta facho                               
                stx facho+1                             
                ldx #$90                                ; exponent of 16
                sec                                     ; number is positive
                jsr floatc                              
                jsr foutc                               
                +lbra strout                            ; print and return


fout            ldy #1                                  
foutc           lda #' '                                ; if positive, print space
                bbr7 facsgn,l181_1                      
                lda #'-'                                ; if neg
l181_1          sta fbuffr-1,y                          ; store the character
                sta facsgn                              ; make FAC pos for QINT
                sty fbufpt                              ; save for later
                iny                                     
                lda #'0'                                ; get zero to type if FAC=0
                ldx facexp                              
                +lbeq fout19                            

                lda #0                                  
                cpx #$80                                ; is number < 1?
                beq l181_2                              ; no
                bcs l181_3                              

l181_2          lda #<nmil                              ; mult by 10~6
                ldy #>nmil                              
                jsr rommlt                              
                lda #$f7                                
l181_3          sta deccnt                              ; save count or zero it

l181_4          lda #<n9999                             
                ldy #>n9999                             
                jsr fcomp                               ; is number > 999999.499 or 999999999.5?
                beq l181_9                              ; go to biggies
                bpl l181_7                              ; yes, make it smaller

l181_5          lda #<n0999                             
                ldy #>n0999                             
                jsr fcomp                               ; is number > 99999.9499 or 99999999.90625?
                beq l181_6                              
                bpl l181_8                              ; yes. done multiplying

l181_6          jsr mul10                               ; make it bigger
                dec deccnt                              
                bne l181_5                              ; see if that does it (this always goes)

l181_7          jsr div10                               ; make it smaller
                inc deccnt                              
                bne l181_4                              ; see if that does it (this always goes)

l181_8          jsr faddh                               ; add a half to round up


l181_9          jsr qint                                ; biggies.
                ldx #1                                  ; decimal point count
                lda deccnt                              
                clc                                     
                adc #$0a                                ; should number be printed in E notation?  (ie, is number .lt. .01?)
                bmi l181_10                             ; yes
                cmp #$0b                                ; is it > 999999 or 9999999999?
                bcs l181_11                             ; yes, use E notation
                adc #$ff                                ; number of places before decimal point
                tax                                     ; put into accx
                lda #2                                  ; no E notation
l181_10         sec                                     

l181_11         sbc #2                                  ; effectively add 5 to orig exp
                sta tenexp                              ; that is the exponent to print
                stx deccnt                              ; number of decimal places
                txa                                     
                beq l181_12                             
                bpl l181_14                             ; some places before dec pnt

l181_12         ldy fbufpt                              ; get pointer to output
                lda #'.'                                ; put in "."
                iny                                     
                sta fbuffr-1,y                          
                txa                                     
                beq l181_13                             
                lda #'0'                                ; get the ensuing zero
                iny                                     
                sta fbuffr-1,y                          

l181_13         sty fbufpt                              ; save it for later

l181_14         ldy #0                                  


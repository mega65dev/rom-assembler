strdon           jsr strprt                               

newchr           jsr chrgot                               ; reget last character

print            beq crdo                                 ; terminator only, so print crlf
                 cmp #using_token                         
                 +lbeq using                              



printc           beq prtrts  ;here after seeing TAB(x) or "," or " ; " in which case
;a terminator does not mean a crlf but just RTS
                 cmp #tab_token                           ; TAB function?
                 beq taber                                ; yes (c=1)
                 cmp #spc_token                           ; space function?
                 clc                                      ; clear carry
                 beq taber                                ; yes (c=0)
                 cmp #','                                 ; comma?
                 beq comprt                               ; yes
                 cmp #';'                                 ; a semicolon?
                 beq notabr                               ; yes

                 jsr frmevl                               ; evaluate the formula
                 bbs7 valtyp,strdon                       ; branch if a string
                 jsr fout                                 
                 jsr strlit                               ; build descriptor
                 jsr strprt                               ; print the number
                 jsr outspc                               ; print a space
                 bra newchr                               ; always goes



crdo             lda #cr                                  
                 jsr outch                                ; outdo

crfin            bbr7 channl,prtrts                       
                 lda #lf                                  
                 jsr outch                                ; outdo
; eor #$ff  ;????

prtrts           rts                                      



comprt           sec                                      
                 jsr _plot                                ; get tab position in x
                 tya                                      
                 sec                                      
morco1           sbc #column_width                        
                 bcs morco1                               
                 eor #$ff                                 
                 adc #1                                   
                 bne aspac                                

taber            php                                      ; remember if SPC(c=0) or TAB(c=1) function
                 sec                                      
                 jsr _plot                                ; read tab position
                 sty trmpos                               
                 jsr gtbytc                               ; get value into accx
                 cmp #')'                                 
                 +lbne snerr                              
                 plp                                      
                 bcc xspac                                
                 txa                                      
                 sbc trmpos                               
                 bcc notabr                               ; negative, don't print any
aspac            tax                                      
xspac            inx                                      
xspac2           dex                                      
                 bne xspac1                               


notabr           jsr chrget                               ; reget last character
                 bra printc                               ; don't call crdo


xspac1           jsr outspc                               
                 bne xspac2                               

; .page
; STROUT Routine
;
; Print the string pointed to by .x.  It must end with a null byte.

strout           jsr strlit                               ; get a string literal

strprt           jsr frefac                               ; return temp pointer
                 tax                                      ; put count into counter
                 ldy #0                                   
                 inx                                      ; move one ahead
strpr2           dex                                      
                 beq prtrts                               ; all done
                 jsr indin1_ram1                          ; lda (index),y
                 jsr outch                                ; outdo
                 iny                                      
                 cmp #cr                                  
                 bne strpr2                               
                 jsr crfin                                ; type rest of carriage return
                 bra strpr2                               ; and on and on

outspc           lda channl                               ; if terminal print skip chr., else print space
                 bne realsp                               
                 lda #29                                  ; CBM cursor right (non-destructive skip char)
                 !text $2c                                

realsp           lda #' '                                 ; space
                 !text $2c                                

outqst           lda #'?'                                 

;outdo
                 jmp outch                                ; output char in .a
; and #$ff ;????
; rts

;.end
; .page
; .subttl INPUT  GET  READ  LINPUT

get              jsr errdir                               ; direct mode illegal
                 sta z_p_temp_1                           ; flag to distinguish between GET and GETKEY

                 cmp #'#'                                 ; is it GET# ?
                 beq getn                                 ; yes
                 cmp #key_token                           ; is it GETKEY ?
                 bne gettty                               ; no, must be plain GET
                 jsr chrget                               ; yes, skip over KEY token
                 bra gettty                               


getn             jsr chrget                               ; GET# move up to next byte
                 jsr getbyt                               ; get channel into x
                 lda #','                                 ; comma?
                 jsr synchr                               
                 stx channl                               
                 jsr coin                                 ; chkin


gettty                                                    ; GET
                 ldx #<buf+1                              ; point to 0
                 ldy #>buf                                
                 lda #0                                   ; to stuff and to point
                 sta buf+1                                ; zero it
                 lda #$40                                 ; turn on v-bit
                 jsr inpco1                               ; do the get
                 ldx channl                               
                 bne release_channels                     ; restore terminal channels
                 rts                                      

; .page
linputn                                                   ; input line from channel into a string var
                 jsr chrget                               ; (eat input# token)
                 smb7 op                                  
                 !text $2c                                

inputn           rmb7 op                                  ; flag INPUT# vs. LINPUT#
                 jsr getbyt                               ; get channel number
                 lda #','                                 ; a comma?
                 jsr synchr                               
                 stx channl                               
                 jsr coin                                 ; chkin
                 jsr notqti                               ; do input to variables


release_channels                                          ; iodone, iorele.
                 jsr _clrch                               ; clear I/O channels
; ldx #0   ;restore normal terminal channels
                 sta channl                               ; (was stx)     [910909]
                 rts                                      


linput                                                    ; input line from console into a string var
                 jsr chrget                               ; (eat input token)
                 smb7 op                                  
                 !text $2c                                

input            rmb7 op                                  ; flag INPUT vs. LINPUT
                 cmp #'"'                                 ; a quote?
                 bne notqti                               ; no message
                 jsr strtxt                               ; literalize the string in text

                 jsr chrgot                               ; looking for prompt string terminator  [910219]
                 cmp #','                                 
                 bne _local_1054_10                       
                 sta buf_txtptr                           ; is comma- supress '?' after prompt  [910219]
                 jsr chrget                               ; eat comma
                 jsr strprt                               ; print prompt
                 jsr errdir                               ; error if direct mode
                 jsr InputLine                            ; get first item
                 bra getagn1                              ; see if there's more to do

_local_1054_10   lda #';'                                 ; must end in semicolon
                 jsr synchr                               
                 jsr strprt                               ; print prompt

